
/var/folders/mz/_z9vt_y13rdf9tt_4qkvv0k40000gn/T/arduino_build_441522/UPDI4AVR_FW634B.ino.elf:     file format elf32-avr


Disassembly of section .data:

00803800 <__data_start>:
__data_start():
  803800:	55 c8       	rjmp	.-3926   	; 0x8028ac <__RODATA_PM_OFFSET__+0x7fa8ac>
  803802:	00 c3       	rjmp	.+1536   	; 0x803e04 <__bss_end+0x35a>
  803804:	04 55       	subi	r16, 0x54	; 84

00803805 <UPDI::st8(unsigned long, unsigned char)::set_ptr>:
  803805:	55 48 00 00 00 00                                   UH....

0080380b <UPDI::ld8(unsigned long)::set_ptr>:
  80380b:	55 08 00 00 00 00                                   U.....

00803811 <UPDI::get_cs_stat(unsigned char)::set_ptr>:
  803811:	55 00                                               U.

00803813 <UPDI::set_cs_stat(unsigned char, unsigned char)::set_ptr>:
  803813:	55 00 00                                            U..

00803816 <UPDI::nvmprog_key>:
  803816:	55 e0 20 67 6f 72 50 4d 56 4e                       U. gorPMVN

00803820 <UPDI::urowwrite_key>:
  803820:	55 e0 65 74 26 73 55 4d 56 4e                       U.et&sUMVN

0080382a <UPDI::erase_key>:
  80382a:	55 e0 65 73 61 72 45 4d 56 4e                       U.esarEMVN

00803834 <UPDI::read_sib(unsigned char*)::set_ptr>:
  803834:	55 e6                                               U.

00803836 <JTAG2::param_baud_rate_val>:
  803836:	04 00                                               ..

00803838 <JTAG2::before_seqnum>:
  803838:	ff ff                                               ..

0080383a <UPDI::_set_repeat>:
  80383a:	55 a0 00 55 04                                      U..U.

0080383f <UPDI::_set_ptr_l>:
  80383f:	55 6a 00 00 00 00 00                                Uj.....

Disassembly of section .text:

00000000 <__vectors>:
__vectors():
../../../../crt1/gcrt1.S:61
       0:	67 c0       	rjmp	.+206    	; 0xd0 <__ctors_end>
       2:	00 00       	nop
../../../../crt1/gcrt1.S:67
       4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
       6:	00 00       	nop
../../../../crt1/gcrt1.S:68
       8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
       a:	00 00       	nop
../../../../crt1/gcrt1.S:69
       c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
       e:	00 00       	nop
../../../../crt1/gcrt1.S:70
      10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
      12:	00 00       	nop
../../../../crt1/gcrt1.S:71
      14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
      16:	00 00       	nop
../../../../crt1/gcrt1.S:72
      18:	ca c6       	rjmp	.+3476   	; 0xdae <__vector_6>
      1a:	00 00       	nop
../../../../crt1/gcrt1.S:73
      1c:	fb c6       	rjmp	.+3574   	; 0xe14 <__vector_7>
      1e:	00 00       	nop
../../../../crt1/gcrt1.S:74
      20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
      22:	00 00       	nop
../../../../crt1/gcrt1.S:75
      24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
      26:	00 00       	nop
../../../../crt1/gcrt1.S:76
      28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
      2a:	00 00       	nop
../../../../crt1/gcrt1.S:77
      2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
      2e:	00 00       	nop
../../../../crt1/gcrt1.S:78
      30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
      32:	00 00       	nop
../../../../crt1/gcrt1.S:79
      34:	b1 c6       	rjmp	.+3426   	; 0xd98 <__vector_13>
      36:	00 00       	nop
../../../../crt1/gcrt1.S:80
      38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
      3a:	00 00       	nop
../../../../crt1/gcrt1.S:81
      3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
      3e:	00 00       	nop
../../../../crt1/gcrt1.S:82
      40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
      42:	00 00       	nop
../../../../crt1/gcrt1.S:83
      44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
      46:	00 00       	nop
../../../../crt1/gcrt1.S:84
      48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
      4a:	00 00       	nop
../../../../crt1/gcrt1.S:85
      4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
      4e:	00 00       	nop
../../../../crt1/gcrt1.S:86
      50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
      52:	00 00       	nop
../../../../crt1/gcrt1.S:87
      54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
      56:	00 00       	nop
../../../../crt1/gcrt1.S:88
      58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
      5a:	00 00       	nop
../../../../crt1/gcrt1.S:89
      5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
      5e:	00 00       	nop
../../../../crt1/gcrt1.S:90
      60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
      62:	00 00       	nop
../../../../crt1/gcrt1.S:91
      64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
      66:	00 00       	nop
../../../../crt1/gcrt1.S:92
      68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
      6a:	00 00       	nop
../../../../crt1/gcrt1.S:93
      6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
      6e:	00 00       	nop
../../../../crt1/gcrt1.S:94
      70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
      72:	00 00       	nop
../../../../crt1/gcrt1.S:95
      74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
	...

00000078 <__trampolines_end>:
__trampolines_start():
      78:	86 01       	movw	r16, r12
      7a:	02 35       	cpi	r16, 0x52	; 82
      7c:	07 02       	muls	r16, r23
      7e:	02 22       	and	r0, r18
      80:	06 02       	muls	r16, r22
      82:	00 00       	nop
      84:	00 00       	nop
      86:	00 00       	nop
      88:	55 50       	subi	r21, 0x05	; 5
      8a:	44 49       	sbci	r20, 0x94	; 148
      8c:	34 41       	sbci	r19, 0x14	; 20
      8e:	56 52       	subi	r21, 0x26	; 38
      90:	00 00       	nop
      92:	00 00       	nop
	...

00000095 <JTAG2::BAUD_TABLE>:
      95:	00 00 1b 41 8d 20 47 10 23 08 12 04 b6 02 5b 01     ...A. G.#.....[.
      a5:	da 0a 04 01 ae 00 57 00 2b 00 39 01 9c 00 00 00     ......W.+.9.....
      b5:	00 00 0b 01 c8 00 a0 00 85 00 64 00 50 00 43 00     ..........d.P.C.
      c5:	3c 00 28 00 1b 00 14 00 0d 00 00                    <.(........

000000d0 <__ctors_end>:
__dtors_end():
../../../../crt1/gcrt1.S:230
      d0:	11 24       	eor	r1, r1
../../../../crt1/gcrt1.S:231
      d2:	1f be       	out	0x3f, r1	; 63
../../../../crt1/gcrt1.S:232
      d4:	cf ef       	ldi	r28, 0xFF	; 255
../../../../crt1/gcrt1.S:234
      d6:	cd bf       	out	0x3d, r28	; 61
../../../../crt1/gcrt1.S:236
      d8:	df e3       	ldi	r29, 0x3F	; 63
../../../../crt1/gcrt1.S:237
      da:	de bf       	out	0x3e, r29	; 62

000000dc <__do_copy_data>:
__do_copy_data():
      dc:	18 e3       	ldi	r17, 0x38	; 56
      de:	a0 e0       	ldi	r26, 0x00	; 0
      e0:	b8 e3       	ldi	r27, 0x38	; 56
      e2:	ea e3       	ldi	r30, 0x3A	; 58
      e4:	f5 e1       	ldi	r31, 0x15	; 21
      e6:	02 c0       	rjmp	.+4      	; 0xec <__do_copy_data+0x10>
      e8:	05 90       	lpm	r0, Z+
      ea:	0d 92       	st	X+, r0
      ec:	a6 34       	cpi	r26, 0x46	; 70
      ee:	b1 07       	cpc	r27, r17
      f0:	d9 f7       	brne	.-10     	; 0xe8 <__do_copy_data+0xc>

000000f2 <__do_clear_bss>:
__do_clear_bss():
      f2:	2a e3       	ldi	r18, 0x3A	; 58
      f4:	a6 e4       	ldi	r26, 0x46	; 70
      f6:	b8 e3       	ldi	r27, 0x38	; 56
      f8:	01 c0       	rjmp	.+2      	; 0xfc <.do_clear_bss_start>

000000fa <.do_clear_bss_loop>:
      fa:	1d 92       	st	X+, r1

000000fc <.do_clear_bss_start>:
      fc:	aa 3a       	cpi	r26, 0xAA	; 170
      fe:	b2 07       	cpc	r27, r18
     100:	e1 f7       	brne	.-8      	; 0xfa <.do_clear_bss_loop>
.do_clear_bss_start():
../../../../crt1/gcrt1.S:314
     102:	a9 d6       	rcall	.+3410   	; 0xe56 <main>
../../../../crt1/gcrt1.S:315
     104:	0c 94 9b 0a 	jmp	0x1536	; 0x1536 <_exit>

00000108 <__bad_interrupt>:
__vector_22():
../../../../crt1/gcrt1.S:209
     108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <UPDI::RECV()>:
_ZN4UPDI4RECVEv():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:104
/*
 * UPDI reception
 */

uint8_t UPDI::RECV (void) {
  loop_until_bit_is_set(UPDI_USART.STATUS, USART_RXCIF_bp);
     10a:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
     10e:	87 ff       	sbrs	r24, 7
     110:	fc cf       	rjmp	.-8      	; 0x10a <UPDI::RECV()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:105
  UPDI_LASTH = UPDI_USART.RXDATAH ^ 0x80;
     112:	80 91 01 08 	lds	r24, 0x0801	; 0x800801 <__RODATA_PM_OFFSET__+0x7f8801>
     116:	80 58       	subi	r24, 0x80	; 128
     118:	8f bb       	out	0x1f, r24	; 31
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:111
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  UPDI_LASTL = UPDI_USART.RXDATAL;
  _send_buf_push(UPDI_LASTL);
  return UPDI_LASTL;
  #else
  return UPDI_LASTL = UPDI_USART.RXDATAL;
     11a:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__RODATA_PM_OFFSET__+0x7f8800>
     11e:	8e bb       	out	0x1e, r24	; 30
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:113
  #endif
}
     120:	08 95       	ret

00000122 <UPDI::SEND(unsigned char)>:
_ZN4UPDI4SENDEh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:119

/*
 * UPDI transmission : Verify transmitted value with loopback reception
 */

bool UPDI::SEND (uint8_t _data) {
     122:	cf 93       	push	r28
     124:	c8 2f       	mov	r28, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:124
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  _send_buf_push(_data);
  #endif
  bool _r;
  loop_until_bit_is_set(UPDI_USART.STATUS, USART_DREIF_bp);
     126:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
     12a:	85 ff       	sbrs	r24, 5
     12c:	fc cf       	rjmp	.-8      	; 0x126 <UPDI::SEND(unsigned char)+0x4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:125
  UPDI_USART.STATUS = USART_TXCIF_bm;
     12e:	80 e4       	ldi	r24, 0x40	; 64
     130:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:126
  UPDI_USART.TXDATAL = _data;
     134:	c0 93 02 08 	sts	0x0802, r28	; 0x800802 <__RODATA_PM_OFFSET__+0x7f8802>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:127
  loop_until_bit_is_set(UPDI_USART.STATUS, USART_TXCIF_bp);
     138:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
     13c:	86 ff       	sbrs	r24, 6
     13e:	fc cf       	rjmp	.-8      	; 0x138 <UPDI::SEND(unsigned char)+0x16>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:128
  _r = _data == RECV();
     140:	e4 df       	rcall	.-56     	; 0x10a <UPDI::RECV()>
     142:	98 2f       	mov	r25, r24
     144:	81 e0       	ldi	r24, 0x01	; 1
     146:	9c 13       	cpse	r25, r28
     148:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:129
  if (!_r) bit_set(UPDI_LASTH, 0x20);
     14a:	9c 17       	cp	r25, r28
     14c:	11 f0       	breq	.+4      	; 0x152 <UPDI::SEND(unsigned char)+0x30>
     14e:	9f b3       	in	r25, 0x1f	; 31
     150:	9f bb       	out	0x1f, r25	; 31
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:131
  return _r;
}
     152:	cf 91       	pop	r28
     154:	08 95       	ret

00000156 <UPDI::send_bytes(unsigned char*, unsigned char)>:
_ZN4UPDI10send_bytesEPhh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:157
/*
 * Send byte chunks
 */

/* __attribute__((optimize("O0"))) */
bool UPDI::send_bytes (uint8_t *data, uint8_t len) {
     156:	0f 93       	push	r16
     158:	1f 93       	push	r17
     15a:	cf 93       	push	r28
     15c:	c6 2f       	mov	r28, r22
     15e:	8c 01       	movw	r16, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:159
  do {
    if (!SEND(*data++)) return false;
     160:	f8 01       	movw	r30, r16
     162:	81 91       	ld	r24, Z+
     164:	8f 01       	movw	r16, r30
     166:	dd df       	rcall	.-70     	; 0x122 <UPDI::SEND(unsigned char)>
     168:	88 23       	and	r24, r24
     16a:	11 f0       	breq	.+4      	; 0x170 <UPDI::send_bytes(unsigned char*, unsigned char)+0x1a>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:160
  } while (--len);
     16c:	c1 50       	subi	r28, 0x01	; 1
     16e:	c1 f7       	brne	.-16     	; 0x160 <UPDI::send_bytes(unsigned char*, unsigned char)+0xa>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:162
  return true;
}
     170:	cf 91       	pop	r28
     172:	1f 91       	pop	r17
     174:	0f 91       	pop	r16
     176:	08 95       	ret

00000178 <UPDI::set_cs_stat(unsigned char, unsigned char)>:
_ZN4UPDI11set_cs_statEhh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:314
 * Control status transmission
 */

bool UPDI::set_cs_stat (uint8_t code, uint8_t data) {
  static uint8_t set_ptr[] = { UPDI_SYNCH, 0, 0 };
  set_ptr[1] = UPDI_STCS | code;
     178:	e3 e1       	ldi	r30, 0x13	; 19
     17a:	f8 e3       	ldi	r31, 0x38	; 56
     17c:	80 6c       	ori	r24, 0xC0	; 192
     17e:	81 83       	std	Z+1, r24	; 0x01
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:315
  set_ptr[2] = data;
     180:	62 83       	std	Z+2, r22	; 0x02
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:316
  return send_bytes(set_ptr, sizeof(set_ptr));
     182:	63 e0       	ldi	r22, 0x03	; 3
     184:	cf 01       	movw	r24, r30
     186:	e7 cf       	rjmp	.-50     	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>

00000188 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.17]>:
_ZN4UPDI7sts8rsdEmPhh.constprop.17():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:222
    } while (--repeat);
  }
  return len == 0;
}

bool UPDI::sts8rsd (uint32_t addr, uint8_t *data, uint8_t len) {
     188:	0f 93       	push	r16
     18a:	1f 93       	push	r17
     18c:	cf 93       	push	r28
     18e:	c4 2f       	mov	r28, r20
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:223
  _CAPS32(_set_ptr_l[2])->dword = addr;
     190:	60 93 41 38 	sts	0x3841, r22	; 0x803841 <UPDI::_set_ptr_l+0x2>
     194:	70 93 42 38 	sts	0x3842, r23	; 0x803842 <UPDI::_set_ptr_l+0x3>
     198:	80 93 43 38 	sts	0x3843, r24	; 0x803843 <UPDI::_set_ptr_l+0x4>
     19c:	90 93 44 38 	sts	0x3844, r25	; 0x803844 <UPDI::_set_ptr_l+0x5>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:224
  _set_repeat[2] = len - 1;
     1a0:	8f ef       	ldi	r24, 0xFF	; 255
     1a2:	84 0f       	add	r24, r20
     1a4:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <UPDI::_set_repeat+0x2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:225
  _set_repeat[4] = UPDI_PTR_INC|UPDI_ST|UPDI_DATA1;
     1a8:	84 e6       	ldi	r24, 0x64	; 100
     1aa:	80 93 3e 38 	sts	0x383E, r24	; 0x80383e <UPDI::_set_repeat+0x4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:226
  if (!send_bytes(_set_ptr_l, sizeof(_set_ptr_l) - 1)) return false;
     1ae:	65 e0       	ldi	r22, 0x05	; 5
     1b0:	8f e3       	ldi	r24, 0x3F	; 63
     1b2:	98 e3       	ldi	r25, 0x38	; 56
     1b4:	d0 df       	rcall	.-96     	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     1b6:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:227
  if (UPDI_ACK != RECV()) return false;
     1b8:	e1 f0       	breq	.+56     	; 0x1f2 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.17]+0x6a>
     1ba:	a7 df       	rcall	.-178    	; 0x10a <UPDI::RECV()>
     1bc:	80 34       	cpi	r24, 0x40	; 64
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:320
  set_ptr[2] = data;
  return send_bytes(set_ptr, sizeof(set_ptr));
}

bool UPDI::set_cs_ctra (uint8_t data) {
  return set_cs_stat(UPDI_CS_CTRLA, data);
     1be:	c9 f4       	brne	.+50     	; 0x1f2 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.17]+0x6a>
set_cs_ctra():
     1c0:	6e e0       	ldi	r22, 0x0E	; 14
     1c2:	82 e0       	ldi	r24, 0x02	; 2
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:228
  _CAPS32(_set_ptr_l[2])->dword = addr;
  _set_repeat[2] = len - 1;
  _set_repeat[4] = UPDI_PTR_INC|UPDI_ST|UPDI_DATA1;
  if (!send_bytes(_set_ptr_l, sizeof(_set_ptr_l) - 1)) return false;
  if (UPDI_ACK != RECV()) return false;
  if (!set_cs_ctra(UPDI_SET_RSD|UPDI_GTVAL_RSD)) return false;
     1c4:	d9 df       	rcall	.-78     	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>
_ZN4UPDI7sts8rsdEmPhh.constprop.17():
     1c6:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:229
  if (!send_bytes(_set_repeat, sizeof(_set_repeat))) return false;
     1c8:	a1 f0       	breq	.+40     	; 0x1f2 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.17]+0x6a>
     1ca:	65 e0       	ldi	r22, 0x05	; 5
     1cc:	8a e3       	ldi	r24, 0x3A	; 58
     1ce:	98 e3       	ldi	r25, 0x38	; 56
     1d0:	c2 df       	rcall	.-124    	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     1d2:	88 23       	and	r24, r24
     1d4:	71 f0       	breq	.+28     	; 0x1f2 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.17]+0x6a>
     1d6:	0e e9       	ldi	r16, 0x9E	; 158
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:231
  do {              /* Repeat byte send */
    SEND(*data++);  /* Submission errors must be ignored */
     1d8:	18 e3       	ldi	r17, 0x38	; 56
     1da:	f8 01       	movw	r30, r16
     1dc:	81 91       	ld	r24, Z+
     1de:	8f 01       	movw	r16, r30
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:232
  } while (--len);
     1e0:	a0 df       	rcall	.-192    	; 0x122 <UPDI::SEND(unsigned char)>
     1e2:	c1 50       	subi	r28, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:320
  set_ptr[2] = data;
  return send_bytes(set_ptr, sizeof(set_ptr));
}

bool UPDI::set_cs_ctra (uint8_t data) {
  return set_cs_stat(UPDI_CS_CTRLA, data);
     1e4:	d1 f7       	brne	.-12     	; 0x1da <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.17]+0x52>
set_cs_ctra():
     1e6:	66 e0       	ldi	r22, 0x06	; 6
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:235
  do {              /* Repeat byte send */
    SEND(*data++);  /* Submission errors must be ignored */
  } while (--len);
  if (!set_cs_ctra(UPDI_GTVAL)) return false;
  return true;
}
     1e8:	82 e0       	ldi	r24, 0x02	; 2
_ZN4UPDI7sts8rsdEmPhh.constprop.17():
     1ea:	cf 91       	pop	r28
     1ec:	1f 91       	pop	r17
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:320
  set_ptr[2] = data;
  return send_bytes(set_ptr, sizeof(set_ptr));
}

bool UPDI::set_cs_ctra (uint8_t data) {
  return set_cs_stat(UPDI_CS_CTRLA, data);
     1ee:	0f 91       	pop	r16
set_cs_ctra():
     1f0:	c3 cf       	rjmp	.-122    	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>
_ZN4UPDI7sts8rsdEmPhh.constprop.17():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:235
  do {              /* Repeat byte send */
    SEND(*data++);  /* Submission errors must be ignored */
  } while (--len);
  if (!set_cs_ctra(UPDI_GTVAL)) return false;
  return true;
}
     1f2:	80 e0       	ldi	r24, 0x00	; 0
     1f4:	cf 91       	pop	r28
     1f6:	1f 91       	pop	r17
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:291
 * Control status reception
 */

uint8_t UPDI::get_cs_stat (uint8_t code) {
  static uint8_t set_ptr[] = { UPDI_SYNCH, 0 };
  set_ptr[1] = UPDI_LDCS | code;
     1f8:	0f 91       	pop	r16
     1fa:	08 95       	ret

000001fc <UPDI::get_cs_stat(unsigned char)>:
_ZN4UPDI11get_cs_statEh():
     1fc:	80 68       	ori	r24, 0x80	; 128
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:292
  send_bytes(set_ptr, sizeof(set_ptr));
     1fe:	80 93 12 38 	sts	0x3812, r24	; 0x803812 <UPDI::get_cs_stat(unsigned char)::set_ptr+0x1>
     202:	62 e0       	ldi	r22, 0x02	; 2
     204:	81 e1       	ldi	r24, 0x11	; 17
     206:	98 e3       	ldi	r25, 0x38	; 56
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:293
  return RECV();
     208:	a6 df       	rcall	.-180    	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     20a:	7f cf       	rjmp	.-258    	; 0x10a <UPDI::RECV()>

0000020c <UPDI::st8(unsigned long, unsigned char)>:
_ZN4UPDI3st8Emh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:182

/*
 * Single byte transmission
 */

bool UPDI::st8 (uint32_t addr, uint8_t data) {
     20c:	cf 93       	push	r28
     20e:	c4 2f       	mov	r28, r20
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:188
  static uint8_t set_ptr[] = {
      UPDI_SYNCH
    , UPDI_STS | UPDI_ADDR3 | UPDI_DATA1
    , 0, 0, 0, 0    // 24bit address
  };
  _CAPS32(set_ptr[2])->dword = addr;
     210:	60 93 07 38 	sts	0x3807, r22	; 0x803807 <UPDI::st8(unsigned long, unsigned char)::set_ptr+0x2>
     214:	70 93 08 38 	sts	0x3808, r23	; 0x803808 <UPDI::st8(unsigned long, unsigned char)::set_ptr+0x3>
     218:	80 93 09 38 	sts	0x3809, r24	; 0x803809 <UPDI::st8(unsigned long, unsigned char)::set_ptr+0x4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:189
  if (!send_bytes(set_ptr, sizeof(set_ptr) - 1)) return false;
     21c:	90 93 0a 38 	sts	0x380A, r25	; 0x80380a <UPDI::st8(unsigned long, unsigned char)::set_ptr+0x5>
     220:	65 e0       	ldi	r22, 0x05	; 5
     222:	85 e0       	ldi	r24, 0x05	; 5
     224:	98 e3       	ldi	r25, 0x38	; 56
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:192
  if (UPDI_ACK != RECV()) return false;
  if (!SEND(data)) return false;
  return UPDI_ACK == RECV();
     226:	97 df       	rcall	.-210    	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     228:	81 11       	cpse	r24, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:190
    , UPDI_STS | UPDI_ADDR3 | UPDI_DATA1
    , 0, 0, 0, 0    // 24bit address
  };
  _CAPS32(set_ptr[2])->dword = addr;
  if (!send_bytes(set_ptr, sizeof(set_ptr) - 1)) return false;
  if (UPDI_ACK != RECV()) return false;
     22a:	02 c0       	rjmp	.+4      	; 0x230 <UPDI::st8(unsigned long, unsigned char)+0x24>
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	0b c0       	rjmp	.+22     	; 0x246 <UPDI::st8(unsigned long, unsigned char)+0x3a>
     230:	6c df       	rcall	.-296    	; 0x10a <UPDI::RECV()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:191
  if (!SEND(data)) return false;
     232:	80 34       	cpi	r24, 0x40	; 64
     234:	d9 f7       	brne	.-10     	; 0x22c <UPDI::st8(unsigned long, unsigned char)+0x20>
     236:	8c 2f       	mov	r24, r28
     238:	74 df       	rcall	.-280    	; 0x122 <UPDI::SEND(unsigned char)>
     23a:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:192
  return UPDI_ACK == RECV();
     23c:	b9 f3       	breq	.-18     	; 0x22c <UPDI::st8(unsigned long, unsigned char)+0x20>
     23e:	65 df       	rcall	.-310    	; 0x10a <UPDI::RECV()>
     240:	91 e0       	ldi	r25, 0x01	; 1
     242:	80 34       	cpi	r24, 0x40	; 64
     244:	99 f7       	brne	.-26     	; 0x22c <UPDI::st8(unsigned long, unsigned char)+0x20>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:193
}
     246:	89 2f       	mov	r24, r25
     248:	cf 91       	pop	r28
     24a:	08 95       	ret

0000024c <UPDI::send_repeat_header(unsigned long, unsigned char, unsigned char)>:
_ZN4UPDI18send_repeat_headerEmhh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:170
 * Repeat header transmission
 */

/* __attribute__((optimize("O0"))) */
bool UPDI::send_repeat_header (uint32_t addr, uint8_t cmd, uint8_t len) {
  _CAPS32(_set_ptr_l[2])->dword = addr;
     24c:	60 93 41 38 	sts	0x3841, r22	; 0x803841 <UPDI::_set_ptr_l+0x2>
     250:	70 93 42 38 	sts	0x3842, r23	; 0x803842 <UPDI::_set_ptr_l+0x3>
     254:	80 93 43 38 	sts	0x3843, r24	; 0x803843 <UPDI::_set_ptr_l+0x4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:171
  _set_repeat[2] = len - 1;
     258:	90 93 44 38 	sts	0x3844, r25	; 0x803844 <UPDI::_set_ptr_l+0x5>
     25c:	21 50       	subi	r18, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:172
  _set_repeat[4] = UPDI_PTR_INC | cmd;  // ST,LD + DATA1,DATA2
     25e:	20 93 3c 38 	sts	0x383C, r18	; 0x80383c <UPDI::_set_repeat+0x2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:173
  if (!send_bytes(_set_ptr_l, sizeof(_set_ptr_l) - 1)) return false;
     262:	44 60       	ori	r20, 0x04	; 4
     264:	40 93 3e 38 	sts	0x383E, r20	; 0x80383e <UPDI::_set_repeat+0x4>
     268:	65 e0       	ldi	r22, 0x05	; 5
     26a:	8f e3       	ldi	r24, 0x3F	; 63
     26c:	98 e3       	ldi	r25, 0x38	; 56
     26e:	73 df       	rcall	.-282    	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:174
  if (UPDI_ACK != RECV()) return false;
     270:	88 23       	and	r24, r24
     272:	39 f0       	breq	.+14     	; 0x282 <UPDI::send_repeat_header(unsigned long, unsigned char, unsigned char)+0x36>
     274:	4a df       	rcall	.-364    	; 0x10a <UPDI::RECV()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:175
  return send_bytes(_set_repeat, sizeof(_set_repeat));
     276:	80 34       	cpi	r24, 0x40	; 64
     278:	21 f4       	brne	.+8      	; 0x282 <UPDI::send_repeat_header(unsigned long, unsigned char, unsigned char)+0x36>
     27a:	65 e0       	ldi	r22, 0x05	; 5
     27c:	8a e3       	ldi	r24, 0x3A	; 58
     27e:	98 e3       	ldi	r25, 0x38	; 56
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:176
}
     280:	6a cf       	rjmp	.-300    	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:199

/*
 * Transmission
 */

bool UPDI::sts8 (uint32_t addr, uint8_t *data, uint8_t len) {
     282:	80 e0       	ldi	r24, 0x00	; 0
     284:	08 95       	ret

00000286 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)>:
_ZN4UPDI4sts8EmPhh():
     286:	ff 92       	push	r15
     288:	0f 93       	push	r16
     28a:	1f 93       	push	r17
     28c:	cf 93       	push	r28
     28e:	df 93       	push	r29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:200
  if (send_repeat_header(addr, UPDI_ST|UPDI_DATA1, len)) {
     290:	f4 2e       	mov	r15, r20
     292:	d5 2f       	mov	r29, r21
     294:	c2 2f       	mov	r28, r18
     296:	40 e6       	ldi	r20, 0x60	; 96
     298:	d9 df       	rcall	.-78     	; 0x24c <UPDI::send_repeat_header(unsigned long, unsigned char, unsigned char)>
     29a:	88 23       	and	r24, r24
     29c:	69 f0       	breq	.+26     	; 0x2b8 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)+0x32>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:202
    do {
      if (!SEND(*data++)) break;
     29e:	0f 2d       	mov	r16, r15
     2a0:	1d 2f       	mov	r17, r29
     2a2:	f8 01       	movw	r30, r16
     2a4:	81 91       	ld	r24, Z+
     2a6:	8f 01       	movw	r16, r30
     2a8:	3c df       	rcall	.-392    	; 0x122 <UPDI::SEND(unsigned char)>
     2aa:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:203
      if (UPDI_ACK != RECV()) break;
     2ac:	29 f0       	breq	.+10     	; 0x2b8 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)+0x32>
     2ae:	2d df       	rcall	.-422    	; 0x10a <UPDI::RECV()>
     2b0:	80 34       	cpi	r24, 0x40	; 64
     2b2:	11 f4       	brne	.+4      	; 0x2b8 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)+0x32>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:204
    } while (--len);
     2b4:	c1 50       	subi	r28, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:206
  }
  return len == 0;
     2b6:	a9 f7       	brne	.-22     	; 0x2a2 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)+0x1c>
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	c1 11       	cpse	r28, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:207
}
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	df 91       	pop	r29
     2c0:	cf 91       	pop	r28
     2c2:	1f 91       	pop	r17
     2c4:	0f 91       	pop	r16
     2c6:	ff 90       	pop	r15
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:135
  return _r;
}

/* BREAK character : Generated by slowing down the sending speed */
void UPDI::BREAK (void) {
  loop_until_bit_is_set(UPDI_USART.STATUS, USART_DREIF_bp);
     2c8:	08 95       	ret

000002ca <UPDI::BREAK()>:
_ZN4UPDI5BREAKEv():
     2ca:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
     2ce:	85 ff       	sbrs	r24, 5
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:136
  UPDI_USART.BAUD = UPDI_BAUD_BREAK;
     2d0:	fc cf       	rjmp	.-8      	; 0x2ca <UPDI::BREAK()>
     2d2:	80 ec       	ldi	r24, 0xC0	; 192
     2d4:	94 e4       	ldi	r25, 0x44	; 68
     2d6:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__RODATA_PM_OFFSET__+0x7f8808>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:138
  /* Maintains low level signal at least 768bit long */
  SEND(UPDI_NOP);
     2da:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__RODATA_PM_OFFSET__+0x7f8809>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:139
  UPDI_USART.BAUD = UPDI_BAUD_CALC;
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	20 df       	rcall	.-448    	; 0x122 <UPDI::SEND(unsigned char)>
     2e2:	80 eb       	ldi	r24, 0xB0	; 176
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__RODATA_PM_OFFSET__+0x7f8808>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:141
  bit_clear(UPDI_CONTROL, UPDI_CLKU_bp);
}
     2ea:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__RODATA_PM_OFFSET__+0x7f8809>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:264
  static uint8_t set_ptr[] = {
      UPDI_SYNCH
    , UPDI_LDS|UPDI_ADDR3|UPDI_DATA1
    , 0, 0, 0, 0  // 24bit address
  };
  _CAPS16(set_ptr[2])->word = (uint16_t)addr;
     2ee:	e6 98       	cbi	0x1c, 6	; 28
     2f0:	08 95       	ret

000002f2 <UPDI::ld8(unsigned long)>:
_ZN4UPDI3ld8Em():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:265
  while (!send_bytes(set_ptr, sizeof(set_ptr) - 1)) BREAK();
     2f2:	60 93 0d 38 	sts	0x380D, r22	; 0x80380d <UPDI::ld8(unsigned long)::set_ptr+0x2>
     2f6:	70 93 0e 38 	sts	0x380E, r23	; 0x80380e <UPDI::ld8(unsigned long)::set_ptr+0x3>
     2fa:	65 e0       	ldi	r22, 0x05	; 5
     2fc:	8b e0       	ldi	r24, 0x0B	; 11
     2fe:	98 e3       	ldi	r25, 0x38	; 56
     300:	2a df       	rcall	.-428    	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     302:	81 11       	cpse	r24, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:266
  return RECV();
     304:	02 c0       	rjmp	.+4      	; 0x30a <UPDI::ld8(unsigned long)+0x18>
     306:	e1 df       	rcall	.-62     	; 0x2ca <UPDI::BREAK()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:94
  return send_bytes(set_ptr, sizeof(set_ptr));
}

/* This only does a system reset */
bool UPDI::updi_reset (bool logic) {
  return set_cs_stat(
     308:	f8 cf       	rjmp	.-16     	; 0x2fa <UPDI::ld8(unsigned long)+0x8>
     30a:	ff ce       	rjmp	.-514    	; 0x10a <UPDI::RECV()>

0000030c <UPDI::updi_reset(bool)>:
_ZN4UPDI10updi_resetEb():
     30c:	60 e0       	ldi	r22, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:96
    UPDI_CS_ASI_RESET_REQ,
    (logic ? UPDI_RSTREQ : UPDI_NOP));
     30e:	81 11       	cpse	r24, r1
     310:	69 e5       	ldi	r22, 0x59	; 89
     312:	88 e0       	ldi	r24, 0x08	; 8
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:78
  UPDI_USART.CTRLB = UPDI_USART_ON;
  bit_clear(UPDI_CONTROL, UPDI_CLKU_bp);
}

/* This special system reset will log you out of UPDI */
bool UPDI::Target_Reset (bool _enable) {
     314:	31 cf       	rjmp	.-414    	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>

00000316 <UPDI::Target_Reset(bool)>:
_ZN4UPDI12Target_ResetEb():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:86
    , UPDI_STCS | UPDI_CS_ASI_RESET_REQ
    , 0
    , UPDI_STCS | UPDI_CS_CTRLB
    , UPDI_SET_UPDIDIS
  };
  if (!digitalRead(UPDI_TDAT_PIN)) return false;
     316:	cf 93       	push	r28
     318:	11 9b       	sbis	0x02, 1	; 2
     31a:	0c c0       	rjmp	.+24     	; 0x334 <UPDI::Target_Reset(bool)+0x1e>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:87
  BREAK();
     31c:	c8 2f       	mov	r28, r24
     31e:	d5 df       	rcall	.-86     	; 0x2ca <UPDI::BREAK()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:88
  set_ptr[2] = _enable ? UPDI_RSTREQ : UPDI_NOP;
     320:	80 e0       	ldi	r24, 0x00	; 0
     322:	c1 11       	cpse	r28, r1
     324:	89 e5       	ldi	r24, 0x59	; 89
     326:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <__DATA_REGION_ORIGIN__+0x2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:89
  return send_bytes(set_ptr, sizeof(set_ptr));
     32a:	65 e0       	ldi	r22, 0x05	; 5
     32c:	80 e0       	ldi	r24, 0x00	; 0
     32e:	98 e3       	ldi	r25, 0x38	; 56
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:90
}
     330:	cf 91       	pop	r28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:89
    , UPDI_SET_UPDIDIS
  };
  if (!digitalRead(UPDI_TDAT_PIN)) return false;
  BREAK();
  set_ptr[2] = _enable ? UPDI_RSTREQ : UPDI_NOP;
  return send_bytes(set_ptr, sizeof(set_ptr));
     332:	11 cf       	rjmp	.-478    	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     334:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:90
}
     336:	cf 91       	pop	r28
     338:	08 95       	ret

0000033a <LED_TCB1(unsigned char, unsigned int)>:
_Z8LED_TCB1hj():
     33a:	90 91 61 38 	lds	r25, 0x3861	; 0x803861 <TIM::mode>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:139
    LEDG_EVOUT = EVSYS_USER_CHANNEL2_gc;
  }
}

void LED_TCB1 (uint8_t mode, uint16_t ccmp) {
  if (TIM::mode != mode) {
     33e:	98 17       	cp	r25, r24
     340:	81 f0       	breq	.+32     	; 0x362 <LED_TCB1(unsigned char, unsigned int)+0x28>
     342:	80 93 61 38 	sts	0x3861, r24	; 0x803861 <TIM::mode>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:140
    TIM::mode = mode;
     346:	60 93 9c 0a 	sts	0x0A9C, r22	; 0x800a9c <__RODATA_PM_OFFSET__+0x7f8a9c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:141
    TCB1_CCMP = ccmp;
     34a:	70 93 9d 0a 	sts	0x0A9D, r23	; 0x800a9d <__RODATA_PM_OFFSET__+0x7f8a9d>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:142
    TCB1_CNT = 0;
     34e:	10 92 9a 0a 	sts	0x0A9A, r1	; 0x800a9a <__RODATA_PM_OFFSET__+0x7f8a9a>
     352:	10 92 9b 0a 	sts	0x0A9B, r1	; 0x800a9b <__RODATA_PM_OFFSET__+0x7f8a9b>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:143
    TCB1_CTRLA = TCB_RUNSTDBY_bm | TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
     356:	8f e4       	ldi	r24, 0x4F	; 79
     358:	80 93 90 0a 	sts	0x0A90, r24	; 0x800a90 <__RODATA_PM_OFFSET__+0x7f8a90>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:144
    LEDG_EVOUT = EVSYS_USER_CHANNEL0_gc;
     35c:	81 e0       	ldi	r24, 0x01	; 1
     35e:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <__RODATA_PM_OFFSET__+0x7f81a9>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:116
    TCB0_CTRLA = TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
  }
}

void TIM::Timeout_Stop (void) {
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     362:	08 95       	ret

00000364 <TIM::Timeout_Stop()>:
_ZN3TIM12Timeout_StopEv():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:117
    TCB0_CTRLA = 0;
     364:	8f b7       	in	r24, 0x3f	; 63
__iCliRetVal():
     366:	f8 94       	cli
_ZN3TIM12Timeout_StopEv():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:118
    TCB0_INTFLAGS = TCB_CAPT_bm;
     368:	10 92 80 0a 	sts	0x0A80, r1	; 0x800a80 <__RODATA_PM_OFFSET__+0x7f8a80>
     36c:	91 e0       	ldi	r25, 0x01	; 1
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     36e:	90 93 86 0a 	sts	0x0A86, r25	; 0x800a86 <__RODATA_PM_OFFSET__+0x7f8a86>
__iRestore():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:69
    return UPDI_LASTL;
  }

  /* NVMCTRL version 0 (,2,3,5) */
  bool nvm_ctrl (uint8_t nvmcmd) {
    return UPDI::st8(NVMCTRL_REG_CTRLA, nvmcmd);
     372:	8f bf       	out	0x3f, r24	; 63
_ZN3TIM12Timeout_StopEv():
     374:	18 95       	reti
     376:	08 95       	ret

00000378 <NVM::nvm_ctrl(unsigned char)>:
_ZN3NVM8nvm_ctrlEh():
     378:	48 2f       	mov	r20, r24
     37a:	60 e0       	ldi	r22, 0x00	; 0
     37c:	70 e1       	ldi	r23, 0x10	; 16
     37e:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:73
  }

  /* NVMCTRL version 2,3,5 */
  bool nvm_ctrl_change (uint8_t nvmcmd) {
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	44 cf       	rjmp	.-376    	; 0x20c <UPDI::st8(unsigned long, unsigned char)>

00000384 <NVM::nvm_ctrl_change(unsigned char)>:
_ZN3NVM15nvm_ctrl_changeEh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:74
    if (UPDI::ld8(NVMCTRL_REG_CTRLA) == nvmcmd) return true;
     384:	cf 93       	push	r28
     386:	c8 2f       	mov	r28, r24
     388:	60 e0       	ldi	r22, 0x00	; 0
     38a:	70 e1       	ldi	r23, 0x10	; 16
     38c:	80 e0       	ldi	r24, 0x00	; 0
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	b0 df       	rcall	.-160    	; 0x2f2 <UPDI::ld8(unsigned long)>
     392:	8c 13       	cpse	r24, r28
     394:	03 c0       	rjmp	.+6      	; 0x39c <NVM::nvm_ctrl_change(unsigned char)+0x18>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:78
    if (!nvm_ctrl(NVM_CMD_NOCMD)) return false;
    if (NVM_CMD_NOCMD != nvmcmd) return nvm_ctrl(nvmcmd);
    return true;
  }
     396:	81 e0       	ldi	r24, 0x01	; 1
     398:	cf 91       	pop	r28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:75
  }

  /* NVMCTRL version 2,3,5 */
  bool nvm_ctrl_change (uint8_t nvmcmd) {
    if (UPDI::ld8(NVMCTRL_REG_CTRLA) == nvmcmd) return true;
    if (!nvm_ctrl(NVM_CMD_NOCMD)) return false;
     39a:	08 95       	ret
     39c:	80 e0       	ldi	r24, 0x00	; 0
     39e:	ec df       	rcall	.-40     	; 0x378 <NVM::nvm_ctrl(unsigned char)>
     3a0:	88 23       	and	r24, r24
     3a2:	d1 f3       	breq	.-12     	; 0x398 <NVM::nvm_ctrl_change(unsigned char)+0x14>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:76
    if (NVM_CMD_NOCMD != nvmcmd) return nvm_ctrl(nvmcmd);
     3a4:	cc 23       	and	r28, r28
     3a6:	b9 f3       	breq	.-18     	; 0x396 <NVM::nvm_ctrl_change(unsigned char)+0x12>
     3a8:	8c 2f       	mov	r24, r28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:78
    return true;
  }
     3aa:	cf 91       	pop	r28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:76

  /* NVMCTRL version 2,3,5 */
  bool nvm_ctrl_change (uint8_t nvmcmd) {
    if (UPDI::ld8(NVMCTRL_REG_CTRLA) == nvmcmd) return true;
    if (!nvm_ctrl(NVM_CMD_NOCMD)) return false;
    if (NVM_CMD_NOCMD != nvmcmd) return nvm_ctrl(nvmcmd);
     3ac:	e5 cf       	rjmp	.-54     	; 0x378 <NVM::nvm_ctrl(unsigned char)>

000003ae <JTAG2::set_response(JTAG2::jtag_response_e)>:
_ZN5JTAG212set_responseENS_15jtag_response_eE():
     3ae:	ec e8       	ldi	r30, 0x8C	; 140
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:471
/*****************
 * JTAG Response *
 *****************/

void JTAG2::set_response (jtag_response_e response_code) {
  packet.size_word[0] = 4;
     3b0:	f8 e3       	ldi	r31, 0x38	; 56
     3b2:	24 e0       	ldi	r18, 0x04	; 4
     3b4:	30 e0       	ldi	r19, 0x00	; 0
     3b6:	23 83       	std	Z+3, r18	; 0x03
     3b8:	34 83       	std	Z+4, r19	; 0x04
     3ba:	80 87       	std	Z+8, r24	; 0x08
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:473
  /* response number */
  packet.body[MESSAGE_ID] = response_code;
     3bc:	8c b3       	in	r24, 0x1c	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:475
  /* Internal status flag */
  packet.body[RSP_DATA    ] = UPDI_CONTROL;
     3be:	81 87       	std	Z+9, r24	; 0x09
     3c0:	8d b3       	in	r24, 0x1d	; 29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:476
  packet.body[RSP_DATA + 1] = UPDI_NVMCTRL;
     3c2:	82 87       	std	Z+10, r24	; 0x0a
     3c4:	8e b3       	in	r24, 0x1e	; 30
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:477
  packet.body[RSP_DATA + 2] = UPDI_LASTL;
     3c6:	83 87       	std	Z+11, r24	; 0x0b
     3c8:	08 95       	ret

000003ca <_crc_ccitt_update(unsigned int, unsigned char)>:
_ZL17_crc_ccitt_updatejh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:478
}
     3ca:	86 27       	eor	r24, r22
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/crc16.h:285
        "eor    %A0,__tmp_reg__"

        : "=d" (__ret)
        : "r" (__data), "0" (__crc)
        : "r0"
    );
     3cc:	08 2e       	mov	r0, r24
     3ce:	82 95       	swap	r24
     3d0:	80 7f       	andi	r24, 0xF0	; 240
     3d2:	80 25       	eor	r24, r0
     3d4:	09 2e       	mov	r0, r25
     3d6:	98 2f       	mov	r25, r24
     3d8:	82 95       	swap	r24
     3da:	8f 70       	andi	r24, 0x0F	; 15
     3dc:	08 26       	eor	r0, r24
     3de:	86 95       	lsr	r24
     3e0:	98 27       	eor	r25, r24
     3e2:	89 27       	eor	r24, r25
     3e4:	88 0f       	add	r24, r24
     3e6:	88 0f       	add	r24, r24
     3e8:	88 0f       	add	r24, r24
     3ea:	80 25       	eor	r24, r0
     3ec:	08 95       	ret

000003ee <JTAG2::answer_transfer()>:
_ZN5JTAG215answer_transferEv():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/crc16.h:287
    return __ret;
}
     3ee:	af 92       	push	r10
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:150

  /***************
   * JTAG Answer *
   ***************/

  void answer_transfer (void) {
     3f0:	bf 92       	push	r11
     3f2:	cf 92       	push	r12
     3f4:	df 92       	push	r13
     3f6:	ef 92       	push	r14
     3f8:	ff 92       	push	r15
     3fa:	0f 93       	push	r16
     3fc:	1f 93       	push	r17
     3fe:	cf 93       	push	r28
     400:	df 93       	push	r29
     402:	00 d0       	rcall	.+0      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     404:	cd b7       	in	r28, 0x3d	; 61
     406:	de b7       	in	r29, 0x3e	; 62
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:151
    uint16_t _crc = ~0;
     408:	8f ef       	ldi	r24, 0xFF	; 255
     40a:	9f ef       	ldi	r25, 0xFF	; 255
     40c:	89 83       	std	Y+1, r24	; 0x01
     40e:	9a 83       	std	Y+2, r25	; 0x02
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:152
    int16_t _len = packet.size_word[0] + 8;
     410:	e0 90 8f 38 	lds	r14, 0x388F	; 0x80388f <JTAG2::packet+0x3>
     414:	f0 90 90 38 	lds	r15, 0x3890	; 0x803890 <JTAG2::packet+0x4>
     418:	87 01       	movw	r16, r14
     41a:	08 5f       	subi	r16, 0xF8	; 248
     41c:	1f 4f       	sbci	r17, 0xFF	; 255
     41e:	8c e8       	ldi	r24, 0x8C	; 140
     420:	c8 2e       	mov	r12, r24
     422:	88 e3       	ldi	r24, 0x38	; 56
     424:	d8 2e       	mov	r13, r24
     426:	56 01       	movw	r10, r12
     428:	81 e0       	ldi	r24, 0x01	; 1
     42a:	e8 1a       	sub	r14, r24
     42c:	f1 08       	sbc	r15, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:155
    uint8_t *_p = (uint8_t*) &packet.soh;
    uint8_t *_q = (uint8_t*) &packet.soh;
    while (_len--) _crc = crc16_update(_crc, *_q++);
     42e:	a7 ef       	ldi	r26, 0xF7	; 247
     430:	ea 16       	cp	r14, r26
     432:	af ef       	ldi	r26, 0xFF	; 255
     434:	fa 06       	cpc	r15, r26
     436:	49 f0       	breq	.+18     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     438:	f5 01       	movw	r30, r10
     43a:	61 91       	ld	r22, Z+
     43c:	5f 01       	movw	r10, r30
crc16_update():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:101
  void flush (void) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_TXCIF_bp);
  }

  uint16_t crc16_update(uint16_t _crc, uint8_t _data) {
    return _crc_ccitt_update(_crc, _data);
     43e:	89 81       	ldd	r24, Y+1	; 0x01
     440:	9a 81       	ldd	r25, Y+2	; 0x02
     442:	c3 df       	rcall	.-122    	; 0x3ca <_crc_ccitt_update(unsigned int, unsigned char)>
_ZN5JTAG215answer_transferEv():
     444:	89 83       	std	Y+1, r24	; 0x01
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:155
  void answer_transfer (void) {
    uint16_t _crc = ~0;
    int16_t _len = packet.size_word[0] + 8;
    uint8_t *_p = (uint8_t*) &packet.soh;
    uint8_t *_q = (uint8_t*) &packet.soh;
    while (_len--) _crc = crc16_update(_crc, *_q++);
     446:	9a 83       	std	Y+2, r25	; 0x02
     448:	ef cf       	rjmp	.-34     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     44a:	f8 01       	movw	r30, r16
     44c:	e4 57       	subi	r30, 0x74	; 116
     44e:	f7 4c       	sbci	r31, 0xC7	; 199
     450:	89 81       	ldd	r24, Y+1	; 0x01
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:156
    (*_q++) = _CAPS16(_crc)->bytes[0];
     452:	80 83       	st	Z, r24
     454:	8a 81       	ldd	r24, Y+2	; 0x02
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:157
    (*_q++) = _CAPS16(_crc)->bytes[1];
     456:	81 83       	std	Z+1, r24	; 0x01
     458:	2f b7       	in	r18, 0x3f	; 63
__iCliRetVal():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:158
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     45a:	f8 94       	cli
_ZN5JTAG215answer_transferEv():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     45c:	32 96       	adiw	r30, 0x02	; 2
put():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:157
    int16_t _len = packet.size_word[0] + 8;
    uint8_t *_p = (uint8_t*) &packet.soh;
    uint8_t *_q = (uint8_t*) &packet.soh;
    while (_len--) _crc = crc16_update(_crc, *_q++);
    (*_q++) = _CAPS16(_crc)->bytes[0];
    (*_q++) = _CAPS16(_crc)->bytes[1];
     45e:	90 e4       	ldi	r25, 0x40	; 64
_ZN5JTAG215answer_transferEv():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:92
    return JTAG_USART.RXDATAL;
  }

  uint8_t put (uint8_t _data) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_DREIF_bp);
    JTAG_USART.STATUS = USART_TXCIF_bm;
     460:	ce 16       	cp	r12, r30
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:159
    uint8_t *_q = (uint8_t*) &packet.soh;
    while (_len--) _crc = crc16_update(_crc, *_q++);
    (*_q++) = _CAPS16(_crc)->bytes[0];
    (*_q++) = _CAPS16(_crc)->bytes[1];
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
      while (_p != _q) put(*_p++);
     462:	df 06       	cpc	r13, r31
     464:	71 f4       	brne	.+28     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
__iRestore():
     466:	2f bf       	out	0x3f, r18	; 63
_ZN5JTAG215answer_transferEv():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:161
    }
  }
     468:	0f 90       	pop	r0
     46a:	0f 90       	pop	r0
     46c:	df 91       	pop	r29
     46e:	cf 91       	pop	r28
     470:	1f 91       	pop	r17
     472:	0f 91       	pop	r16
     474:	ff 90       	pop	r15
     476:	ef 90       	pop	r14
     478:	df 90       	pop	r13
     47a:	cf 90       	pop	r12
     47c:	bf 90       	pop	r11
     47e:	af 90       	pop	r10
     480:	08 95       	ret
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:159
    uint8_t *_q = (uint8_t*) &packet.soh;
    while (_len--) _crc = crc16_update(_crc, *_q++);
    (*_q++) = _CAPS16(_crc)->bytes[0];
    (*_q++) = _CAPS16(_crc)->bytes[1];
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
      while (_p != _q) put(*_p++);
     482:	d6 01       	movw	r26, r12
     484:	8d 91       	ld	r24, X+
     486:	6d 01       	movw	r12, r26
put():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:91
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_RXCIF_bp);
    return JTAG_USART.RXDATAL;
  }

  uint8_t put (uint8_t _data) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_DREIF_bp);
     488:	30 91 24 08 	lds	r19, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
     48c:	35 ff       	sbrs	r19, 5
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:92
    JTAG_USART.STATUS = USART_TXCIF_bm;
     48e:	fc cf       	rjmp	.-8      	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
     490:	90 93 24 08 	sts	0x0824, r25	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:93
    return JTAG_USART.TXDATAL = _data;
     494:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <__RODATA_PM_OFFSET__+0x7f8822>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:377
  } while (--limit);
  return false;
}

/* __attribute__((optimize("O0"))) */
bool UPDI::loop_until_key_stat_is_set (uint8_t bitmap, uint16_t limit) {
     498:	e3 cf       	rjmp	.-58     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>

0000049a <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.20]>:
_ZN4UPDI26loop_until_key_stat_is_setEhj.constprop.20():
     49a:	1f 93       	push	r17
     49c:	cf 93       	push	r28
     49e:	df 93       	push	r29
     4a0:	18 2f       	mov	r17, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:297
  send_bytes(set_ptr, sizeof(set_ptr));
  return RECV();
}

bool UPDI::is_cs_stat (uint8_t code, uint8_t check) {
  return check == (get_cs_stat(code) & check);
     4a2:	d0 e0       	ldi	r29, 0x00	; 0
     4a4:	c0 e0       	ldi	r28, 0x00	; 0
is_cs_stat():
     4a6:	87 e0       	ldi	r24, 0x07	; 7
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:382
bool UPDI::loop_until_key_stat_is_set (uint8_t bitmap, uint16_t limit) {
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  uint16_t _back = _send_ptr;
  #endif
  do {
    if (is_key_stat(bitmap)) return true;
     4a8:	a9 de       	rcall	.-686    	; 0x1fc <UPDI::get_cs_stat(unsigned char)>
     4aa:	81 23       	and	r24, r17
_ZN4UPDI26loop_until_key_stat_is_setEhj.constprop.20():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.8/cores/megaAVR/api/delay_busywait.h:31
static __inline__ __attribute__((__always_inline__)) void delay_micros (uint32_t _us);
static __inline__ __attribute__((__always_inline__)) void delay_millis (uint32_t _ms);

void delay_micros (uint32_t _us) {
  if (F_CPU >= 1000000L) {
    __builtin_avr_delay_cycles((F_CPU / 1000000L) * _us);
     4ac:	18 17       	cp	r17, r24
     4ae:	59 f0       	breq	.+22     	; 0x4c6 <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.20]+0x2c>
delay_micros():
     4b0:	86 ea       	ldi	r24, 0xA6	; 166
     4b2:	8a 95       	dec	r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:387
    #ifdef ENABLE_DEBUG_UPDI_SENDER
    _send_ptr = _back;
    #endif
    TIM::delay_50us();
  } while (--limit);
     4b4:	f1 f7       	brne	.-4      	; 0x4b2 <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.20]+0x18>
     4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.20]+0x1e>
_ZN4UPDI26loop_until_key_stat_is_setEhj.constprop.20():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:388
  return false;
     4b8:	21 97       	sbiw	r28, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:389
}
     4ba:	a9 f7       	brne	.-22     	; 0x4a6 <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.20]+0xc>
     4bc:	80 e0       	ldi	r24, 0x00	; 0
     4be:	df 91       	pop	r29
     4c0:	cf 91       	pop	r28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:382
bool UPDI::loop_until_key_stat_is_set (uint8_t bitmap, uint16_t limit) {
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  uint16_t _back = _send_ptr;
  #endif
  do {
    if (is_key_stat(bitmap)) return true;
     4c2:	1f 91       	pop	r17
     4c4:	08 95       	ret
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:393
  return false;
}

/* __attribute__((optimize("O0"))) */
bool UPDI::set_nvmprog_key (void) {
  if (!send_bytes(nvmprog_key, sizeof(nvmprog_key))) return false;
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	fa cf       	rjmp	.-12     	; 0x4be <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.20]+0x24>

000004ca <UPDI::set_nvmprog_key()>:
_ZN4UPDI15set_nvmprog_keyEv():
     4ca:	6a e0       	ldi	r22, 0x0A	; 10
     4cc:	86 e1       	ldi	r24, 0x16	; 22
     4ce:	98 e3       	ldi	r25, 0x38	; 56
     4d0:	42 de       	rcall	.-892    	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:394
  return loop_until_key_stat_is_set(UPDI_KEY_NVMPROG);
     4d2:	88 23       	and	r24, r24
     4d4:	11 f0       	breq	.+4      	; 0x4da <UPDI::set_nvmprog_key()+0x10>
     4d6:	80 e1       	ldi	r24, 0x10	; 16
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:395
}
     4d8:	e0 cf       	rjmp	.-64     	; 0x49a <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.20]>
     4da:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:347
  } while (--limit);
  return false;
}

/* __attribute__((optimize("O0"))) */
bool UPDI::loop_until_sys_stat_is_set (uint8_t bitmap, uint16_t limit) {
     4dc:	08 95       	ret

000004de <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.23]>:
_ZN4UPDI26loop_until_sys_stat_is_setEhj.constprop.23():
     4de:	1f 93       	push	r17
     4e0:	cf 93       	push	r28
     4e2:	df 93       	push	r29
     4e4:	18 2f       	mov	r17, r24
     4e6:	d0 e0       	ldi	r29, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:297
  send_bytes(set_ptr, sizeof(set_ptr));
  return RECV();
}

bool UPDI::is_cs_stat (uint8_t code, uint8_t check) {
  return check == (get_cs_stat(code) & check);
     4e8:	c0 e0       	ldi	r28, 0x00	; 0
is_cs_stat():
     4ea:	8b e0       	ldi	r24, 0x0B	; 11
     4ec:	87 de       	rcall	.-754    	; 0x1fc <UPDI::get_cs_stat(unsigned char)>
     4ee:	81 23       	and	r24, r17
_ZN4UPDI26loop_until_sys_stat_is_setEhj.constprop.23():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:352
bool UPDI::loop_until_sys_stat_is_set (uint8_t bitmap, uint16_t limit) {
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  uint16_t _back = _send_ptr;
  #endif
  do {
    if (is_sys_stat(bitmap)) return true;
     4f0:	18 17       	cp	r17, r24
     4f2:	59 f0       	breq	.+22     	; 0x50a <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.23]+0x2c>
delay_micros():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.8/cores/megaAVR/api/delay_busywait.h:31
     4f4:	86 ea       	ldi	r24, 0xA6	; 166
     4f6:	8a 95       	dec	r24
     4f8:	f1 f7       	brne	.-4      	; 0x4f6 <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.23]+0x18>
     4fa:	00 c0       	rjmp	.+0      	; 0x4fc <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.23]+0x1e>
_ZN4UPDI26loop_until_sys_stat_is_setEhj.constprop.23():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:357
    #ifdef ENABLE_DEBUG_UPDI_SENDER
    _send_ptr = _back;
    #endif
    TIM::delay_50us();
  } while (--limit);
     4fc:	21 97       	sbiw	r28, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:358
  return false;
     4fe:	a9 f7       	brne	.-22     	; 0x4ea <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.23]+0xc>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:359
}
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	df 91       	pop	r29
     504:	cf 91       	pop	r28
     506:	1f 91       	pop	r17
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:352
bool UPDI::loop_until_sys_stat_is_set (uint8_t bitmap, uint16_t limit) {
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  uint16_t _back = _send_ptr;
  #endif
  do {
    if (is_sys_stat(bitmap)) return true;
     508:	08 95       	ret
     50a:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:332
uint8_t UPDI::get_cs_asi_ctra (void) {
  return get_cs_stat(UPDI_CS_ASI_CTRLA);
}

/* __attribute__((optimize("O0"))) */
bool UPDI::loop_until_sys_stat_is_clear (uint8_t bitmap, uint16_t limit) {
     50c:	fa cf       	rjmp	.-12     	; 0x502 <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.23]+0x24>

0000050e <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>:
_ZN4UPDI28loop_until_sys_stat_is_clearEhj():
     50e:	1f 93       	push	r17
     510:	cf 93       	push	r28
     512:	df 93       	push	r29
     514:	18 2f       	mov	r17, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:297
  send_bytes(set_ptr, sizeof(set_ptr));
  return RECV();
}

bool UPDI::is_cs_stat (uint8_t code, uint8_t check) {
  return check == (get_cs_stat(code) & check);
     516:	eb 01       	movw	r28, r22
is_cs_stat():
     518:	8b e0       	ldi	r24, 0x0B	; 11
     51a:	70 de       	rcall	.-800    	; 0x1fc <UPDI::get_cs_stat(unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:337
bool UPDI::loop_until_sys_stat_is_clear (uint8_t bitmap, uint16_t limit) {
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  uint16_t _back = _send_ptr;
  #endif
  do {
    if (!is_sys_stat(bitmap)) return true;
     51c:	81 23       	and	r24, r17
_ZN4UPDI28loop_until_sys_stat_is_clearEhj():
     51e:	18 13       	cpse	r17, r24
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.8/cores/megaAVR/api/delay_busywait.h:31
     520:	0b c0       	rjmp	.+22     	; 0x538 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)+0x2a>
delay_micros():
     522:	86 ea       	ldi	r24, 0xA6	; 166
     524:	8a 95       	dec	r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:342
    #ifdef ENABLE_DEBUG_UPDI_SENDER
    _send_ptr = _back;
    #endif
    TIM::delay_50us();
  } while (--limit);
     526:	f1 f7       	brne	.-4      	; 0x524 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)+0x16>
     528:	00 c0       	rjmp	.+0      	; 0x52a <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)+0x1c>
_ZN4UPDI28loop_until_sys_stat_is_clearEhj():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:343
  return false;
     52a:	21 97       	sbiw	r28, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:344
}
     52c:	a9 f7       	brne	.-22     	; 0x518 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)+0xa>
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	df 91       	pop	r29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:337
bool UPDI::loop_until_sys_stat_is_clear (uint8_t bitmap, uint16_t limit) {
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  uint16_t _back = _send_ptr;
  #endif
  do {
    if (!is_sys_stat(bitmap)) return true;
     532:	cf 91       	pop	r28
     534:	1f 91       	pop	r17
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:563

/**********************
 * UPDI control start *
 **********************/

bool UPDI::enter_updi (bool skip) {
     536:	08 95       	ret
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	fa cf       	rjmp	.-12     	; 0x530 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)+0x22>

0000053c <UPDI::enter_updi(bool) [clone .part.12]>:
_ZN4UPDI10enter_updiEb.part.12():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:320
  set_ptr[2] = data;
  return send_bytes(set_ptr, sizeof(set_ptr));
}

bool UPDI::set_cs_ctra (uint8_t data) {
  return set_cs_stat(UPDI_CS_CTRLA, data);
     53c:	0f 93       	push	r16
     53e:	1f 93       	push	r17
     540:	cf 93       	push	r28
set_cs_ctra():
     542:	66 e0       	ldi	r22, 0x06	; 6
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:588
    else
      BREAK();
  }
  if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) {
    /* Minimize guard time */
    if (!set_cs_ctra(UPDI_GTVAL)) return false;
     544:	82 e0       	ldi	r24, 0x02	; 2
     546:	18 de       	rcall	.-976    	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>
_ZN4UPDI10enter_updiEb.part.12():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:642
        /* Version 4 is now considered the same as 2. */
        bit_set(UPDI_NVMCTRL, UPDI_GEN2_bp);
        break;
      }
      default : {
        return false;
     548:	81 11       	cpse	r24, r1
     54a:	02 c0       	rjmp	.+4      	; 0x550 <UPDI::enter_updi(bool) [clone .part.12]+0x14>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:589
      BREAK();
  }
  if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) {
    /* Minimize guard time */
    if (!set_cs_ctra(UPDI_GTVAL)) return false;
    _CAPS32(JTAG2::updi_desc.signature[0])->dword = -1;
     54c:	c0 e0       	ldi	r28, 0x00	; 0
     54e:	49 c0       	rjmp	.+146    	; 0x5e2 <UPDI::enter_updi(bool) [clone .part.12]+0xa6>
     550:	8f ef       	ldi	r24, 0xFF	; 255
     552:	9f ef       	ldi	r25, 0xFF	; 255
     554:	dc 01       	movw	r26, r24
     556:	80 93 69 38 	sts	0x3869, r24	; 0x803869 <JTAG2::updi_desc+0x7>
     55a:	90 93 6a 38 	sts	0x386A, r25	; 0x80386a <JTAG2::updi_desc+0x8>
     55e:	a0 93 6b 38 	sts	0x386B, r26	; 0x80386b <JTAG2::updi_desc+0x9>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:297
  send_bytes(set_ptr, sizeof(set_ptr));
  return RECV();
}

bool UPDI::is_cs_stat (uint8_t code, uint8_t check) {
  return check == (get_cs_stat(code) & check);
     562:	b0 93 6c 38 	sts	0x386C, r27	; 0x80386c <JTAG2::updi_desc+0xa>
is_cs_stat():
     566:	8b e0       	ldi	r24, 0x0B	; 11
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:595

    #ifdef ENABLE_UPDI_DOUBLESPEED
    if (hv_val && !set_cs_asi_ctra(UPDI_SET_UPDICLKSEL_8M)) return false;
    #endif

    if (is_sys_stat(UPDI_SYS_RSTSYS)) {
     568:	49 de       	rcall	.-878    	; 0x1fc <UPDI::get_cs_stat(unsigned char)>
_ZN4UPDI10enter_updiEb.part.12():
     56a:	85 fd       	sbrc	r24, 5
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:412
}

bool UPDI::read_sib (uint8_t *s_ptr) {
  static uint8_t set_ptr[] = { UPDI_SYNCH, UPDI_SIB_256 };
  uint8_t _len = 32;
  if (!send_bytes(set_ptr, sizeof(set_ptr))) return false;
     56c:	2b c0       	rjmp	.+86     	; 0x5c4 <UPDI::enter_updi(bool) [clone .part.12]+0x88>
read_sib():
     56e:	62 e0       	ldi	r22, 0x02	; 2
     570:	84 e3       	ldi	r24, 0x34	; 52
     572:	98 e3       	ldi	r25, 0x38	; 56
     574:	f0 dd       	rcall	.-1056   	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     576:	c8 2f       	mov	r28, r24
     578:	0c e6       	ldi	r16, 0x6C	; 108
     57a:	18 e3       	ldi	r17, 0x38	; 56
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:413
  do { *s_ptr++ = RECV(); } while (--_len);
     57c:	88 23       	and	r24, r24
     57e:	31 f3       	breq	.-52     	; 0x54c <UPDI::enter_updi(bool) [clone .part.12]+0x10>
     580:	c4 dd       	rcall	.-1144   	; 0x10a <UPDI::RECV()>
     582:	f8 01       	movw	r30, r16
     584:	81 93       	st	Z+, r24
     586:	8f 01       	movw	r16, r30
     588:	f8 e3       	ldi	r31, 0x38	; 56
     58a:	0c 38       	cpi	r16, 0x8C	; 140
     58c:	1f 07       	cpc	r17, r31
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:604

    /*** Get System Information Block ***/
    /* Determine system requirements not announced by host control here */
    uint8_t* _p = &JTAG2::updi_desc.sib[0];
    if (!read_sib(_p)) return false;
    JTAG2::updi_desc.nvmctrl_version = _p[10];
     58e:	c1 f7       	brne	.-16     	; 0x580 <UPDI::enter_updi(bool) [clone .part.12]+0x44>
_ZN4UPDI10enter_updiEb.part.12():
     590:	90 91 76 38 	lds	r25, 0x3876	; 0x803876 <JTAG2::updi_desc+0x14>
     594:	90 93 65 38 	sts	0x3865, r25	; 0x803865 <JTAG2::updi_desc+0x3>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:605
    JTAG2::updi_desc.signature[0] = 0x1e;
     598:	8e e1       	ldi	r24, 0x1E	; 30
     59a:	80 93 69 38 	sts	0x3869, r24	; 0x803869 <JTAG2::updi_desc+0x7>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:606
    JTAG2::updi_desc.signature[1] = _p[0];
     59e:	80 91 6c 38 	lds	r24, 0x386C	; 0x80386c <JTAG2::updi_desc+0xa>
     5a2:	80 93 6a 38 	sts	0x386A, r24	; 0x80386a <JTAG2::updi_desc+0x8>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:607
    JTAG2::updi_desc.signature[2] = _p[10];
     5a6:	90 93 6b 38 	sts	0x386B, r25	; 0x80386b <JTAG2::updi_desc+0x9>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:608
    switch (_p[0]) {
     5aa:	81 34       	cpi	r24, 0x41	; 65
     5ac:	31 f0       	breq	.+12     	; 0x5ba <UPDI::enter_updi(bool) [clone .part.12]+0x7e>
     5ae:	98 f4       	brcc	.+38     	; 0x5d6 <UPDI::enter_updi(bool) [clone .part.12]+0x9a>
     5b0:	80 32       	cpi	r24, 0x20	; 32
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:621
        /* tinyAVR SIB = 'tinyAVR P:0D:1-3' */
        /* always vesrion 0 */
        break;
      }
      case ' ' :                // 'AVR_DA' Regacy
        JTAG2::updi_desc.signature[1] = 'A';
     5b2:	61 f6       	brne	.-104    	; 0x54c <UPDI::enter_updi(bool) [clone .part.12]+0x10>
     5b4:	81 e4       	ldi	r24, 0x41	; 65
     5b6:	80 93 6a 38 	sts	0x386A, r24	; 0x80386a <JTAG2::updi_desc+0x8>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:628
        /* AVR Dx SIB = 'AVR     P:2D:1-3' */
        /* AVR DA SIB = '    AVR P:2D:1-3' (Regacy) */
        /* AVR EA SIB = 'AVR     P:3D:1-3' */
        /* AVR DU SIB = 'AVR     P:4D:1-3' */
        /* AVR EB SIB = 'AVR     P:5D:1-3' */
        if (JTAG2::updi_desc.nvmctrl_version == '3') {
     5ba:	93 33       	cpi	r25, 0x33	; 51
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:635
          bit_set(UPDI_NVMCTRL, UPDI_GEN3_bp);
        }
        else if (JTAG2::updi_desc.nvmctrl_version == '5') {
          // 'AVR_EB' series
          bit_set(UPDI_NVMCTRL, UPDI_GEN5_bp);
          bit_set(UPDI_NVMCTRL, UPDI_GEN3_bp);
     5bc:	c9 f4       	brne	.+50     	; 0x5f0 <UPDI::enter_updi(bool) [clone .part.12]+0xb4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:638
        }
        /* Version 4 is now considered the same as 2. */
        bit_set(UPDI_NVMCTRL, UPDI_GEN2_bp);
     5be:	ed 9a       	sbi	0x1d, 5	; 29
     5c0:	ee 9a       	sbi	0x1d, 6	; 29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:596
    #ifdef ENABLE_UPDI_DOUBLESPEED
    if (hv_val && !set_cs_asi_ctra(UPDI_SET_UPDICLKSEL_8M)) return false;
    #endif

    if (is_sys_stat(UPDI_SYS_RSTSYS)) {
      UPDI::Target_Reset(false);
     5c2:	0e c0       	rjmp	.+28     	; 0x5e0 <UPDI::enter_updi(bool) [clone .part.12]+0xa4>
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	a7 de       	rcall	.-690    	; 0x316 <UPDI::Target_Reset(bool)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:597
      if (!loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS, 500)) return false;
     5c8:	64 ef       	ldi	r22, 0xF4	; 244
     5ca:	71 e0       	ldi	r23, 0x01	; 1
     5cc:	80 e2       	ldi	r24, 0x20	; 32
     5ce:	9f df       	rcall	.-194    	; 0x50e <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
     5d0:	81 11       	cpse	r24, r1
     5d2:	cd cf       	rjmp	.-102    	; 0x56e <UPDI::enter_updi(bool) [clone .part.12]+0x32>
     5d4:	bb cf       	rjmp	.-138    	; 0x54c <UPDI::enter_updi(bool) [clone .part.12]+0x10>
     5d6:	8d 36       	cpi	r24, 0x6D	; 109
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:608
    if (!read_sib(_p)) return false;
    JTAG2::updi_desc.nvmctrl_version = _p[10];
    JTAG2::updi_desc.signature[0] = 0x1e;
    JTAG2::updi_desc.signature[1] = _p[0];
    JTAG2::updi_desc.signature[2] = _p[10];
    switch (_p[0]) {
     5d8:	49 f0       	breq	.+18     	; 0x5ec <UPDI::enter_updi(bool) [clone .part.12]+0xb0>
     5da:	84 37       	cpi	r24, 0x74	; 116
     5dc:	09 f0       	breq	.+2      	; 0x5e0 <UPDI::enter_updi(bool) [clone .part.12]+0xa4>
     5de:	b6 cf       	rjmp	.-148    	; 0x54c <UPDI::enter_updi(bool) [clone .part.12]+0x10>
     5e0:	e0 9a       	sbi	0x1c, 0	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:645
      }
      default : {
        return false;
      }
    }
    bit_set(UPDI_CONTROL, UPDI_INFO_bp);
     5e2:	8c 2f       	mov	r24, r28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:657
    bit_set(UPDI_CONTROL, UPDI_CLKU_bp);
    do { TIM::delay_50us(); } while (tval != get_cs_asi_ctra());
  }
  #endif
  return true;
}
     5e4:	cf 91       	pop	r28
     5e6:	1f 91       	pop	r17
     5e8:	0f 91       	pop	r16
     5ea:	08 95       	ret
     5ec:	ef 9a       	sbi	0x1d, 7	; 29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:612
    JTAG2::updi_desc.signature[2] = _p[10];
    switch (_p[0]) {
      case 'm' : {              // 'megaAVR' series
        /* megaAVR SIB = 'megaAVR P:0D:1-3' */
        /* always vesrion 0 */
        bit_set(UPDI_NVMCTRL, UPDI_LOWF_bp);
     5ee:	f8 cf       	rjmp	.-16     	; 0x5e0 <UPDI::enter_updi(bool) [clone .part.12]+0xa4>
     5f0:	95 33       	cpi	r25, 0x35	; 53
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:632
        /* AVR EB SIB = 'AVR     P:5D:1-3' */
        if (JTAG2::updi_desc.nvmctrl_version == '3') {
          // 'AVR_Ex' series
          bit_set(UPDI_NVMCTRL, UPDI_GEN3_bp);
        }
        else if (JTAG2::updi_desc.nvmctrl_version == '5') {
     5f2:	31 f7       	brne	.-52     	; 0x5c0 <UPDI::enter_updi(bool) [clone .part.12]+0x84>
     5f4:	eb 9a       	sbi	0x1d, 3	; 29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:634
          // 'AVR_EB' series
          bit_set(UPDI_NVMCTRL, UPDI_GEN5_bp);
     5f6:	e3 cf       	rjmp	.-58     	; 0x5be <UPDI::enter_updi(bool) [clone .part.12]+0x82>

000005f8 <UPDI::HV_Pulse()>:
_ZN4UPDI8HV_PulseEv():
     5f8:	80 91 64 38 	lds	r24, 0x3864	; 0x803864 <JTAG2::updi_desc+0x2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:425

void UPDI::HV_Pulse (void) {
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  UPDI::_send_buf_push(JTAG2::updi_desc.hvupdi_variant);
  #endif
  if (JTAG2::updi_desc.hvupdi_variant != '0'
     5fc:	8d 7f       	andi	r24, 0xFD	; 253
     5fe:	80 33       	cpi	r24, 0x30	; 48
     600:	09 f0       	breq	.+2      	; 0x604 <UPDI::HV_Pulse()+0xc>
     602:	38 c0       	rjmp	.+112    	; 0x674 <UPDI::HV_Pulse()+0x7c>
HV_Pulse_ON():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:179
/*
 * HV charge pump drive control
 */

void TIM::HV_Pulse_ON (void) {
  TCA0_SPLIT_CTRLB = TCA_SPLIT_HCMP0EN_bm | TCA_SPLIT_HCMP1EN_bm;
     604:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__RODATA_PM_OFFSET__+0x7f8a01>
_ZN4UPDI8HV_PulseEv():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:432

  /* Run high voltage generator */
  TIM::HV_Pulse_ON();

  /* Perform a hardware reset (if wired) */
  openDrainWrite(TRST_PIN, LOW);
     608:	21 9a       	sbi	0x04, 1	; 4
delay_micros():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.8/cores/megaAVR/api/delay_busywait.h:31
     60a:	86 ea       	ldi	r24, 0xA6	; 166
     60c:	8a 95       	dec	r24
     60e:	f1 f7       	brne	.-4      	; 0x60c <UPDI::HV_Pulse()+0x14>
     610:	00 c0       	rjmp	.+0      	; 0x612 <UPDI::HV_Pulse()+0x1a>
_ZN4UPDI8HV_PulseEv():
     612:	21 98       	cbi	0x04, 1	; 4
delay_micros():
     614:	8f ec       	ldi	r24, 0xCF	; 207
     616:	97 e0       	ldi	r25, 0x07	; 7
     618:	01 97       	sbiw	r24, 0x01	; 1
     61a:	f1 f7       	brne	.-4      	; 0x618 <UPDI::HV_Pulse()+0x20>
     61c:	00 c0       	rjmp	.+0      	; 0x61e <UPDI::HV_Pulse()+0x26>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:438
  TIM::delay_50us();
  openDrainWrite(TRST_PIN, HIGH);
  TIM::delay_800us();
  /* During this time, raise the circuit to sufficient voltage */

  if (JTAG2::updi_desc.hvupdi_variant == '0')
     61e:	00 00       	nop
_ZN4UPDI8HV_PulseEv():
     620:	80 91 64 38 	lds	r24, 0x3864	; 0x803864 <JTAG2::updi_desc+0x2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:439
    digitalWrite(HV12_PIN, HIGH);
     624:	80 33       	cpi	r24, 0x30	; 48
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.8/cores/megaAVR/api/delay_busywait.h:31
     626:	11 f5       	brne	.+68     	; 0x66c <UPDI::HV_Pulse()+0x74>
     628:	0e 9a       	sbi	0x01, 6	; 1
delay_micros():
     62a:	8f ec       	ldi	r24, 0xCF	; 207
     62c:	97 e0       	ldi	r25, 0x07	; 7
     62e:	01 97       	sbiw	r24, 0x01	; 1
     630:	f1 f7       	brne	.-4      	; 0x62e <UPDI::HV_Pulse()+0x36>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:446
    digitalWrite(HV8_PIN, HIGH);

  /* Apply high voltage only for the required time */
  TIM::delay_800us();

  if (JTAG2::updi_desc.hvupdi_variant == '0')
     632:	00 c0       	rjmp	.+0      	; 0x634 <UPDI::HV_Pulse()+0x3c>
     634:	00 00       	nop
_ZN4UPDI8HV_PulseEv():
     636:	80 91 64 38 	lds	r24, 0x3864	; 0x803864 <JTAG2::updi_desc+0x2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:447
    digitalWrite(HV12_PIN, LOW);
     63a:	80 33       	cpi	r24, 0x30	; 48
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:183
}

void TIM::HV_Pulse_OFF (void) {
  TCA0_SPLIT_CTRLB = 0;
     63c:	c9 f4       	brne	.+50     	; 0x670 <UPDI::HV_Pulse()+0x78>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:454
    digitalWrite(HV8_PIN, LOW);

  TIM::HV_Pulse_OFF();

  /* Keep the UPDI signal low for as long as necessary */
  UPDI_USART.BAUD = UPDI_BAUD_SHORT_BREAK;
     63e:	0e 98       	cbi	0x01, 6	; 1
HV_Pulse_OFF():
     640:	10 92 01 0a 	sts	0x0A01, r1	; 0x800a01 <__RODATA_PM_OFFSET__+0x7f8a01>
_ZN4UPDI8HV_PulseEv():
     644:	88 ee       	ldi	r24, 0xE8	; 232
     646:	93 e0       	ldi	r25, 0x03	; 3
     648:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__RODATA_PM_OFFSET__+0x7f8808>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:455
  SEND(UPDI_NOP);
     64c:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__RODATA_PM_OFFSET__+0x7f8809>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:456
  UPDI_USART.BAUD = UPDI_BAUD_CALC;
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	67 dd       	rcall	.-1330   	; 0x122 <UPDI::SEND(unsigned char)>
     654:	80 eb       	ldi	r24, 0xB0	; 176
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__RODATA_PM_OFFSET__+0x7f8808>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:458

  bit_clear(UPDI_CONTROL, UPDI_CLKU_bp);
     65c:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__RODATA_PM_OFFSET__+0x7f8809>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:462
  bit_set(UPDI_CONTROL, UPDI_ERHV_bp);

  /* Wait for system reset to finish */
  loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
     660:	e6 98       	cbi	0x1c, 6	; 28
     662:	e3 9a       	sbi	0x1c, 3	; 28
     664:	70 e0       	ldi	r23, 0x00	; 0
     666:	60 e0       	ldi	r22, 0x00	; 0
     668:	80 e2       	ldi	r24, 0x20	; 32
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:441
  /* During this time, raise the circuit to sufficient voltage */

  if (JTAG2::updi_desc.hvupdi_variant == '0')
    digitalWrite(HV12_PIN, HIGH);
  else
    digitalWrite(HV8_PIN, HIGH);
     66a:	51 cf       	rjmp	.-350    	; 0x50e <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
     66c:	2d 9a       	sbi	0x05, 5	; 5
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:449
  TIM::delay_800us();

  if (JTAG2::updi_desc.hvupdi_variant == '0')
    digitalWrite(HV12_PIN, LOW);
  else
    digitalWrite(HV8_PIN, LOW);
     66e:	dd cf       	rjmp	.-70     	; 0x62a <UPDI::HV_Pulse()+0x32>
     670:	2d 98       	cbi	0x05, 5	; 5
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:463
  bit_clear(UPDI_CONTROL, UPDI_CLKU_bp);
  bit_set(UPDI_CONTROL, UPDI_ERHV_bp);

  /* Wait for system reset to finish */
  loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
}
     672:	e6 cf       	rjmp	.-52     	; 0x640 <UPDI::HV_Pulse()+0x48>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:58
  /* NVMCTRL version 3,5 */
  uint8_t nvm_wait_v3 (void) {
    #ifdef ENABLE_DEBUG_UPDI_SENDER
    uint16_t _back = UPDI::_send_ptr;
    #endif
    while (UPDI::ld8(NVMCTRL_V3_REG_STATUS) & 3) {
     674:	08 95       	ret

00000676 <NVM::nvm_wait_v3()>:
_ZN3NVM11nvm_wait_v3Ev():
     676:	66 e0       	ldi	r22, 0x06	; 6
     678:	70 e1       	ldi	r23, 0x10	; 16
     67a:	80 e0       	ldi	r24, 0x00	; 0
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	39 de       	rcall	.-910    	; 0x2f2 <UPDI::ld8(unsigned long)>
     680:	83 70       	andi	r24, 0x03	; 3
     682:	29 f0       	breq	.+10     	; 0x68e <NVM::nvm_wait_v3()+0x18>
delay_micros():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.8/cores/megaAVR/api/delay_busywait.h:31
     684:	86 ea       	ldi	r24, 0xA6	; 166
     686:	8a 95       	dec	r24
     688:	f1 f7       	brne	.-4      	; 0x686 <NVM::nvm_wait_v3()+0x10>
     68a:	00 c0       	rjmp	.+0      	; 0x68c <NVM::nvm_wait_v3()+0x16>
     68c:	f4 cf       	rjmp	.-24     	; 0x676 <NVM::nvm_wait_v3()>
_ZN3NVM11nvm_wait_v3Ev():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:64
      #ifdef ENABLE_DEBUG_UPDI_SENDER
      UPDI::_send_ptr = _back;
      #endif
      TIM::delay_50us();
    }
    return UPDI_LASTL;
     68e:	8e b3       	in	r24, 0x1e	; 30
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:65
  }
     690:	08 95       	ret

00000692 <NVM::nvm_wait()>:
_ZN3NVM8nvm_waitEv():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:44
  /* NVMCTRL version 0,2,4 */
  uint8_t nvm_wait (void) {
    #ifdef ENABLE_DEBUG_UPDI_SENDER
    uint16_t _back = UPDI::_send_ptr;
    #endif
    while (UPDI::ld8(NVMCTRL_REG_STATUS) & 3) {
     692:	62 e0       	ldi	r22, 0x02	; 2
     694:	70 e1       	ldi	r23, 0x10	; 16
     696:	80 e0       	ldi	r24, 0x00	; 0
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	2b de       	rcall	.-938    	; 0x2f2 <UPDI::ld8(unsigned long)>
     69c:	83 70       	andi	r24, 0x03	; 3
     69e:	29 f0       	breq	.+10     	; 0x6aa <NVM::nvm_wait()+0x18>
delay_micros():
     6a0:	86 ea       	ldi	r24, 0xA6	; 166
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.8/cores/megaAVR/api/delay_busywait.h:31
     6a2:	8a 95       	dec	r24
     6a4:	f1 f7       	brne	.-4      	; 0x6a2 <NVM::nvm_wait()+0x10>
     6a6:	00 c0       	rjmp	.+0      	; 0x6a8 <NVM::nvm_wait()+0x16>
     6a8:	f4 cf       	rjmp	.-24     	; 0x692 <NVM::nvm_wait()>
_ZN3NVM8nvm_waitEv():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:50
      #ifdef ENABLE_DEBUG_UPDI_SENDER
      UPDI::_send_ptr = _back;
      #endif
      TIM::delay_50us();
    }
    return UPDI_LASTL;
     6aa:	8e b3       	in	r24, 0x1e	; 30
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:51
  }
     6ac:	08 95       	ret

000006ae <SYS::WDT_SET(unsigned char)>:
_ZN3SYS7WDT_SETEh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:160
/*****************
 * WDT operation *
 *****************/

void SYS::WDT_SET (uint8_t _wdt_period) {
  wdt_reset();
     6ae:	a8 95       	wdr
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:161
  loop_until_bit_is_clear(WDT_STATUS, WDT_SYNCBUSY_bp);
     6b0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__RODATA_PM_OFFSET__+0x7f8101>
     6b4:	90 fd       	sbrc	r25, 0
     6b6:	fc cf       	rjmp	.-8      	; 0x6b0 <SYS::WDT_SET(unsigned char)+0x2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:162
  _PROTECTED_WRITE(WDT_CTRLA, _wdt_period);
     6b8:	98 ed       	ldi	r25, 0xD8	; 216
     6ba:	94 bf       	out	0x34, r25	; 52
     6bc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__RODATA_PM_OFFSET__+0x7f8100>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:163
}
     6c0:	08 95       	ret

000006c2 <UPDI::updi_activate(bool)>:
_ZN4UPDI13updi_activateEb():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:685

/**********************
 * UPDI authorization *
 **********************/

bool UPDI::updi_activate (bool hv_active) {
     6c2:	cf 93       	push	r28
     6c4:	df 93       	push	r29
     6c6:	00 d0       	rcall	.+0      	; 0x6c8 <UPDI::updi_activate(bool)+0x6>
     6c8:	cd b7       	in	r28, 0x3d	; 61
     6ca:	de b7       	in	r29, 0x3e	; 62
     6cc:	8a 83       	std	Y+2, r24	; 0x02
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:686
  volatile uint8_t count = 4;
     6ce:	84 e0       	ldi	r24, 0x04	; 4
     6d0:	89 83       	std	Y+1, r24	; 0x01
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:687
  while (--count && bit_is_clear(UPDI_CONTROL, UPDI_PROG_bp)) {
     6d2:	89 81       	ldd	r24, Y+1	; 0x01
     6d4:	81 50       	subi	r24, 0x01	; 1
     6d6:	89 83       	std	Y+1, r24	; 0x01
     6d8:	88 23       	and	r24, r24
     6da:	09 f4       	brne	.+2      	; 0x6de <UPDI::updi_activate(bool)+0x1c>
     6dc:	4c c0       	rjmp	.+152    	; 0x776 <UPDI::updi_activate(bool)+0xb4>
     6de:	e1 99       	sbic	0x1c, 1	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:690
    /* For the second lap, forced HV control is enabled by the CMND_RESET parameter */
    /* For the third lap, forced HV control of JP short is allowed. */
    if ((count == 2 && hv_active)
     6e0:	4a c0       	rjmp	.+148    	; 0x776 <UPDI::updi_activate(bool)+0xb4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:691
     || (count == 1 && JTAG2::updi_desc.hvupdi_variant != '1' 
     6e2:	89 81       	ldd	r24, Y+1	; 0x01
     6e4:	82 30       	cpi	r24, 0x02	; 2
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:690
bool UPDI::updi_activate (bool hv_active) {
  volatile uint8_t count = 4;
  while (--count && bit_is_clear(UPDI_CONTROL, UPDI_PROG_bp)) {
    /* For the second lap, forced HV control is enabled by the CMND_RESET parameter */
    /* For the third lap, forced HV control of JP short is allowed. */
    if ((count == 2 && hv_active)
     6e6:	19 f4       	brne	.+6      	; 0x6ee <UPDI::updi_activate(bool)+0x2c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:691
     || (count == 1 && JTAG2::updi_desc.hvupdi_variant != '1' 
     6e8:	2a 81       	ldd	r18, Y+2	; 0x02
     6ea:	21 11       	cpse	r18, r1
     6ec:	08 c0       	rjmp	.+16     	; 0x6fe <UPDI::updi_activate(bool)+0x3c>
     6ee:	89 81       	ldd	r24, Y+1	; 0x01
     6f0:	81 30       	cpi	r24, 0x01	; 1
     6f2:	31 f4       	brne	.+12     	; 0x700 <UPDI::updi_activate(bool)+0x3e>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:692
                    && !digitalRead(JP_SENSE_PIN))) {
     6f4:	80 91 64 38 	lds	r24, 0x3864	; 0x803864 <JTAG2::updi_desc+0x2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:695
      bit_set(UPDI_CONTROL, UPDI_FCHV_bp);
    }
    if (setjmp(TIM::CONTEXT) == 0) {
     6f8:	81 33       	cpi	r24, 0x31	; 49
     6fa:	11 f0       	breq	.+4      	; 0x700 <UPDI::updi_activate(bool)+0x3e>
     6fc:	53 9b       	sbis	0x0a, 3	; 10
     6fe:	e4 9a       	sbi	0x1c, 4	; 28
     700:	86 e4       	ldi	r24, 0x46	; 70
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:50
     702:	98 e3       	ldi	r25, 0x38	; 56
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:107
 * Timeout control
 */

void TIM::Timeout_Start (uint16_t _ms) {
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    TCB0_CNT = 0;
     704:	d8 d6       	rcall	.+3504   	; 0x14b6 <setjmp>
     706:	89 2b       	or	r24, r25
     708:	a1 f5       	brne	.+104    	; 0x772 <UPDI::updi_activate(bool)+0xb0>
Timeout_Start():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:108
    TCB0_CCMP = _ms >> 2;
     70a:	8f b7       	in	r24, 0x3f	; 63
__iCliRetVal():
     70c:	f8 94       	cli
Timeout_Start():
     70e:	ea e8       	ldi	r30, 0x8A	; 138
     710:	fa e0       	ldi	r31, 0x0A	; 10
     712:	10 82       	st	Z, r1
     714:	11 82       	std	Z+1, r1	; 0x01
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:109
    TCB0_INTCTRL = TCB_CAPT_bm;
     716:	2f e1       	ldi	r18, 0x1F	; 31
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	ec e8       	ldi	r30, 0x8C	; 140
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:110
    TCB0_INTFLAGS = TCB_CAPT_bm;
     71c:	fa e0       	ldi	r31, 0x0A	; 10
     71e:	20 83       	st	Z, r18
     720:	31 83       	std	Z+1, r19	; 0x01
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:111
    TCB0_CTRLA = TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
     722:	21 e0       	ldi	r18, 0x01	; 1
     724:	e5 e8       	ldi	r30, 0x85	; 133
     726:	fa e0       	ldi	r31, 0x0A	; 10
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     728:	20 83       	st	Z, r18
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:568
bool UPDI::enter_updi (bool skip) {
  #ifdef ENABLE_UPDI_DOUBLESPEED
  const bool hv_val = SYS::get_vcc() >= 4250;
  #endif
  /* Release the physical reset */
  openDrainWrite(TRST_PIN, HIGH);
     72a:	e6 e8       	ldi	r30, 0x86	; 134
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:572
  /* target reset deactive */
  if (!skip) {
    /* HV control forced permission */
    if (bit_is_set(UPDI_CONTROL, UPDI_FCHV_bp)) {
     72c:	fa e0       	ldi	r31, 0x0A	; 10
     72e:	20 83       	st	Z, r18
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:573
      HV_Pulse();
     730:	2f e0       	ldi	r18, 0x0F	; 15
     732:	e0 e8       	ldi	r30, 0x80	; 128
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:574
      loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS, 500);
     734:	fa e0       	ldi	r31, 0x0A	; 10
     736:	20 83       	st	Z, r18
__iRestore():
     738:	8f bf       	out	0x3f, r24	; 63
enter_updi():
     73a:	21 98       	cbi	0x04, 1	; 4
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:577

      /* send nvmprog_key */
      if (!set_nvmprog_key()) return false;
     73c:	e4 9b       	sbis	0x1c, 4	; 28
     73e:	23 c0       	rjmp	.+70     	; 0x786 <UPDI::updi_activate(bool)+0xc4>
     740:	5b df       	rcall	.-330    	; 0x5f8 <UPDI::HV_Pulse()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:580

      /* restart target : change mode */
      if (!updi_reset(true) || !updi_reset(false)) return false;
     742:	64 ef       	ldi	r22, 0xF4	; 244
     744:	71 e0       	ldi	r23, 0x01	; 1
     746:	80 e2       	ldi	r24, 0x20	; 32
     748:	e2 de       	rcall	.-572    	; 0x50e <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
     74a:	bf de       	rcall	.-642    	; 0x4ca <UPDI::set_nvmprog_key()>
     74c:	88 23       	and	r24, r24
     74e:	89 f0       	breq	.+34     	; 0x772 <UPDI::updi_activate(bool)+0xb0>
     750:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:581
      loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
     752:	dc dd       	rcall	.-1096   	; 0x30c <UPDI::updi_reset(bool)>
     754:	88 23       	and	r24, r24
     756:	69 f0       	breq	.+26     	; 0x772 <UPDI::updi_activate(bool)+0xb0>
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	d8 dd       	rcall	.-1104   	; 0x30c <UPDI::updi_reset(bool)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:586
    }
    else
      BREAK();
  }
  if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) {
     75c:	88 23       	and	r24, r24
     75e:	49 f0       	breq	.+18     	; 0x772 <UPDI::updi_activate(bool)+0xb0>
     760:	70 e0       	ldi	r23, 0x00	; 0
     762:	60 e0       	ldi	r22, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:697
                    && !digitalRead(JP_SENSE_PIN))) {
      bit_set(UPDI_CONTROL, UPDI_FCHV_bp);
    }
    if (setjmp(TIM::CONTEXT) == 0) {
      TIM::Timeout_Start(125);
      enter_updi(false) && enter_prog();
     764:	80 e2       	ldi	r24, 0x20	; 32
     766:	d3 de       	rcall	.-602    	; 0x50e <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:699
    }
    TIM::Timeout_Stop();
     768:	e0 99       	sbic	0x1c, 0	; 28
     76a:	0f c0       	rjmp	.+30     	; 0x78a <UPDI::updi_activate(bool)+0xc8>
     76c:	e7 de       	rcall	.-562    	; 0x53c <UPDI::enter_updi(bool) [clone .part.12]>
_ZN4UPDI13updi_activateEb():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:701
  }
  return bit_is_set(UPDI_CONTROL, UPDI_PROG_bp);
     76e:	81 11       	cpse	r24, r1
     770:	0c c0       	rjmp	.+24     	; 0x78a <UPDI::updi_activate(bool)+0xc8>
     772:	f8 dd       	rcall	.-1040   	; 0x364 <TIM::Timeout_Stop()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:702
}
     774:	ae cf       	rjmp	.-164    	; 0x6d2 <UPDI::updi_activate(bool)+0x10>
     776:	8c b3       	in	r24, 0x1c	; 28
     778:	86 95       	lsr	r24
     77a:	81 70       	andi	r24, 0x01	; 1
     77c:	0f 90       	pop	r0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:584
      /* restart target : change mode */
      if (!updi_reset(true) || !updi_reset(false)) return false;
      loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
    }
    else
      BREAK();
     77e:	0f 90       	pop	r0
     780:	df 91       	pop	r29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:664
/******************************
 * Programming control starts *
 ******************************/

bool UPDI::enter_prog (void) {
  if (bit_is_clear(UPDI_CONTROL, UPDI_PROG_bp)) {
     782:	cf 91       	pop	r28
     784:	08 95       	ret
enter_updi():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:665
    loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
     786:	a1 dd       	rcall	.-1214   	; 0x2ca <UPDI::BREAK()>
     788:	ef cf       	rjmp	.-34     	; 0x768 <UPDI::updi_activate(bool)+0xa6>
enter_prog():
     78a:	e1 99       	sbic	0x1c, 1	; 28
     78c:	f2 cf       	rjmp	.-28     	; 0x772 <UPDI::updi_activate(bool)+0xb0>
     78e:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:666
    if (!(UPDI_LASTL & UPDI_SYS_NVMPROG)) {
     790:	60 e0       	ldi	r22, 0x00	; 0
     792:	80 e2       	ldi	r24, 0x20	; 32
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:675
      }
      if (!updi_reset(true) || !updi_reset(false)) return false;
      loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
      loop_until_sys_stat_is_set(UPDI_SYS_NVMPROG);
    }
    bit_set(UPDI_CONTROL, UPDI_INFO_bp);
     794:	bc de       	rcall	.-648    	; 0x50e <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:676
    bit_set(UPDI_CONTROL, UPDI_PROG_bp);
     796:	f3 9b       	sbis	0x1e, 3	; 30
     798:	03 c0       	rjmp	.+6      	; 0x7a0 <UPDI::updi_activate(bool)+0xde>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:667

bool UPDI::enter_prog (void) {
  if (bit_is_clear(UPDI_CONTROL, UPDI_PROG_bp)) {
    loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
    if (!(UPDI_LASTL & UPDI_SYS_NVMPROG)) {
      if (UPDI_LASTL & UPDI_SYS_LOCKSTATUS) return false;
     79a:	e0 9a       	sbi	0x1c, 0	; 28
     79c:	e1 9a       	sbi	0x1c, 1	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:297
  send_bytes(set_ptr, sizeof(set_ptr));
  return RECV();
}

bool UPDI::is_cs_stat (uint8_t code, uint8_t check) {
  return check == (get_cs_stat(code) & check);
     79e:	e9 cf       	rjmp	.-46     	; 0x772 <UPDI::updi_activate(bool)+0xb0>
     7a0:	f0 99       	sbic	0x1e, 0	; 30
     7a2:	e7 cf       	rjmp	.-50     	; 0x772 <UPDI::updi_activate(bool)+0xb0>
is_cs_stat():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:668
bool UPDI::enter_prog (void) {
  if (bit_is_clear(UPDI_CONTROL, UPDI_PROG_bp)) {
    loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
    if (!(UPDI_LASTL & UPDI_SYS_NVMPROG)) {
      if (UPDI_LASTL & UPDI_SYS_LOCKSTATUS) return false;
      if (!is_key_stat(UPDI_KEY_NVMPROG)) {
     7a4:	87 e0       	ldi	r24, 0x07	; 7
     7a6:	2a dd       	rcall	.-1452   	; 0x1fc <UPDI::get_cs_stat(unsigned char)>
enter_prog():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:671
        if (!set_nvmprog_key()) return false;
      }
      if (!updi_reset(true) || !updi_reset(false)) return false;
     7a8:	84 ff       	sbrs	r24, 4
     7aa:	0f c0       	rjmp	.+30     	; 0x7ca <UPDI::updi_activate(bool)+0x108>
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	ae dd       	rcall	.-1188   	; 0x30c <UPDI::updi_reset(bool)>
     7b0:	88 23       	and	r24, r24
     7b2:	f9 f2       	breq	.-66     	; 0x772 <UPDI::updi_activate(bool)+0xb0>
     7b4:	80 e0       	ldi	r24, 0x00	; 0
     7b6:	aa dd       	rcall	.-1196   	; 0x30c <UPDI::updi_reset(bool)>
     7b8:	88 23       	and	r24, r24
     7ba:	d9 f2       	breq	.-74     	; 0x772 <UPDI::updi_activate(bool)+0xb0>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:672
      loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
     7bc:	70 e0       	ldi	r23, 0x00	; 0
     7be:	60 e0       	ldi	r22, 0x00	; 0
     7c0:	80 e2       	ldi	r24, 0x20	; 32
     7c2:	a5 de       	rcall	.-694    	; 0x50e <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
     7c4:	88 e0       	ldi	r24, 0x08	; 8
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:673
      loop_until_sys_stat_is_set(UPDI_SYS_NVMPROG);
     7c6:	8b de       	rcall	.-746    	; 0x4de <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.23]>
     7c8:	e8 cf       	rjmp	.-48     	; 0x79a <UPDI::updi_activate(bool)+0xd8>
     7ca:	7f de       	rcall	.-770    	; 0x4ca <UPDI::set_nvmprog_key()>
     7cc:	81 11       	cpse	r24, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:669
  if (bit_is_clear(UPDI_CONTROL, UPDI_PROG_bp)) {
    loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
    if (!(UPDI_LASTL & UPDI_SYS_NVMPROG)) {
      if (UPDI_LASTL & UPDI_SYS_LOCKSTATUS) return false;
      if (!is_key_stat(UPDI_KEY_NVMPROG)) {
        if (!set_nvmprog_key()) return false;
     7ce:	ee cf       	rjmp	.-36     	; 0x7ac <UPDI::updi_activate(bool)+0xea>
     7d0:	d0 cf       	rjmp	.-96     	; 0x772 <UPDI::updi_activate(bool)+0xb0>

000007d2 <UPDI::runtime(unsigned char)>:
_ZN4UPDI7runtimeEh():
     7d2:	af 92       	push	r10
     7d4:	bf 92       	push	r11
     7d6:	cf 92       	push	r12
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:708

/************************
 * UPDI control process *
 ************************/

bool UPDI::runtime (uint8_t updi_cmd) {
     7d8:	df 92       	push	r13
     7da:	ef 92       	push	r14
     7dc:	ff 92       	push	r15
     7de:	0f 93       	push	r16
     7e0:	1f 93       	push	r17
     7e2:	cf 93       	push	r28
     7e4:	df 93       	push	r29
     7e6:	cd b7       	in	r28, 0x3d	; 61
     7e8:	de b7       	in	r29, 0x3e	; 62
     7ea:	26 97       	sbiw	r28, 0x06	; 6
     7ec:	cd bf       	out	0x3d, r28	; 61
     7ee:	de bf       	out	0x3e, r29	; 62
     7f0:	8e 83       	std	Y+6, r24	; 0x06
     7f2:	1d 82       	std	Y+5, r1	; 0x05
     7f4:	86 e4       	ldi	r24, 0x46	; 70
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:709
  volatile bool _result = false;
     7f6:	98 e3       	ldi	r25, 0x38	; 56
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:710
  if (setjmp(TIM::CONTEXT) == 0) {
     7f8:	5e d6       	rcall	.+3260   	; 0x14b6 <setjmp>
     7fa:	89 2b       	or	r24, r25
     7fc:	09 f0       	breq	.+2      	; 0x800 <__DATA_REGION_LENGTH__>
     7fe:	f1 c0       	rjmp	.+482    	; 0x9e2 <__DATA_REGION_LENGTH__+0x1e2>
Timeout_Start():
     800:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
     802:	f8 94       	cli
Timeout_Start():
     804:	10 92 8a 0a 	sts	0x0A8A, r1	; 0x800a8a <__RODATA_PM_OFFSET__+0x7f8a8a>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     808:	10 92 8b 0a 	sts	0x0A8B, r1	; 0x800a8b <__RODATA_PM_OFFSET__+0x7f8a8b>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:107
 * Timeout control
 */

void TIM::Timeout_Start (uint16_t _ms) {
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    TCB0_CNT = 0;
     80c:	28 ec       	ldi	r18, 0xC8	; 200
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	20 93 8c 0a 	sts	0x0A8C, r18	; 0x800a8c <__RODATA_PM_OFFSET__+0x7f8a8c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:108
    TCB0_CCMP = _ms >> 2;
     814:	30 93 8d 0a 	sts	0x0A8D, r19	; 0x800a8d <__RODATA_PM_OFFSET__+0x7f8a8d>
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	80 93 85 0a 	sts	0x0A85, r24	; 0x800a85 <__RODATA_PM_OFFSET__+0x7f8a85>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:109
    TCB0_INTCTRL = TCB_CAPT_bm;
     81e:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__RODATA_PM_OFFSET__+0x7f8a86>
     822:	8f e0       	ldi	r24, 0x0F	; 15
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:110
    TCB0_INTFLAGS = TCB_CAPT_bm;
     824:	80 93 80 0a 	sts	0x0A80, r24	; 0x800a80 <__RODATA_PM_OFFSET__+0x7f8a80>
__iRestore():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:111
    TCB0_CTRLA = TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
     828:	9f bf       	out	0x3f, r25	; 63
_ZN4UPDI7runtimeEh():
     82a:	8e 81       	ldd	r24, Y+6	; 0x06
     82c:	83 30       	cpi	r24, 0x03	; 3
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     82e:	09 f4       	brne	.+2      	; 0x832 <__DATA_REGION_LENGTH__+0x32>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:712
    TIM::Timeout_Start(800);
    switch (updi_cmd) {
     830:	1f c2       	rjmp	.+1086   	; 0xc70 <__DATA_REGION_LENGTH__+0x470>
     832:	84 30       	cpi	r24, 0x04	; 4
     834:	09 f4       	brne	.+2      	; 0x838 <__DATA_REGION_LENGTH__+0x38>
     836:	68 c2       	rjmp	.+1232   	; 0xd08 <__DATA_REGION_LENGTH__+0x508>
write_memory():
     838:	ec e8       	ldi	r30, 0x8C	; 140
     83a:	f8 e3       	ldi	r31, 0x38	; 56
_ZN4UPDI7runtimeEh():
     83c:	82 30       	cpi	r24, 0x02	; 2
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:275
/******************
 * NVM write core *
 ******************/

bool NVM::write_memory (void) {
  uint8_t mem_type = JTAG2::packet.body[JTAG2::MEM_TYPE];
     83e:	09 f4       	brne	.+2      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
     840:	70 c0       	rjmp	.+224    	; 0x922 <__DATA_REGION_LENGTH__+0x122>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:712
     842:	22 85       	ldd	r18, Z+10	; 0x0a
     844:	33 85       	ldd	r19, Z+11	; 0x0b
     846:	66 85       	ldd	r22, Z+14	; 0x0e
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:714
      case UPDI_CMD_READ_MEMORY : {
        size_t byte_count = _CAPS16(JTAG2::packet.body[JTAG2::DATA_LENGTH])->word;
     848:	77 85       	ldd	r23, Z+15	; 0x0f
     84a:	80 89       	ldd	r24, Z+16	; 0x10
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:715
        uint32_t start_addr = _CAPS32(JTAG2::packet.body[JTAG2::DATA_ADDRESS])->dword;
     84c:	91 89       	ldd	r25, Z+17	; 0x11
read_memory():
     84e:	42 e8       	ldi	r20, 0x82	; 130
     850:	40 87       	std	Z+8, r20	; 0x08
     852:	a9 01       	movw	r20, r18
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:227
/***********************
 * Memory reading core *
 ***********************/

bool NVM::read_memory (uint32_t start_addr, size_t byte_count) {
  JTAG2::packet.body[JTAG2::MESSAGE_ID] = JTAG2::RSP_MEMORY;
     854:	41 50       	subi	r20, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:231
  uint8_t *data = &JTAG2::packet.body[JTAG2::RSP_DATA];

  /* Reads from 1 to 256 bytes and even bytes 258 to 512 are allowed */
  if (byte_count == 0 || byte_count > 512 || (byte_count > 256 && byte_count & 1)) {
     856:	51 09       	sbc	r21, r1
     858:	41 15       	cp	r20, r1
     85a:	e2 e0       	ldi	r30, 0x02	; 2
     85c:	5e 07       	cpc	r21, r30
     85e:	30 f4       	brcc	.+12     	; 0x86c <__DATA_REGION_LENGTH__+0x6c>
     860:	21 30       	cpi	r18, 0x01	; 1
     862:	f1 e0       	ldi	r31, 0x01	; 1
     864:	3f 07       	cpc	r19, r31
     866:	40 f0       	brcs	.+16     	; 0x878 <__DATA_REGION_LENGTH__+0x78>
     868:	20 ff       	sbrs	r18, 0
     86a:	06 c0       	rjmp	.+12     	; 0x878 <__DATA_REGION_LENGTH__+0x78>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:232
    set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
     86c:	83 ea       	ldi	r24, 0xA3	; 163
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	9e dd       	rcall	.-1220   	; 0x3ae <JTAG2::set_response(JTAG2::jtag_response_e)>
_ZN4UPDI7runtimeEh():
     872:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:244
    #ifdef ENABLE_ADDFEATS_LOCK_SIG
    if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_PROG_bp)
      && JTAG2::packet.body[JTAG2::MEM_TYPE] == JTAG2::MTYPE_SIGN_JTAG) {
      /* Signature reading branches to special processing */
      JTAG2::packet.body[JTAG2::RSP_DATA] = JTAG2::updi_desc.signature[(uint8_t)start_addr & 3];
      return true;
     874:	8d 83       	std	Y+5, r24	; 0x05
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:730
          _result = chip_erase();
        }
        break;
      }
      case UPDI_CMD_GO : {
        _result = Target_Reset(true) && Target_Reset(false);
     876:	b5 c0       	rjmp	.+362    	; 0x9e2 <__DATA_REGION_LENGTH__+0x1e2>
read_memory():
     878:	ac e8       	ldi	r26, 0x8C	; 140
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:235
  /* Reads from 1 to 256 bytes and even bytes 258 to 512 are allowed */
  if (byte_count == 0 || byte_count > 512 || (byte_count > 256 && byte_count & 1)) {
    set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
    return true;
  }
  JTAG2::packet.size_word[0] = byte_count + 1;
     87a:	b8 e3       	ldi	r27, 0x38	; 56
     87c:	f9 01       	movw	r30, r18
     87e:	31 96       	adiw	r30, 0x01	; 1
     880:	13 96       	adiw	r26, 0x03	; 3
     882:	ed 93       	st	X+, r30
     884:	fc 93       	st	X, r31
     886:	14 97       	sbiw	r26, 0x04	; 4
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:238

  /* Reading only 1 byte may be special */
  if (byte_count == 1) {
     888:	21 30       	cpi	r18, 0x01	; 1
     88a:	31 05       	cpc	r19, r1
     88c:	81 f4       	brne	.+32     	; 0x8ae <__DATA_REGION_LENGTH__+0xae>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:241
    #ifdef ENABLE_ADDFEATS_LOCK_SIG
    if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_PROG_bp)
      && JTAG2::packet.body[JTAG2::MEM_TYPE] == JTAG2::MTYPE_SIGN_JTAG) {
     88e:	e1 99       	sbic	0x1c, 1	; 28
     890:	0e c0       	rjmp	.+28     	; 0x8ae <__DATA_REGION_LENGTH__+0xae>
     892:	19 96       	adiw	r26, 0x09	; 9
     894:	ec 91       	ld	r30, X
     896:	19 97       	sbiw	r26, 0x09	; 9
     898:	e4 3b       	cpi	r30, 0xB4	; 180
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:243
      /* Signature reading branches to special processing */
      JTAG2::packet.body[JTAG2::RSP_DATA] = JTAG2::updi_desc.signature[(uint8_t)start_addr & 3];
     89a:	49 f4       	brne	.+18     	; 0x8ae <__DATA_REGION_LENGTH__+0xae>
     89c:	63 70       	andi	r22, 0x03	; 3
     89e:	e6 2f       	mov	r30, r22
     8a0:	f0 e0       	ldi	r31, 0x00	; 0
     8a2:	ee 59       	subi	r30, 0x9E	; 158
     8a4:	f7 4c       	sbci	r31, 0xC7	; 199
     8a6:	87 81       	ldd	r24, Z+7	; 0x07
     8a8:	19 96       	adiw	r26, 0x09	; 9
     8aa:	8c 93       	st	X, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:258
      return true;
    }
    #endif
  }

  if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_PROG_bp)) {
     8ac:	e2 cf       	rjmp	.-60     	; 0x872 <__DATA_REGION_LENGTH__+0x72>
     8ae:	e1 99       	sbic	0x1c, 1	; 28
     8b0:	08 c0       	rjmp	.+16     	; 0x8c2 <__DATA_REGION_LENGTH__+0xc2>
     8b2:	e5 e9       	ldi	r30, 0x95	; 149
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:260
    /* A normal read when the device is locked returns a dummy. */
    do { *data++ = 0xFF; } while (--byte_count);
     8b4:	f8 e3       	ldi	r31, 0x38	; 56
     8b6:	8f ef       	ldi	r24, 0xFF	; 255
     8b8:	81 93       	st	Z+, r24
     8ba:	21 50       	subi	r18, 0x01	; 1
     8bc:	31 09       	sbc	r19, r1
     8be:	e1 f7       	brne	.-8      	; 0x8b8 <__DATA_REGION_LENGTH__+0xb8>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:264
    return true;
  }

  if ((byte_count - 1) >> 8)
     8c0:	d8 cf       	rjmp	.-80     	; 0x872 <__DATA_REGION_LENGTH__+0x72>
     8c2:	45 2f       	mov	r20, r21
     8c4:	55 27       	eor	r21, r21
     8c6:	45 2b       	or	r20, r21
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:276
  do { *data++ = RECV(); } while (--len);
  return UPDI_LASTH == 0;
}

bool UPDI::lds16 (uint32_t addr, uint8_t *data, size_t len) {
  uint8_t repeat = (uint16_t)len >> 1;
     8c8:	e1 f0       	breq	.+56     	; 0x902 <__DATA_REGION_LENGTH__+0x102>
lds16():
     8ca:	36 95       	lsr	r19
     8cc:	27 95       	ror	r18
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:277
  if (!send_repeat_header(addr, UPDI_LD|UPDI_DATA2, repeat)) return false;
     8ce:	f2 2e       	mov	r15, r18
     8d0:	41 e2       	ldi	r20, 0x21	; 33
     8d2:	bc dc       	rcall	.-1672   	; 0x24c <UPDI::send_repeat_header(unsigned long, unsigned char, unsigned char)>
     8d4:	0c e8       	ldi	r16, 0x8C	; 140
     8d6:	18 e3       	ldi	r17, 0x38	; 56
     8d8:	81 11       	cpse	r24, r1
     8da:	02 c0       	rjmp	.+4      	; 0x8e0 <__DATA_REGION_LENGTH__+0xe0>
lds8():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:272
}

bool UPDI::lds8 (uint32_t addr, uint8_t *data, uint8_t len) {
  if (!send_repeat_header(addr, UPDI_LD|UPDI_DATA1, len)) return false;
  do { *data++ = RECV(); } while (--len);
  return UPDI_LASTH == 0;
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	ca cf       	rjmp	.-108    	; 0x874 <__DATA_REGION_LENGTH__+0x74>
lds16():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:279

bool UPDI::lds16 (uint32_t addr, uint8_t *data, size_t len) {
  uint8_t repeat = (uint16_t)len >> 1;
  if (!send_repeat_header(addr, UPDI_LD|UPDI_DATA2, repeat)) return false;
  do {
    *data++ = RECV();
     8e0:	14 dc       	rcall	.-2008   	; 0x10a <UPDI::RECV()>
     8e2:	f8 01       	movw	r30, r16
     8e4:	81 87       	std	Z+9, r24	; 0x09
     8e6:	11 dc       	rcall	.-2014   	; 0x10a <UPDI::RECV()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:280
    *data++ = RECV();
     8e8:	f8 01       	movw	r30, r16
     8ea:	82 87       	std	Z+10, r24	; 0x0a
     8ec:	fa 94       	dec	r15
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:281
  } while (--repeat);
     8ee:	0e 5f       	subi	r16, 0xFE	; 254
     8f0:	1f 4f       	sbci	r17, 0xFF	; 255
     8f2:	f1 10       	cpse	r15, r1
     8f4:	f5 cf       	rjmp	.-22     	; 0x8e0 <__DATA_REGION_LENGTH__+0xe0>
lds8():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:272
}

bool UPDI::lds8 (uint32_t addr, uint8_t *data, uint8_t len) {
  if (!send_repeat_header(addr, UPDI_LD|UPDI_DATA1, len)) return false;
  do { *data++ = RECV(); } while (--len);
  return UPDI_LASTH == 0;
     8f6:	9f b3       	in	r25, 0x1f	; 31
     8f8:	81 e0       	ldi	r24, 0x01	; 1
     8fa:	99 23       	and	r25, r25
     8fc:	09 f4       	brne	.+2      	; 0x900 <__DATA_REGION_LENGTH__+0x100>
     8fe:	ba cf       	rjmp	.-140    	; 0x874 <__DATA_REGION_LENGTH__+0x74>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:267
    return UPDI::lds16(start_addr, data, byte_count);
  else
    return UPDI::lds8(start_addr, data, byte_count);
     900:	ed cf       	rjmp	.-38     	; 0x8dc <__DATA_REGION_LENGTH__+0xdc>
read_memory():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:270
  while (!send_bytes(set_ptr, sizeof(set_ptr) - 1)) BREAK();
  return RECV();
}

bool UPDI::lds8 (uint32_t addr, uint8_t *data, uint8_t len) {
  if (!send_repeat_header(addr, UPDI_LD|UPDI_DATA1, len)) return false;
     902:	12 2f       	mov	r17, r18
lds8():
     904:	40 e2       	ldi	r20, 0x20	; 32
     906:	a2 dc       	rcall	.-1724   	; 0x24c <UPDI::send_repeat_header(unsigned long, unsigned char, unsigned char)>
     908:	88 23       	and	r24, r24
     90a:	41 f3       	breq	.-48     	; 0x8dc <__DATA_REGION_LENGTH__+0xdc>
     90c:	65 e9       	ldi	r22, 0x95	; 149
     90e:	e6 2e       	mov	r14, r22
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:271
  do { *data++ = RECV(); } while (--len);
     910:	68 e3       	ldi	r22, 0x38	; 56
     912:	f6 2e       	mov	r15, r22
     914:	fa db       	rcall	.-2060   	; 0x10a <UPDI::RECV()>
     916:	f7 01       	movw	r30, r14
     918:	81 93       	st	Z+, r24
     91a:	7f 01       	movw	r14, r30
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:277
 ******************/

bool NVM::write_memory (void) {
  uint8_t mem_type = JTAG2::packet.body[JTAG2::MEM_TYPE];
  uint8_t *data = &JTAG2::packet.body[JTAG2::DATA_START];
  size_t byte_count = _CAPS16(JTAG2::packet.body[JTAG2::DATA_LENGTH])->word;
     91c:	11 50       	subi	r17, 0x01	; 1
     91e:	d1 f7       	brne	.-12     	; 0x914 <__DATA_REGION_LENGTH__+0x114>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:278
  uint32_t start_addr = _CAPS32(JTAG2::packet.body[JTAG2::DATA_ADDRESS])->dword;
     920:	ea cf       	rjmp	.-44     	; 0x8f6 <__DATA_REGION_LENGTH__+0xf6>
write_memory():
     922:	81 85       	ldd	r24, Z+9	; 0x09
     924:	02 85       	ldd	r16, Z+10	; 0x0a
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:281

  /* Address specification outside the processing range is considered an IO area operation */
  if (start_addr >> 24) {
     926:	13 85       	ldd	r17, Z+11	; 0x0b
     928:	c6 84       	ldd	r12, Z+14	; 0x0e
     92a:	d7 84       	ldd	r13, Z+15	; 0x0f
     92c:	e0 88       	ldd	r14, Z+16	; 0x10
     92e:	f1 88       	ldd	r15, Z+17	; 0x11
     930:	4f 2d       	mov	r20, r15
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:282
    start_addr &= 0xFFFF;
     932:	55 27       	eor	r21, r21
     934:	66 27       	eor	r22, r22
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:283
    mem_type = JTAG2::MTYPE_SRAM;
     936:	77 27       	eor	r23, r23
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:289
  }

  /* Can only be written to USERROW on locked devices */
  /* This write is only allowed in multiples of 32 bytes */
  if (bit_is_set(UPDI_CONTROL, UPDI::UPDI_INFO_bp)
   && mem_type == JTAG2::MTYPE_XMEGA_USERSIG) // 0xC5
     938:	45 2b       	or	r20, r21
     93a:	46 2b       	or	r20, r22
     93c:	47 2b       	or	r20, r23
     93e:	19 f0       	breq	.+6      	; 0x946 <__DATA_REGION_LENGTH__+0x146>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:471
 * USERROW region writing *
 *****************************************/

bool UPDI::write_userrow (const uint32_t start_addr, uint8_t *data, const size_t byte_count) {
  /* Only data lengths that are multiples of 32 bytes are allowed. */
  if (byte_count == 0 || byte_count & 0x1F) {
     940:	ee 24       	eor	r14, r14
     942:	ff 24       	eor	r15, r15
_ZN4UPDI7runtimeEh():
     944:	80 e2       	ldi	r24, 0x20	; 32
write_memory():
     946:	e0 9b       	sbis	0x1c, 0	; 28
     948:	62 c0       	rjmp	.+196    	; 0xa0e <__DATA_REGION_LENGTH__+0x20e>
     94a:	85 3c       	cpi	r24, 0xC5	; 197
     94c:	09 f0       	breq	.+2      	; 0x950 <__DATA_REGION_LENGTH__+0x150>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:472
    JTAG2::packet.body[JTAG2::MESSAGE_ID] = JTAG2::RSP_ILLEGAL_MEMORY_RANGE;
     94e:	5f c0       	rjmp	.+190    	; 0xa0e <__DATA_REGION_LENGTH__+0x20e>
write_userrow():
     950:	01 15       	cp	r16, r1
     952:	11 05       	cpc	r17, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:326
  }

  /* Other writes are allowed from 1 to 256 bytes */
  if (byte_count == 0 || byte_count > 256) {
    set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
    return true;
     954:	29 f0       	breq	.+10     	; 0x960 <__DATA_REGION_LENGTH__+0x160>
     956:	c8 01       	movw	r24, r16
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:405
  return loop_until_key_stat_is_set(UPDI_KEY_CHIPERASE);
}

/* __attribute__((optimize("O0"))) */
bool UPDI::set_urowwrite_key (void) {
  if (!send_bytes(urowwrite_key, sizeof(urowwrite_key))) return false;
     958:	8f 71       	andi	r24, 0x1F	; 31
     95a:	99 27       	eor	r25, r25
     95c:	89 2b       	or	r24, r25
     95e:	29 f0       	breq	.+10     	; 0x96a <__DATA_REGION_LENGTH__+0x16a>
     960:	83 ea       	ldi	r24, 0xA3	; 163
     962:	80 93 94 38 	sts	0x3894, r24	; 0x803894 <JTAG2::packet+0x8>
_ZN4UPDI7runtimeEh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:532
  if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) {
    HV_Pulse();
  }

  /* Transition to CHIPERASE mode by system reset */
  if (!set_erase_key()) return false;
     966:	11 e0       	ldi	r17, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:406
}

/* __attribute__((optimize("O0"))) */
bool UPDI::set_urowwrite_key (void) {
  if (!send_bytes(urowwrite_key, sizeof(urowwrite_key))) return false;
  return loop_until_key_stat_is_set(UPDI_KEY_UROWWRITE);
     968:	3b c0       	rjmp	.+118    	; 0x9e0 <__DATA_REGION_LENGTH__+0x1e0>
set_urowwrite_key():
     96a:	6a e0       	ldi	r22, 0x0A	; 10
     96c:	80 e2       	ldi	r24, 0x20	; 32
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:477
    JTAG2::packet.body[JTAG2::MESSAGE_ID] = JTAG2::RSP_ILLEGAL_MEMORY_RANGE;
    return true;
  }

  /* Send the authentication key */
  if (!set_urowwrite_key()) return false;
     96e:	98 e3       	ldi	r25, 0x38	; 56
     970:	f2 db       	rcall	.-2076   	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:480

  /* Transition to USERROW mode by system reset */
  if (!updi_reset(true) || !updi_reset(false)) return false;
     972:	81 11       	cpse	r24, r1
     974:	02 c0       	rjmp	.+4      	; 0x97a <__DATA_REGION_LENGTH__+0x17a>
_ZN4UPDI7runtimeEh():
     976:	10 e0       	ldi	r17, 0x00	; 0
     978:	33 c0       	rjmp	.+102    	; 0x9e0 <__DATA_REGION_LENGTH__+0x1e0>
set_urowwrite_key():
     97a:	80 e2       	ldi	r24, 0x20	; 32
     97c:	8e dd       	rcall	.-1252   	; 0x49a <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.20]>
write_userrow():
     97e:	88 23       	and	r24, r24
     980:	d1 f3       	breq	.-12     	; 0x976 <__DATA_REGION_LENGTH__+0x176>
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	c3 dc       	rcall	.-1658   	; 0x30c <UPDI::updi_reset(bool)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:483

  /* Wait for system reset to finish */
  loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
     986:	88 23       	and	r24, r24
     988:	b1 f3       	breq	.-20     	; 0x976 <__DATA_REGION_LENGTH__+0x176>
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	bf dc       	rcall	.-1666   	; 0x30c <UPDI::updi_reset(bool)>
     98e:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:486

  /* Make sure you are in USERROW mode */
  loop_until_sys_stat_is_set(UPDI_SYS_UROWPROG);
     990:	91 f3       	breq	.-28     	; 0x976 <__DATA_REGION_LENGTH__+0x176>
     992:	70 e0       	ldi	r23, 0x00	; 0
     994:	60 e0       	ldi	r22, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:489

  /* Write data to buffer memory */
  sts8rsd(start_addr, data, byte_count);
     996:	80 e2       	ldi	r24, 0x20	; 32
     998:	ba dd       	rcall	.-1164   	; 0x50e <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
     99a:	84 e0       	ldi	r24, 0x04	; 4
     99c:	a0 dd       	rcall	.-1216   	; 0x4de <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.23]>
     99e:	40 2f       	mov	r20, r16
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:493
  /* Ignore any errors here */

  /* After writing the memory, write the end flag */
  set_cs_stat(UPDI_CS_ASI_SYS_CTRLA, UPDI_SET_UROWDONE | UPDI_SET_CLKREQ);
     9a0:	c7 01       	movw	r24, r14
     9a2:	b6 01       	movw	r22, r12
     9a4:	f1 db       	rcall	.-2078   	; 0x188 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.17]>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:498

  /* Wait for data to be transferred to USERROW */
  /* AVR_Dx requires at least 100 * 50us wait loops */
  /* AVR_Ex may not end forever, so give up midway */
  loop_until_sys_stat_is_clear(UPDI_SYS_UROWPROG, 200);
     9a6:	63 e0       	ldi	r22, 0x03	; 3
     9a8:	8a e0       	ldi	r24, 0x0A	; 10
     9aa:	e6 db       	rcall	.-2100   	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>
     9ac:	68 ec       	ldi	r22, 0xC8	; 200
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:502
  /* Ignore any errors here */

  /* Step completed */
  set_cs_stat(UPDI_CS_ASI_KEY_STATUS, UPDI_KEY_UROWWRITE);
     9ae:	70 e0       	ldi	r23, 0x00	; 0
     9b0:	84 e0       	ldi	r24, 0x04	; 4
     9b2:	ad dd       	rcall	.-1190   	; 0x50e <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
     9b4:	60 e2       	ldi	r22, 0x20	; 32
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:505

  /* If previously in program mode, send unlock key */
  if (bit_is_set(UPDI_CONTROL, UPDI_PROG_bp)) {
     9b6:	87 e0       	ldi	r24, 0x07	; 7
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:510
    set_nvmprog_key();
  }

  /* Exit USERROW mode */
  if (!updi_reset(true) || !updi_reset(false)) return false;
     9b8:	df db       	rcall	.-2114   	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>
     9ba:	e1 99       	sbic	0x1c, 1	; 28
     9bc:	26 c0       	rjmp	.+76     	; 0xa0a <__DATA_REGION_LENGTH__+0x20a>
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	a5 dc       	rcall	.-1718   	; 0x30c <UPDI::updi_reset(bool)>
     9c2:	88 23       	and	r24, r24
     9c4:	c1 f2       	breq	.-80     	; 0x976 <__DATA_REGION_LENGTH__+0x176>
     9c6:	80 e0       	ldi	r24, 0x00	; 0
     9c8:	a1 dc       	rcall	.-1726   	; 0x30c <UPDI::updi_reset(bool)>
     9ca:	18 2f       	mov	r17, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:511
  loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
     9cc:	88 23       	and	r24, r24
     9ce:	99 f2       	breq	.-90     	; 0x976 <__DATA_REGION_LENGTH__+0x176>
     9d0:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:514

  /* Make sure you are in program mode if necessary */
  if (bit_is_set(UPDI_CONTROL, UPDI_PROG_bp)) {
     9d2:	60 e0       	ldi	r22, 0x00	; 0
     9d4:	80 e2       	ldi	r24, 0x20	; 32
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:515
    loop_until_sys_stat_is_set(UPDI_SYS_NVMPROG);
     9d6:	9b dd       	rcall	.-1226   	; 0x50e <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
     9d8:	e1 9b       	sbis	0x1c, 1	; 28
     9da:	02 c0       	rjmp	.+4      	; 0x9e0 <__DATA_REGION_LENGTH__+0x1e0>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:725
        _result = NVM::write_memory();
        break;
      }
      case UPDI_CMD_ERASE : {
        if (JTAG2::packet.body[JTAG2::MEM_TYPE] == JTAG2::XMEGA_ERASE_CHIP) {
          _result = chip_erase();
     9dc:	88 e0       	ldi	r24, 0x08	; 8
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:735
        _result = Target_Reset(true) && Target_Reset(false);
        break;
      }
    }
  }
  TIM::Timeout_Stop();
     9de:	7f dd       	rcall	.-1282   	; 0x4de <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.23]>
_ZN4UPDI7runtimeEh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:736
  UPDI_USART.CTRLB = UPDI_USART_ON;
     9e0:	1d 83       	std	Y+5, r17	; 0x05
     9e2:	c0 dc       	rcall	.-1664   	; 0x364 <TIM::Timeout_Stop()>
     9e4:	88 ec       	ldi	r24, 0xC8	; 200
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:737
  wdt_reset();
     9e6:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__RODATA_PM_OFFSET__+0x7f8806>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:739
  return _result;
}
     9ea:	a8 95       	wdr
     9ec:	8d 81       	ldd	r24, Y+5	; 0x05
     9ee:	26 96       	adiw	r28, 0x06	; 6
     9f0:	cd bf       	out	0x3d, r28	; 61
     9f2:	de bf       	out	0x3e, r29	; 62
     9f4:	df 91       	pop	r29
     9f6:	cf 91       	pop	r28
     9f8:	1f 91       	pop	r17
     9fa:	0f 91       	pop	r16
     9fc:	ff 90       	pop	r15
     9fe:	ef 90       	pop	r14
     a00:	df 90       	pop	r13
     a02:	cf 90       	pop	r12
     a04:	bf 90       	pop	r11
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:506
  /* Step completed */
  set_cs_stat(UPDI_CS_ASI_KEY_STATUS, UPDI_KEY_UROWWRITE);

  /* If previously in program mode, send unlock key */
  if (bit_is_set(UPDI_CONTROL, UPDI_PROG_bp)) {
    set_nvmprog_key();
     a06:	af 90       	pop	r10
     a08:	08 95       	ret
write_userrow():
     a0a:	5f dd       	rcall	.-1346   	; 0x4ca <UPDI::set_nvmprog_key()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:293
  if (bit_is_set(UPDI_CONTROL, UPDI::UPDI_INFO_bp)
   && mem_type == JTAG2::MTYPE_XMEGA_USERSIG) // 0xC5
    return UPDI::write_userrow(start_addr, data, byte_count);

  /* From this point on, only program mode is allowed. */
  if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_PROG_bp)) return false;
     a0c:	d8 cf       	rjmp	.-80     	; 0x9be <__DATA_REGION_LENGTH__+0x1be>
write_memory():
     a0e:	e1 9b       	sbis	0x1c, 1	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:296

  /* About flash regions */
  switch (mem_type) {
     a10:	b2 cf       	rjmp	.-156    	; 0x976 <__DATA_REGION_LENGTH__+0x176>
     a12:	80 3b       	cpi	r24, 0xB0	; 176
     a14:	39 f0       	breq	.+14     	; 0xa24 <__DATA_REGION_LENGTH__+0x224>
     a16:	08 f4       	brcc	.+2      	; 0xa1a <__DATA_REGION_LENGTH__+0x21a>
     a18:	97 c0       	rjmp	.+302    	; 0xb48 <__DATA_REGION_LENGTH__+0x348>
     a1a:	90 e4       	ldi	r25, 0x40	; 64
     a1c:	98 0f       	add	r25, r24
     a1e:	92 30       	cpi	r25, 0x02	; 2
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:302
    case JTAG2::MTYPE_FLASH_PAGE :            // 0xB0
    case JTAG2::MTYPE_XMEGA_APP_FLASH :       // 0xC0
    case JTAG2::MTYPE_XMEGA_BOOT_FLASH : {    // 0xC1

      /* Instructions with mismatched page sizes are rejected */
      if (!check_pagesize(JTAG2::updi_desc.flash_page_size, byte_count)) {
     a20:	08 f0       	brcs	.+2      	; 0xa24 <__DATA_REGION_LENGTH__+0x224>
     a22:	92 c0       	rjmp	.+292    	; 0xb48 <__DATA_REGION_LENGTH__+0x348>
     a24:	80 91 66 38 	lds	r24, 0x3866	; 0x803866 <JTAG2::updi_desc+0x4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:28

  bool write_fuse (uint16_t addr, uint8_t data);
  uint32_t before_address;

  bool check_pagesize (uint16_t seed, uint16_t test) {
    while (test != seed) {
     a28:	90 91 67 38 	lds	r25, 0x3867	; 0x803867 <JTAG2::updi_desc+0x5>
     a2c:	9c 01       	movw	r18, r24
check_pagesize():
     a2e:	02 17       	cp	r16, r18
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:29
      seed >>= 1;
     a30:	13 07       	cpc	r17, r19
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:30
      if (seed < 2) return false;
     a32:	09 f4       	brne	.+2      	; 0xa36 <__DATA_REGION_LENGTH__+0x236>
     a34:	71 c1       	rjmp	.+738    	; 0xd18 <__DATA_REGION_LENGTH__+0x518>
     a36:	36 95       	lsr	r19
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:304
    case JTAG2::MTYPE_XMEGA_BOOT_FLASH : {    // 0xC1

      /* Instructions with mismatched page sizes are rejected */
      if (!check_pagesize(JTAG2::updi_desc.flash_page_size, byte_count)) {
        /* Kill the process with a strong error */
        set_response(JTAG2::RSP_FAILED);
     a38:	27 95       	ror	r18
     a3a:	22 30       	cpi	r18, 0x02	; 2
     a3c:	31 05       	cpc	r19, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:88
    return nvm_ctrl_change(nvmcmd);
  }

  /* NVMCTRL version 3,5 */
  bool nvm_ctrl_v3 (uint8_t nvmcmd) {
    nvm_wait_v3();
     a3e:	b8 f7       	brcc	.-18     	; 0xa2e <__DATA_REGION_LENGTH__+0x22e>
write_memory():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:89
    return nvm_ctrl_change(nvmcmd);
     a40:	80 ea       	ldi	r24, 0xA0	; 160
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:180
    }
    else if (!nvm_ctrl_v3(NVM_V3_CMD_FLPBCLR)) return false;
    nvm_wait_v3();

    if (byte_count == 1) UPDI::st8(start_addr, *data);
    else UPDI::sts8rsd(start_addr, data, byte_count);
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	8a c0       	rjmp	.+276    	; 0xb5a <__DATA_REGION_LENGTH__+0x35a>
nvm_ctrl_v3():
     a46:	17 de       	rcall	.-978    	; 0x676 <NVM::nvm_wait_v3()>
     a48:	8f e0       	ldi	r24, 0x0F	; 15
     a4a:	94 c1       	rjmp	.+808    	; 0xd74 <__DATA_REGION_LENGTH__+0x574>
write_flash_v3():
     a4c:	40 2f       	mov	r20, r16
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:316
        && ((JTAG2::updi_desc.flash_page_size - 1) & (uint16_t)start_addr) == 0;
      before_address = start_addr;

      if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp))
        return write_flash_v3(start_addr, data, byte_count, is_bound);
      else if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN2_bp))
     a4e:	c7 01       	movw	r24, r14
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:189

  bool write_flash_v2 (uint32_t start_addr, uint8_t *data, size_t byte_count, bool is_bound) {
    /* NVMCTRL version 2 or 4 */
    /* If the chip is not erased, erase the page. */
    /* However, only when the beginning of the page boundary is addressed */
    if (is_bound) {
     a50:	b6 01       	movw	r22, r12
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:82
    return true;
  }

  /* NVMCTRL version 2,4 */
  bool nvm_ctrl_v2 (uint8_t nvmcmd) {
    nvm_wait();
     a52:	9a db       	rcall	.-2252   	; 0x188 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.17]>
     a54:	9d c1       	rjmp	.+826    	; 0xd90 <__DATA_REGION_LENGTH__+0x590>
write_memory():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:83
    return nvm_ctrl_change(nvmcmd);
     a56:	ee 9b       	sbis	0x1d, 6	; 29
     a58:	62 c0       	rjmp	.+196    	; 0xb1e <__DATA_REGION_LENGTH__+0x31e>
write_flash_v2():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:193
    /* However, only when the beginning of the page boundary is addressed */
    if (is_bound) {
      if (!nvm_ctrl_v2(NVM_V2_CMD_FLPER)) return false;
      if (!UPDI::st8(start_addr, 0xFF)) return false;
    }
    if (!nvm_ctrl_v2(NVM_V2_CMD_FLWR)) return false;
     a5a:	81 11       	cpse	r24, r1
     a5c:	0f c0       	rjmp	.+30     	; 0xa7c <__DATA_REGION_LENGTH__+0x27c>
nvm_ctrl_v2():
     a5e:	19 de       	rcall	.-974    	; 0x692 <NVM::nvm_wait()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:196

    /* This version allows bulk writes of 512 bytes */
    if (byte_count == 1) UPDI::st8(start_addr, *data);
     a60:	82 e0       	ldi	r24, 0x02	; 2
     a62:	90 dc       	rcall	.-1760   	; 0x384 <NVM::nvm_ctrl_change(unsigned char)>
write_flash_v2():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:139
      set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
      return true;
    }
    if (!nvm_ctrl_v2(NVM_V2_CMD_EEERWR)) return false;

    if (byte_count == 1) UPDI::st8(start_addr, *data);
     a64:	88 23       	and	r24, r24
     a66:	09 f4       	brne	.+2      	; 0xa6a <__DATA_REGION_LENGTH__+0x26a>
     a68:	86 cf       	rjmp	.-244    	; 0x976 <__DATA_REGION_LENGTH__+0x176>
     a6a:	01 30       	cpi	r16, 0x01	; 1
     a6c:	11 05       	cpc	r17, r1
     a6e:	99 f4       	brne	.+38     	; 0xa96 <__DATA_REGION_LENGTH__+0x296>
write_eeprom_v2():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:82
    return true;
  }

  /* NVMCTRL version 2,4 */
  bool nvm_ctrl_v2 (uint8_t nvmcmd) {
    nvm_wait();
     a70:	40 91 9e 38 	lds	r20, 0x389E	; 0x80389e <JTAG2::packet+0x12>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:83
    return nvm_ctrl_change(nvmcmd);
     a74:	c7 01       	movw	r24, r14
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:190
  bool write_flash_v2 (uint32_t start_addr, uint8_t *data, size_t byte_count, bool is_bound) {
    /* NVMCTRL version 2 or 4 */
    /* If the chip is not erased, erase the page. */
    /* However, only when the beginning of the page boundary is addressed */
    if (is_bound) {
      if (!nvm_ctrl_v2(NVM_V2_CMD_FLPER)) return false;
     a76:	b6 01       	movw	r22, r12
     a78:	c9 db       	rcall	.-2158   	; 0x20c <UPDI::st8(unsigned long, unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:191
      if (!UPDI::st8(start_addr, 0xFF)) return false;
     a7a:	49 c0       	rjmp	.+146    	; 0xb0e <__DATA_REGION_LENGTH__+0x30e>
nvm_ctrl_v2():
     a7c:	0a de       	rcall	.-1004   	; 0x692 <NVM::nvm_wait()>
     a7e:	88 e0       	ldi	r24, 0x08	; 8
     a80:	81 dc       	rcall	.-1790   	; 0x384 <NVM::nvm_ctrl_change(unsigned char)>
write_flash_v2():
     a82:	88 23       	and	r24, r24
     a84:	09 f4       	brne	.+2      	; 0xa88 <__DATA_REGION_LENGTH__+0x288>
     a86:	77 cf       	rjmp	.-274    	; 0x976 <__DATA_REGION_LENGTH__+0x176>
     a88:	4f ef       	ldi	r20, 0xFF	; 255
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:197
    }
    if (!nvm_ctrl_v2(NVM_V2_CMD_FLWR)) return false;

    /* This version allows bulk writes of 512 bytes */
    if (byte_count == 1) UPDI::st8(start_addr, *data);
    else if ((byte_count - 1) >> 8) UPDI::sts16rsd(start_addr, data, byte_count);
     a8a:	c7 01       	movw	r24, r14
     a8c:	b6 01       	movw	r22, r12
     a8e:	be db       	rcall	.-2180   	; 0x20c <UPDI::st8(unsigned long, unsigned char)>
     a90:	81 11       	cpse	r24, r1
     a92:	e5 cf       	rjmp	.-54     	; 0xa5e <__DATA_REGION_LENGTH__+0x25e>
     a94:	70 cf       	rjmp	.-288    	; 0x976 <__DATA_REGION_LENGTH__+0x176>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:238
  if (!set_cs_ctra(UPDI_GTVAL)) return false;
  return true;
}

bool UPDI::sts16rsd (uint32_t addr, uint8_t *data, size_t len) {
  _CAPS32(_set_ptr_l[2])->dword = addr;
     a96:	c8 01       	movw	r24, r16
     a98:	01 97       	sbiw	r24, 0x01	; 1
     a9a:	89 2f       	mov	r24, r25
     a9c:	99 27       	eor	r25, r25
     a9e:	89 2b       	or	r24, r25
     aa0:	09 f4       	brne	.+2      	; 0xaa4 <__DATA_REGION_LENGTH__+0x2a4>
     aa2:	38 c0       	rjmp	.+112    	; 0xb14 <__DATA_REGION_LENGTH__+0x314>
sts16rsd():
     aa4:	c0 92 41 38 	sts	0x3841, r12	; 0x803841 <UPDI::_set_ptr_l+0x2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:239
  uint8_t repeat = len >> 1;
     aa8:	d0 92 42 38 	sts	0x3842, r13	; 0x803842 <UPDI::_set_ptr_l+0x3>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:240
  _set_repeat[2] = repeat - 1;
     aac:	e0 92 43 38 	sts	0x3843, r14	; 0x803843 <UPDI::_set_ptr_l+0x4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:241
  _set_repeat[4] = UPDI_PTR_INC|UPDI_ST|UPDI_DATA2;
     ab0:	f0 92 44 38 	sts	0x3844, r15	; 0x803844 <UPDI::_set_ptr_l+0x5>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:242
  if (!send_bytes(_set_ptr_l, sizeof(_set_ptr_l) - 1)) return false;
     ab4:	16 95       	lsr	r17
     ab6:	07 95       	ror	r16
     ab8:	f0 2e       	mov	r15, r16
     aba:	ea e3       	ldi	r30, 0x3A	; 58
     abc:	f8 e3       	ldi	r31, 0x38	; 56
     abe:	01 50       	subi	r16, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:243
  if (UPDI_ACK != RECV()) return false;
     ac0:	02 83       	std	Z+2, r16	; 0x02
     ac2:	85 e6       	ldi	r24, 0x65	; 101
     ac4:	84 83       	std	Z+4, r24	; 0x04
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:320
  set_ptr[2] = data;
  return send_bytes(set_ptr, sizeof(set_ptr));
}

bool UPDI::set_cs_ctra (uint8_t data) {
  return set_cs_stat(UPDI_CS_CTRLA, data);
     ac6:	65 e0       	ldi	r22, 0x05	; 5
     ac8:	8f e3       	ldi	r24, 0x3F	; 63
     aca:	98 e3       	ldi	r25, 0x38	; 56
     acc:	44 db       	rcall	.-2424   	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:244
  uint8_t repeat = len >> 1;
  _set_repeat[2] = repeat - 1;
  _set_repeat[4] = UPDI_PTR_INC|UPDI_ST|UPDI_DATA2;
  if (!send_bytes(_set_ptr_l, sizeof(_set_ptr_l) - 1)) return false;
  if (UPDI_ACK != RECV()) return false;
  if (!set_cs_ctra(UPDI_SET_RSD|UPDI_GTVAL_RSD)) return false;
     ace:	88 23       	and	r24, r24
     ad0:	f1 f0       	breq	.+60     	; 0xb0e <__DATA_REGION_LENGTH__+0x30e>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:245
  if (!send_bytes(_set_repeat, sizeof(_set_repeat))) return false;
     ad2:	1b db       	rcall	.-2506   	; 0x10a <UPDI::RECV()>
     ad4:	80 34       	cpi	r24, 0x40	; 64
     ad6:	d9 f4       	brne	.+54     	; 0xb0e <__DATA_REGION_LENGTH__+0x30e>
set_cs_ctra():
     ad8:	6e e0       	ldi	r22, 0x0E	; 14
     ada:	82 e0       	ldi	r24, 0x02	; 2
     adc:	4d db       	rcall	.-2406   	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>
sts16rsd():
     ade:	88 23       	and	r24, r24
     ae0:	b1 f0       	breq	.+44     	; 0xb0e <__DATA_REGION_LENGTH__+0x30e>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:247
  do {              /* Repeat word send */
    SEND(*data++);  /* Submission errors must be ignored */
     ae2:	65 e0       	ldi	r22, 0x05	; 5
     ae4:	8a e3       	ldi	r24, 0x3A	; 58
     ae6:	98 e3       	ldi	r25, 0x38	; 56
     ae8:	36 db       	rcall	.-2452   	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:248
    SEND(*data++);  /* Submission errors must be ignored */
     aea:	88 23       	and	r24, r24
     aec:	81 f0       	breq	.+32     	; 0xb0e <__DATA_REGION_LENGTH__+0x30e>
     aee:	0c e8       	ldi	r16, 0x8C	; 140
     af0:	18 e3       	ldi	r17, 0x38	; 56
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:249
  } while (--repeat);
     af2:	f8 01       	movw	r30, r16
     af4:	82 89       	ldd	r24, Z+18	; 0x12
     af6:	15 db       	rcall	.-2518   	; 0x122 <UPDI::SEND(unsigned char)>
     af8:	f8 01       	movw	r30, r16
     afa:	83 89       	ldd	r24, Z+19	; 0x13
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:320
  set_ptr[2] = data;
  return send_bytes(set_ptr, sizeof(set_ptr));
}

bool UPDI::set_cs_ctra (uint8_t data) {
  return set_cs_stat(UPDI_CS_CTRLA, data);
     afc:	12 db       	rcall	.-2524   	; 0x122 <UPDI::SEND(unsigned char)>
     afe:	fa 94       	dec	r15
     b00:	0e 5f       	subi	r16, 0xFE	; 254
     b02:	1f 4f       	sbci	r17, 0xFF	; 255
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:82
    return true;
  }

  /* NVMCTRL version 2,4 */
  bool nvm_ctrl_v2 (uint8_t nvmcmd) {
    nvm_wait();
     b04:	f1 10       	cpse	r15, r1
     b06:	f5 cf       	rjmp	.-22     	; 0xaf2 <__DATA_REGION_LENGTH__+0x2f2>
set_cs_ctra():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:83
    return nvm_ctrl_change(nvmcmd);
     b08:	66 e0       	ldi	r22, 0x06	; 6
     b0a:	82 e0       	ldi	r24, 0x02	; 2
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:198
    if (!nvm_ctrl_v2(NVM_V2_CMD_FLWR)) return false;

    /* This version allows bulk writes of 512 bytes */
    if (byte_count == 1) UPDI::st8(start_addr, *data);
    else if ((byte_count - 1) >> 8) UPDI::sts16rsd(start_addr, data, byte_count);
    else UPDI::sts8rsd(start_addr, data, byte_count);
     b0c:	35 db       	rcall	.-2454   	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>
nvm_ctrl_v2():
     b0e:	c1 dd       	rcall	.-1150   	; 0x692 <NVM::nvm_wait()>
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	40 c1       	rjmp	.+640    	; 0xd94 <__DATA_REGION_LENGTH__+0x594>
write_flash_v2():
     b14:	40 2f       	mov	r20, r16
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:207

  bool write_flash_v0 (uint32_t start_addr, uint8_t *data, size_t byte_count, bool is_bound) {
    /* NVMCTRL version 0 */
    /* This version does not require page erasure. */
    /* Just clearing the buffer buffer is sufficient. */
    if (is_bound) {
     b16:	c7 01       	movw	r24, r14
     b18:	b6 01       	movw	r22, r12
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:153
    if (byte_count > 64) {
      /* If the limit is exceeded, it will fall back and force a Single-byte write */
      set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
      return true;
    }
    nvm_wait();
     b1a:	36 db       	rcall	.-2452   	; 0x188 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.17]>
     b1c:	f8 cf       	rjmp	.-16     	; 0xb0e <__DATA_REGION_LENGTH__+0x30e>
write_flash_v0():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:155

    if (byte_count == 1) UPDI::st8(start_addr, *data);
     b1e:	81 11       	cpse	r24, r1
     b20:	0d c0       	rjmp	.+26     	; 0xb3c <__DATA_REGION_LENGTH__+0x33c>
write_eeprom_v0():
     b22:	b7 dd       	rcall	.-1170   	; 0x692 <NVM::nvm_wait()>
     b24:	01 30       	cpi	r16, 0x01	; 1
     b26:	11 05       	cpc	r17, r1
     b28:	09 f0       	breq	.+2      	; 0xb2c <__DATA_REGION_LENGTH__+0x32c>
     b2a:	9d c0       	rjmp	.+314    	; 0xc66 <__DATA_REGION_LENGTH__+0x466>
     b2c:	40 91 9e 38 	lds	r20, 0x389E	; 0x80389e <JTAG2::packet+0x12>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:158
    else UPDI::sts8rsd(start_addr, data, byte_count);

    return nvm_ctrl(NVM_CMD_ERWP);
     b30:	c7 01       	movw	r24, r14
     b32:	b6 01       	movw	r22, r12
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:208
  bool write_flash_v0 (uint32_t start_addr, uint8_t *data, size_t byte_count, bool is_bound) {
    /* NVMCTRL version 0 */
    /* This version does not require page erasure. */
    /* Just clearing the buffer buffer is sufficient. */
    if (is_bound) {
      nvm_wait();
     b34:	6b db       	rcall	.-2346   	; 0x20c <UPDI::st8(unsigned long, unsigned char)>
     b36:	83 e0       	ldi	r24, 0x03	; 3
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:209
      if (!nvm_ctrl(NVM_CMD_PBC)) return false;
     b38:	1f dc       	rcall	.-1986   	; 0x378 <NVM::nvm_ctrl(unsigned char)>
     b3a:	3c c0       	rjmp	.+120    	; 0xbb4 <__DATA_REGION_LENGTH__+0x3b4>
write_flash_v0():
     b3c:	aa dd       	rcall	.-1196   	; 0x692 <NVM::nvm_wait()>
     b3e:	84 e0       	ldi	r24, 0x04	; 4
     b40:	1b dc       	rcall	.-1994   	; 0x378 <NVM::nvm_ctrl(unsigned char)>
     b42:	81 11       	cpse	r24, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:324
        return write_flash_v0(start_addr, data, byte_count, is_bound);
    }
  }

  /* Other writes are allowed from 1 to 256 bytes */
  if (byte_count == 0 || byte_count > 256) {
     b44:	ee cf       	rjmp	.-36     	; 0xb22 <__DATA_REGION_LENGTH__+0x322>
     b46:	17 cf       	rjmp	.-466    	; 0x976 <__DATA_REGION_LENGTH__+0x176>
write_memory():
     b48:	98 01       	movw	r18, r16
     b4a:	21 50       	subi	r18, 0x01	; 1
     b4c:	31 09       	sbc	r19, r1
     b4e:	2f 3f       	cpi	r18, 0xFF	; 255
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:325
    set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
     b50:	31 05       	cpc	r19, r1
     b52:	29 f0       	breq	.+10     	; 0xb5e <__DATA_REGION_LENGTH__+0x35e>
     b54:	20 f0       	brcs	.+8      	; 0xb5e <__DATA_REGION_LENGTH__+0x35e>
     b56:	83 ea       	ldi	r24, 0xA3	; 163
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:329
    return true;
  }

  switch (mem_type) {
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	29 dc       	rcall	.-1966   	; 0x3ae <JTAG2::set_response(JTAG2::jtag_response_e)>
     b5c:	04 cf       	rjmp	.-504    	; 0x966 <__DATA_REGION_LENGTH__+0x166>
     b5e:	81 3b       	cpi	r24, 0xB1	; 177
     b60:	29 f0       	breq	.+10     	; 0xb6c <__DATA_REGION_LENGTH__+0x36c>
     b62:	d8 f4       	brcc	.+54     	; 0xb9a <__DATA_REGION_LENGTH__+0x39a>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:350
      /* FUSES in other implementations is equivalent to EEPROM */
    }
    case JTAG2::MTYPE_XMEGA_EEPROM :          // 0xC4
    case JTAG2::MTYPE_EEPROM_PAGE :           // 0xB1
    case JTAG2::MTYPE_EEPROM : {              // 0x22
      if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp))
     b64:	80 32       	cpi	r24, 0x20	; 32
     b66:	01 f1       	breq	.+64     	; 0xba8 <__DATA_REGION_LENGTH__+0x3a8>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:115
   ***********************************/

  bool write_eeprom_v3 (uint32_t start_addr, uint8_t *data, size_t byte_count) {
    /* NVMCTRL version 3 or 5 */
    /* This version can write 8 bytes in bulk */
    if (byte_count > 8) {
     b68:	82 32       	cpi	r24, 0x22	; 34
     b6a:	d9 f4       	brne	.+54     	; 0xba2 <__DATA_REGION_LENGTH__+0x3a2>
     b6c:	ed 9b       	sbis	0x1d, 5	; 29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:88
    return nvm_ctrl_change(nvmcmd);
  }

  /* NVMCTRL version 3,5 */
  bool nvm_ctrl_v3 (uint8_t nvmcmd) {
    nvm_wait_v3();
     b6e:	5f c0       	rjmp	.+190    	; 0xc2e <__DATA_REGION_LENGTH__+0x42e>
write_eeprom_v3():
     b70:	09 30       	cpi	r16, 0x09	; 9
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:89
    return nvm_ctrl_change(nvmcmd);
     b72:	11 05       	cpc	r17, r1
     b74:	80 f7       	brcc	.-32     	; 0xb56 <__DATA_REGION_LENGTH__+0x356>
nvm_ctrl_v3():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:120
    if (byte_count > 8) {
      /* If the limit is exceeded, it will fall back and force a Single-byte write */
      set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
      return true;
    }
    if (!nvm_ctrl_v3(NVM_V3_CMD_EEPBCLR)) return false;
     b76:	7f dd       	rcall	.-1282   	; 0x676 <NVM::nvm_wait_v3()>
     b78:	8f e1       	ldi	r24, 0x1F	; 31
     b7a:	04 dc       	rcall	.-2040   	; 0x384 <NVM::nvm_ctrl_change(unsigned char)>
write_eeprom_v3():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:122

    if (byte_count == 1) UPDI::st8(start_addr, *data);
     b7c:	88 23       	and	r24, r24
     b7e:	09 f4       	brne	.+2      	; 0xb82 <__DATA_REGION_LENGTH__+0x382>
     b80:	fa ce       	rjmp	.-524    	; 0x976 <__DATA_REGION_LENGTH__+0x176>
     b82:	01 30       	cpi	r16, 0x01	; 1
     b84:	11 05       	cpc	r17, r1
     b86:	09 f0       	breq	.+2      	; 0xb8a <__DATA_REGION_LENGTH__+0x38a>
     b88:	4b c0       	rjmp	.+150    	; 0xc20 <__DATA_REGION_LENGTH__+0x420>
     b8a:	40 91 9e 38 	lds	r20, 0x389E	; 0x80389e <JTAG2::packet+0x12>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:88
    return nvm_ctrl_change(nvmcmd);
  }

  /* NVMCTRL version 3,5 */
  bool nvm_ctrl_v3 (uint8_t nvmcmd) {
    nvm_wait_v3();
     b8e:	c7 01       	movw	r24, r14
     b90:	b6 01       	movw	r22, r12
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:89
    return nvm_ctrl_change(nvmcmd);
     b92:	3c db       	rcall	.-2440   	; 0x20c <UPDI::st8(unsigned long, unsigned char)>
nvm_ctrl_v3():
     b94:	70 dd       	rcall	.-1312   	; 0x676 <NVM::nvm_wait_v3()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:329
  if (byte_count == 0 || byte_count > 256) {
    set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
    return true;
  }

  switch (mem_type) {
     b96:	85 e1       	ldi	r24, 0x15	; 21
     b98:	fd c0       	rjmp	.+506    	; 0xd94 <__DATA_REGION_LENGTH__+0x594>
write_memory():
     b9a:	84 3b       	cpi	r24, 0xB4	; 180
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:359
      else
        return write_eeprom_v0(start_addr, data, byte_count);
    }
    default :
      /* Other memory types are rejected */
      set_response(JTAG2::RSP_ILLEGAL_MEMORY_TYPE);
     b9c:	68 f0       	brcs	.+26     	; 0xbb8 <__DATA_REGION_LENGTH__+0x3b8>
     b9e:	84 3c       	cpi	r24, 0xC4	; 196
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:332
  }

  switch (mem_type) {
    /* Can write to the IO region as is */
    case JTAG2::MTYPE_SRAM : {                // 0x20
      return UPDI::sts8(start_addr, data, byte_count);
     ba0:	29 f3       	breq	.-54     	; 0xb6c <__DATA_REGION_LENGTH__+0x36c>
     ba2:	82 ea       	ldi	r24, 0xA2	; 162
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	d9 cf       	rjmp	.-78     	; 0xb5a <__DATA_REGION_LENGTH__+0x35a>
     ba8:	20 2f       	mov	r18, r16
     baa:	4e e9       	ldi	r20, 0x9E	; 158
     bac:	58 e3       	ldi	r21, 0x38	; 56
     bae:	c7 01       	movw	r24, r14
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:339
    /* EEPROM region */
    case JTAG2::MTYPE_LOCK_BITS :             // 0xB3
    case JTAG2::MTYPE_FUSE_BITS : {           // 0xB2
      /* The NVMCTRL version 0 implementation is special. */
      if (bit_is_clear(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp)
      && bit_is_clear(UPDI_NVMCTRL, UPDI::UPDI_GEN2_bp)) {
     bb0:	b6 01       	movw	r22, r12
     bb2:	69 db       	rcall	.-2350   	; 0x286 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)>
enter_updi():
     bb4:	18 2f       	mov	r17, r24
     bb6:	14 cf       	rjmp	.-472    	; 0x9e0 <__DATA_REGION_LENGTH__+0x1e0>
write_memory():
     bb8:	ed 99       	sbic	0x1d, 5	; 29
     bba:	d8 cf       	rjmp	.-80     	; 0xb6c <__DATA_REGION_LENGTH__+0x36c>
     bbc:	ee 99       	sbic	0x1d, 6	; 29
     bbe:	d6 cf       	rjmp	.-84     	; 0xb6c <__DATA_REGION_LENGTH__+0x36c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:100

  bool write_fuse (uint16_t addr, uint8_t data) {
    /* Version 0 of FUSE can write one byte at a time in a special way */
    struct fuse_packet_t { uint16_t data; uint16_t addr; } fuse_packet;
    fuse_packet.data = data;
    fuse_packet.addr = addr;
     bc0:	c8 01       	movw	r24, r16
     bc2:	84 57       	subi	r24, 0x74	; 116
     bc4:	97 4c       	sbci	r25, 0xC7	; 199
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:99
   **********************************************/

  bool write_fuse (uint16_t addr, uint8_t data) {
    /* Version 0 of FUSE can write one byte at a time in a special way */
    struct fuse_packet_t { uint16_t data; uint16_t addr; } fuse_packet;
    fuse_packet.data = data;
     bc6:	5c 01       	movw	r10, r24
     bc8:	0c e8       	ldi	r16, 0x8C	; 140
     bca:	18 e3       	ldi	r17, 0x38	; 56
write_fuse():
     bcc:	f6 01       	movw	r30, r12
     bce:	ec 58       	subi	r30, 0x8C	; 140
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:100
    fuse_packet.addr = addr;
     bd0:	f8 43       	sbci	r31, 0x38	; 56
     bd2:	6f 01       	movw	r12, r30
     bd4:	f8 01       	movw	r30, r16
     bd6:	82 89       	ldd	r24, Z+18	; 0x12
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:101
    nvm_wait();
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	89 83       	std	Y+1, r24	; 0x01
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:102
    if (!UPDI::sts8(NVMCTRL_REG_DATA,
     bdc:	9a 83       	std	Y+2, r25	; 0x02
     bde:	c6 01       	movw	r24, r12
     be0:	80 0f       	add	r24, r16
     be2:	91 1f       	adc	r25, r17
     be4:	8b 83       	std	Y+3, r24	; 0x03
     be6:	9c 83       	std	Y+4, r25	; 0x04
     be8:	54 dd       	rcall	.-1368   	; 0x692 <NVM::nvm_wait()>
     bea:	24 e0       	ldi	r18, 0x04	; 4
     bec:	ae 01       	movw	r20, r28
     bee:	4f 5f       	subi	r20, 0xFF	; 255
     bf0:	5f 4f       	sbci	r21, 0xFF	; 255
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:104
      (uint8_t*)&fuse_packet, sizeof(fuse_packet))) return false;
    if (!nvm_ctrl(NVM_CMD_WFU)) return false;
     bf2:	66 e0       	ldi	r22, 0x06	; 6
     bf4:	70 e1       	ldi	r23, 0x10	; 16
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:105
    return ((nvm_wait() & 7) == 0);
     bfa:	45 db       	rcall	.-2422   	; 0x286 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)>
     bfc:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:341
    case JTAG2::MTYPE_FUSE_BITS : {           // 0xB2
      /* The NVMCTRL version 0 implementation is special. */
      if (bit_is_clear(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp)
      && bit_is_clear(UPDI_NVMCTRL, UPDI::UPDI_GEN2_bp)) {
        do {
          if (!write_fuse(start_addr++, *data++)) return false;
     bfe:	09 f4       	brne	.+2      	; 0xc02 <__DATA_REGION_LENGTH__+0x402>
     c00:	ba ce       	rjmp	.-652    	; 0x976 <__DATA_REGION_LENGTH__+0x176>
     c02:	87 e0       	ldi	r24, 0x07	; 7
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:342
        } while (--byte_count);
     c04:	b9 db       	rcall	.-2190   	; 0x378 <NVM::nvm_ctrl(unsigned char)>
     c06:	88 23       	and	r24, r24
     c08:	09 f4       	brne	.+2      	; 0xc0c <__DATA_REGION_LENGTH__+0x40c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:123
      return true;
    }
    if (!nvm_ctrl_v3(NVM_V3_CMD_EEPBCLR)) return false;

    if (byte_count == 1) UPDI::st8(start_addr, *data);
    else UPDI::sts8(start_addr, data, byte_count);
     c0a:	b5 ce       	rjmp	.-662    	; 0x976 <__DATA_REGION_LENGTH__+0x176>
     c0c:	42 dd       	rcall	.-1404   	; 0x692 <NVM::nvm_wait()>
write_memory():
     c0e:	87 70       	andi	r24, 0x07	; 7
     c10:	09 f0       	breq	.+2      	; 0xc14 <__DATA_REGION_LENGTH__+0x414>
     c12:	b1 ce       	rjmp	.-670    	; 0x976 <__DATA_REGION_LENGTH__+0x176>
     c14:	0f 5f       	subi	r16, 0xFF	; 255
     c16:	1f 4f       	sbci	r17, 0xFF	; 255
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:352
    case JTAG2::MTYPE_XMEGA_EEPROM :          // 0xC4
    case JTAG2::MTYPE_EEPROM_PAGE :           // 0xB1
    case JTAG2::MTYPE_EEPROM : {              // 0x22
      if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp))
        return write_eeprom_v3(start_addr, data, byte_count);
      else if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN2_bp))
     c18:	a0 16       	cp	r10, r16
     c1a:	b1 06       	cpc	r11, r17
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:132

  bool write_eeprom_v2 (uint32_t start_addr, uint8_t *data, size_t byte_count) {
    /* NVMCTRL version 2 or 4 */
    /* This version cannot be written in bulk transfer */
    /* Only 2 bytes (1 word) can be written at a time */
    if (byte_count > 2) {
     c1c:	d9 f6       	brne	.-74     	; 0xbd4 <__DATA_REGION_LENGTH__+0x3d4>
     c1e:	a3 ce       	rjmp	.-698    	; 0x966 <__DATA_REGION_LENGTH__+0x166>
write_eeprom_v3():
     c20:	20 2f       	mov	r18, r16
     c22:	4e e9       	ldi	r20, 0x9E	; 158
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:82
    return true;
  }

  /* NVMCTRL version 2,4 */
  bool nvm_ctrl_v2 (uint8_t nvmcmd) {
    nvm_wait();
     c24:	58 e3       	ldi	r21, 0x38	; 56
     c26:	c7 01       	movw	r24, r14
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:83
    return nvm_ctrl_change(nvmcmd);
     c28:	b6 01       	movw	r22, r12
     c2a:	2d db       	rcall	.-2470   	; 0x286 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)>
     c2c:	b3 cf       	rjmp	.-154    	; 0xb94 <__DATA_REGION_LENGTH__+0x394>
write_memory():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:137
    if (byte_count > 2) {
      /* If the limit is exceeded, it will fall back and force a Single-byte write */
      set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
      return true;
    }
    if (!nvm_ctrl_v2(NVM_V2_CMD_EEERWR)) return false;
     c2e:	ee 9b       	sbis	0x1d, 6	; 29
     c30:	15 c0       	rjmp	.+42     	; 0xc5c <__DATA_REGION_LENGTH__+0x45c>
write_eeprom_v2():
     c32:	03 30       	cpi	r16, 0x03	; 3
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:139

    if (byte_count == 1) UPDI::st8(start_addr, *data);
     c34:	11 05       	cpc	r17, r1
     c36:	08 f0       	brcs	.+2      	; 0xc3a <__DATA_REGION_LENGTH__+0x43a>
     c38:	8e cf       	rjmp	.-228    	; 0xb56 <__DATA_REGION_LENGTH__+0x356>
nvm_ctrl_v2():
     c3a:	2b dd       	rcall	.-1450   	; 0x692 <NVM::nvm_wait()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:140
    else UPDI::sts8(start_addr, data, byte_count);
     c3c:	83 e1       	ldi	r24, 0x13	; 19
     c3e:	a2 db       	rcall	.-2236   	; 0x384 <NVM::nvm_ctrl_change(unsigned char)>
write_eeprom_v2():
     c40:	88 23       	and	r24, r24
     c42:	09 f4       	brne	.+2      	; 0xc46 <__DATA_REGION_LENGTH__+0x446>
     c44:	98 ce       	rjmp	.-720    	; 0x976 <__DATA_REGION_LENGTH__+0x176>
     c46:	01 30       	cpi	r16, 0x01	; 1
     c48:	11 05       	cpc	r17, r1
     c4a:	09 f4       	brne	.+2      	; 0xc4e <__DATA_REGION_LENGTH__+0x44e>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:148
  }

  bool write_eeprom_v0 (uint32_t start_addr, uint8_t *data, size_t byte_count) {
    /* NVMCTRL version 0 */
    /* This version allows fast bulk writes of 32 or 64 bytes */
    if (byte_count > 64) {
     c4c:	11 cf       	rjmp	.-478    	; 0xa70 <__DATA_REGION_LENGTH__+0x270>
     c4e:	22 e0       	ldi	r18, 0x02	; 2
     c50:	4e e9       	ldi	r20, 0x9E	; 158
     c52:	58 e3       	ldi	r21, 0x38	; 56
     c54:	c7 01       	movw	r24, r14
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:156
      return true;
    }
    nvm_wait();

    if (byte_count == 1) UPDI::st8(start_addr, *data);
    else UPDI::sts8rsd(start_addr, data, byte_count);
     c56:	b6 01       	movw	r22, r12
     c58:	16 db       	rcall	.-2516   	; 0x286 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)>
     c5a:	59 cf       	rjmp	.-334    	; 0xb0e <__DATA_REGION_LENGTH__+0x30e>
write_eeprom_v0():
     c5c:	01 34       	cpi	r16, 0x41	; 65
     c5e:	11 05       	cpc	r17, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:724
      case UPDI_CMD_WRITE_MEMORY : {
        _result = NVM::write_memory();
        break;
      }
      case UPDI_CMD_ERASE : {
        if (JTAG2::packet.body[JTAG2::MEM_TYPE] == JTAG2::XMEGA_ERASE_CHIP) {
     c60:	08 f4       	brcc	.+2      	; 0xc64 <__DATA_REGION_LENGTH__+0x464>
     c62:	5f cf       	rjmp	.-322    	; 0xb22 <__DATA_REGION_LENGTH__+0x322>
     c64:	78 cf       	rjmp	.-272    	; 0xb56 <__DATA_REGION_LENGTH__+0x356>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:527
 ****************************/

// __attribute__((optimize("O0")))
bool UPDI::chip_erase (void) {
  /* If UPDI is prohibited, try HV control */
  if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) {
     c66:	40 2f       	mov	r20, r16
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:399
  return loop_until_key_stat_is_set(UPDI_KEY_NVMPROG);
}

/* __attribute__((optimize("O0"))) */
bool UPDI::set_erase_key (void) {
  if (!send_bytes(erase_key, sizeof(erase_key))) return false;
     c68:	c7 01       	movw	r24, r14
     c6a:	b6 01       	movw	r22, r12
     c6c:	8d da       	rcall	.-2790   	; 0x188 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.17]>
     c6e:	63 cf       	rjmp	.-314    	; 0xb36 <__DATA_REGION_LENGTH__+0x336>
_ZN4UPDI7runtimeEh():
     c70:	80 91 95 38 	lds	r24, 0x3895	; 0x803895 <JTAG2::packet+0x9>
     c74:	81 11       	cpse	r24, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:400
  return loop_until_key_stat_is_set(UPDI_KEY_CHIPERASE);
     c76:	b5 ce       	rjmp	.-662    	; 0x9e2 <__DATA_REGION_LENGTH__+0x1e2>
chip_erase():
     c78:	e0 9b       	sbis	0x1c, 0	; 28
     c7a:	44 c0       	rjmp	.+136    	; 0xd04 <__DATA_REGION_LENGTH__+0x504>
set_erase_key():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:532
  if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) {
    HV_Pulse();
  }

  /* Transition to CHIPERASE mode by system reset */
  if (!set_erase_key()) return false;
     c7c:	6a e0       	ldi	r22, 0x0A	; 10
     c7e:	8a e2       	ldi	r24, 0x2A	; 42
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:535

  /* Issue a system reset */
  if (!updi_reset(true) || !updi_reset(false)) return false;
     c80:	98 e3       	ldi	r25, 0x38	; 56
     c82:	69 da       	rcall	.-2862   	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     c84:	88 23       	and	r24, r24
     c86:	09 f4       	brne	.+2      	; 0xc8a <__DATA_REGION_LENGTH__+0x48a>
     c88:	76 ce       	rjmp	.-788    	; 0x976 <__DATA_REGION_LENGTH__+0x176>
     c8a:	88 e0       	ldi	r24, 0x08	; 8
     c8c:	06 dc       	rcall	.-2036   	; 0x49a <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.20]>
chip_erase():
     c8e:	88 23       	and	r24, r24
     c90:	09 f4       	brne	.+2      	; 0xc94 <__DATA_REGION_LENGTH__+0x494>
     c92:	71 ce       	rjmp	.-798    	; 0x976 <__DATA_REGION_LENGTH__+0x176>
     c94:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:538

  /* If LOCKSTATUS is clear, the chip is unlocked */
  loop_until_sys_stat_is_clear(UPDI_SYS_LOCKSTATUS);
     c96:	3a db       	rcall	.-2444   	; 0x30c <UPDI::updi_reset(bool)>
     c98:	88 23       	and	r24, r24
     c9a:	09 f4       	brne	.+2      	; 0xc9e <__DATA_REGION_LENGTH__+0x49e>
     c9c:	6c ce       	rjmp	.-808    	; 0x976 <__DATA_REGION_LENGTH__+0x176>
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	35 db       	rcall	.-2454   	; 0x30c <UPDI::updi_reset(bool)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:297
  send_bytes(set_ptr, sizeof(set_ptr));
  return RECV();
}

bool UPDI::is_cs_stat (uint8_t code, uint8_t check) {
  return check == (get_cs_stat(code) & check);
     ca2:	88 23       	and	r24, r24
     ca4:	09 f4       	brne	.+2      	; 0xca8 <__DATA_REGION_LENGTH__+0x4a8>
     ca6:	67 ce       	rjmp	.-818    	; 0x976 <__DATA_REGION_LENGTH__+0x176>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:367
bool UPDI::loop_until_key_stat_is_clear (uint8_t bitmap, uint16_t limit) {
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  uint16_t _back = _send_ptr;
  #endif
  do {
    if (!is_key_stat(bitmap)) return true;
     ca8:	70 e0       	ldi	r23, 0x00	; 0
     caa:	60 e0       	ldi	r22, 0x00	; 0
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.8/cores/megaAVR/api/delay_busywait.h:31
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	2f dc       	rcall	.-1954   	; 0x50e <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
     cb0:	10 e0       	ldi	r17, 0x00	; 0
     cb2:	00 e0       	ldi	r16, 0x00	; 0
is_cs_stat():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:372
    #ifdef ENABLE_DEBUG_UPDI_SENDER
    _send_ptr = _back;
    #endif
    TIM::delay_50us();
  } while (--limit);
     cb4:	87 e0       	ldi	r24, 0x07	; 7
     cb6:	a2 da       	rcall	.-2748   	; 0x1fc <UPDI::get_cs_stat(unsigned char)>
loop_until_key_stat_is_clear():
     cb8:	83 ff       	sbrs	r24, 3
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:544

  /* Make sure the CHER bit is cleared before next reset */
  loop_until_key_stat_is_clear(UPDI_KEY_CHIPERASE);

  /* Chip erasure was successful */
  bit_set(UPDI_CONTROL, UPDI_ERFM_bp);
     cba:	07 c0       	rjmp	.+14     	; 0xcca <__DATA_REGION_LENGTH__+0x4ca>
delay_micros():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:548

  /* Once the HV control and device is successfully unlocked, */
  /* you should be able to enter program mode. */
  if (!set_nvmprog_key()) return false;
     cbc:	f6 ea       	ldi	r31, 0xA6	; 166
     cbe:	fa 95       	dec	r31
     cc0:	f1 f7       	brne	.-4      	; 0xcbe <__DATA_REGION_LENGTH__+0x4be>
     cc2:	00 c0       	rjmp	.+0      	; 0xcc4 <__DATA_REGION_LENGTH__+0x4c4>
loop_until_key_stat_is_clear():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:549
  if (!updi_reset(true) || !updi_reset(false)) return false;
     cc4:	01 50       	subi	r16, 0x01	; 1
     cc6:	11 09       	sbc	r17, r1
     cc8:	a9 f7       	brne	.-22     	; 0xcb4 <__DATA_REGION_LENGTH__+0x4b4>
chip_erase():
     cca:	e2 9a       	sbi	0x1c, 2	; 28
     ccc:	fe db       	rcall	.-2052   	; 0x4ca <UPDI::set_nvmprog_key()>
     cce:	88 23       	and	r24, r24
     cd0:	09 f4       	brne	.+2      	; 0xcd4 <__DATA_REGION_LENGTH__+0x4d4>
     cd2:	51 ce       	rjmp	.-862    	; 0x976 <__DATA_REGION_LENGTH__+0x176>
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	1a db       	rcall	.-2508   	; 0x30c <UPDI::updi_reset(bool)>
     cd8:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:550
  loop_until_sys_stat_is_clear(UPDI_SYS_LOCKSTATUS);
     cda:	09 f4       	brne	.+2      	; 0xcde <__DATA_REGION_LENGTH__+0x4de>
     cdc:	4c ce       	rjmp	.-872    	; 0x976 <__DATA_REGION_LENGTH__+0x176>
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	15 db       	rcall	.-2518   	; 0x30c <UPDI::updi_reset(bool)>
     ce2:	18 2f       	mov	r17, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:551
  loop_until_sys_stat_is_set(UPDI_SYS_NVMPROG);
     ce4:	88 23       	and	r24, r24
     ce6:	09 f4       	brne	.+2      	; 0xcea <__DATA_REGION_LENGTH__+0x4ea>
     ce8:	46 ce       	rjmp	.-884    	; 0x976 <__DATA_REGION_LENGTH__+0x176>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:554

  /* After performing HV control, it is necessary to obtain SIB */
  bit_clear(UPDI_CONTROL, UPDI_INFO_bp);
     cea:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:555
  bit_set(UPDI_CONTROL, UPDI_PROG_bp);
     cec:	60 e0       	ldi	r22, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:568
bool UPDI::enter_updi (bool skip) {
  #ifdef ENABLE_UPDI_DOUBLESPEED
  const bool hv_val = SYS::get_vcc() >= 4250;
  #endif
  /* Release the physical reset */
  openDrainWrite(TRST_PIN, HIGH);
     cee:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:586
      loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
    }
    else
      BREAK();
  }
  if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) {
     cf0:	0e dc       	rcall	.-2020   	; 0x50e <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
     cf2:	88 e0       	ldi	r24, 0x08	; 8
     cf4:	f4 db       	rcall	.-2072   	; 0x4de <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.23]>
     cf6:	e0 98       	cbi	0x1c, 0	; 28
     cf8:	e1 9a       	sbi	0x1c, 1	; 28
enter_updi():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:528

// __attribute__((optimize("O0")))
bool UPDI::chip_erase (void) {
  /* If UPDI is prohibited, try HV control */
  if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) {
    HV_Pulse();
     cfa:	21 98       	cbi	0x04, 1	; 4
     cfc:	e0 99       	sbic	0x1c, 0	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:730
          _result = chip_erase();
        }
        break;
      }
      case UPDI_CMD_GO : {
        _result = Target_Reset(true) && Target_Reset(false);
     cfe:	70 ce       	rjmp	.-800    	; 0x9e0 <__DATA_REGION_LENGTH__+0x1e0>
     d00:	1d dc       	rcall	.-1990   	; 0x53c <UPDI::enter_updi(bool) [clone .part.12]>
     d02:	58 cf       	rjmp	.-336    	; 0xbb4 <__DATA_REGION_LENGTH__+0x3b4>
chip_erase():
     d04:	79 dc       	rcall	.-1806   	; 0x5f8 <UPDI::HV_Pulse()>
     d06:	ba cf       	rjmp	.-140    	; 0xc7c <__DATA_REGION_LENGTH__+0x47c>
_ZN4UPDI7runtimeEh():
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	05 db       	rcall	.-2550   	; 0x316 <UPDI::Target_Reset(bool)>
     d0c:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:311
      }

      /* Page boundaries require special handling */
      const bool is_bound = bit_is_clear(UPDI_CONTROL, UPDI::UPDI_ERFM_bp)
        && before_address != start_addr
        && ((JTAG2::updi_desc.flash_page_size - 1) & (uint16_t)start_addr) == 0;
     d0e:	09 f4       	brne	.+2      	; 0xd12 <__DATA_REGION_LENGTH__+0x512>
     d10:	b1 cd       	rjmp	.-1182   	; 0x874 <__DATA_REGION_LENGTH__+0x74>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:310
        return true;
      }

      /* Page boundaries require special handling */
      const bool is_bound = bit_is_clear(UPDI_CONTROL, UPDI::UPDI_ERFM_bp)
        && before_address != start_addr
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	00 db       	rcall	.-2560   	; 0x316 <UPDI::Target_Reset(bool)>
     d16:	ae cd       	rjmp	.-1188   	; 0x874 <__DATA_REGION_LENGTH__+0x74>
write_memory():
     d18:	e2 99       	sbic	0x1c, 2	; 28
     d1a:	14 c0       	rjmp	.+40     	; 0xd44 <__DATA_REGION_LENGTH__+0x544>
     d1c:	40 91 5d 38 	lds	r20, 0x385D	; 0x80385d <NVM::before_address>
     d20:	50 91 5e 38 	lds	r21, 0x385E	; 0x80385e <NVM::before_address+0x1>
     d24:	60 91 5f 38 	lds	r22, 0x385F	; 0x80385f <NVM::before_address+0x2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:311
        && ((JTAG2::updi_desc.flash_page_size - 1) & (uint16_t)start_addr) == 0;
     d28:	70 91 60 38 	lds	r23, 0x3860	; 0x803860 <NVM::before_address+0x3>
     d2c:	c4 16       	cp	r12, r20
     d2e:	d5 06       	cpc	r13, r21
     d30:	e6 06       	cpc	r14, r22
     d32:	f7 06       	cpc	r15, r23
     d34:	39 f0       	breq	.+14     	; 0xd44 <__DATA_REGION_LENGTH__+0x544>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:312
      before_address = start_addr;
     d36:	01 97       	sbiw	r24, 0x01	; 1
     d38:	9c 01       	movw	r18, r24
     d3a:	2c 21       	and	r18, r12
     d3c:	3d 21       	and	r19, r13
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	23 2b       	or	r18, r19
     d42:	09 f0       	breq	.+2      	; 0xd46 <__DATA_REGION_LENGTH__+0x546>
_ZN4UPDI7runtimeEh():
     d44:	80 e0       	ldi	r24, 0x00	; 0
write_memory():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:314

      if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp))
     d46:	c0 92 5d 38 	sts	0x385D, r12	; 0x80385d <NVM::before_address>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:171

  bool write_flash_v3 (uint32_t start_addr, uint8_t *data, size_t byte_count, bool is_bound) {
    /* NVMCTRL version 3 or 5 */
    /* If the chip is not erased, erase the page. */
    /* However, only when the beginning of the page boundary is addressed */
    if (is_bound) {
     d4a:	d0 92 5e 38 	sts	0x385E, r13	; 0x80385e <NVM::before_address+0x1>
     d4e:	e0 92 5f 38 	sts	0x385F, r14	; 0x80385f <NVM::before_address+0x2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:172
      nvm_wait_v3();
     d52:	f0 92 60 38 	sts	0x3860, r15	; 0x803860 <NVM::before_address+0x3>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:173
      if (!UPDI::st8(start_addr, 0xFF)) return false;
     d56:	ed 9b       	sbis	0x1d, 5	; 29
     d58:	7e ce       	rjmp	.-772    	; 0xa56 <__DATA_REGION_LENGTH__+0x256>
write_flash_v3():
     d5a:	88 23       	and	r24, r24
     d5c:	09 f4       	brne	.+2      	; 0xd60 <__DATA_REGION_LENGTH__+0x560>
     d5e:	73 ce       	rjmp	.-794    	; 0xa46 <__DATA_REGION_LENGTH__+0x246>
     d60:	8a dc       	rcall	.-1772   	; 0x676 <NVM::nvm_wait_v3()>
     d62:	4f ef       	ldi	r20, 0xFF	; 255
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:88
    return nvm_ctrl_change(nvmcmd);
  }

  /* NVMCTRL version 3,5 */
  bool nvm_ctrl_v3 (uint8_t nvmcmd) {
    nvm_wait_v3();
     d64:	c7 01       	movw	r24, r14
     d66:	b6 01       	movw	r22, r12
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:89
    return nvm_ctrl_change(nvmcmd);
     d68:	51 da       	rcall	.-2910   	; 0x20c <UPDI::st8(unsigned long, unsigned char)>
     d6a:	88 23       	and	r24, r24
     d6c:	09 f4       	brne	.+2      	; 0xd70 <__DATA_REGION_LENGTH__+0x570>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:176
    if (is_bound) {
      nvm_wait_v3();
      if (!UPDI::st8(start_addr, 0xFF)) return false;
      if (!nvm_ctrl_v3(NVM_V3_CMD_FLPER)) return false;
    }
    else if (!nvm_ctrl_v3(NVM_V3_CMD_FLPBCLR)) return false;
     d6e:	03 ce       	rjmp	.-1018   	; 0x976 <__DATA_REGION_LENGTH__+0x176>
nvm_ctrl_v3():
     d70:	82 dc       	rcall	.-1788   	; 0x676 <NVM::nvm_wait_v3()>
     d72:	88 e0       	ldi	r24, 0x08	; 8
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:177
    nvm_wait_v3();
     d74:	07 db       	rcall	.-2546   	; 0x384 <NVM::nvm_ctrl_change(unsigned char)>
write_flash_v3():
     d76:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:179

    if (byte_count == 1) UPDI::st8(start_addr, *data);
     d78:	09 f4       	brne	.+2      	; 0xd7c <__DATA_REGION_LENGTH__+0x57c>
     d7a:	fd cd       	rjmp	.-1030   	; 0x976 <__DATA_REGION_LENGTH__+0x176>
     d7c:	7c dc       	rcall	.-1800   	; 0x676 <NVM::nvm_wait_v3()>
     d7e:	01 30       	cpi	r16, 0x01	; 1
     d80:	11 05       	cpc	r17, r1
     d82:	09 f0       	breq	.+2      	; 0xd86 <__DATA_REGION_LENGTH__+0x586>
     d84:	63 ce       	rjmp	.-826    	; 0xa4c <__DATA_REGION_LENGTH__+0x24c>
     d86:	40 91 9e 38 	lds	r20, 0x389E	; 0x80389e <JTAG2::packet+0x12>
     d8a:	c7 01       	movw	r24, r14
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:88
    return nvm_ctrl_change(nvmcmd);
  }

  /* NVMCTRL version 3,5 */
  bool nvm_ctrl_v3 (uint8_t nvmcmd) {
    nvm_wait_v3();
     d8c:	b6 01       	movw	r22, r12
     d8e:	3e da       	rcall	.-2948   	; 0x20c <UPDI::st8(unsigned long, unsigned char)>
nvm_ctrl_v3():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:89
    return nvm_ctrl_change(nvmcmd);
     d90:	72 dc       	rcall	.-1820   	; 0x676 <NVM::nvm_wait_v3()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:83
  }

  /* NVMCTRL version 2,4 */
  bool nvm_ctrl_v2 (uint8_t nvmcmd) {
    nvm_wait();
    return nvm_ctrl_change(nvmcmd);
     d92:	84 e0       	ldi	r24, 0x04	; 4
nvm_ctrl_v2():
     d94:	f7 da       	rcall	.-2578   	; 0x384 <NVM::nvm_ctrl_change(unsigned char)>
     d96:	0e cf       	rjmp	.-484    	; 0xbb4 <__DATA_REGION_LENGTH__+0x3b4>

00000d98 <__vector_13>:
__vector_13():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:259
ISR(TCB0_INT_vect, ISR_NAKED) {
  /***
    This interrupt is a global escape due to timeout.
    There is no return to the source of the interrupt.
  ***/
  __asm__ __volatile__ ("EOR R1,R1");
     d98:	11 24       	eor	r1, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:260
  TCB0_CTRLA = 0;
     d9a:	10 92 80 0a 	sts	0x0A80, r1	; 0x800a80 <__RODATA_PM_OFFSET__+0x7f8a80>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:261
  TCB0_INTFLAGS = TCB_CAPT_bm;
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__RODATA_PM_OFFSET__+0x7f8a86>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:262
  longjmp(TIM::CONTEXT, 2);
     da4:	62 e0       	ldi	r22, 0x02	; 2
     da6:	70 e0       	ldi	r23, 0x00	; 0
     da8:	86 e4       	ldi	r24, 0x46	; 70
     daa:	98 e3       	ldi	r25, 0x38	; 56
     dac:	a4 d3       	rcall	.+1864   	; 0x14f6 <longjmp>

00000dae <__vector_6>:
__vector_6():
     dae:	1f 92       	push	r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:231

/*
 * RTS monitoring upper and lower end interrupts
 */

ISR(portIntrruptVector(RTS_SENSE_PIN)) {
     db0:	0f 92       	push	r0
     db2:	0f b6       	in	r0, 0x3f	; 63
     db4:	0f 92       	push	r0
     db6:	11 24       	eor	r1, r1
     db8:	2f 93       	push	r18
     dba:	3f 93       	push	r19
     dbc:	4f 93       	push	r20
     dbe:	5f 93       	push	r21
     dc0:	6f 93       	push	r22
     dc2:	7f 93       	push	r23
     dc4:	8f 93       	push	r24
     dc6:	9f 93       	push	r25
     dc8:	af 93       	push	r26
     dca:	bf 93       	push	r27
     dcc:	ef 93       	push	r30
     dce:	ff 93       	push	r31
WDT_Short():
     dd0:	87 e0       	ldi	r24, 0x07	; 7
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:169

void SYS::WDT_OFF (void) { WDT_SET(WDT_PERIOD_OFF_gc); }

void SYS::WDT_ON (void) { WDT_SET(WDT_PERIOD_8KCLK_gc); }

void SYS::WDT_Short (void) { WDT_SET(WDT_PERIOD_512CLK_gc); }
     dd2:	6d dc       	rcall	.-1830   	; 0x6ae <SYS::WDT_SET(unsigned char)>
RTS_Disable():
     dd4:	88 e0       	ldi	r24, 0x08	; 8
     dd6:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <__RODATA_PM_OFFSET__+0x7f8412>
__vector_6():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:108
void SYS::RTS_Enable (void) {
  pinControlRegister(RTS_SENSE_PIN) = RTS_SENSE_CONFIG;
}

void SYS::RTS_Disable (void) {
  pinControlRegister(RTS_SENSE_PIN) = RTS_SENSE_DISABLE;
     dda:	e0 e0       	ldi	r30, 0x00	; 0
     ddc:	f4 e0       	ldi	r31, 0x04	; 4
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:243
  ***/

  SYS::WDT_Short();
  SYS::RTS_Disable();
  portRegister(RTS_SENSE_PIN).INTFLAGS =
  portRegister(RTS_SENSE_PIN).INTFLAGS;
     dde:	81 85       	ldd	r24, Z+9	; 0x09
     de0:	81 87       	std	Z+9, r24	; 0x09
PG_Enable():
     de2:	48 9a       	sbi	0x09, 0	; 9
LED_Flash():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:242
    is set to approximately 250ms.
  ***/

  SYS::WDT_Short();
  SYS::RTS_Disable();
  portRegister(RTS_SENSE_PIN).INTFLAGS =
     de4:	69 ea       	ldi	r22, 0xA9	; 169
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:96
/******************
 * Various ON/OFF *
 ******************/

void SYS::PG_Enable (void) {
  digitalWrite(PGEN_PIN, HIGH);
     de6:	78 e0       	ldi	r23, 0x08	; 8
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:150
  }
}

/* Flash (after RTS assert/UPDI authorization) */
void TIM::LED_Flash (void) {
  LED_TCB1(2, TCB1_FLASH);
     de8:	82 e0       	ldi	r24, 0x02	; 2
     dea:	a7 da       	rcall	.-2738   	; 0x33a <LED_TCB1(unsigned char, unsigned int)>
__vector_6():
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	93 da       	rcall	.-2778   	; 0x316 <UPDI::Target_Reset(bool)>
     df0:	21 9a       	sbi	0x04, 1	; 4
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:246
  SYS::RTS_Disable();
  portRegister(RTS_SENSE_PIN).INTFLAGS =
  portRegister(RTS_SENSE_PIN).INTFLAGS;
  SYS::PG_Enable();
  TIM::LED_Flash();
  UPDI::Target_Reset(true);
     df2:	ff 91       	pop	r31
     df4:	ef 91       	pop	r30
     df6:	bf 91       	pop	r27
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:247
  openDrainWrite(TRST_PIN, LOW);
     df8:	af 91       	pop	r26
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:248
}
     dfa:	9f 91       	pop	r25
     dfc:	8f 91       	pop	r24
     dfe:	7f 91       	pop	r23
     e00:	6f 91       	pop	r22
     e02:	5f 91       	pop	r21
     e04:	4f 91       	pop	r20
     e06:	3f 91       	pop	r19
     e08:	2f 91       	pop	r18
     e0a:	0f 90       	pop	r0
     e0c:	0f be       	out	0x3f, r0	; 63
     e0e:	0f 90       	pop	r0
     e10:	1f 90       	pop	r1
     e12:	18 95       	reti

00000e14 <__vector_7>:
__vector_7():
     e14:	87 e0       	ldi	r24, 0x07	; 7
     e16:	4b dc       	rcall	.-1898   	; 0x6ae <SYS::WDT_SET(unsigned char)>
LED_Flash():
     e18:	69 ea       	ldi	r22, 0xA9	; 169
     e1a:	78 e0       	ldi	r23, 0x08	; 8
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:169

void SYS::WDT_OFF (void) { WDT_SET(WDT_PERIOD_OFF_gc); }

void SYS::WDT_ON (void) { WDT_SET(WDT_PERIOD_8KCLK_gc); }

void SYS::WDT_Short (void) { WDT_SET(WDT_PERIOD_512CLK_gc); }
     e1c:	82 e0       	ldi	r24, 0x02	; 2
     e1e:	8d da       	rcall	.-2790   	; 0x33a <LED_TCB1(unsigned char, unsigned int)>
__vector_7():
     e20:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:150
  }
}

/* Flash (after RTS assert/UPDI authorization) */
void TIM::LED_Flash (void) {
  LED_TCB1(2, TCB1_FLASH);
     e22:	79 da       	rcall	.-2830   	; 0x316 <UPDI::Target_Reset(bool)>
     e24:	88 e0       	ldi	r24, 0x08	; 8
     e26:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__RODATA_PM_OFFSET__+0x7f8806>
delay_micros():
     e2a:	8f ec       	ldi	r24, 0xCF	; 207
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:215
    with a system reset, it does not return to main operation.
  ***/

  SYS::WDT_Short();
  TIM::LED_Flash();
  UPDI::Target_Reset(true);
     e2c:	97 e0       	ldi	r25, 0x07	; 7
     e2e:	01 97       	sbiw	r24, 0x01	; 1
     e30:	f1 f7       	brne	.-4      	; 0xe2e <__vector_7+0x1a>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:216
  UPDI_USART.CTRLB = UPDI_USART_OFF;
     e32:	00 c0       	rjmp	.+0      	; 0xe34 <__vector_7+0x20>
     e34:	00 00       	nop
__vector_7():
     e36:	01 9a       	sbi	0x00, 1	; 0
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.8/cores/megaAVR/api/delay_busywait.h:31
     e38:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <__RODATA_PM_OFFSET__+0x7f8411>
     e3c:	09 98       	cbi	0x01, 1	; 1
     e3e:	21 9a       	sbi	0x04, 1	; 4
LED_Blink():
     e40:	69 ea       	ldi	r22, 0xA9	; 169
     e42:	75 e5       	ldi	r23, 0x55	; 85
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:218
  delay_micros(800);
  pinMode(UPDI_TDAT_PIN, OUTPUT);
     e44:	83 e0       	ldi	r24, 0x03	; 3
     e46:	79 da       	rcall	.-2830   	; 0x33a <LED_TCB1(unsigned char, unsigned int)>
WDT_OFF():
     e48:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:219
  digitalWrite(UPDI_TDAT_PIN, LOW);
     e4a:	31 dc       	rcall	.-1950   	; 0x6ae <SYS::WDT_SET(unsigned char)>
__vector_7():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:220
  openDrainWrite(TRST_PIN, LOW);
     e4c:	30 9b       	sbis	0x06, 0	; 6
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:155
  LED_TCB1(2, TCB1_FLASH);
}

/* Flashing (SW1 assert) */
void TIM::LED_Blink (void) {
  LED_TCB1(3, TCB1_BLINK);
     e4e:	fe cf       	rjmp	.-4      	; 0xe4c <__vector_7+0x38>
WDT_REBOOT():
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	2d dc       	rcall	.-1958   	; 0x6ae <SYS::WDT_SET(unsigned char)>
     e54:	ff cf       	rjmp	.-2      	; 0xe54 <__vector_7+0x40>

00000e56 <main>:
main():
     e56:	cf 93       	push	r28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:165
  wdt_reset();
  loop_until_bit_is_clear(WDT_STATUS, WDT_SYNCBUSY_bp);
  _PROTECTED_WRITE(WDT_CTRLA, _wdt_period);
}

void SYS::WDT_OFF (void) { WDT_SET(WDT_PERIOD_OFF_gc); }
     e58:	df 93       	push	r29
     e5a:	00 d0       	rcall	.+0      	; 0xe5c <main+0x6>
     e5c:	cd b7       	in	r28, 0x3d	; 61
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:223
  pinMode(UPDI_TDAT_PIN, OUTPUT);
  digitalWrite(UPDI_TDAT_PIN, LOW);
  openDrainWrite(TRST_PIN, LOW);
  TIM::LED_Blink();
  SYS::WDT_OFF();
  while (!digitalRead(SW_SENSE_PIN));
     e5e:	de b7       	in	r29, 0x3e	; 62
     e60:	f8 94       	cli
initVariant():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:172
void SYS::WDT_ON (void) { WDT_SET(WDT_PERIOD_8KCLK_gc); }

void SYS::WDT_Short (void) { WDT_SET(WDT_PERIOD_512CLK_gc); }

void SYS::WDT_REBOOT (void) {
  WDT_SET(WDT_PERIOD_8CLK_gc);
     e62:	24 e0       	ldi	r18, 0x04	; 4
     e64:	e0 e1       	ldi	r30, 0x10	; 16
     e66:	f4 e0       	ldi	r31, 0x04	; 4
     e68:	83 e0       	ldi	r24, 0x03	; 3
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.8/variants/tinyAVR2_20/variant.h:281
    "   DEC  R24     \n"
    "   BRNE 2b        " /* 3 loop PORTA to PORTC */
    : : "z" ((register8_t*)&PORTA_PIN0CTRL),
        "r" ((uint8_t)PORT_ISC_INPUT_DISABLE_gc)
      : "r24", "r25"
  );
     e6a:	98 e0       	ldi	r25, 0x08	; 8
     e6c:	21 93       	st	Z+, r18
     e6e:	9a 95       	dec	r25
     e70:	e9 f7       	brne	.-6      	; 0xe6c <main+0x16>
     e72:	78 96       	adiw	r30, 0x18	; 24
     e74:	8a 95       	dec	r24
     e76:	c9 f7       	brne	.-14     	; 0xe6a <main+0x14>
_CLKCTRL_SETUP():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.8/cores/megaAVR/api/CLKCTRL_megaAVR.h:127
  // _PROTECTED_WRITE(CLKCTRL.MCLKCTRLA, CLKCTRL_CLKSEL_OSC20M_gc);

#else

  #if defined(_CLKCTRL_PDIV_)
  _PROTECTED_WRITE(CLKCTRL_MCLKCTRLB, _CLKCTRL_PDIV_ | CLKCTRL_PEN_bm);
     e78:	88 ed       	ldi	r24, 0xD8	; 216
     e7a:	41 e0       	ldi	r20, 0x01	; 1
     e7c:	50 e0       	ldi	r21, 0x00	; 0
     e7e:	84 bf       	out	0x34, r24	; 52
     e80:	40 93 61 00 	sts	0x0061, r20	; 0x800061 <__RODATA_PM_OFFSET__+0x7f8061>
setup():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:17
#include <avr/io.h>

void SYS::setup (void) {

  /* Target reset release */
  pinControlRegister(TRST_PIN) = TRST_PIN_CONFIG;
     e84:	8c e0       	ldi	r24, 0x0C	; 12
     e86:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <__RODATA_PM_OFFSET__+0x7f8431>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:20

  /* Outgoing port */
  PORTA_DIRSET = _BV(pinPosition(HVP1_PIN))
     e8a:	88 ef       	ldi	r24, 0xF8	; 248
     e8c:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <__RODATA_PM_OFFSET__+0x7f8401>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:25
               | _BV(pinPosition(HVP2_PIN))
               | _BV(pinPosition(HV12_PIN))
               | _BV(pinPosition(LEDG_PIN))
               | _BV(pinPosition(LEDY_PIN));
  PORTB_DIRSET = _BV(pinPosition(HV8_PIN));
     e90:	80 e2       	ldi	r24, 0x20	; 32
     e92:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__RODATA_PM_OFFSET__+0x7f8421>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:28

  /* USART switching LOW=Target opening (PG_Disable) */
  PORTC_DIRSET = _BV(pinPosition(PGEN_PIN));
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <__RODATA_PM_OFFSET__+0x7f8441>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:31

  /* LED output */
  LEDG_EVOUT_MUX = LEDG_EVOUT_ALT;          /* OUT:PA7 */
     e9c:	80 93 e0 05 	sts	0x05E0, r24	; 0x8005e0 <__RODATA_PM_OFFSET__+0x7f85e0>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:32
  PORTMUX_CCLROUTEA = PORTMUX_LUT3_ALT1_gc; /* OUT:PA5 IN:PC0,PC1,PC2 */
     ea0:	98 e0       	ldi	r25, 0x08	; 8
     ea2:	90 93 e1 05 	sts	0x05E1, r25	; 0x8005e1 <__RODATA_PM_OFFSET__+0x7f85e1>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:33
  PORTA_OUTSET = _BV(pinPosition(LEDG_PIN))
     ea6:	30 ea       	ldi	r19, 0xA0	; 160
     ea8:	30 93 05 04 	sts	0x0405, r19	; 0x800405 <__RODATA_PM_OFFSET__+0x7f8405>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:37
               | _BV(pinPosition(LEDY_PIN));

  /* USART Alternative Selection */
  PORTMUX_USARTROUTEA = JTAG_PMUX_ALT | UPDI_PMUX_ALT;
     eac:	45 e0       	ldi	r20, 0x05	; 5
     eae:	40 93 e2 05 	sts	0x05E2, r20	; 0x8005e2 <__RODATA_PM_OFFSET__+0x7f85e2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:40

  /* JTAG port */
  pinControlRegister(JTAG_TXD_PIN) = JTAG_TXD_CONFIG;
     eb2:	90 93 52 04 	sts	0x0452, r25	; 0x800452 <__RODATA_PM_OFFSET__+0x7f8452>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:41
  pinControlRegister(JTAG_RXD_PIN) = JTAG_RXD_CONFIG;
     eb6:	90 93 51 04 	sts	0x0451, r25	; 0x800451 <__RODATA_PM_OFFSET__+0x7f8451>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:44

  /* UPDI port */
  pinControlRegister(UPDI_TDAT_PIN) = UPDI_TDAT_CONFIG;
     eba:	90 93 11 04 	sts	0x0411, r25	; 0x800411 <__RODATA_PM_OFFSET__+0x7f8411>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:47

  /* HV generator */
  pinControlRegister(HVP1_PIN) = HVP1_PIN_CONFIG;
     ebe:	20 93 13 04 	sts	0x0413, r18	; 0x800413 <__RODATA_PM_OFFSET__+0x7f8413>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:48
  pinControlRegister(HVP2_PIN) = HVP2_PIN_CONFIG;
     ec2:	34 e8       	ldi	r19, 0x84	; 132
     ec4:	30 93 14 04 	sts	0x0414, r19	; 0x800414 <__RODATA_PM_OFFSET__+0x7f8414>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:51

  /* SW1 Interrupt permission */
  pinControlRegister(SW_SENSE_PIN) = SW_SENSE_CONFIG;
     ec8:	3d e0       	ldi	r19, 0x0D	; 13
     eca:	30 93 30 04 	sts	0x0430, r19	; 0x800430 <__RODATA_PM_OFFSET__+0x7f8430>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:54

  /* RTS monitor */
  pinControlRegister(RTS_SENSE_PIN) = RTS_SENSE_CONFIG;
     ece:	39 e0       	ldi	r19, 0x09	; 9
     ed0:	30 93 12 04 	sts	0x0412, r19	; 0x800412 <__RODATA_PM_OFFSET__+0x7f8412>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:57

  /* JP1 monitor */
  pinControlRegister(JP_SENSE_PIN) = JP_SENSE_CONFIG;
     ed4:	90 93 53 04 	sts	0x0453, r25	; 0x800453 <__RODATA_PM_OFFSET__+0x7f8453>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:60

  /* Initialize state variables */
  UPDI_CONTROL = 0;
     ed8:	1c ba       	out	0x1c, r1	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:61
  UPDI_NVMCTRL = 0;
     eda:	1d ba       	out	0x1d, r1	; 29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:46

void TIM::setup (void) {

  /* EVSYS signal distribution */

  EVSYS_CHANNEL0 = EVSYS_CHANNEL0_CCL_LUT0_gc;
     edc:	90 e1       	ldi	r25, 0x10	; 16
     ede:	90 93 90 01 	sts	0x0190, r25	; 0x800190 <__RODATA_PM_OFFSET__+0x7f8190>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:47
  EVSYS_CHANNEL1 = EVSYS_CHANNEL1_RTC_PIT_DIV128_gc;
     ee2:	3a e0       	ldi	r19, 0x0A	; 10
     ee4:	30 93 91 01 	sts	0x0191, r19	; 0x800191 <__RODATA_PM_OFFSET__+0x7f8191>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:48
  EVSYS_CHANNEL2 = EVSYS_CHANNEL2_CCL_LUT1_gc;
     ee8:	91 e1       	ldi	r25, 0x11	; 17
     eea:	90 93 92 01 	sts	0x0192, r25	; 0x800192 <__RODATA_PM_OFFSET__+0x7f8192>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:49
  EVSYS_CHANNEL3 = EVSYS_CHANNEL3_PORTA_PIN5_gc;  /* <- PA5:LEDY */
     eee:	9d e4       	ldi	r25, 0x4D	; 77
     ef0:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <__RODATA_PM_OFFSET__+0x7f8193>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:50
  EVSYS_USERTCB0COUNT = EVSYS_USER_CHANNEL1_gc;
     ef4:	92 e0       	ldi	r25, 0x02	; 2
     ef6:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <__RODATA_PM_OFFSET__+0x7f81b1>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:51
  EVSYS_USERTCB1COUNT = EVSYS_USER_CHANNEL1_gc;
     efa:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <__RODATA_PM_OFFSET__+0x7f81b3>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:52
  EVSYS_USERCCLLUT0A  = EVSYS_USER_CHANNEL3_gc;   /* <- PA5:LEDY */
     efe:	20 93 a0 01 	sts	0x01A0, r18	; 0x8001a0 <__RODATA_PM_OFFSET__+0x7f81a0>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:53
  EVSYS_USERCCLLUT1A  = EVSYS_USER_CHANNEL3_gc;   /* <- PA5:LEDY */
     f02:	20 93 a2 01 	sts	0x01A2, r18	; 0x8001a2 <__RODATA_PM_OFFSET__+0x7f81a2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:60
  /* When PA5:LEDY of CCL3 is used, the signal output of CCL0 and CCL1 is stopped. */

  /* CCL/LUT construction */

  /* TRUTH0: 010 is ON */
  CCL_TRUTH0    = CCL_TRUTH_2_bm;
     f06:	20 93 cb 01 	sts	0x01CB, r18	; 0x8001cb <__RODATA_PM_OFFSET__+0x7f81cb>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:61
  CCL_LUT0CTRLC = CCL_INSEL2_EVENTA_gc;           /* <- IN2:PA5 */
     f0a:	93 e0       	ldi	r25, 0x03	; 3
     f0c:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <__RODATA_PM_OFFSET__+0x7f81ca>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:62
  CCL_LUT0CTRLB = CCL_INSEL1_TCB1_gc;             /* <- IN1:POS */
     f10:	20 ec       	ldi	r18, 0xC0	; 192
     f12:	20 93 c9 01 	sts	0x01C9, r18	; 0x8001c9 <__RODATA_PM_OFFSET__+0x7f81c9>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:63
  CCL_LUT0CTRLA = CCL_ENABLE_bm;
     f16:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <__RODATA_PM_OFFSET__+0x7f81c8>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:66

  /* TRUTH1: 001 010 is ON */
  CCL_TRUTH1    = CCL_TRUTH_1_bm | CCL_TRUTH_2_bm;
     f1a:	26 e0       	ldi	r18, 0x06	; 6
     f1c:	20 93 cf 01 	sts	0x01CF, r18	; 0x8001cf <__RODATA_PM_OFFSET__+0x7f81cf>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:67
  CCL_LUT1CTRLC = CCL_INSEL2_EVENTA_gc;           /* <- IN2:PA5 */
     f20:	90 93 ce 01 	sts	0x01CE, r25	; 0x8001ce <__RODATA_PM_OFFSET__+0x7f81ce>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:68
  CCL_LUT1CTRLB = CCL_INSEL0_TCA0_gc | CCL_INSEL1_TCB1_gc;  /* <- IN0:POS IN1:POS */
     f24:	2a ec       	ldi	r18, 0xCA	; 202
     f26:	20 93 cd 01 	sts	0x01CD, r18	; 0x8001cd <__RODATA_PM_OFFSET__+0x7f81cd>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:69
  CCL_LUT1CTRLA = CCL_ENABLE_bm;
     f2a:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <__RODATA_PM_OFFSET__+0x7f81cc>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:75

  /* TRUTH3: 001 010 is ON */
  /* CCL_INSEL0_USART0_gc : USART0TX normal HIGH */
  /* CCL_INSEL1_IO_gc     : USART1RX normal HIGH */
  /* CCL_INSEL2_IO_gc     : USART1TX normal HIGH */
  CCL_TRUTH3    = (uint8_t) ~CCL_TRUTH_7_bm;
     f2e:	2f e7       	ldi	r18, 0x7F	; 127
     f30:	20 93 d7 01 	sts	0x01D7, r18	; 0x8001d7 <__RODATA_PM_OFFSET__+0x7f81d7>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:76
  CCL_LUT3CTRLC = CCL_INSEL2_IO_gc;
     f34:	40 93 d6 01 	sts	0x01D6, r20	; 0x8001d6 <__RODATA_PM_OFFSET__+0x7f81d6>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:77
  CCL_LUT3CTRLB = CCL_INSEL0_USART0_gc | CCL_INSEL1_IO_gc;
     f38:	28 e5       	ldi	r18, 0x58	; 88
     f3a:	20 93 d5 01 	sts	0x01D5, r18	; 0x8001d5 <__RODATA_PM_OFFSET__+0x7f81d5>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:78
  CCL_LUT3CTRLA = CCL_ENABLE_bm | CCL_OUTEN_bm;
     f3e:	21 e4       	ldi	r18, 0x41	; 65
     f40:	20 93 d4 01 	sts	0x01D4, r18	; 0x8001d4 <__RODATA_PM_OFFSET__+0x7f81d4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:81

  /* CCL enable */
  CCL_CTRLA = CCL_RUNSTDBY_bm | CCL_ENABLE_bm;
     f44:	20 93 c0 01 	sts	0x01C0, r18	; 0x8001c0 <__RODATA_PM_OFFSET__+0x7f81c0>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:84

  /* RTC_PIT enable */
  RTC_PITCTRLA = RTC_PITEN_bm;
     f48:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__RODATA_PM_OFFSET__+0x7f8150>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:89

  /* Timer */

  /* TCA0 */
  TCA0_SPLIT_CTRLD = TCA_SPLIT_SPLITM_bm;
     f4c:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <__RODATA_PM_OFFSET__+0x7f8a03>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:90
  TCA0_SPLIT_LPER  = TCA0_STEP - 2;
     f50:	29 e8       	ldi	r18, 0x89	; 137
     f52:	20 93 26 0a 	sts	0x0A26, r18	; 0x800a26 <__RODATA_PM_OFFSET__+0x7f8a26>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:91
  TCA0_SPLIT_LCMP0 = TCA0_STEP / 2;
     f56:	25 e4       	ldi	r18, 0x45	; 69
     f58:	20 93 28 0a 	sts	0x0A28, r18	; 0x800a28 <__RODATA_PM_OFFSET__+0x7f8a28>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:92
  TCA0_SPLIT_HPER  = 1;
     f5c:	80 93 27 0a 	sts	0x0A27, r24	; 0x800a27 <__RODATA_PM_OFFSET__+0x7f8a27>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:93
  TCA0_SPLIT_HCMP0 = 1;     /* WOA3=PA3 */
     f60:	80 93 29 0a 	sts	0x0A29, r24	; 0x800a29 <__RODATA_PM_OFFSET__+0x7f8a29>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:94
  TCA0_SPLIT_HCMP1 = 1;     /* WOA4=PA4 */
     f64:	80 93 2b 0a 	sts	0x0A2B, r24	; 0x800a2b <__RODATA_PM_OFFSET__+0x7f8a2b>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:95
  TCA0_SPLIT_CTRLA = TCA_SPLIT_RUNSTDBY_bm | TCA_SPLIT_ENABLE_bm | TCA_SPLIT_CLKSEL_DIV1024_gc;
     f68:	8f e8       	ldi	r24, 0x8F	; 143
     f6a:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__RODATA_PM_OFFSET__+0x7f8a00>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:98

  /* TCB1 */
  TCB1_CTRLB = TCB_CNTMODE_PWM8_gc;
     f6e:	87 e0       	ldi	r24, 0x07	; 7
     f70:	80 93 91 0a 	sts	0x0A91, r24	; 0x800a91 <__RODATA_PM_OFFSET__+0x7f8a91>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:460
/******************
 * Initialization *
 ******************/

void JTAG2::setup (void) {
  JTAG_USART.BAUD = pgm_read_word( &BAUD_TABLE[BAUD_19200] );
     f74:	ed e9       	ldi	r30, 0x9D	; 157
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	45 91       	lpm	r20, Z+
     f7a:	54 91       	lpm	r21, Z
     f7c:	40 93 28 08 	sts	0x0828, r20	; 0x800828 <__RODATA_PM_OFFSET__+0x7f8828>
     f80:	50 93 29 08 	sts	0x0829, r21	; 0x800829 <__RODATA_PM_OFFSET__+0x7f8829>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:461
  JTAG_USART.CTRLA = JTAG_USART_CTRLA;
     f84:	10 92 25 08 	sts	0x0825, r1	; 0x800825 <__RODATA_PM_OFFSET__+0x7f8825>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:462
  JTAG_USART.CTRLC = JTAG_USART_CTRLC;
     f88:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__RODATA_PM_OFFSET__+0x7f8827>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:463
  JTAG_USART.CTRLB = JTAG_USART_OFF;
     f8c:	88 e8       	ldi	r24, 0x88	; 136
     f8e:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__RODATA_PM_OFFSET__+0x7f8826>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:70
  }
  #endif
}

void UPDI::setup (void) {
  UPDI_USART.BAUD  = UPDI_BAUD_CALC;
     f92:	80 eb       	ldi	r24, 0xB0	; 176
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__RODATA_PM_OFFSET__+0x7f8808>
     f9a:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__RODATA_PM_OFFSET__+0x7f8809>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:71
  UPDI_USART.CTRLA = UPDI_USART_CTRLA;
     f9e:	30 93 05 08 	sts	0x0805, r19	; 0x800805 <__RODATA_PM_OFFSET__+0x7f8805>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:72
  UPDI_USART.CTRLC = UPDI_USART_CTRLC;
     fa2:	8b e2       	ldi	r24, 0x2B	; 43
     fa4:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <__RODATA_PM_OFFSET__+0x7f8807>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:73
  UPDI_USART.CTRLB = UPDI_USART_ON;
     fa8:	88 ec       	ldi	r24, 0xC8	; 200
     faa:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__RODATA_PM_OFFSET__+0x7f8806>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:74
  bit_clear(UPDI_CONTROL, UPDI_CLKU_bp);
     fae:	e6 98       	cbi	0x1c, 6	; 28
ready():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:121
 * Run at the end of the boot sequence *
 ***************************************/

void SYS::ready (void) {
  /* Release target from reset state after resetting WDT timeout */
  if (bit_is_set(RSTCTRL_RSTFR, RSTCTRL_WDRF_bp))
     fb0:	80 91 40 00 	lds	r24, 0x0040	; 0x800040 <__RODATA_PM_OFFSET__+0x7f8040>
     fb4:	83 ff       	sbrs	r24, 3
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <main+0x166>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:122
    UPDI::Target_Reset(false);
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	ad d9       	rcall	.-3238   	; 0x316 <UPDI::Target_Reset(bool)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:125

  /* Clears the reset state flag. */
  RSTCTRL_RSTFR = RSTCTRL_RSTFR;
     fbc:	80 91 40 00 	lds	r24, 0x0040	; 0x800040 <__RODATA_PM_OFFSET__+0x7f8040>
     fc0:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__RODATA_PM_OFFSET__+0x7f8040>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:128

  /*** Hibernation mode ***/
  set_sleep_mode(SLEEP_MODE_STANDBY);
     fc4:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <__RODATA_PM_OFFSET__+0x7f8050>
     fc8:	89 7f       	andi	r24, 0xF9	; 249
     fca:	82 60       	ori	r24, 0x02	; 2
     fcc:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__RODATA_PM_OFFSET__+0x7f8050>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:131

  /* Clear asynchronous interrupts detected during initialization */
  while (portRegister(RTS_SENSE_PIN).INTFLAGS) {
     fd0:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__RODATA_PM_OFFSET__+0x7f8409>
     fd4:	88 23       	and	r24, r24
     fd6:	29 f0       	breq	.+10     	; 0xfe2 <main+0x18c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:133
    portRegister(RTS_SENSE_PIN).INTFLAGS =
    portRegister(RTS_SENSE_PIN).INTFLAGS;
     fd8:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__RODATA_PM_OFFSET__+0x7f8409>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:132
  /*** Hibernation mode ***/
  set_sleep_mode(SLEEP_MODE_STANDBY);

  /* Clear asynchronous interrupts detected during initialization */
  while (portRegister(RTS_SENSE_PIN).INTFLAGS) {
    portRegister(RTS_SENSE_PIN).INTFLAGS =
     fdc:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <__RODATA_PM_OFFSET__+0x7f8409>
     fe0:	f7 cf       	rjmp	.-18     	; 0xfd0 <main+0x17a>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:137
    portRegister(RTS_SENSE_PIN).INTFLAGS;
  }

  /* Interrupt permission */
  sei();
     fe2:	78 94       	sei
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:142

  /* Keeps the LED flashing while the RTS maintains a low signal level. */
  /* This usually indicates that the serial console is still open.      */
  /* After completion, the system will be reset. */
  if (!digitalRead(RTS_SENSE_PIN)) {
     fe4:	12 99       	sbic	0x02, 2	; 2
     fe6:	0f c0       	rjmp	.+30     	; 0x1006 <main+0x1b0>
LED_Flash():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:150
  }
}

/* Flash (after RTS assert/UPDI authorization) */
void TIM::LED_Flash (void) {
  LED_TCB1(2, TCB1_FLASH);
     fe8:	69 ea       	ldi	r22, 0xA9	; 169
     fea:	78 e0       	ldi	r23, 0x08	; 8
     fec:	82 e0       	ldi	r24, 0x02	; 2
     fee:	a5 d9       	rcall	.-3254   	; 0x33a <LED_TCB1(unsigned char, unsigned int)>
ready():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:144
    TIM::LED_Flash();
    while (!digitalRead(RTS_SENSE_PIN)) {
     ff0:	12 99       	sbic	0x02, 2	; 2
     ff2:	06 c0       	rjmp	.+12     	; 0x1000 <main+0x1aa>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:145
      sleep_enable();
     ff4:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <__RODATA_PM_OFFSET__+0x7f8050>
     ff8:	81 60       	ori	r24, 0x01	; 1
     ffa:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__RODATA_PM_OFFSET__+0x7f8050>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:172
void SYS::WDT_ON (void) { WDT_SET(WDT_PERIOD_8KCLK_gc); }

void SYS::WDT_Short (void) { WDT_SET(WDT_PERIOD_512CLK_gc); }

void SYS::WDT_REBOOT (void) {
  WDT_SET(WDT_PERIOD_8CLK_gc);
     ffe:	f8 cf       	rjmp	.-16     	; 0xff0 <main+0x19a>
WDT_REBOOT():
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	55 db       	rcall	.-2390   	; 0x6ae <SYS::WDT_SET(unsigned char)>
    1004:	ff cf       	rjmp	.-2      	; 0x1004 <main+0x1ae>
LED_HeartBeat():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:129
 * LED operation switching
 */

/* Heartbeat (waiting) */
void TIM::LED_HeartBeat (void) {
  if (TIM::mode != 1) {
    1006:	80 91 61 38 	lds	r24, 0x3861	; 0x803861 <TIM::mode>
    100a:	81 30       	cpi	r24, 0x01	; 1
    100c:	99 f0       	breq	.+38     	; 0x1034 <main+0x1de>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:130
    TIM::mode = 1;
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	80 93 61 38 	sts	0x3861, r24	; 0x803861 <TIM::mode>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:131
    TCB1_CCMP = TCB1_HBEAT;
    1014:	8a e8       	ldi	r24, 0x8A	; 138
    1016:	95 e4       	ldi	r25, 0x45	; 69
    1018:	80 93 9c 0a 	sts	0x0A9C, r24	; 0x800a9c <__RODATA_PM_OFFSET__+0x7f8a9c>
    101c:	90 93 9d 0a 	sts	0x0A9D, r25	; 0x800a9d <__RODATA_PM_OFFSET__+0x7f8a9d>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:132
    TCB1_CNT = 0;
    1020:	10 92 9a 0a 	sts	0x0A9A, r1	; 0x800a9a <__RODATA_PM_OFFSET__+0x7f8a9a>
    1024:	10 92 9b 0a 	sts	0x0A9B, r1	; 0x800a9b <__RODATA_PM_OFFSET__+0x7f8a9b>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:133
    TCB1_CTRLA = TCB_RUNSTDBY_bm | TCB_ENABLE_bm | TCB_CLKSEL_TCA0_gc;
    1028:	85 e4       	ldi	r24, 0x45	; 69
    102a:	80 93 90 0a 	sts	0x0A90, r24	; 0x800a90 <__RODATA_PM_OFFSET__+0x7f8a90>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:134
    LEDG_EVOUT = EVSYS_USER_CHANNEL2_gc;
    102e:	83 e0       	ldi	r24, 0x03	; 3
    1030:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <__RODATA_PM_OFFSET__+0x7f81a9>
ready():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:152
    SYS::WDT_REBOOT();
  }
  TIM::LED_HeartBeat();

  /* It stays in a low power state until the first interrupt occurs. */
  sleep_enable();
    1034:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <__RODATA_PM_OFFSET__+0x7f8050>
    1038:	81 60       	ori	r24, 0x01	; 1
    103a:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__RODATA_PM_OFFSET__+0x7f8050>
process_command():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:337
    #ifdef ENABLE_DEBUG_UPDI_SENDER
    UPDI::_send_buf_clear();
    #endif
    uint8_t message_id = packet.body[MESSAGE_ID];
    packet.size_word[0] = 1;
    packet.body[MESSAGE_ID] = RSP_OK;
    103e:	f0 e8       	ldi	r31, 0x80	; 128
    1040:	af 2e       	mov	r10, r31
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:369
            /* If the general reset setting is neither 0 nor 1. */
            /* Accepts special extension settings.              */
            /* This forces HV control.                          */
            updi_desc.hvupdi_variant = hv_control;
            /* '1' must be passed for automatic HV control to be inhibited */
            if (hv_control != '1') hv_active = true;
    1042:	bb 24       	eor	r11, r11
    1044:	b3 94       	inc	r11
get_parameter():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:254
      }
      case PAR_EMU_MODE : {
        /* This response code indicates an UPDI-only implementation */
        /* In normal JTAGICEmkII this is never queried */
        packet.body[1] = 0x55;
        packet.size_word[0] = 2;
    1046:	a2 e0       	ldi	r26, 0x02	; 2
    1048:	2a 2e       	mov	r2, r26
    104a:	31 2c       	mov	r3, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:264
        packet.size_word[0] = 2;
        break;
      }
      case PAR_VTARGET : {
        _CAPS16(packet.body[1])->word = SYS::get_vcc();
        packet.size_word[0] = 3;
    104c:	b3 e0       	ldi	r27, 0x03	; 3
    104e:	8b 2e       	mov	r8, r27
    1050:	91 2c       	mov	r9, r1
sign_on_response():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:168
  /********************
   * SIGN_ON Response *
   ********************/

  void sign_on_response (void) {
    NVM::before_address = -1;
    1052:	44 24       	eor	r4, r4
    1054:	4a 94       	dec	r4
    1056:	54 2c       	mov	r5, r4
    1058:	32 01       	movw	r6, r4
get():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:86
  /*******************
   * Local functions *
   *******************/

  uint8_t get (void) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_RXCIF_bp);
    105a:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
    105e:	87 ff       	sbrs	r24, 7
    1060:	fc cf       	rjmp	.-8      	; 0x105a <main+0x204>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:87
    return JTAG_USART.RXDATAL;
    1062:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__RODATA_PM_OFFSET__+0x7f8820>
packet_receive():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:126
    uint16_t _crc = ~0;
    uint8_t *p = (uint8_t*) &packet.soh;
    uint8_t *q = (uint8_t*) &packet.soh;

    /* Waiting for reception (infinite loop) */
    while (get() != MESSAGE_START);
    1066:	8b 31       	cpi	r24, 0x1B	; 27
    1068:	c1 f7       	brne	.-16     	; 0x105a <main+0x204>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:127
    (*p++) = MESSAGE_START;
    106a:	80 93 8c 38 	sts	0x388C, r24	; 0x80388c <JTAG2::packet>
    106e:	ed e8       	ldi	r30, 0x8D	; 141
    1070:	f8 e3       	ldi	r31, 0x38	; 56
get():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:86
  /*******************
   * Local functions *
   *******************/

  uint8_t get (void) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_RXCIF_bp);
    1072:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
    1076:	87 ff       	sbrs	r24, 7
    1078:	fc cf       	rjmp	.-8      	; 0x1072 <main+0x21c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:87
    return JTAG_USART.RXDATAL;
    107a:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__RODATA_PM_OFFSET__+0x7f8820>
packet_receive():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:130
    /* Waiting for reception (infinite loop) */
    while (get() != MESSAGE_START);
    (*p++) = MESSAGE_START;

    /* First 7bytes */
    for (int8_t i = 0; i < 7; i++) *p++ = get();
    107e:	81 93       	st	Z+, r24
    1080:	28 e3       	ldi	r18, 0x38	; 56
    1082:	e4 39       	cpi	r30, 0x94	; 148
    1084:	f2 07       	cpc	r31, r18
    1086:	a9 f7       	brne	.-22     	; 0x1072 <main+0x21c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:133

    /* STX confirmation */
    if (packet.stx != TOKEN) return false;
    1088:	80 91 93 38 	lds	r24, 0x3893	; 0x803893 <JTAG2::packet+0x7>
    108c:	8e 30       	cpi	r24, 0x0E	; 14
    108e:	29 f7       	brne	.-54     	; 0x105a <main+0x204>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:136

    /* Check packet length */
    if (packet.size > sizeof(packet.body)) return false;
    1090:	80 91 8f 38 	lds	r24, 0x388F	; 0x80388f <JTAG2::packet+0x3>
    1094:	90 91 90 38 	lds	r25, 0x3890	; 0x803890 <JTAG2::packet+0x4>
    1098:	a0 91 91 38 	lds	r26, 0x3891	; 0x803891 <JTAG2::packet+0x5>
    109c:	b0 91 92 38 	lds	r27, 0x3892	; 0x803892 <JTAG2::packet+0x6>
    10a0:	85 31       	cpi	r24, 0x15	; 21
    10a2:	92 40       	sbci	r25, 0x02	; 2
    10a4:	a1 05       	cpc	r26, r1
    10a6:	b1 05       	cpc	r27, r1
    10a8:	c0 f6       	brcc	.-80     	; 0x105a <main+0x204>
    10aa:	04 e9       	ldi	r16, 0x94	; 148
    10ac:	18 e3       	ldi	r17, 0x38	; 56
    10ae:	68 01       	movw	r12, r16
main():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:139

    /* receive the rest */
    for (int16_t j = -2; j < packet.size_word[0]; j++) *p++ = get();
    10b0:	8e ef       	ldi	r24, 0xFE	; 254
    10b2:	9f ef       	ldi	r25, 0xFF	; 255
packet_receive():
    10b4:	20 91 8f 38 	lds	r18, 0x388F	; 0x80388f <JTAG2::packet+0x3>
    10b8:	30 91 90 38 	lds	r19, 0x3890	; 0x803890 <JTAG2::packet+0x4>
    10bc:	82 17       	cp	r24, r18
    10be:	93 07       	cpc	r25, r19
    10c0:	5c f4       	brge	.+22     	; 0x10d8 <main+0x282>
get():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:86
  /*******************
   * Local functions *
   *******************/

  uint8_t get (void) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_RXCIF_bp);
    10c2:	20 91 24 08 	lds	r18, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
    10c6:	27 ff       	sbrs	r18, 7
    10c8:	fc cf       	rjmp	.-8      	; 0x10c2 <main+0x26c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:87
    return JTAG_USART.RXDATAL;
    10ca:	20 91 20 08 	lds	r18, 0x0820	; 0x800820 <__RODATA_PM_OFFSET__+0x7f8820>
packet_receive():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:139

    /* Check packet length */
    if (packet.size > sizeof(packet.body)) return false;

    /* receive the rest */
    for (int16_t j = -2; j < packet.size_word[0]; j++) *p++ = get();
    10ce:	d6 01       	movw	r26, r12
    10d0:	2d 93       	st	X+, r18
    10d2:	6d 01       	movw	r12, r26
    10d4:	01 96       	adiw	r24, 0x01	; 1
    10d6:	ee cf       	rjmp	.-36     	; 0x10b4 <main+0x25e>
    10d8:	ec e8       	ldi	r30, 0x8C	; 140
    10da:	ee 2e       	mov	r14, r30
    10dc:	e8 e3       	ldi	r30, 0x38	; 56
    10de:	fe 2e       	mov	r15, r30
main():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:121
  /****************
   * JTAG Receive *
   ****************/

  bool packet_receive (void) {
    uint16_t _crc = ~0;
    10e0:	8f ef       	ldi	r24, 0xFF	; 255
    10e2:	9f ef       	ldi	r25, 0xFF	; 255
packet_receive():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:142

    /* receive the rest */
    for (int16_t j = -2; j < packet.size_word[0]; j++) *p++ = get();

    /* CRC check when receive buffer is filled */
    while (p != q) _crc = crc16_update(_crc, *q++);
    10e4:	ec 14       	cp	r14, r12
    10e6:	fd 04       	cpc	r15, r13
    10e8:	29 f0       	breq	.+10     	; 0x10f4 <main+0x29e>
    10ea:	f7 01       	movw	r30, r14
    10ec:	61 91       	ld	r22, Z+
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:101
  void flush (void) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_TXCIF_bp);
  }

  uint16_t crc16_update(uint16_t _crc, uint8_t _data) {
    return _crc_ccitt_update(_crc, _data);
    10ee:	7f 01       	movw	r14, r30
crc16_update():
    10f0:	6c d9       	rcall	.-3368   	; 0x3ca <_crc_ccitt_update(unsigned int, unsigned char)>
    10f2:	f8 cf       	rjmp	.-16     	; 0x10e4 <main+0x28e>
wakeup_jtag():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:486
 * Main loop *
 *************/

void JTAG2::wakeup_jtag (void) {
  for (;;) {
    if (packet_receive()) process_command();
    10f4:	89 2b       	or	r24, r25
    10f6:	09 f0       	breq	.+2      	; 0x10fa <main+0x2a4>
    10f8:	b0 cf       	rjmp	.-160    	; 0x105a <main+0x204>
process_command():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:331
  /****************
   * JTAG Process *
   ****************/

  inline void process_command (void) {
    wdt_reset();
    10fa:	a8 95       	wdr
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:335
    #ifdef ENABLE_DEBUG_UPDI_SENDER
    UPDI::_send_buf_clear();
    #endif
    uint8_t message_id = packet.body[MESSAGE_ID];
    10fc:	80 91 94 38 	lds	r24, 0x3894	; 0x803894 <JTAG2::packet+0x8>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:336
    packet.size_word[0] = 1;
    1100:	21 e0       	ldi	r18, 0x01	; 1
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	20 93 8f 38 	sts	0x388F, r18	; 0x80388f <JTAG2::packet+0x3>
    1108:	30 93 90 38 	sts	0x3890, r19	; 0x803890 <JTAG2::packet+0x4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:337
    packet.body[MESSAGE_ID] = RSP_OK;
    110c:	a0 92 94 38 	sts	0x3894, r10	; 0x803894 <JTAG2::packet+0x8>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:338
    switch (message_id) {
    1110:	8b 30       	cpi	r24, 0x0B	; 11
    1112:	09 f4       	brne	.+2      	; 0x1116 <main+0x2c0>
    1114:	47 c1       	rjmp	.+654    	; 0x13a4 <main+0x54e>
    1116:	08 f0       	brcs	.+2      	; 0x111a <main+0x2c4>
    1118:	4c c0       	rjmp	.+152    	; 0x11b2 <main+0x35c>
    111a:	83 30       	cpi	r24, 0x03	; 3
    111c:	09 f4       	brne	.+2      	; 0x1120 <main+0x2ca>
    111e:	cb c0       	rjmp	.+406    	; 0x12b6 <main+0x460>
    1120:	08 f0       	brcs	.+2      	; 0x1124 <main+0x2ce>
    1122:	3d c0       	rjmp	.+122    	; 0x119e <main+0x348>
    1124:	81 30       	cpi	r24, 0x01	; 1
    1126:	09 f4       	brne	.+2      	; 0x112a <main+0x2d4>
    1128:	68 c0       	rjmp	.+208    	; 0x11fa <main+0x3a4>
    112a:	08 f4       	brcc	.+2      	; 0x112e <main+0x2d8>
    112c:	b5 c1       	rjmp	.+874    	; 0x1498 <main+0x642>
set_parameter():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:191
   * CMND_SET_PARAMETER *
   **********************/

  bool set_parameter (void) {
    uint8_t param_val = packet.body[RSP_DATA + 1];
    switch ( packet.body[RSP_DATA] ) {
    112e:	80 91 95 38 	lds	r24, 0x3895	; 0x803895 <JTAG2::packet+0x9>
    1132:	85 30       	cpi	r24, 0x05	; 5
    1134:	09 f0       	breq	.+2      	; 0x1138 <main+0x2e2>
    1136:	46 c0       	rjmp	.+140    	; 0x11c4 <main+0x36e>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:190
  /**********************
   * CMND_SET_PARAMETER *
   **********************/

  bool set_parameter (void) {
    uint8_t param_val = packet.body[RSP_DATA + 1];
    1138:	d0 90 96 38 	lds	r13, 0x3896	; 0x803896 <JTAG2::packet+0xa>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:195
    switch ( packet.body[RSP_DATA] ) {
      /* JTAG interface speed */
      case PAR_BAUD_RATE : {
        /* Compatible range confirmation */
        if ((param_val >= BAUD_LOWER) && (param_val <= BAUD_UPPER)) {
    113c:	8e ef       	ldi	r24, 0xFE	; 254
    113e:	8d 0d       	add	r24, r13
    1140:	88 31       	cpi	r24, 0x18	; 24
    1142:	08 f0       	brcs	.+2      	; 0x1146 <main+0x2f0>
    1144:	b4 c0       	rjmp	.+360    	; 0x12ae <main+0x458>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:196
          uint16_t baud = pgm_read_word( &BAUD_TABLE[param_val] );
    1146:	8d 2d       	mov	r24, r13
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	fc 01       	movw	r30, r24
    114c:	ee 0f       	add	r30, r30
    114e:	ff 1f       	adc	r31, r31
    1150:	eb 56       	subi	r30, 0x6B	; 107
    1152:	ff 4f       	sbci	r31, 0xFF	; 255
    1154:	05 91       	lpm	r16, Z+
    1156:	14 91       	lpm	r17, Z
    1158:	78 01       	movw	r14, r16
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:197
          if (baud) {
    115a:	01 15       	cp	r16, r1
    115c:	11 05       	cpc	r17, r1
    115e:	09 f4       	brne	.+2      	; 0x1162 <main+0x30c>
    1160:	a6 c0       	rjmp	.+332    	; 0x12ae <main+0x458>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:199
            /* If normal, respond and then change speed */
            param_baud_rate_val = (jtag_baud_rate_e) param_val;
    1162:	80 93 36 38 	sts	0x3836, r24	; 0x803836 <JTAG2::param_baud_rate_val>
    1166:	90 93 37 38 	sts	0x3837, r25	; 0x803837 <JTAG2::param_baud_rate_val+0x1>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:200
            answer_transfer();
    116a:	41 d9       	rcall	.-3454   	; 0x3ee <JTAG2::answer_transfer()>
flush():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:97
    JTAG_USART.STATUS = USART_TXCIF_bm;
    return JTAG_USART.TXDATAL = _data;
  }

  void flush (void) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_TXCIF_bp);
    116c:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
    1170:	86 ff       	sbrs	r24, 6
    1172:	fc cf       	rjmp	.-8      	; 0x116c <main+0x316>
set_parameter():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:203
            /* If normal, respond and then change speed */
            param_baud_rate_val = (jtag_baud_rate_e) param_val;
            answer_transfer();
            flush();
            /* If the division ratio is too small, change to double speed mode */
            if (baud < 64) {
    1174:	00 34       	cpi	r16, 0x40	; 64
    1176:	11 05       	cpc	r17, r1
    1178:	30 f4       	brcc	.+12     	; 0x1186 <main+0x330>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:204
              JTAG_USART.CTRLB = JTAG_USART_DBLON;
    117a:	8a ec       	ldi	r24, 0xCA	; 202
    117c:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__RODATA_PM_OFFSET__+0x7f8826>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:205
              baud <<= 1;
    1180:	78 01       	movw	r14, r16
    1182:	ee 0c       	add	r14, r14
    1184:	ff 1c       	adc	r15, r15
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:207
            }
            JTAG_USART.BAUD = baud;
    1186:	e0 92 28 08 	sts	0x0828, r14	; 0x800828 <__RODATA_PM_OFFSET__+0x7f8828>
    118a:	f0 92 29 08 	sts	0x0829, r15	; 0x800829 <__RODATA_PM_OFFSET__+0x7f8829>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:209
            /* Speed to allow terminal mode */
            if (param_val == BAUD_38400 || param_val == BAUD_666666)
    118e:	35 e0       	ldi	r19, 0x05	; 5
    1190:	d3 16       	cp	r13, r19
    1192:	19 f0       	breq	.+6      	; 0x119a <main+0x344>
    1194:	88 e1       	ldi	r24, 0x18	; 24
    1196:	d8 12       	cpse	r13, r24
    1198:	60 cf       	rjmp	.-320    	; 0x105a <main+0x204>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:210
              bit_set(UPDI_CONTROL, UPDI::UPDI_TERM_bp);
    119a:	e5 9a       	sbi	0x1c, 5	; 28
    119c:	5e cf       	rjmp	.-324    	; 0x105a <main+0x204>
process_command():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:338
    UPDI::_send_buf_clear();
    #endif
    uint8_t message_id = packet.body[MESSAGE_ID];
    packet.size_word[0] = 1;
    packet.body[MESSAGE_ID] = RSP_OK;
    switch (message_id) {
    119e:	85 30       	cpi	r24, 0x05	; 5
    11a0:	09 f4       	brne	.+2      	; 0x11a4 <main+0x34e>
    11a2:	20 c1       	rjmp	.+576    	; 0x13e4 <main+0x58e>
    11a4:	08 f4       	brcc	.+2      	; 0x11a8 <main+0x352>
    11a6:	25 c1       	rjmp	.+586    	; 0x13f2 <main+0x59c>
    11a8:	88 30       	cpi	r24, 0x08	; 8
    11aa:	61 f0       	breq	.+24     	; 0x11c4 <main+0x36e>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:448
        // SYS::WDT_REBOOT();
        SYS::System_Reset();
      }
      /* Returns negation for unknown commands */
      default : {
        set_response(RSP_FAILED);
    11ac:	80 ea       	ldi	r24, 0xA0	; 160
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	80 c0       	rjmp	.+256    	; 0x12b2 <main+0x45c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:338
    UPDI::_send_buf_clear();
    #endif
    uint8_t message_id = packet.body[MESSAGE_ID];
    packet.size_word[0] = 1;
    packet.body[MESSAGE_ID] = RSP_OK;
    switch (message_id) {
    11b2:	86 31       	cpi	r24, 0x16	; 22
    11b4:	48 f4       	brcc	.+18     	; 0x11c8 <main+0x372>
    11b6:	84 31       	cpi	r24, 0x14	; 20
    11b8:	28 f4       	brcc	.+10     	; 0x11c4 <main+0x36e>
    11ba:	8c 30       	cpi	r24, 0x0C	; 12
    11bc:	09 f4       	brne	.+2      	; 0x11c0 <main+0x36a>
    11be:	35 c1       	rjmp	.+618    	; 0x142a <main+0x5d4>
    11c0:	8f 30       	cpi	r24, 0x0F	; 15
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:451
      /* Returns negation for unknown commands */
      default : {
        set_response(RSP_FAILED);
      }
    }
    answer_transfer();
    11c2:	a1 f7       	brne	.-24     	; 0x11ac <main+0x356>
    11c4:	14 d9       	rcall	.-3544   	; 0x3ee <JTAG2::answer_transfer()>
    11c6:	49 cf       	rjmp	.-366    	; 0x105a <main+0x204>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:338
    UPDI::_send_buf_clear();
    #endif
    uint8_t message_id = packet.body[MESSAGE_ID];
    packet.size_word[0] = 1;
    packet.body[MESSAGE_ID] = RSP_OK;
    switch (message_id) {
    11c8:	86 33       	cpi	r24, 0x36	; 54
    11ca:	e1 f3       	breq	.-8      	; 0x11c4 <main+0x36e>
    11cc:	85 35       	cpi	r24, 0x55	; 85
    11ce:	09 f4       	brne	.+2      	; 0x11d2 <main+0x37c>
    11d0:	49 c1       	rjmp	.+658    	; 0x1464 <main+0x60e>
    11d2:	84 33       	cpi	r24, 0x34	; 52
    11d4:	59 f7       	brne	.-42     	; 0x11ac <main+0x356>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:412
        #endif
        break;
      }
      case CMND_XMEGA_ERASE : {
        /* Received packet error retransmission exception */
        if (before_seqnum == packet.number) break;
    11d6:	20 91 8d 38 	lds	r18, 0x388D	; 0x80388d <JTAG2::packet+0x1>
    11da:	30 91 8e 38 	lds	r19, 0x388E	; 0x80388e <JTAG2::packet+0x2>
    11de:	80 91 38 38 	lds	r24, 0x3838	; 0x803838 <JTAG2::before_seqnum>
    11e2:	90 91 39 38 	lds	r25, 0x3839	; 0x803839 <JTAG2::before_seqnum+0x1>
    11e6:	28 17       	cp	r18, r24
    11e8:	39 07       	cpc	r19, r25
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:413
        if (UPDI::runtime(UPDI::UPDI_CMD_ERASE)) {
    11ea:	61 f3       	breq	.-40     	; 0x11c4 <main+0x36e>
    11ec:	83 e0       	ldi	r24, 0x03	; 3
    11ee:	f1 da       	rcall	.-2590   	; 0x7d2 <UPDI::runtime(unsigned char)>
    11f0:	81 11       	cpse	r24, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:418
          /* Keep the sequence number if completed successfully */
          before_seqnum = packet.number;
        }
        else {
          set_response(RSP_ILLEGAL_POWER_STATE);
    11f2:	0f c1       	rjmp	.+542    	; 0x1412 <main+0x5bc>
    11f4:	8d ea       	ldi	r24, 0xAD	; 173
    11f6:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:167
  _PROTECTED_WRITE(WDT_CTRLA, _wdt_period);
}

void SYS::WDT_OFF (void) { WDT_SET(WDT_PERIOD_OFF_gc); }

void SYS::WDT_ON (void) { WDT_SET(WDT_PERIOD_8KCLK_gc); }
    11f8:	5c c0       	rjmp	.+184    	; 0x12b2 <main+0x45c>
WDT_ON():
    11fa:	8b e0       	ldi	r24, 0x0B	; 11
    11fc:	58 da       	rcall	.-2896   	; 0x6ae <SYS::WDT_SET(unsigned char)>
RTS_Disable():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:108
void SYS::RTS_Enable (void) {
  pinControlRegister(RTS_SENSE_PIN) = RTS_SENSE_CONFIG;
}

void SYS::RTS_Disable (void) {
  pinControlRegister(RTS_SENSE_PIN) = RTS_SENSE_DISABLE;
    11fe:	88 e0       	ldi	r24, 0x08	; 8
    1200:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <__RODATA_PM_OFFSET__+0x7f8412>
LED_Stop():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:166
}

/* Suspension (before UPDI approval) */
/* TCA0 changed to charge pump drive speed */
void TIM::LED_Stop (void) {
  if (TIM::mode != 0) {
    1204:	80 91 61 38 	lds	r24, 0x3861	; 0x803861 <TIM::mode>
    1208:	88 23       	and	r24, r24
    120a:	41 f0       	breq	.+16     	; 0x121c <main+0x3c6>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:167
    TIM::mode = 0;
    120c:	10 92 61 38 	sts	0x3861, r1	; 0x803861 <TIM::mode>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:168
    TCA0_SPLIT_CTRLA = TCA_SPLIT_RUNSTDBY_bm | TCA_SPLIT_ENABLE_bm | TCA_SPLIT_CLKSEL_DIV1_gc;
    1210:	81 e8       	ldi	r24, 0x81	; 129
    1212:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__RODATA_PM_OFFSET__+0x7f8a00>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:169
    LEDG_EVOUT = EVSYS_USER_OFF_gc;
    1216:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <__RODATA_PM_OFFSET__+0x7f81a9>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:343
    switch (message_id) {
      case CMND_GET_SIGN_ON : {
        SYS::WDT_ON();
        SYS::RTS_Disable();
        TIM::LED_Stop();
        UPDI::Target_Reset(true);
    121a:	0f 98       	cbi	0x01, 7	; 1
process_command():
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	7b d8       	rcall	.-3850   	; 0x316 <UPDI::Target_Reset(bool)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:344
        openDrainWrite(TRST_PIN, LOW);
    1220:	21 9a       	sbi	0x04, 1	; 4
PG_Enable():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:96
/******************
 * Various ON/OFF *
 ******************/

void SYS::PG_Enable (void) {
  digitalWrite(PGEN_PIN, HIGH);
    1222:	48 9a       	sbi	0x09, 0	; 9
transfer_enable():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:106
    return _crc_ccitt_update(_crc, _data);
  }

  void transfer_enable (void) {
    SYS::PG_Enable();
    pinMode(JTAG_TXD_PIN, OUTPUT);
    1224:	42 9a       	sbi	0x08, 2	; 8
    1226:	10 92 52 04 	sts	0x0452, r1	; 0x800452 <__RODATA_PM_OFFSET__+0x7f8452>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:107
    JTAG_USART.CTRLB = JTAG_USART_ON;
    122a:	88 ec       	ldi	r24, 0xC8	; 200
    122c:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__RODATA_PM_OFFSET__+0x7f8826>
sign_on_response():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:168
  /********************
   * SIGN_ON Response *
   ********************/

  void sign_on_response (void) {
    NVM::before_address = -1;
    1230:	40 92 5d 38 	sts	0x385D, r4	; 0x80385d <NVM::before_address>
    1234:	50 92 5e 38 	sts	0x385E, r5	; 0x80385e <NVM::before_address+0x1>
    1238:	60 92 5f 38 	sts	0x385F, r6	; 0x80385f <NVM::before_address+0x2>
    123c:	70 92 60 38 	sts	0x3860, r7	; 0x803860 <NVM::before_address+0x3>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:169
    packet.size_word[0] = sizeof(sign_on_resp);
    1240:	8d e1       	ldi	r24, 0x1D	; 29
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	80 93 8f 38 	sts	0x388F, r24	; 0x80388f <JTAG2::packet+0x3>
    1248:	90 93 90 38 	sts	0x3890, r25	; 0x803890 <JTAG2::packet+0x4>
    124c:	e8 e7       	ldi	r30, 0x78	; 120
    124e:	f0 e0       	ldi	r31, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:171
    for (uint8_t i = 0; i < sizeof(sign_on_resp); i++)
      packet.body[i] = pgm_read_byte( &sign_on_resp[i] );
    1250:	84 91       	lpm	r24, Z
    1252:	d8 01       	movw	r26, r16
    1254:	8d 93       	st	X+, r24
    1256:	8d 01       	movw	r16, r26
    1258:	31 96       	adiw	r30, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:170
   ********************/

  void sign_on_response (void) {
    NVM::before_address = -1;
    packet.size_word[0] = sizeof(sign_on_resp);
    for (uint8_t i = 0; i < sizeof(sign_on_resp); i++)
    125a:	21 eb       	ldi	r18, 0xB1	; 177
    125c:	38 e3       	ldi	r19, 0x38	; 56
    125e:	2a 17       	cp	r18, r26
    1260:	3b 07       	cpc	r19, r27
    1262:	b1 f7       	brne	.-20     	; 0x1250 <main+0x3fa>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:176
      packet.body[i] = pgm_read_byte( &sign_on_resp[i] );
    /* Generate version information from SERNUM */
    uint8_t* p = (uint8_t*) &SIGROW_SERNUM0;
    uint8_t* q = (uint8_t*) &SIGROW_SERNUM4;
    uint8_t* r = (uint8_t*) &packet.body[10];
      *r++ = *q++ ^ *p++ ^ *p++;
    1264:	80 91 07 11 	lds	r24, 0x1107	; 0x801107 <__RODATA_PM_OFFSET__+0x7f9107>
    1268:	90 91 03 11 	lds	r25, 0x1103	; 0x801103 <__RODATA_PM_OFFSET__+0x7f9103>
    126c:	89 27       	eor	r24, r25
    126e:	90 91 04 11 	lds	r25, 0x1104	; 0x801104 <__RODATA_PM_OFFSET__+0x7f9104>
    1272:	89 27       	eor	r24, r25
    1274:	80 93 9e 38 	sts	0x389E, r24	; 0x80389e <JTAG2::packet+0x12>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:177
      *r++ = *q++ ^ *p++ ^ *p++;
    1278:	80 91 08 11 	lds	r24, 0x1108	; 0x801108 <__RODATA_PM_OFFSET__+0x7f9108>
    127c:	90 91 05 11 	lds	r25, 0x1105	; 0x801105 <__RODATA_PM_OFFSET__+0x7f9105>
    1280:	89 27       	eor	r24, r25
    1282:	90 91 06 11 	lds	r25, 0x1106	; 0x801106 <__RODATA_PM_OFFSET__+0x7f9106>
    1286:	89 27       	eor	r24, r25
    1288:	80 93 9f 38 	sts	0x389F, r24	; 0x80389f <JTAG2::packet+0x13>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:178
      *r++ = *q++;
    128c:	80 91 09 11 	lds	r24, 0x1109	; 0x801109 <__RODATA_PM_OFFSET__+0x7f9109>
    1290:	80 93 a0 38 	sts	0x38A0, r24	; 0x8038a0 <JTAG2::packet+0x14>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:179
      *r++ = *q++;
    1294:	80 91 0a 11 	lds	r24, 0x110A	; 0x80110a <__RODATA_PM_OFFSET__+0x7f910a>
    1298:	80 93 a1 38 	sts	0x38A1, r24	; 0x8038a1 <JTAG2::packet+0x15>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:180
      *r++ = *q++;
    129c:	80 91 0b 11 	lds	r24, 0x110B	; 0x80110b <__RODATA_PM_OFFSET__+0x7f910b>
    12a0:	80 93 a2 38 	sts	0x38A2, r24	; 0x8038a2 <JTAG2::packet+0x16>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:181
      *r++ = *q++;
    12a4:	80 91 0c 11 	lds	r24, 0x110C	; 0x80110c <__RODATA_PM_OFFSET__+0x7f910c>
    12a8:	80 93 a3 38 	sts	0x38A3, r24	; 0x8038a3 <JTAG2::packet+0x17>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:215
              bit_set(UPDI_CONTROL, UPDI::UPDI_TERM_bp);
            return false;
          }
        }
        /* Range violation results in failure response */
        set_response(RSP_ILLEGAL_VALUE);
    12ac:	8b cf       	rjmp	.-234    	; 0x11c4 <main+0x36e>
set_parameter():
    12ae:	86 ea       	ldi	r24, 0xA6	; 166
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:448
        // SYS::WDT_REBOOT();
        SYS::System_Reset();
      }
      /* Returns negation for unknown commands */
      default : {
        set_response(RSP_FAILED);
    12b0:	90 e0       	ldi	r25, 0x00	; 0
process_command():
    12b2:	7d d8       	rcall	.-3846   	; 0x3ae <JTAG2::set_response(JTAG2::jtag_response_e)>
    12b4:	87 cf       	rjmp	.-242    	; 0x11c4 <main+0x36e>
get_parameter():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:235
  /**********************
   * CMND_GET_PARAMETER *
   **********************/

  void get_parameter (void) {
    switch ( packet.body[RSP_DATA] ) {
    12b6:	80 91 95 38 	lds	r24, 0x3895	; 0x803895 <JTAG2::packet+0x9>
    12ba:	83 30       	cpi	r24, 0x03	; 3
    12bc:	91 f1       	breq	.+100    	; 0x1322 <main+0x4cc>
    12be:	38 f4       	brcc	.+14     	; 0x12ce <main+0x478>
    12c0:	81 30       	cpi	r24, 0x01	; 1
    12c2:	79 f0       	breq	.+30     	; 0x12e2 <main+0x48c>
    12c4:	82 30       	cpi	r24, 0x02	; 2
    12c6:	b9 f0       	breq	.+46     	; 0x12f6 <main+0x4a0>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:282
          packet.size_word[0] = 1 + sizeof(updi_desc.sib);
          break;
        }
      }
      default : {
        set_response(RSP_ILLEGAL_PARAMETER);
    12c8:	81 ea       	ldi	r24, 0xA1	; 161
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	f2 cf       	rjmp	.-28     	; 0x12b2 <main+0x45c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:235
  /**********************
   * CMND_GET_PARAMETER *
   **********************/

  void get_parameter (void) {
    switch ( packet.body[RSP_DATA] ) {
    12ce:	86 30       	cpi	r24, 0x06	; 6
    12d0:	81 f1       	breq	.+96     	; 0x1332 <main+0x4dc>
    12d2:	8d 31       	cpi	r24, 0x1D	; 29
    12d4:	09 f4       	brne	.+2      	; 0x12d8 <main+0x482>
    12d6:	52 c0       	rjmp	.+164    	; 0x137c <main+0x526>
    12d8:	85 30       	cpi	r24, 0x05	; 5
    12da:	b1 f7       	brne	.-20     	; 0x12c8 <main+0x472>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:258
        packet.body[1] = 0x55;
        packet.size_word[0] = 2;
        break;
      }
      case PAR_BAUD_RATE : {
        packet.body[1] = param_baud_rate_val;
    12dc:	80 91 36 38 	lds	r24, 0x3836	; 0x803836 <JTAG2::param_baud_rate_val>
    12e0:	21 c0       	rjmp	.+66     	; 0x1324 <main+0x4ce>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:237
   **********************/

  void get_parameter (void) {
    switch ( packet.body[RSP_DATA] ) {
      case PAR_HW_VER : {
        packet.body[1] = sign_on_resp[5];
    12e2:	82 e0       	ldi	r24, 0x02	; 2
    12e4:	80 93 95 38 	sts	0x3895, r24	; 0x803895 <JTAG2::packet+0x9>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:238
        packet.body[2] = sign_on_resp[9];
    12e8:	80 93 96 38 	sts	0x3896, r24	; 0x803896 <JTAG2::packet+0xa>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:264
        packet.size_word[0] = 2;
        break;
      }
      case PAR_VTARGET : {
        _CAPS16(packet.body[1])->word = SYS::get_vcc();
        packet.size_word[0] = 3;
    12ec:	80 92 8f 38 	sts	0x388F, r8	; 0x80388f <JTAG2::packet+0x3>
    12f0:	90 92 90 38 	sts	0x3890, r9	; 0x803890 <JTAG2::packet+0x4>
    12f4:	12 c0       	rjmp	.+36     	; 0x131a <main+0x4c4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:243
        packet.body[2] = sign_on_resp[9];
        packet.size_word[0] = 3;
        break;
      }
      case PAR_FW_VER : {
        packet.body[1] = sign_on_resp[3];
    12f6:	85 e3       	ldi	r24, 0x35	; 53
    12f8:	80 93 95 38 	sts	0x3895, r24	; 0x803895 <JTAG2::packet+0x9>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:244
        packet.body[2] = sign_on_resp[4];
    12fc:	87 e0       	ldi	r24, 0x07	; 7
    12fe:	80 93 96 38 	sts	0x3896, r24	; 0x803896 <JTAG2::packet+0xa>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:245
        packet.body[3] = sign_on_resp[7];
    1302:	82 e2       	ldi	r24, 0x22	; 34
    1304:	80 93 97 38 	sts	0x3897, r24	; 0x803897 <JTAG2::packet+0xb>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:246
        packet.body[4] = sign_on_resp[8];
    1308:	86 e0       	ldi	r24, 0x06	; 6
    130a:	80 93 98 38 	sts	0x3898, r24	; 0x803898 <JTAG2::packet+0xc>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:247
        packet.size_word[0] = 5;
    130e:	a5 e0       	ldi	r26, 0x05	; 5
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	a0 93 8f 38 	sts	0x388F, r26	; 0x80388f <JTAG2::packet+0x3>
    1316:	b0 93 90 38 	sts	0x3890, r27	; 0x803890 <JTAG2::packet+0x4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:286
      default : {
        set_response(RSP_ILLEGAL_PARAMETER);
        return;
      }
    }
    packet.body[MESSAGE_ID] = RSP_PARAMETER;
    131a:	81 e8       	ldi	r24, 0x81	; 129
    131c:	80 93 94 38 	sts	0x3894, r24	; 0x803894 <JTAG2::packet+0x8>
    1320:	51 cf       	rjmp	.-350    	; 0x11c4 <main+0x36e>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:253
        break;
      }
      case PAR_EMU_MODE : {
        /* This response code indicates an UPDI-only implementation */
        /* In normal JTAGICEmkII this is never queried */
        packet.body[1] = 0x55;
    1322:	85 e5       	ldi	r24, 0x55	; 85
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:258
        packet.size_word[0] = 2;
        break;
      }
      case PAR_BAUD_RATE : {
        packet.body[1] = param_baud_rate_val;
    1324:	80 93 95 38 	sts	0x3895, r24	; 0x803895 <JTAG2::packet+0x9>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:259
        packet.size_word[0] = 2;
    1328:	20 92 8f 38 	sts	0x388F, r2	; 0x80388f <JTAG2::packet+0x3>
    132c:	30 92 90 38 	sts	0x3890, r3	; 0x803890 <JTAG2::packet+0x4>
    1330:	f4 cf       	rjmp	.-24     	; 0x131a <main+0x4c4>
get_vcc():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:70
 * Self VCC measurement *
 ************************/

/*** This routine is exclusive to the tinyAVR-2 series. ***/
uint16_t SYS::get_vcc (void) {
  ADC0_CTRLA = ADC_ENABLE_bm;
    1332:	b0 92 00 06 	sts	0x0600, r11	; 0x800600 <__RODATA_PM_OFFSET__+0x7f8600>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:71
  ADC0_CTRLB = ADC_PRESC_DIV2_gc;
    1336:	10 92 01 06 	sts	0x0601, r1	; 0x800601 <__RODATA_PM_OFFSET__+0x7f8601>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:72
  ADC0_CTRLC = ADC_REFSEL_1024MV_gc | ((F_CPU / 1000000UL) << ADC_TIMEBASE_gp);
    133a:	84 e5       	ldi	r24, 0x54	; 84
    133c:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__RODATA_PM_OFFSET__+0x7f8602>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:73
  ADC0_CTRLE = 17; /* (SAMPDUR + 0.5) * fCLK_ADC = 10.5 µs sample duration */
    1340:	81 e1       	ldi	r24, 0x11	; 17
    1342:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__RODATA_PM_OFFSET__+0x7f8608>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:74
  ADC0_MUXPOS = ADC_MUXPOS_VDDDIV10_gc; /* ADC channel VDD/10 */
    1346:	91 e3       	ldi	r25, 0x31	; 49
    1348:	90 93 0c 06 	sts	0x060C, r25	; 0x80060c <__RODATA_PM_OFFSET__+0x7f860c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:75
  ADC0_COMMAND = ADC_MODE_SINGLE_12BIT_gc | ADC_START_IMMEDIATE_gc;
    134c:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <__RODATA_PM_OFFSET__+0x7f860a>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:76
  loop_until_bit_is_set(ADC0_INTFLAGS, ADC_SAMPRDY_bp);
    1350:	80 91 05 06 	lds	r24, 0x0605	; 0x800605 <__RODATA_PM_OFFSET__+0x7f8605>
    1354:	81 ff       	sbrs	r24, 1
    1356:	fc cf       	rjmp	.-8      	; 0x1350 <main+0x4fa>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:77
  uint16_t adc_reading = ADC0_SAMPLE;
    1358:	80 91 14 06 	lds	r24, 0x0614	; 0x800614 <__RODATA_PM_OFFSET__+0x7f8614>
    135c:	90 91 15 06 	lds	r25, 0x0615	; 0x800615 <__RODATA_PM_OFFSET__+0x7f8615>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:78
  adc_reading += adc_reading + (adc_reading >> 1);  /* x2.5 */
    1360:	9c 01       	movw	r18, r24
    1362:	36 95       	lsr	r19
    1364:	27 95       	ror	r18
    1366:	88 0f       	add	r24, r24
    1368:	99 1f       	adc	r25, r25
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:79
  ADC0_CTRLA = 0;
    136a:	10 92 00 06 	sts	0x0600, r1	; 0x800600 <__RODATA_PM_OFFSET__+0x7f8600>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:78
  ADC0_CTRLE = 17; /* (SAMPDUR + 0.5) * fCLK_ADC = 10.5 µs sample duration */
  ADC0_MUXPOS = ADC_MUXPOS_VDDDIV10_gc; /* ADC channel VDD/10 */
  ADC0_COMMAND = ADC_MODE_SINGLE_12BIT_gc | ADC_START_IMMEDIATE_gc;
  loop_until_bit_is_set(ADC0_INTFLAGS, ADC_SAMPRDY_bp);
  uint16_t adc_reading = ADC0_SAMPLE;
  adc_reading += adc_reading + (adc_reading >> 1);  /* x2.5 */
    136e:	82 0f       	add	r24, r18
    1370:	93 1f       	adc	r25, r19
get_parameter():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:263
        break;
      }
      case PAR_VTARGET : {
        _CAPS16(packet.body[1])->word = SYS::get_vcc();
    1372:	80 93 95 38 	sts	0x3895, r24	; 0x803895 <JTAG2::packet+0x9>
    1376:	90 93 96 38 	sts	0x3896, r25	; 0x803896 <JTAG2::packet+0xa>
    137a:	b8 cf       	rjmp	.-144    	; 0x12ec <main+0x496>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:273
      case PAR_TARGET_SIGNATURE : {
        /* SIB information can be returned as an extended signature. */
        /* Responds correctly only during programming mode.          */
        /* otherwise an error will be returned.                      */
        /* Silicon revision (REVID) can be read as normal IO memory. */
        if (bit_is_set(UPDI_CONTROL, UPDI::UPDI_INFO_bp)) {
    137c:	e0 9b       	sbis	0x1c, 0	; 28
    137e:	a4 cf       	rjmp	.-184    	; 0x12c8 <main+0x472>
    1380:	ec e6       	ldi	r30, 0x6C	; 108
    1382:	f8 e3       	ldi	r31, 0x38	; 56
    1384:	a5 e9       	ldi	r26, 0x95	; 149
    1386:	b8 e3       	ldi	r27, 0x38	; 56
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:276
          uint8_t *q = &packet.body[RSP_DATA];
          uint8_t *p = &updi_desc.sib[0];
          for (uint8_t i = 0; i < sizeof(updi_desc.sib); i++) *q++ = *p++;
    1388:	81 91       	ld	r24, Z+
    138a:	8d 93       	st	X+, r24
    138c:	2c e8       	ldi	r18, 0x8C	; 140
    138e:	38 e3       	ldi	r19, 0x38	; 56
    1390:	2e 17       	cp	r18, r30
    1392:	3f 07       	cpc	r19, r31
    1394:	c9 f7       	brne	.-14     	; 0x1388 <main+0x532>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:277
          packet.size_word[0] = 1 + sizeof(updi_desc.sib);
    1396:	81 e2       	ldi	r24, 0x21	; 33
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	80 93 8f 38 	sts	0x388F, r24	; 0x80388f <JTAG2::packet+0x3>
    139e:	90 93 90 38 	sts	0x3890, r25	; 0x803890 <JTAG2::packet+0x4>
    13a2:	bb cf       	rjmp	.-138    	; 0x131a <main+0x4c4>
process_command():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:360
        get_parameter();
        break;
      }
      case CMND_RESET : {
        /* Run only the first time */
        if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_INIT_bp)) {
    13a4:	e7 99       	sbic	0x1c, 7	; 28
    13a6:	0e cf       	rjmp	.-484    	; 0x11c4 <main+0x36e>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:361
          uint8_t hv_control = packet.body[RSP_DATA];
    13a8:	90 91 95 38 	lds	r25, 0x3895	; 0x803895 <JTAG2::packet+0x9>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:363
          bool hv_active = false;
          if ((hv_control & '0') == '0') {
    13ac:	89 2f       	mov	r24, r25
    13ae:	80 73       	andi	r24, 0x30	; 48
    13b0:	80 33       	cpi	r24, 0x30	; 48
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:367
            /* If the general reset setting is neither 0 nor 1. */
            /* Accepts special extension settings.              */
            /* This forces HV control.                          */
            updi_desc.hvupdi_variant = hv_control;
    13b2:	29 f4       	brne	.+10     	; 0x13be <main+0x568>
    13b4:	90 93 64 38 	sts	0x3864, r25	; 0x803864 <JTAG2::updi_desc+0x2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:369
            /* '1' must be passed for automatic HV control to be inhibited */
            if (hv_control != '1') hv_active = true;
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	91 33       	cpi	r25, 0x31	; 49
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:362
      }
      case CMND_RESET : {
        /* Run only the first time */
        if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_INIT_bp)) {
          uint8_t hv_control = packet.body[RSP_DATA];
          bool hv_active = false;
    13bc:	09 f4       	brne	.+2      	; 0x13c0 <main+0x56a>
main():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:372
            updi_desc.hvupdi_variant = hv_control;
            /* '1' must be passed for automatic HV control to be inhibited */
            if (hv_control != '1') hv_active = true;
          }
          /* Here UPDI control is tried */
          UPDI::updi_activate(hv_active);
    13be:	80 e0       	ldi	r24, 0x00	; 0
process_command():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:373
          if (bit_is_set(UPDI_CONTROL, UPDI::UPDI_TERM_bp)) {
    13c0:	80 d9       	rcall	.-3328   	; 0x6c2 <UPDI::updi_activate(bool)>
    13c2:	e5 9b       	sbis	0x1c, 5	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:155
  LED_TCB1(2, TCB1_FLASH);
}

/* Flashing (SW1 assert) */
void TIM::LED_Blink (void) {
  LED_TCB1(3, TCB1_BLINK);
    13c4:	09 c0       	rjmp	.+18     	; 0x13d8 <main+0x582>
LED_Blink():
    13c6:	69 ea       	ldi	r22, 0xA9	; 169
    13c8:	75 e5       	ldi	r23, 0x55	; 85
    13ca:	83 e0       	ldi	r24, 0x03	; 3
    13cc:	0e 94 9d 01 	call	0x33a	; 0x33a <LED_TCB1(unsigned char, unsigned int)>
WDT_OFF():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:165
  wdt_reset();
  loop_until_bit_is_clear(WDT_STATUS, WDT_SYNCBUSY_bp);
  _PROTECTED_WRITE(WDT_CTRLA, _wdt_period);
}

void SYS::WDT_OFF (void) { WDT_SET(WDT_PERIOD_OFF_gc); }
    13d0:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:382
          }
          else {
            /* If not set to interactive mode, the LED will flash rapidly */
            TIM::LED_Fast();
          }
          bit_set(UPDI_CONTROL, UPDI::UPDI_INIT_bp);
    13d2:	6d d9       	rcall	.-3366   	; 0x6ae <SYS::WDT_SET(unsigned char)>
process_command():
    13d4:	e7 9a       	sbi	0x1c, 7	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:160
}

/* Fast blinking (UPDI memory access in progress) */
void TIM::LED_Fast (void) {
  LED_TCB1(4, TCB1_FAST);
    13d6:	f6 ce       	rjmp	.-532    	; 0x11c4 <main+0x36e>
LED_Fast():
    13d8:	65 e1       	ldi	r22, 0x15	; 21
    13da:	74 e0       	ldi	r23, 0x04	; 4
    13dc:	84 e0       	ldi	r24, 0x04	; 4
    13de:	0e 94 9d 01 	call	0x33a	; 0x33a <LED_TCB1(unsigned char, unsigned int)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:390
        UPDI::_send_buf_copy();
        #endif
        break;
      }
      case CMND_READ_MEMORY : {
        if (!UPDI::runtime(UPDI::UPDI_CMD_READ_MEMORY)) {
    13e2:	f8 cf       	rjmp	.-16     	; 0x13d4 <main+0x57e>
process_command():
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	f5 d9       	rcall	.-3094   	; 0x7d2 <UPDI::runtime(unsigned char)>
    13e8:	81 11       	cpse	r24, r1
    13ea:	ec ce       	rjmp	.-552    	; 0x11c4 <main+0x36e>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:391
          set_response(RSP_NO_TARGET_POWER);
    13ec:	8b ea       	ldi	r24, 0xAB	; 171
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	60 cf       	rjmp	.-320    	; 0x12b2 <main+0x45c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:397
        }
        break;
      }
      case CMND_WRITE_MEMORY : {
        /* Received packet error retransmission exception */
        if (before_seqnum == packet.number) break;
    13f2:	20 91 8d 38 	lds	r18, 0x388D	; 0x80388d <JTAG2::packet+0x1>
    13f6:	30 91 8e 38 	lds	r19, 0x388E	; 0x80388e <JTAG2::packet+0x2>
    13fa:	80 91 38 38 	lds	r24, 0x3838	; 0x803838 <JTAG2::before_seqnum>
    13fe:	90 91 39 38 	lds	r25, 0x3839	; 0x803839 <JTAG2::before_seqnum+0x1>
    1402:	28 17       	cp	r18, r24
    1404:	39 07       	cpc	r19, r25
    1406:	09 f4       	brne	.+2      	; 0x140a <main+0x5b4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:398
        if (UPDI::runtime(UPDI::UPDI_CMD_WRITE_MEMORY)) {
    1408:	dd ce       	rjmp	.-582    	; 0x11c4 <main+0x36e>
    140a:	82 e0       	ldi	r24, 0x02	; 2
    140c:	e2 d9       	rcall	.-3132   	; 0x7d2 <UPDI::runtime(unsigned char)>
    140e:	88 23       	and	r24, r24
    1410:	49 f0       	breq	.+18     	; 0x1424 <main+0x5ce>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:415
      case CMND_XMEGA_ERASE : {
        /* Received packet error retransmission exception */
        if (before_seqnum == packet.number) break;
        if (UPDI::runtime(UPDI::UPDI_CMD_ERASE)) {
          /* Keep the sequence number if completed successfully */
          before_seqnum = packet.number;
    1412:	80 91 8d 38 	lds	r24, 0x388D	; 0x80388d <JTAG2::packet+0x1>
    1416:	90 91 8e 38 	lds	r25, 0x388E	; 0x80388e <JTAG2::packet+0x2>
    141a:	80 93 38 38 	sts	0x3838, r24	; 0x803838 <JTAG2::before_seqnum>
    141e:	90 93 39 38 	sts	0x3839, r25	; 0x803839 <JTAG2::before_seqnum+0x1>
    1422:	d0 ce       	rjmp	.-608    	; 0x11c4 <main+0x36e>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:403
        if (UPDI::runtime(UPDI::UPDI_CMD_WRITE_MEMORY)) {
          /* Keep the sequence number if completed successfully */
          before_seqnum = packet.number;
        }
        else {
          set_response(RSP_ILLEGAL_MCU_STATE);
    1424:	85 ea       	ldi	r24, 0xA5	; 165
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	44 cf       	rjmp	.-376    	; 0x12b2 <main+0x45c>
set_descripter():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:297

  void set_descripter (uint8_t type) {
    if (type == CMND_SET_DEVICE_DESC) {
      const struct jtag_device_descriptor *desc =
           (struct jtag_device_descriptor*)&packet.body[RSP_DATA];
      updi_desc.flash_page_size = *(uint16_t*)(&desc->uiFlashPageSize[0]);
    142a:	80 91 88 39 	lds	r24, 0x3988	; 0x803988 <JTAG2::packet+0xfc>
    142e:	90 91 89 39 	lds	r25, 0x3989	; 0x803989 <JTAG2::packet+0xfd>
    1432:	80 93 66 38 	sts	0x3866, r24	; 0x803866 <JTAG2::updi_desc+0x4>
    1436:	90 93 67 38 	sts	0x3867, r25	; 0x803867 <JTAG2::updi_desc+0x5>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:298
      updi_desc.eeprom_page_size = desc->ucEepromPageSize;
    143a:	80 91 8a 39 	lds	r24, 0x398A	; 0x80398a <JTAG2::packet+0xfe>
    143e:	80 93 68 38 	sts	0x3868, r24	; 0x803868 <JTAG2::updi_desc+0x6>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:299
      if ((desc->ucIDRAddress & '0') == '0') {
    1442:	90 91 85 39 	lds	r25, 0x3985	; 0x803985 <JTAG2::packet+0xf9>
    1446:	29 2f       	mov	r18, r25
    1448:	20 73       	andi	r18, 0x30	; 48
    144a:	20 33       	cpi	r18, 0x30	; 48
    144c:	19 f4       	brne	.+6      	; 0x1454 <main+0x5fe>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:303
        /* Accepts special extension settings. */
        /* 0x31 must be passed for automatic HV control to be inhibited. */
        /* This parameter can be specified in the `idr` descriptor in the `part` section. */
        updi_desc.hvupdi_variant = desc->ucIDRAddress;  // Valid value 0x30,0x31 or 0x32
    144e:	90 93 64 38 	sts	0x3864, r25	; 0x803864 <JTAG2::updi_desc+0x2>
    1452:	b8 ce       	rjmp	.-656    	; 0x11c4 <main+0x36e>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:308
      }
      else {
        /* If the EEPROM page size is 32 or more, it is considered a HV=12V system. */
        /* This setting will be referenced when automatic HV control is requested.  */
        updi_desc.hvupdi_variant = updi_desc.eeprom_page_size >= 32 ? '0' : '2';
    1454:	80 32       	cpi	r24, 0x20	; 32
    1456:	20 f4       	brcc	.+8      	; 0x1460 <main+0x60a>
main():
    1458:	82 e3       	ldi	r24, 0x32	; 50
set_descripter():
    145a:	80 93 64 38 	sts	0x3864, r24	; 0x803864 <JTAG2::updi_desc+0x2>
    145e:	b2 ce       	rjmp	.-668    	; 0x11c4 <main+0x36e>
main():
    1460:	80 e3       	ldi	r24, 0x30	; 48
    1462:	fb cf       	rjmp	.-10     	; 0x145a <main+0x604>
set_descripter():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:316
    else if (type == CMND_SET_UPDI_PARAMS) {
      /* This structure is used instead of CMND_SET_DEVICE_DESC after */
      /* answering 0x55 ('U') to PAR_EMU_MODE of CMND_GET_PARAMETER.  */
      /* Once you have confirmed the magic number and data length,    */
      /* you can simply clone it into your internal structure.        */
      const struct updi_device_descriptor *desc =
    1464:	a5 e9       	ldi	r26, 0x95	; 149
    1466:	b8 e3       	ldi	r27, 0x38	; 56
    1468:	a9 83       	std	Y+1, r26	; 0x01
    146a:	ba 83       	std	Y+2, r27	; 0x02
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:318
           (struct updi_device_descriptor*)&packet.body[RSP_DATA];
      if (desc->magicnumber == 'U' && desc->length <= sizeof(updi_desc) - 2) {
    146c:	80 91 95 38 	lds	r24, 0x3895	; 0x803895 <JTAG2::packet+0x9>
    1470:	85 35       	cpi	r24, 0x55	; 85
    1472:	09 f0       	breq	.+2      	; 0x1476 <main+0x620>
    1474:	a7 ce       	rjmp	.-690    	; 0x11c4 <main+0x36e>
    1476:	90 91 96 38 	lds	r25, 0x3896	; 0x803896 <JTAG2::packet+0xa>
    147a:	99 32       	cpi	r25, 0x29	; 41
    147c:	08 f0       	brcs	.+2      	; 0x1480 <main+0x62a>
    147e:	a2 ce       	rjmp	.-700    	; 0x11c4 <main+0x36e>
    1480:	de 01       	movw	r26, r28
    1482:	13 96       	adiw	r26, 0x03	; 3
    1484:	e4 e6       	ldi	r30, 0x64	; 100
    1486:	f8 e3       	ldi	r31, 0x38	; 56
main():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:321
        uint8_t *q = 2 + (uint8_t*)&updi_desc;
        uint8_t *p = 2 + (uint8_t*)&desc;
        for (int8_t i = 0; i < desc->length; i++) *q++ = *p++;
    1488:	80 e0       	ldi	r24, 0x00	; 0
set_descripter():
    148a:	89 17       	cp	r24, r25
    148c:	09 f4       	brne	.+2      	; 0x1490 <main+0x63a>
    148e:	9a ce       	rjmp	.-716    	; 0x11c4 <main+0x36e>
    1490:	2d 91       	ld	r18, X+
    1492:	21 93       	st	Z+, r18
    1494:	8f 5f       	subi	r24, 0xFF	; 255
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:438
      case CMND_GO :
      case CMND_GET_SYNC : {
        break;
      }
      case CMND_SIGN_OFF : {
        answer_transfer();
    1496:	f9 cf       	rjmp	.-14     	; 0x148a <main+0x634>
process_command():
    1498:	0e 94 f7 01 	call	0x3ee	; 0x3ee <JTAG2::answer_transfer()>
flush():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:97
    JTAG_USART.STATUS = USART_TXCIF_bm;
    return JTAG_USART.TXDATAL = _data;
  }

  void flush (void) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_TXCIF_bp);
    149c:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
    14a0:	86 ff       	sbrs	r24, 6
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:440
        break;
      }
      case CMND_SIGN_OFF : {
        answer_transfer();
        flush();
        if (bit_is_set(UPDI_CONTROL, UPDI::UPDI_PROG_bp))
    14a2:	fc cf       	rjmp	.-8      	; 0x149c <main+0x646>
process_command():
    14a4:	e1 9b       	sbis	0x1c, 1	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:441
          UPDI::runtime(UPDI::UPDI_CMD_GO);
    14a6:	02 c0       	rjmp	.+4      	; 0x14ac <main+0x656>
    14a8:	84 e0       	ldi	r24, 0x04	; 4
    14aa:	93 d9       	rcall	.-3290   	; 0x7d2 <UPDI::runtime(unsigned char)>
System_Reset():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:88
/*************
 * Self reset *
 *************/

void SYS::System_Reset (void) {
  _PROTECTED_WRITE(RSTCTRL_SWRR, RSTCTRL_SWRE_bm);
    14ac:	88 ed       	ldi	r24, 0xD8	; 216
    14ae:	84 bf       	out	0x34, r24	; 52
    14b0:	b0 92 41 00 	sts	0x0041, r11	; 0x800041 <__RODATA_PM_OFFSET__+0x7f8041>
    14b4:	7b ce       	rjmp	.-778    	; 0x11ac <main+0x356>

000014b6 <setjmp>:
setjmp():
    14b6:	dc 01       	movw	r26, r24
    14b8:	2d 92       	st	X+, r2
    14ba:	3d 92       	st	X+, r3
    14bc:	4d 92       	st	X+, r4
    14be:	5d 92       	st	X+, r5
    14c0:	6d 92       	st	X+, r6
    14c2:	7d 92       	st	X+, r7
    14c4:	8d 92       	st	X+, r8
    14c6:	9d 92       	st	X+, r9
    14c8:	ad 92       	st	X+, r10
    14ca:	bd 92       	st	X+, r11
    14cc:	cd 92       	st	X+, r12
    14ce:	dd 92       	st	X+, r13
    14d0:	ed 92       	st	X+, r14
    14d2:	fd 92       	st	X+, r15
    14d4:	0d 93       	st	X+, r16
    14d6:	1d 93       	st	X+, r17
    14d8:	cd 93       	st	X+, r28
    14da:	dd 93       	st	X+, r29
    14dc:	ff 91       	pop	r31
    14de:	ef 91       	pop	r30
    14e0:	8d b7       	in	r24, 0x3d	; 61
    14e2:	8d 93       	st	X+, r24
    14e4:	8e b7       	in	r24, 0x3e	; 62
    14e6:	8d 93       	st	X+, r24
    14e8:	8f b7       	in	r24, 0x3f	; 63
    14ea:	8d 93       	st	X+, r24
    14ec:	ed 93       	st	X+, r30
    14ee:	fd 93       	st	X+, r31
    14f0:	88 27       	eor	r24, r24
    14f2:	99 27       	eor	r25, r25
    14f4:	09 94       	ijmp

000014f6 <longjmp>:
longjmp():
    14f6:	dc 01       	movw	r26, r24
    14f8:	cb 01       	movw	r24, r22
    14fa:	81 30       	cpi	r24, 0x01	; 1
    14fc:	91 05       	cpc	r25, r1
    14fe:	81 1d       	adc	r24, r1
    1500:	2d 90       	ld	r2, X+
    1502:	3d 90       	ld	r3, X+
    1504:	4d 90       	ld	r4, X+
    1506:	5d 90       	ld	r5, X+
    1508:	6d 90       	ld	r6, X+
    150a:	7d 90       	ld	r7, X+
    150c:	8d 90       	ld	r8, X+
    150e:	9d 90       	ld	r9, X+
    1510:	ad 90       	ld	r10, X+
    1512:	bd 90       	ld	r11, X+
    1514:	cd 90       	ld	r12, X+
    1516:	dd 90       	ld	r13, X+
    1518:	ed 90       	ld	r14, X+
    151a:	fd 90       	ld	r15, X+
    151c:	0d 91       	ld	r16, X+
    151e:	1d 91       	ld	r17, X+
    1520:	cd 91       	ld	r28, X+
    1522:	dd 91       	ld	r29, X+
    1524:	ed 91       	ld	r30, X+
    1526:	fd 91       	ld	r31, X+
    1528:	0d 90       	ld	r0, X+
    152a:	0f be       	out	0x3f, r0	; 63
    152c:	ed bf       	out	0x3d, r30	; 61
    152e:	fe bf       	out	0x3e, r31	; 62
    1530:	ed 91       	ld	r30, X+
    1532:	fd 91       	ld	r31, X+
    1534:	09 94       	ijmp

00001536 <_exit>:
exit():
    1536:	f8 94       	cli

00001538 <__stop_program>:
__stop_program():
    1538:	ff cf       	rjmp	.-2      	; 0x1538 <__stop_program>
