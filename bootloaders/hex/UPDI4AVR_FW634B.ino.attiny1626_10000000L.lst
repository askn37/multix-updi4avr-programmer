
/var/folders/mz/_z9vt_y13rdf9tt_4qkvv0k40000gn/T/arduino_build_15386/UPDI4AVR_FW634B.ino.elf:     file format elf32-avr


Disassembly of section .data:

00803800 <__data_start>:
__data_start():
  803800:	55 c8       	rjmp	.-3926   	; 0x8028ac <__RODATA_PM_OFFSET__+0x7fa8ac>
  803802:	00 c3       	rjmp	.+1536   	; 0x803e04 <__bss_end+0x35e>
  803804:	04 55       	subi	r16, 0x54	; 84

00803805 <UPDI::st8(unsigned long, unsigned char)::set_ptr>:
  803805:	55 48 00 00 00 00                                   UH....

0080380b <UPDI::ld8(unsigned long)::set_ptr>:
  80380b:	55 08 00 00 00 00                                   U.....

00803811 <UPDI::get_cs_stat(unsigned char)::set_ptr>:
  803811:	55 00                                               U.

00803813 <UPDI::set_cs_stat(unsigned char, unsigned char)::set_ptr>:
  803813:	55 00 00                                            U..

00803816 <UPDI::nvmprog_key>:
  803816:	55 e0 20 67 6f 72 50 4d 56 4e                       U. gorPMVN

00803820 <UPDI::read_sib(unsigned char*)::set_ptr>:
  803820:	55 e6                                               U.

00803822 <UPDI::urowwrite_key>:
  803822:	55 e0 65 74 26 73 55 4d 56 4e                       U.et&sUMVN

0080382c <UPDI::erase_key>:
  80382c:	55 e0 65 73 61 72 45 4d 56 4e                       U.esarEMVN

00803836 <JTAG2::param_baud_rate_val>:
  803836:	04 00                                               ..

00803838 <UPDI::_set_repeat>:
  803838:	55 a0 00 55 04                                      U..U.

0080383d <UPDI::_set_ptr_l>:
  80383d:	55 6a 00 00 00 00 00                                Uj.....

Disassembly of section .text:

00000000 <__vectors>:
__vectors():
../../../../crt1/gcrt1.S:61
       0:	67 c0       	rjmp	.+206    	; 0xd0 <__ctors_end>
       2:	00 00       	nop
../../../../crt1/gcrt1.S:67
       4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
       6:	00 00       	nop
../../../../crt1/gcrt1.S:68
       8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
       a:	00 00       	nop
../../../../crt1/gcrt1.S:69
       c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
       e:	00 00       	nop
../../../../crt1/gcrt1.S:70
      10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
      12:	00 00       	nop
../../../../crt1/gcrt1.S:71
      14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
      16:	00 00       	nop
../../../../crt1/gcrt1.S:72
      18:	37 c7       	rjmp	.+3694   	; 0xe88 <__vector_6>
      1a:	00 00       	nop
../../../../crt1/gcrt1.S:73
      1c:	74 c7       	rjmp	.+3816   	; 0xf06 <__vector_7>
      1e:	00 00       	nop
../../../../crt1/gcrt1.S:74
      20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
      22:	00 00       	nop
../../../../crt1/gcrt1.S:75
      24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
      26:	00 00       	nop
../../../../crt1/gcrt1.S:76
      28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
      2a:	00 00       	nop
../../../../crt1/gcrt1.S:77
      2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
      2e:	00 00       	nop
../../../../crt1/gcrt1.S:78
      30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
      32:	00 00       	nop
../../../../crt1/gcrt1.S:79
      34:	1e c7       	rjmp	.+3644   	; 0xe72 <__vector_13>
      36:	00 00       	nop
../../../../crt1/gcrt1.S:80
      38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
      3a:	00 00       	nop
../../../../crt1/gcrt1.S:81
      3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
      3e:	00 00       	nop
../../../../crt1/gcrt1.S:82
      40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
      42:	00 00       	nop
../../../../crt1/gcrt1.S:83
      44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
      46:	00 00       	nop
../../../../crt1/gcrt1.S:84
      48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
      4a:	00 00       	nop
../../../../crt1/gcrt1.S:85
      4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
      4e:	00 00       	nop
../../../../crt1/gcrt1.S:86
      50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
      52:	00 00       	nop
../../../../crt1/gcrt1.S:87
      54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
      56:	00 00       	nop
../../../../crt1/gcrt1.S:88
      58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
      5a:	00 00       	nop
../../../../crt1/gcrt1.S:89
      5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
      5e:	00 00       	nop
../../../../crt1/gcrt1.S:90
      60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
      62:	00 00       	nop
../../../../crt1/gcrt1.S:91
      64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
      66:	00 00       	nop
../../../../crt1/gcrt1.S:92
      68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
      6a:	00 00       	nop
../../../../crt1/gcrt1.S:93
      6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
      6e:	00 00       	nop
../../../../crt1/gcrt1.S:94
      70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
      72:	00 00       	nop
../../../../crt1/gcrt1.S:95
      74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
	...

00000078 <__trampolines_end>:
__trampolines_start():
      78:	86 01       	movw	r16, r12
      7a:	02 35       	cpi	r16, 0x52	; 82
      7c:	07 02       	muls	r16, r23
      7e:	02 22       	and	r0, r18
      80:	06 02       	muls	r16, r22
      82:	00 00       	nop
      84:	00 00       	nop
      86:	00 00       	nop
      88:	55 50       	subi	r21, 0x05	; 5
      8a:	44 49       	sbci	r20, 0x94	; 148
      8c:	34 41       	sbci	r19, 0x14	; 20
      8e:	56 52       	subi	r21, 0x26	; 38
      90:	00 00       	nop
      92:	00 00       	nop
	...

00000095 <JTAG2::BAUD_TABLE>:
      95:	00 00 1b 41 8d 20 47 10 23 08 12 04 b6 02 5b 01     ...A. G.#.....[.
      a5:	da 0a 04 01 ae 00 57 00 2b 00 39 01 9c 00 00 00     ......W.+.9.....
      b5:	00 00 0b 01 c8 00 a0 00 85 00 64 00 50 00 43 00     ..........d.P.C.
      c5:	3c 00 28 00 1b 00 14 00 0d 00 00                    <.(........

000000d0 <__ctors_end>:
__dtors_end():
../../../../crt1/gcrt1.S:230
      d0:	11 24       	eor	r1, r1
../../../../crt1/gcrt1.S:231
      d2:	1f be       	out	0x3f, r1	; 63
../../../../crt1/gcrt1.S:232
      d4:	cf ef       	ldi	r28, 0xFF	; 255
../../../../crt1/gcrt1.S:234
      d6:	cd bf       	out	0x3d, r28	; 61
../../../../crt1/gcrt1.S:236
      d8:	df e3       	ldi	r29, 0x3F	; 63
../../../../crt1/gcrt1.S:237
      da:	de bf       	out	0x3e, r29	; 62

000000dc <__do_copy_data>:
__do_copy_data():
      dc:	18 e3       	ldi	r17, 0x38	; 56
      de:	a0 e0       	ldi	r26, 0x00	; 0
      e0:	b8 e3       	ldi	r27, 0x38	; 56
      e2:	e4 eb       	ldi	r30, 0xB4	; 180
      e4:	f5 e1       	ldi	r31, 0x15	; 21
      e6:	02 c0       	rjmp	.+4      	; 0xec <__do_copy_data+0x10>
      e8:	05 90       	lpm	r0, Z+
      ea:	0d 92       	st	X+, r0
      ec:	a4 34       	cpi	r26, 0x44	; 68
      ee:	b1 07       	cpc	r27, r17
      f0:	d9 f7       	brne	.-10     	; 0xe8 <__do_copy_data+0xc>

000000f2 <__do_clear_bss>:
__do_clear_bss():
      f2:	2a e3       	ldi	r18, 0x3A	; 58
      f4:	a4 e4       	ldi	r26, 0x44	; 68
      f6:	b8 e3       	ldi	r27, 0x38	; 56
      f8:	01 c0       	rjmp	.+2      	; 0xfc <.do_clear_bss_start>

000000fa <.do_clear_bss_loop>:
      fa:	1d 92       	st	X+, r1

000000fc <.do_clear_bss_start>:
      fc:	a6 3a       	cpi	r26, 0xA6	; 166
      fe:	b2 07       	cpc	r27, r18
     100:	e1 f7       	brne	.-8      	; 0xfa <.do_clear_bss_loop>
.do_clear_bss_start():
../../../../crt1/gcrt1.S:314
     102:	2e d7       	rcall	.+3676   	; 0xf60 <main>
../../../../crt1/gcrt1.S:315
     104:	0c 94 d8 0a 	jmp	0x15b0	; 0x15b0 <_exit>

00000108 <__bad_interrupt>:
__vector_22():
../../../../crt1/gcrt1.S:209
     108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <UPDI::RECV()>:
_ZN4UPDI4RECVEv():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:106
/*
 * UPDI reception
 */

uint8_t UPDI::RECV (void) {
  loop_until_bit_is_set(UPDI_USART.STATUS, USART_RXCIF_bp);
     10a:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
     10e:	87 ff       	sbrs	r24, 7
     110:	fc cf       	rjmp	.-8      	; 0x10a <UPDI::RECV()>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:107
  UPDI_LASTH = UPDI_USART.RXDATAH ^ 0x80;
     112:	80 91 01 08 	lds	r24, 0x0801	; 0x800801 <__RODATA_PM_OFFSET__+0x7f8801>
     116:	80 58       	subi	r24, 0x80	; 128
     118:	8f bb       	out	0x1f, r24	; 31
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:113
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  UPDI_LASTL = UPDI_USART.RXDATAL;
  _send_buf_push(UPDI_LASTL);
  return UPDI_LASTL;
  #else
  return UPDI_LASTL = UPDI_USART.RXDATAL;
     11a:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__RODATA_PM_OFFSET__+0x7f8800>
     11e:	8e bb       	out	0x1e, r24	; 30
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:115
  #endif
}
     120:	08 95       	ret

00000122 <UPDI::SEND(unsigned char)>:
_ZN4UPDI4SENDEh():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:121

/*
 * UPDI transmission : Verify transmitted value with loopback reception
 */

bool UPDI::SEND (uint8_t _data) {
     122:	cf 93       	push	r28
     124:	c8 2f       	mov	r28, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:126
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  _send_buf_push(_data);
  #endif
  bool _r;
  loop_until_bit_is_set(UPDI_USART.STATUS, USART_DREIF_bp);
     126:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
     12a:	85 ff       	sbrs	r24, 5
     12c:	fc cf       	rjmp	.-8      	; 0x126 <UPDI::SEND(unsigned char)+0x4>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:127
  UPDI_USART.STATUS = USART_TXCIF_bm;
     12e:	80 e4       	ldi	r24, 0x40	; 64
     130:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:128
  UPDI_USART.TXDATAL = _data;
     134:	c0 93 02 08 	sts	0x0802, r28	; 0x800802 <__RODATA_PM_OFFSET__+0x7f8802>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:129
  loop_until_bit_is_set(UPDI_USART.STATUS, USART_TXCIF_bp);
     138:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
     13c:	86 ff       	sbrs	r24, 6
     13e:	fc cf       	rjmp	.-8      	; 0x138 <UPDI::SEND(unsigned char)+0x16>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:130
  _r = _data == RECV();
     140:	e4 df       	rcall	.-56     	; 0x10a <UPDI::RECV()>
     142:	98 2f       	mov	r25, r24
     144:	81 e0       	ldi	r24, 0x01	; 1
     146:	9c 13       	cpse	r25, r28
     148:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:131
  if (!_r) bit_set(UPDI_LASTH, 0x20);
     14a:	9c 17       	cp	r25, r28
     14c:	11 f0       	breq	.+4      	; 0x152 <UPDI::SEND(unsigned char)+0x30>
     14e:	9f b3       	in	r25, 0x1f	; 31
     150:	9f bb       	out	0x1f, r25	; 31
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:133
  return _r;
}
     152:	cf 91       	pop	r28
     154:	08 95       	ret

00000156 <UPDI::send_bytes(unsigned char*, unsigned char)>:
_ZN4UPDI10send_bytesEPhh():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:157
/*
 * Send byte chunks
 */

/* __attribute__((optimize("O0"))) */
bool UPDI::send_bytes (uint8_t *data, uint8_t len) {
     156:	0f 93       	push	r16
     158:	1f 93       	push	r17
     15a:	cf 93       	push	r28
     15c:	c6 2f       	mov	r28, r22
     15e:	8c 01       	movw	r16, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:159
  do {
    if (!SEND(*data++)) return false;
     160:	f8 01       	movw	r30, r16
     162:	81 91       	ld	r24, Z+
     164:	8f 01       	movw	r16, r30
     166:	dd df       	rcall	.-70     	; 0x122 <UPDI::SEND(unsigned char)>
     168:	88 23       	and	r24, r24
     16a:	11 f0       	breq	.+4      	; 0x170 <UPDI::send_bytes(unsigned char*, unsigned char)+0x1a>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:160
  } while (--len);
     16c:	c1 50       	subi	r28, 0x01	; 1
     16e:	c1 f7       	brne	.-16     	; 0x160 <UPDI::send_bytes(unsigned char*, unsigned char)+0xa>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:162
  return true;
}
     170:	cf 91       	pop	r28
     172:	1f 91       	pop	r17
     174:	0f 91       	pop	r16
     176:	08 95       	ret

00000178 <UPDI::set_cs_stat(unsigned char, unsigned char)>:
_ZN4UPDI11set_cs_statEhh():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:314
 * Control status transmission
 */

bool UPDI::set_cs_stat (uint8_t code, uint8_t data) {
  static uint8_t set_ptr[] = { UPDI_SYNCH, 0, 0 };
  set_ptr[1] = UPDI_STCS | code;
     178:	e3 e1       	ldi	r30, 0x13	; 19
     17a:	f8 e3       	ldi	r31, 0x38	; 56
     17c:	80 6c       	ori	r24, 0xC0	; 192
     17e:	81 83       	std	Z+1, r24	; 0x01
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:315
  set_ptr[2] = data;
     180:	62 83       	std	Z+2, r22	; 0x02
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:316
  return send_bytes(set_ptr, sizeof(set_ptr));
     182:	63 e0       	ldi	r22, 0x03	; 3
     184:	cf 01       	movw	r24, r30
     186:	e7 cf       	rjmp	.-50     	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>

00000188 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.15]>:
_ZN4UPDI7sts8rsdEmPhh.constprop.15():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:222
    } while (--repeat);
  }
  return len == 0;
}

bool UPDI::sts8rsd (uint32_t addr, uint8_t *data, uint8_t len) {
     188:	0f 93       	push	r16
     18a:	1f 93       	push	r17
     18c:	cf 93       	push	r28
     18e:	c4 2f       	mov	r28, r20
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:223
  _CAPS32(_set_ptr_l[2])->dword = addr;
     190:	60 93 3f 38 	sts	0x383F, r22	; 0x80383f <UPDI::_set_ptr_l+0x2>
     194:	70 93 40 38 	sts	0x3840, r23	; 0x803840 <UPDI::_set_ptr_l+0x3>
     198:	80 93 41 38 	sts	0x3841, r24	; 0x803841 <UPDI::_set_ptr_l+0x4>
     19c:	90 93 42 38 	sts	0x3842, r25	; 0x803842 <UPDI::_set_ptr_l+0x5>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:224
  _set_repeat[2] = len - 1;
     1a0:	8f ef       	ldi	r24, 0xFF	; 255
     1a2:	84 0f       	add	r24, r20
     1a4:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <UPDI::_set_repeat+0x2>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:225
  _set_repeat[4] = UPDI_PTR_INC|UPDI_ST|UPDI_DATA1;
     1a8:	84 e6       	ldi	r24, 0x64	; 100
     1aa:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <UPDI::_set_repeat+0x4>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:226
  if (!send_bytes(_set_ptr_l, sizeof(_set_ptr_l) - 1)) return false;
     1ae:	65 e0       	ldi	r22, 0x05	; 5
     1b0:	8d e3       	ldi	r24, 0x3D	; 61
     1b2:	98 e3       	ldi	r25, 0x38	; 56
     1b4:	d0 df       	rcall	.-96     	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     1b6:	88 23       	and	r24, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:227
  if (UPDI_ACK != RECV()) return false;
     1b8:	e1 f0       	breq	.+56     	; 0x1f2 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.15]+0x6a>
     1ba:	a7 df       	rcall	.-178    	; 0x10a <UPDI::RECV()>
     1bc:	80 34       	cpi	r24, 0x40	; 64
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:320
  set_ptr[2] = data;
  return send_bytes(set_ptr, sizeof(set_ptr));
}

bool UPDI::set_cs_ctra (uint8_t data) {
  return set_cs_stat(UPDI_CS_CTRLA, data);
     1be:	c9 f4       	brne	.+50     	; 0x1f2 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.15]+0x6a>
set_cs_ctra():
     1c0:	6e e0       	ldi	r22, 0x0E	; 14
     1c2:	82 e0       	ldi	r24, 0x02	; 2
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:228
  _CAPS32(_set_ptr_l[2])->dword = addr;
  _set_repeat[2] = len - 1;
  _set_repeat[4] = UPDI_PTR_INC|UPDI_ST|UPDI_DATA1;
  if (!send_bytes(_set_ptr_l, sizeof(_set_ptr_l) - 1)) return false;
  if (UPDI_ACK != RECV()) return false;
  if (!set_cs_ctra(UPDI_SET_RSD|UPDI_GTVAL_RSD)) return false;
     1c4:	d9 df       	rcall	.-78     	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>
_ZN4UPDI7sts8rsdEmPhh.constprop.15():
     1c6:	88 23       	and	r24, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:229
  if (!send_bytes(_set_repeat, sizeof(_set_repeat))) return false;
     1c8:	a1 f0       	breq	.+40     	; 0x1f2 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.15]+0x6a>
     1ca:	65 e0       	ldi	r22, 0x05	; 5
     1cc:	88 e3       	ldi	r24, 0x38	; 56
     1ce:	98 e3       	ldi	r25, 0x38	; 56
     1d0:	c2 df       	rcall	.-124    	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     1d2:	88 23       	and	r24, r24
     1d4:	71 f0       	breq	.+28     	; 0x1f2 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.15]+0x6a>
     1d6:	0a e9       	ldi	r16, 0x9A	; 154
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:231
  do {              /* Repeat byte send */
    SEND(*data++);  /* Submission errors must be ignored */
     1d8:	18 e3       	ldi	r17, 0x38	; 56
     1da:	f8 01       	movw	r30, r16
     1dc:	81 91       	ld	r24, Z+
     1de:	8f 01       	movw	r16, r30
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:232
  } while (--len);
     1e0:	a0 df       	rcall	.-192    	; 0x122 <UPDI::SEND(unsigned char)>
     1e2:	c1 50       	subi	r28, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:320
  set_ptr[2] = data;
  return send_bytes(set_ptr, sizeof(set_ptr));
}

bool UPDI::set_cs_ctra (uint8_t data) {
  return set_cs_stat(UPDI_CS_CTRLA, data);
     1e4:	d1 f7       	brne	.-12     	; 0x1da <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.15]+0x52>
set_cs_ctra():
     1e6:	66 e0       	ldi	r22, 0x06	; 6
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:235
  do {              /* Repeat byte send */
    SEND(*data++);  /* Submission errors must be ignored */
  } while (--len);
  if (!set_cs_ctra(UPDI_GTVAL)) return false;
  return true;
}
     1e8:	82 e0       	ldi	r24, 0x02	; 2
_ZN4UPDI7sts8rsdEmPhh.constprop.15():
     1ea:	cf 91       	pop	r28
     1ec:	1f 91       	pop	r17
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:320
  set_ptr[2] = data;
  return send_bytes(set_ptr, sizeof(set_ptr));
}

bool UPDI::set_cs_ctra (uint8_t data) {
  return set_cs_stat(UPDI_CS_CTRLA, data);
     1ee:	0f 91       	pop	r16
set_cs_ctra():
     1f0:	c3 cf       	rjmp	.-122    	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>
_ZN4UPDI7sts8rsdEmPhh.constprop.15():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:235
  do {              /* Repeat byte send */
    SEND(*data++);  /* Submission errors must be ignored */
  } while (--len);
  if (!set_cs_ctra(UPDI_GTVAL)) return false;
  return true;
}
     1f2:	80 e0       	ldi	r24, 0x00	; 0
     1f4:	cf 91       	pop	r28
     1f6:	1f 91       	pop	r17
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:291
 * Control status reception
 */

uint8_t UPDI::get_cs_stat (uint8_t code) {
  static uint8_t set_ptr[] = { UPDI_SYNCH, 0 };
  set_ptr[1] = UPDI_LDCS | code;
     1f8:	0f 91       	pop	r16
     1fa:	08 95       	ret

000001fc <UPDI::get_cs_stat(unsigned char)>:
_ZN4UPDI11get_cs_statEh():
     1fc:	80 68       	ori	r24, 0x80	; 128
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:292
  send_bytes(set_ptr, sizeof(set_ptr));
     1fe:	80 93 12 38 	sts	0x3812, r24	; 0x803812 <UPDI::get_cs_stat(unsigned char)::set_ptr+0x1>
     202:	62 e0       	ldi	r22, 0x02	; 2
     204:	81 e1       	ldi	r24, 0x11	; 17
     206:	98 e3       	ldi	r25, 0x38	; 56
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:293
  return RECV();
     208:	a6 df       	rcall	.-180    	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     20a:	7f cf       	rjmp	.-258    	; 0x10a <UPDI::RECV()>

0000020c <UPDI::st8(unsigned long, unsigned char)>:
_ZN4UPDI3st8Emh():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:182

/*
 * Single byte transmission
 */

bool UPDI::st8 (uint32_t addr, uint8_t data) {
     20c:	cf 93       	push	r28
     20e:	c4 2f       	mov	r28, r20
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:188
  static uint8_t set_ptr[] = {
      UPDI_SYNCH
    , UPDI_STS | UPDI_ADDR3 | UPDI_DATA1
    , 0, 0, 0, 0    // 24bit address
  };
  _CAPS32(set_ptr[2])->dword = addr;
     210:	60 93 07 38 	sts	0x3807, r22	; 0x803807 <UPDI::st8(unsigned long, unsigned char)::set_ptr+0x2>
     214:	70 93 08 38 	sts	0x3808, r23	; 0x803808 <UPDI::st8(unsigned long, unsigned char)::set_ptr+0x3>
     218:	80 93 09 38 	sts	0x3809, r24	; 0x803809 <UPDI::st8(unsigned long, unsigned char)::set_ptr+0x4>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:189
  if (!send_bytes(set_ptr, sizeof(set_ptr) - 1)) return false;
     21c:	90 93 0a 38 	sts	0x380A, r25	; 0x80380a <UPDI::st8(unsigned long, unsigned char)::set_ptr+0x5>
     220:	65 e0       	ldi	r22, 0x05	; 5
     222:	85 e0       	ldi	r24, 0x05	; 5
     224:	98 e3       	ldi	r25, 0x38	; 56
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:192
  if (UPDI_ACK != RECV()) return false;
  if (!SEND(data)) return false;
  return UPDI_ACK == RECV();
     226:	97 df       	rcall	.-210    	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     228:	81 11       	cpse	r24, r1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:190
    , UPDI_STS | UPDI_ADDR3 | UPDI_DATA1
    , 0, 0, 0, 0    // 24bit address
  };
  _CAPS32(set_ptr[2])->dword = addr;
  if (!send_bytes(set_ptr, sizeof(set_ptr) - 1)) return false;
  if (UPDI_ACK != RECV()) return false;
     22a:	02 c0       	rjmp	.+4      	; 0x230 <UPDI::st8(unsigned long, unsigned char)+0x24>
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	0b c0       	rjmp	.+22     	; 0x246 <UPDI::st8(unsigned long, unsigned char)+0x3a>
     230:	6c df       	rcall	.-296    	; 0x10a <UPDI::RECV()>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:191
  if (!SEND(data)) return false;
     232:	80 34       	cpi	r24, 0x40	; 64
     234:	d9 f7       	brne	.-10     	; 0x22c <UPDI::st8(unsigned long, unsigned char)+0x20>
     236:	8c 2f       	mov	r24, r28
     238:	74 df       	rcall	.-280    	; 0x122 <UPDI::SEND(unsigned char)>
     23a:	88 23       	and	r24, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:192
  return UPDI_ACK == RECV();
     23c:	b9 f3       	breq	.-18     	; 0x22c <UPDI::st8(unsigned long, unsigned char)+0x20>
     23e:	65 df       	rcall	.-310    	; 0x10a <UPDI::RECV()>
     240:	91 e0       	ldi	r25, 0x01	; 1
     242:	80 34       	cpi	r24, 0x40	; 64
     244:	99 f7       	brne	.-26     	; 0x22c <UPDI::st8(unsigned long, unsigned char)+0x20>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:193
}
     246:	89 2f       	mov	r24, r25
     248:	cf 91       	pop	r28
     24a:	08 95       	ret

0000024c <UPDI::send_repeat_header(unsigned long, unsigned char, unsigned char)>:
_ZN4UPDI18send_repeat_headerEmhh():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:170
 * Repeat header transmission
 */

/* __attribute__((optimize("O0"))) */
bool UPDI::send_repeat_header (uint32_t addr, uint8_t cmd, uint8_t len) {
  _CAPS32(_set_ptr_l[2])->dword = addr;
     24c:	60 93 3f 38 	sts	0x383F, r22	; 0x80383f <UPDI::_set_ptr_l+0x2>
     250:	70 93 40 38 	sts	0x3840, r23	; 0x803840 <UPDI::_set_ptr_l+0x3>
     254:	80 93 41 38 	sts	0x3841, r24	; 0x803841 <UPDI::_set_ptr_l+0x4>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:171
  _set_repeat[2] = len - 1;
     258:	90 93 42 38 	sts	0x3842, r25	; 0x803842 <UPDI::_set_ptr_l+0x5>
     25c:	21 50       	subi	r18, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:172
  _set_repeat[4] = UPDI_PTR_INC | cmd;  // ST,LD + DATA1,DATA2
     25e:	20 93 3a 38 	sts	0x383A, r18	; 0x80383a <UPDI::_set_repeat+0x2>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:173
  if (!send_bytes(_set_ptr_l, sizeof(_set_ptr_l) - 1)) return false;
     262:	44 60       	ori	r20, 0x04	; 4
     264:	40 93 3c 38 	sts	0x383C, r20	; 0x80383c <UPDI::_set_repeat+0x4>
     268:	65 e0       	ldi	r22, 0x05	; 5
     26a:	8d e3       	ldi	r24, 0x3D	; 61
     26c:	98 e3       	ldi	r25, 0x38	; 56
     26e:	73 df       	rcall	.-282    	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:174
  if (UPDI_ACK != RECV()) return false;
     270:	88 23       	and	r24, r24
     272:	39 f0       	breq	.+14     	; 0x282 <UPDI::send_repeat_header(unsigned long, unsigned char, unsigned char)+0x36>
     274:	4a df       	rcall	.-364    	; 0x10a <UPDI::RECV()>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:175
  return send_bytes(_set_repeat, sizeof(_set_repeat));
     276:	80 34       	cpi	r24, 0x40	; 64
     278:	21 f4       	brne	.+8      	; 0x282 <UPDI::send_repeat_header(unsigned long, unsigned char, unsigned char)+0x36>
     27a:	65 e0       	ldi	r22, 0x05	; 5
     27c:	88 e3       	ldi	r24, 0x38	; 56
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:176
}
     27e:	98 e3       	ldi	r25, 0x38	; 56
     280:	6a cf       	rjmp	.-300    	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:269
  _CAPS16(set_ptr[2])->word = (uint16_t)addr;
  while (!send_bytes(set_ptr, sizeof(set_ptr) - 1)) BREAK();
  return RECV();
}

bool UPDI::lds8 (uint32_t addr, uint8_t *data, uint8_t len) {
     282:	80 e0       	ldi	r24, 0x00	; 0
     284:	08 95       	ret

00000286 <UPDI::lds8(unsigned long, unsigned char*, unsigned char)>:
_ZN4UPDI4lds8EmPhh():
     286:	ff 92       	push	r15
     288:	0f 93       	push	r16
     28a:	1f 93       	push	r17
     28c:	cf 93       	push	r28
     28e:	df 93       	push	r29
     290:	f4 2e       	mov	r15, r20
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:270
  if (!send_repeat_header(addr, UPDI_LD|UPDI_DATA1, len)) return false;
     292:	d5 2f       	mov	r29, r21
     294:	c2 2f       	mov	r28, r18
     296:	40 e2       	ldi	r20, 0x20	; 32
     298:	d9 df       	rcall	.-78     	; 0x24c <UPDI::send_repeat_header(unsigned long, unsigned char, unsigned char)>
     29a:	88 23       	and	r24, r24
     29c:	61 f0       	breq	.+24     	; 0x2b6 <UPDI::lds8(unsigned long, unsigned char*, unsigned char)+0x30>
     29e:	0f 2d       	mov	r16, r15
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:271
  do { *data++ = RECV(); } while (--len);
     2a0:	1d 2f       	mov	r17, r29
     2a2:	33 df       	rcall	.-410    	; 0x10a <UPDI::RECV()>
     2a4:	f8 01       	movw	r30, r16
     2a6:	81 93       	st	Z+, r24
     2a8:	8f 01       	movw	r16, r30
     2aa:	c1 50       	subi	r28, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:272
  return UPDI_LASTH == 0;
     2ac:	d1 f7       	brne	.-12     	; 0x2a2 <UPDI::lds8(unsigned long, unsigned char*, unsigned char)+0x1c>
     2ae:	9f b3       	in	r25, 0x1f	; 31
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	91 11       	cpse	r25, r1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:273
}
     2b4:	80 e0       	ldi	r24, 0x00	; 0
     2b6:	df 91       	pop	r29
     2b8:	cf 91       	pop	r28
     2ba:	1f 91       	pop	r17
     2bc:	0f 91       	pop	r16
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:199

/*
 * Transmission
 */

bool UPDI::sts8 (uint32_t addr, uint8_t *data, uint8_t len) {
     2be:	ff 90       	pop	r15
     2c0:	08 95       	ret

000002c2 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)>:
_ZN4UPDI4sts8EmPhh():
     2c2:	ff 92       	push	r15
     2c4:	0f 93       	push	r16
     2c6:	1f 93       	push	r17
     2c8:	cf 93       	push	r28
     2ca:	df 93       	push	r29
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:200
  if (send_repeat_header(addr, UPDI_ST|UPDI_DATA1, len)) {
     2cc:	f4 2e       	mov	r15, r20
     2ce:	d5 2f       	mov	r29, r21
     2d0:	c2 2f       	mov	r28, r18
     2d2:	40 e6       	ldi	r20, 0x60	; 96
     2d4:	bb df       	rcall	.-138    	; 0x24c <UPDI::send_repeat_header(unsigned long, unsigned char, unsigned char)>
     2d6:	88 23       	and	r24, r24
     2d8:	69 f0       	breq	.+26     	; 0x2f4 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)+0x32>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:202
    do {
      if (!SEND(*data++)) break;
     2da:	0f 2d       	mov	r16, r15
     2dc:	1d 2f       	mov	r17, r29
     2de:	f8 01       	movw	r30, r16
     2e0:	81 91       	ld	r24, Z+
     2e2:	8f 01       	movw	r16, r30
     2e4:	1e df       	rcall	.-452    	; 0x122 <UPDI::SEND(unsigned char)>
     2e6:	88 23       	and	r24, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:203
      if (UPDI_ACK != RECV()) break;
     2e8:	29 f0       	breq	.+10     	; 0x2f4 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)+0x32>
     2ea:	0f df       	rcall	.-482    	; 0x10a <UPDI::RECV()>
     2ec:	80 34       	cpi	r24, 0x40	; 64
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:204
    } while (--len);
     2ee:	11 f4       	brne	.+4      	; 0x2f4 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)+0x32>
     2f0:	c1 50       	subi	r28, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:206
  }
  return len == 0;
     2f2:	a9 f7       	brne	.-22     	; 0x2de <UPDI::sts8(unsigned long, unsigned char*, unsigned char)+0x1c>
     2f4:	81 e0       	ldi	r24, 0x01	; 1
     2f6:	c1 11       	cpse	r28, r1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:207
}
     2f8:	80 e0       	ldi	r24, 0x00	; 0
     2fa:	df 91       	pop	r29
     2fc:	cf 91       	pop	r28
     2fe:	1f 91       	pop	r17
     300:	0f 91       	pop	r16
     302:	ff 90       	pop	r15
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:136
  if (!_r) bit_set(UPDI_LASTH, 0x20);
  return _r;
}

/* BREAK character : Generated by slowing down the sending speed */
void UPDI::BREAK (void) {
     304:	08 95       	ret

00000306 <UPDI::BREAK()>:
_ZN4UPDI5BREAKEv():
     306:	cf 93       	push	r28
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:137
  UPDI_USART.BAUD = UPDI_BAUD_BREAK;
     308:	df 93       	push	r29
     30a:	c0 e0       	ldi	r28, 0x00	; 0
     30c:	d8 e0       	ldi	r29, 0x08	; 8
     30e:	80 ec       	ldi	r24, 0xC0	; 192
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:139
  /* Maintains low level signal at least 768bit long */
  SEND(UPDI_NOP);
     310:	94 e4       	ldi	r25, 0x44	; 68
     312:	88 87       	std	Y+8, r24	; 0x08
     314:	99 87       	std	Y+9, r25	; 0x09
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:140
  UPDI_USART.BAUD = UPDI_BAUD_CALC;
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	04 df       	rcall	.-504    	; 0x122 <UPDI::SEND(unsigned char)>
     31a:	80 eb       	ldi	r24, 0xB0	; 176
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:142
  bit_clear(UPDI_CONTROL, UPDI_CLKU_bp);
}
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	88 87       	std	Y+8, r24	; 0x08
     320:	99 87       	std	Y+9, r25	; 0x09
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:264
  static uint8_t set_ptr[] = {
      UPDI_SYNCH
    , UPDI_LDS|UPDI_ADDR3|UPDI_DATA1
    , 0, 0, 0, 0  // 24bit address
  };
  _CAPS16(set_ptr[2])->word = (uint16_t)addr;
     322:	e6 98       	cbi	0x1c, 6	; 28
     324:	df 91       	pop	r29
     326:	cf 91       	pop	r28
     328:	08 95       	ret

0000032a <UPDI::ld8(unsigned long)>:
_ZN4UPDI3ld8Em():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:265
  while (!send_bytes(set_ptr, sizeof(set_ptr) - 1)) BREAK();
     32a:	60 93 0d 38 	sts	0x380D, r22	; 0x80380d <UPDI::ld8(unsigned long)::set_ptr+0x2>
     32e:	70 93 0e 38 	sts	0x380E, r23	; 0x80380e <UPDI::ld8(unsigned long)::set_ptr+0x3>
     332:	65 e0       	ldi	r22, 0x05	; 5
     334:	8b e0       	ldi	r24, 0x0B	; 11
     336:	98 e3       	ldi	r25, 0x38	; 56
     338:	0e df       	rcall	.-484    	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     33a:	81 11       	cpse	r24, r1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:266
  return RECV();
     33c:	02 c0       	rjmp	.+4      	; 0x342 <UPDI::ld8(unsigned long)+0x18>
     33e:	e3 df       	rcall	.-58     	; 0x306 <UPDI::BREAK()>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:96
  return send_bytes(set_ptr, sizeof(set_ptr));
}

/* This only does a system reset */
bool UPDI::updi_reset (bool logic) {
  return set_cs_stat(
     340:	f8 cf       	rjmp	.-16     	; 0x332 <UPDI::ld8(unsigned long)+0x8>
     342:	e3 ce       	rjmp	.-570    	; 0x10a <UPDI::RECV()>

00000344 <UPDI::updi_reset(bool)>:
_ZN4UPDI10updi_resetEb():
     344:	60 e0       	ldi	r22, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:98
    UPDI_CS_ASI_RESET_REQ,
    (logic ? UPDI_RSTREQ : UPDI_NOP));
     346:	81 11       	cpse	r24, r1
     348:	69 e5       	ldi	r22, 0x59	; 89
     34a:	88 e0       	ldi	r24, 0x08	; 8
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:81
  /* Release target from reset state after resetting WDT timeout */
  if ( bit_is_set(RSTCTRL_RSTFR, RSTCTRL_WDRF_bp) ) Target_Reset(false);
}

/* This special system reset will log you out of UPDI */
bool UPDI::Target_Reset (bool _enable) {
     34c:	15 cf       	rjmp	.-470    	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>

0000034e <UPDI::Target_Reset(bool)>:
_ZN4UPDI12Target_ResetEb():
     34e:	cf 93       	push	r28
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:89
    , UPDI_STCS | UPDI_CS_ASI_RESET_REQ
    , 0
    , UPDI_STCS | UPDI_CS_CTRLB
    , UPDI_SET_UPDIDIS
  };
  BREAK();
     350:	c8 2f       	mov	r28, r24
     352:	d9 df       	rcall	.-78     	; 0x306 <UPDI::BREAK()>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:90
  set_ptr[2] = _enable ? UPDI_RSTREQ : UPDI_NOP;
     354:	80 e0       	ldi	r24, 0x00	; 0
     356:	c1 11       	cpse	r28, r1
     358:	89 e5       	ldi	r24, 0x59	; 89
     35a:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <__DATA_REGION_ORIGIN__+0x2>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:91
  return send_bytes(set_ptr, sizeof(set_ptr));
     35e:	65 e0       	ldi	r22, 0x05	; 5
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	98 e3       	ldi	r25, 0x38	; 56
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:92
}
     364:	cf 91       	pop	r28
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:91
    , UPDI_STCS | UPDI_CS_CTRLB
    , UPDI_SET_UPDIDIS
  };
  BREAK();
  set_ptr[2] = _enable ? UPDI_RSTREQ : UPDI_NOP;
  return send_bytes(set_ptr, sizeof(set_ptr));
     366:	f7 ce       	rjmp	.-530    	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>

00000368 <TIM::LED_Flash()>:
_ZN3TIM9LED_FlashEv():
     368:	80 91 5b 38 	lds	r24, 0x385B	; 0x80385b <TIM::mode>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:151
    LEDG_EVOUT = EVSYS_USER_CHANNEL2_gc;
  }
}

void LED_TCB1 (uint8_t mode, uint16_t ccmp) {
  if (TIM::mode != mode) {
     36c:	82 30       	cpi	r24, 0x02	; 2
     36e:	99 f0       	breq	.+38     	; 0x396 <TIM::LED_Flash()+0x2e>
     370:	82 e0       	ldi	r24, 0x02	; 2
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:152
    TIM::mode = mode;
     372:	80 93 5b 38 	sts	0x385B, r24	; 0x80385b <TIM::mode>
     376:	89 ea       	ldi	r24, 0xA9	; 169
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:153
    TCB1_CCMP = ccmp;
     378:	98 e0       	ldi	r25, 0x08	; 8
     37a:	80 93 9c 0a 	sts	0x0A9C, r24	; 0x800a9c <__RODATA_PM_OFFSET__+0x7f8a9c>
     37e:	90 93 9d 0a 	sts	0x0A9D, r25	; 0x800a9d <__RODATA_PM_OFFSET__+0x7f8a9d>
     382:	10 92 9a 0a 	sts	0x0A9A, r1	; 0x800a9a <__RODATA_PM_OFFSET__+0x7f8a9a>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:154
    TCB1_CNT = 0;
     386:	10 92 9b 0a 	sts	0x0A9B, r1	; 0x800a9b <__RODATA_PM_OFFSET__+0x7f8a9b>
     38a:	8f e4       	ldi	r24, 0x4F	; 79
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:155
    TCB1_CTRLA = TCB_RUNSTDBY_bm | TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
     38c:	80 93 90 0a 	sts	0x0A90, r24	; 0x800a90 <__RODATA_PM_OFFSET__+0x7f8a90>
     390:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:156
    LEDG_EVOUT = EVSYS_USER_CHANNEL0_gc;
     392:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <__RODATA_PM_OFFSET__+0x7f81a9>
     396:	08 95       	ret

00000398 <TIM::LED_HeartBeat()>:
_ZN3TIM13LED_HeartBeatEv():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:163
}

/* Flash (after RTS assert/UPDI authorization) */
void TIM::LED_Flash (void) {
  LED_TCB1(2, TCB1_FLASH);
}
     398:	80 91 5b 38 	lds	r24, 0x385B	; 0x80385b <TIM::mode>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:141
 * LED operation switching
 */

/* Heartbeat (waiting) */
void TIM::LED_HeartBeat (void) {
  if (TIM::mode != 1) {
     39c:	81 30       	cpi	r24, 0x01	; 1
     39e:	99 f0       	breq	.+38     	; 0x3c6 <TIM::LED_HeartBeat()+0x2e>
     3a0:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:142
    TIM::mode = 1;
     3a2:	80 93 5b 38 	sts	0x385B, r24	; 0x80385b <TIM::mode>
     3a6:	8a e8       	ldi	r24, 0x8A	; 138
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:143
    TCB1_CCMP = TCB1_HBEAT;
     3a8:	95 e4       	ldi	r25, 0x45	; 69
     3aa:	80 93 9c 0a 	sts	0x0A9C, r24	; 0x800a9c <__RODATA_PM_OFFSET__+0x7f8a9c>
     3ae:	90 93 9d 0a 	sts	0x0A9D, r25	; 0x800a9d <__RODATA_PM_OFFSET__+0x7f8a9d>
     3b2:	10 92 9a 0a 	sts	0x0A9A, r1	; 0x800a9a <__RODATA_PM_OFFSET__+0x7f8a9a>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:144
    TCB1_CNT = 0;
     3b6:	10 92 9b 0a 	sts	0x0A9B, r1	; 0x800a9b <__RODATA_PM_OFFSET__+0x7f8a9b>
     3ba:	85 e4       	ldi	r24, 0x45	; 69
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:145
    TCB1_CTRLA = TCB_RUNSTDBY_bm | TCB_ENABLE_bm | TCB_CLKSEL_TCA0_gc;
     3bc:	80 93 90 0a 	sts	0x0A90, r24	; 0x800a90 <__RODATA_PM_OFFSET__+0x7f8a90>
     3c0:	83 e0       	ldi	r24, 0x03	; 3
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:146
    LEDG_EVOUT = EVSYS_USER_CHANNEL2_gc;
     3c2:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <__RODATA_PM_OFFSET__+0x7f81a9>
     3c6:	08 95       	ret

000003c8 <TIM::Timeout_Stop()>:
_ZN3TIM12Timeout_StopEv():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:148
  }
}
     3c8:	8f b7       	in	r24, 0x3f	; 63
__iCliRetVal():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:128
    TCB0_CTRLA = TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
  }
}

void TIM::Timeout_Stop (void) {
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     3ca:	f8 94       	cli
_ZN3TIM12Timeout_StopEv():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3cc:	10 92 80 0a 	sts	0x0A80, r1	; 0x800a80 <__RODATA_PM_OFFSET__+0x7f8a80>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:129
    TCB0_CTRLA = 0;
     3d0:	91 e0       	ldi	r25, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:130
    TCB0_INTFLAGS = TCB_CAPT_bm;
     3d2:	90 93 86 0a 	sts	0x0A86, r25	; 0x800a86 <__RODATA_PM_OFFSET__+0x7f8a86>
__iRestore():
     3d6:	8f bf       	out	0x3f, r24	; 63
_ZN3TIM12Timeout_StopEv():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3d8:	18 95       	reti
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:132
  }
  reti();
     3da:	08 95       	ret

000003dc <SYS::WDT_SET(unsigned char)>:
_ZN3SYS7WDT_SETEh():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:133
}
     3dc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__RODATA_PM_OFFSET__+0x7f8101>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:142
/*****************
 * WDT operation *
 *****************/

void SYS::WDT_SET (uint8_t _wdt_period) {
  loop_until_bit_is_clear(WDT_STATUS, WDT_SYNCBUSY_bp);
     3e0:	90 fd       	sbrc	r25, 0
     3e2:	fc cf       	rjmp	.-8      	; 0x3dc <SYS::WDT_SET(unsigned char)>
     3e4:	98 ed       	ldi	r25, 0xD8	; 216
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:143
  _PROTECTED_WRITE(WDT_CTRLA, _wdt_period);
     3e6:	94 bf       	out	0x34, r25	; 52
     3e8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__RODATA_PM_OFFSET__+0x7f8100>
     3ec:	08 95       	ret

000003ee <SYS::get_vcc()>:
_ZN3SYS7get_vccEv():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:144
}
     3ee:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:70
 * Self VCC measurement *
 ************************/

/*** This routine is exclusive to the tinyAVR-2 series. ***/
uint16_t SYS::get_vcc (void) {
  ADC0_CTRLA = ADC_ENABLE_bm;
     3f0:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__RODATA_PM_OFFSET__+0x7f8600>
     3f4:	10 92 01 06 	sts	0x0601, r1	; 0x800601 <__RODATA_PM_OFFSET__+0x7f8601>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:71
  ADC0_CTRLB = ADC_PRESC_DIV2_gc;
     3f8:	84 e5       	ldi	r24, 0x54	; 84
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:72
  ADC0_CTRLC = ADC_REFSEL_1024MV_gc | ((F_CPU / 1000000UL) << ADC_TIMEBASE_gp);
     3fa:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__RODATA_PM_OFFSET__+0x7f8602>
     3fe:	81 e1       	ldi	r24, 0x11	; 17
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:73
  ADC0_CTRLE = 17; /* (SAMPDUR + 0.5) * fCLK_ADC = 10.5 µs sample duration */
     400:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__RODATA_PM_OFFSET__+0x7f8608>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:74
  ADC0_MUXPOS = ADC_MUXPOS_VDDDIV10_gc; /* ADC channel VDD/10 */
     404:	91 e3       	ldi	r25, 0x31	; 49
     406:	90 93 0c 06 	sts	0x060C, r25	; 0x80060c <__RODATA_PM_OFFSET__+0x7f860c>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:75
  ADC0_COMMAND = ADC_MODE_SINGLE_12BIT_gc | ADC_START_IMMEDIATE_gc;
     40a:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <__RODATA_PM_OFFSET__+0x7f860a>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:76
  loop_until_bit_is_set(ADC0_INTFLAGS, ADC_SAMPRDY_bp);
     40e:	80 91 05 06 	lds	r24, 0x0605	; 0x800605 <__RODATA_PM_OFFSET__+0x7f8605>
     412:	81 ff       	sbrs	r24, 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:77
  uint16_t adc_reading = ADC0_SAMPLE;
     414:	fc cf       	rjmp	.-8      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     416:	20 91 14 06 	lds	r18, 0x0614	; 0x800614 <__RODATA_PM_OFFSET__+0x7f8614>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:78
  adc_reading += adc_reading + (adc_reading >> 1);  /* x2.5 */
     41a:	30 91 15 06 	lds	r19, 0x0615	; 0x800615 <__RODATA_PM_OFFSET__+0x7f8615>
     41e:	c9 01       	movw	r24, r18
     420:	96 95       	lsr	r25
     422:	87 95       	ror	r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:79
  ADC0_CTRLA = 0;
     424:	22 0f       	add	r18, r18
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:81
  return adc_reading;
}
     426:	33 1f       	adc	r19, r19
     428:	10 92 00 06 	sts	0x0600, r1	; 0x800600 <__RODATA_PM_OFFSET__+0x7f8600>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:60
    return UPDI_LASTL;
  }

  /* NVMCTRL version 0 (,2,3,5) */
  bool nvm_ctrl (uint8_t nvmcmd) {
    return UPDI::st8(NVMCTRL_REG_CTRLA, nvmcmd);
     42c:	82 0f       	add	r24, r18
     42e:	93 1f       	adc	r25, r19
     430:	08 95       	ret

00000432 <NVM::nvm_ctrl(unsigned char)>:
_ZN3NVM8nvm_ctrlEh():
     432:	48 2f       	mov	r20, r24
     434:	60 e0       	ldi	r22, 0x00	; 0
     436:	70 e1       	ldi	r23, 0x10	; 16
     438:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:64
  }

  /* NVMCTRL version 2,3,5 */
  bool nvm_ctrl_change (uint8_t nvmcmd) {
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	e7 ce       	rjmp	.-562    	; 0x20c <UPDI::st8(unsigned long, unsigned char)>

0000043e <NVM::nvm_ctrl_change(unsigned char)>:
_ZN3NVM15nvm_ctrl_changeEh():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:65
    if (UPDI::ld8(NVMCTRL_REG_CTRLA) == nvmcmd) return true;
     43e:	cf 93       	push	r28
     440:	c8 2f       	mov	r28, r24
     442:	60 e0       	ldi	r22, 0x00	; 0
     444:	70 e1       	ldi	r23, 0x10	; 16
     446:	80 e0       	ldi	r24, 0x00	; 0
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	6f df       	rcall	.-290    	; 0x32a <UPDI::ld8(unsigned long)>
     44c:	8c 13       	cpse	r24, r28
     44e:	03 c0       	rjmp	.+6      	; 0x456 <NVM::nvm_ctrl_change(unsigned char)+0x18>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:69
    if (!nvm_ctrl(NVM_CMD_NOCMD)) return false;
    if (NVM_CMD_NOCMD != nvmcmd) return nvm_ctrl(nvmcmd);
    return true;
  }
     450:	81 e0       	ldi	r24, 0x01	; 1
     452:	cf 91       	pop	r28
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:66
  }

  /* NVMCTRL version 2,3,5 */
  bool nvm_ctrl_change (uint8_t nvmcmd) {
    if (UPDI::ld8(NVMCTRL_REG_CTRLA) == nvmcmd) return true;
    if (!nvm_ctrl(NVM_CMD_NOCMD)) return false;
     454:	08 95       	ret
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	ec df       	rcall	.-40     	; 0x432 <NVM::nvm_ctrl(unsigned char)>
     45a:	88 23       	and	r24, r24
     45c:	d1 f3       	breq	.-12     	; 0x452 <NVM::nvm_ctrl_change(unsigned char)+0x14>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:67
    if (NVM_CMD_NOCMD != nvmcmd) return nvm_ctrl(nvmcmd);
     45e:	cc 23       	and	r28, r28
     460:	b9 f3       	breq	.-18     	; 0x450 <NVM::nvm_ctrl_change(unsigned char)+0x12>
     462:	8c 2f       	mov	r24, r28
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:69
    return true;
  }
     464:	cf 91       	pop	r28
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:67

  /* NVMCTRL version 2,3,5 */
  bool nvm_ctrl_change (uint8_t nvmcmd) {
    if (UPDI::ld8(NVMCTRL_REG_CTRLA) == nvmcmd) return true;
    if (!nvm_ctrl(NVM_CMD_NOCMD)) return false;
    if (NVM_CMD_NOCMD != nvmcmd) return nvm_ctrl(nvmcmd);
     466:	e5 cf       	rjmp	.-54     	; 0x432 <NVM::nvm_ctrl(unsigned char)>

00000468 <JTAG2::set_response(JTAG2::jtag_response_e)>:
_ZN5JTAG212set_responseENS_15jtag_response_eE():
     468:	e8 e8       	ldi	r30, 0x88	; 136
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:463
/*****************
 * JTAG Response *
 *****************/

void JTAG2::set_response (jtag_response_e response_code) {
  packet.size = 4;
     46a:	f8 e3       	ldi	r31, 0x38	; 56
     46c:	44 e0       	ldi	r20, 0x04	; 4
     46e:	50 e0       	ldi	r21, 0x00	; 0
     470:	60 e0       	ldi	r22, 0x00	; 0
     472:	70 e0       	ldi	r23, 0x00	; 0
     474:	43 83       	std	Z+3, r20	; 0x03
     476:	54 83       	std	Z+4, r21	; 0x04
     478:	65 83       	std	Z+5, r22	; 0x05
     47a:	76 83       	std	Z+6, r23	; 0x06
     47c:	80 87       	std	Z+8, r24	; 0x08
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:465
  /* response number */
  packet.body[MESSAGE_ID] = response_code;
     47e:	8c b3       	in	r24, 0x1c	; 28
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:467
  /* Internal status flag */
  packet.body[RSP_DATA    ] = UPDI_CONTROL;
     480:	81 87       	std	Z+9, r24	; 0x09
     482:	8d b3       	in	r24, 0x1d	; 29
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:468
  packet.body[RSP_DATA + 1] = UPDI_NVMCTRL;
     484:	82 87       	std	Z+10, r24	; 0x0a
     486:	8e b3       	in	r24, 0x1e	; 30
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:469
  packet.body[RSP_DATA + 2] = UPDI_LASTL;
     488:	83 87       	std	Z+11, r24	; 0x0b
     48a:	08 95       	ret

0000048c <_crc_ccitt_update(unsigned int, unsigned char)>:
_ZL17_crc_ccitt_updatejh():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:470
}
     48c:	86 27       	eor	r24, r22
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/crc16.h:285
        "eor    %A0,__tmp_reg__"

        : "=d" (__ret)
        : "r" (__data), "0" (__crc)
        : "r0"
    );
     48e:	08 2e       	mov	r0, r24
     490:	82 95       	swap	r24
     492:	80 7f       	andi	r24, 0xF0	; 240
     494:	80 25       	eor	r24, r0
     496:	09 2e       	mov	r0, r25
     498:	98 2f       	mov	r25, r24
     49a:	82 95       	swap	r24
     49c:	8f 70       	andi	r24, 0x0F	; 15
     49e:	08 26       	eor	r0, r24
     4a0:	86 95       	lsr	r24
     4a2:	98 27       	eor	r25, r24
     4a4:	89 27       	eor	r24, r25
     4a6:	88 0f       	add	r24, r24
     4a8:	88 0f       	add	r24, r24
     4aa:	88 0f       	add	r24, r24
     4ac:	80 25       	eor	r24, r0
     4ae:	08 95       	ret

000004b0 <JTAG2::answer_transfer()>:
_ZN5JTAG215answer_transferEv():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/crc16.h:287
    return __ret;
}
     4b0:	af 92       	push	r10
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:149

  /***************
   * JTAG Answer *
   ***************/

  void answer_transfer (void) {
     4b2:	bf 92       	push	r11
     4b4:	cf 92       	push	r12
     4b6:	df 92       	push	r13
     4b8:	ef 92       	push	r14
     4ba:	ff 92       	push	r15
     4bc:	0f 93       	push	r16
     4be:	1f 93       	push	r17
     4c0:	cf 93       	push	r28
     4c2:	df 93       	push	r29
     4c4:	00 d0       	rcall	.+0      	; 0x4c6 <JTAG2::answer_transfer()+0x16>
     4c6:	cd b7       	in	r28, 0x3d	; 61
     4c8:	de b7       	in	r29, 0x3e	; 62
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:150
    uint16_t _crc = ~0;
     4ca:	8f ef       	ldi	r24, 0xFF	; 255
     4cc:	9f ef       	ldi	r25, 0xFF	; 255
     4ce:	89 83       	std	Y+1, r24	; 0x01
     4d0:	9a 83       	std	Y+2, r25	; 0x02
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:151
    int16_t _len = packet.size_word[0] + 8;
     4d2:	e0 90 8b 38 	lds	r14, 0x388B	; 0x80388b <JTAG2::packet+0x3>
     4d6:	f0 90 8c 38 	lds	r15, 0x388C	; 0x80388c <JTAG2::packet+0x4>
     4da:	87 01       	movw	r16, r14
     4dc:	08 5f       	subi	r16, 0xF8	; 248
     4de:	1f 4f       	sbci	r17, 0xFF	; 255
     4e0:	88 e8       	ldi	r24, 0x88	; 136
     4e2:	c8 2e       	mov	r12, r24
     4e4:	88 e3       	ldi	r24, 0x38	; 56
     4e6:	d8 2e       	mov	r13, r24
     4e8:	56 01       	movw	r10, r12
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	e8 1a       	sub	r14, r24
     4ee:	f1 08       	sbc	r15, r1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:154
    uint8_t *_p = (uint8_t*) &packet.soh;
    uint8_t *_q = (uint8_t*) &packet.soh;
    while (_len--) _crc = crc16_update(_crc, *_q++);
     4f0:	a7 ef       	ldi	r26, 0xF7	; 247
     4f2:	ea 16       	cp	r14, r26
     4f4:	af ef       	ldi	r26, 0xFF	; 255
     4f6:	fa 06       	cpc	r15, r26
     4f8:	49 f0       	breq	.+18     	; 0x50c <JTAG2::answer_transfer()+0x5c>
     4fa:	f5 01       	movw	r30, r10
     4fc:	61 91       	ld	r22, Z+
     4fe:	5f 01       	movw	r10, r30
crc16_update():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:100
  void flush (void) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_TXCIF_bp);
  }

  uint16_t crc16_update(uint16_t _crc, uint8_t _data) {
    return _crc_ccitt_update(_crc, _data);
     500:	89 81       	ldd	r24, Y+1	; 0x01
     502:	9a 81       	ldd	r25, Y+2	; 0x02
     504:	c3 df       	rcall	.-122    	; 0x48c <_crc_ccitt_update(unsigned int, unsigned char)>
_ZN5JTAG215answer_transferEv():
     506:	89 83       	std	Y+1, r24	; 0x01
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:154
  void answer_transfer (void) {
    uint16_t _crc = ~0;
    int16_t _len = packet.size_word[0] + 8;
    uint8_t *_p = (uint8_t*) &packet.soh;
    uint8_t *_q = (uint8_t*) &packet.soh;
    while (_len--) _crc = crc16_update(_crc, *_q++);
     508:	9a 83       	std	Y+2, r25	; 0x02
     50a:	ef cf       	rjmp	.-34     	; 0x4ea <JTAG2::answer_transfer()+0x3a>
     50c:	f8 01       	movw	r30, r16
     50e:	e8 57       	subi	r30, 0x78	; 120
     510:	f7 4c       	sbci	r31, 0xC7	; 199
     512:	89 81       	ldd	r24, Y+1	; 0x01
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:155
    (*_q++) = _CAPS16(_crc)->bytes[0];
     514:	80 83       	st	Z, r24
     516:	8a 81       	ldd	r24, Y+2	; 0x02
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:156
    (*_q++) = _CAPS16(_crc)->bytes[1];
     518:	81 83       	std	Z+1, r24	; 0x01
     51a:	2f b7       	in	r18, 0x3f	; 63
__iCliRetVal():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:157
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     51c:	f8 94       	cli
_ZN5JTAG215answer_transferEv():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     51e:	32 96       	adiw	r30, 0x02	; 2
put():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:156
    int16_t _len = packet.size_word[0] + 8;
    uint8_t *_p = (uint8_t*) &packet.soh;
    uint8_t *_q = (uint8_t*) &packet.soh;
    while (_len--) _crc = crc16_update(_crc, *_q++);
    (*_q++) = _CAPS16(_crc)->bytes[0];
    (*_q++) = _CAPS16(_crc)->bytes[1];
     520:	90 e4       	ldi	r25, 0x40	; 64
_ZN5JTAG215answer_transferEv():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:91
    return JTAG_USART.RXDATAL;
  }

  uint8_t put (uint8_t _data) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_DREIF_bp);
    JTAG_USART.STATUS = USART_TXCIF_bm;
     522:	ce 16       	cp	r12, r30
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:158
    uint8_t *_q = (uint8_t*) &packet.soh;
    while (_len--) _crc = crc16_update(_crc, *_q++);
    (*_q++) = _CAPS16(_crc)->bytes[0];
    (*_q++) = _CAPS16(_crc)->bytes[1];
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
      while (_p != _q) put(*_p++);
     524:	df 06       	cpc	r13, r31
     526:	71 f4       	brne	.+28     	; 0x544 <JTAG2::answer_transfer()+0x94>
__iRestore():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     528:	2f bf       	out	0x3f, r18	; 63
_ZN5JTAG215answer_transferEv():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:160
    }
  }
     52a:	0f 90       	pop	r0
     52c:	0f 90       	pop	r0
     52e:	df 91       	pop	r29
     530:	cf 91       	pop	r28
     532:	1f 91       	pop	r17
     534:	0f 91       	pop	r16
     536:	ff 90       	pop	r15
     538:	ef 90       	pop	r14
     53a:	df 90       	pop	r13
     53c:	cf 90       	pop	r12
     53e:	bf 90       	pop	r11
     540:	af 90       	pop	r10
     542:	08 95       	ret
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:158
    uint8_t *_q = (uint8_t*) &packet.soh;
    while (_len--) _crc = crc16_update(_crc, *_q++);
    (*_q++) = _CAPS16(_crc)->bytes[0];
    (*_q++) = _CAPS16(_crc)->bytes[1];
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
      while (_p != _q) put(*_p++);
     544:	d6 01       	movw	r26, r12
     546:	8d 91       	ld	r24, X+
     548:	6d 01       	movw	r12, r26
put():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:90
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_RXCIF_bp);
    return JTAG_USART.RXDATAL;
  }

  uint8_t put (uint8_t _data) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_DREIF_bp);
     54a:	30 91 24 08 	lds	r19, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
     54e:	35 ff       	sbrs	r19, 5
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:91
    JTAG_USART.STATUS = USART_TXCIF_bm;
     550:	fc cf       	rjmp	.-8      	; 0x54a <JTAG2::answer_transfer()+0x9a>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:92
    return JTAG_USART.TXDATAL = _data;
     552:	90 93 24 08 	sts	0x0824, r25	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
     556:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <__RODATA_PM_OFFSET__+0x7f8822>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:377
  } while (--limit);
  return false;
}

/* __attribute__((optimize("O0"))) */
bool UPDI::loop_until_key_stat_is_set (uint8_t bitmap, uint16_t limit) {
     55a:	e3 cf       	rjmp	.-58     	; 0x522 <JTAG2::answer_transfer()+0x72>

0000055c <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.18]>:
_ZN4UPDI26loop_until_key_stat_is_setEhj.constprop.18():
     55c:	1f 93       	push	r17
     55e:	cf 93       	push	r28
     560:	df 93       	push	r29
     562:	18 2f       	mov	r17, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:297
  send_bytes(set_ptr, sizeof(set_ptr));
  return RECV();
}

bool UPDI::is_cs_stat (uint8_t code, uint8_t check) {
  return check == (get_cs_stat(code) & check);
     564:	d0 e0       	ldi	r29, 0x00	; 0
     566:	c0 e0       	ldi	r28, 0x00	; 0
is_cs_stat():
     568:	87 e0       	ldi	r24, 0x07	; 7
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:382
bool UPDI::loop_until_key_stat_is_set (uint8_t bitmap, uint16_t limit) {
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  uint16_t _back = _send_ptr;
  #endif
  do {
    if (is_key_stat(bitmap)) return true;
     56a:	48 de       	rcall	.-880    	; 0x1fc <UPDI::get_cs_stat(unsigned char)>
     56c:	81 23       	and	r24, r17
_ZN4UPDI26loop_until_key_stat_is_setEhj.constprop.18():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.8/cores/megaAVR/api/delay_busywait.h:31
static __inline__ __attribute__((__always_inline__)) void delay_micros (uint32_t _us);
static __inline__ __attribute__((__always_inline__)) void delay_millis (uint32_t _ms);

void delay_micros (uint32_t _us) {
  if (F_CPU >= 1000000L) {
    __builtin_avr_delay_cycles((F_CPU / 1000000L) * _us);
     56e:	18 17       	cp	r17, r24
     570:	59 f0       	breq	.+22     	; 0x588 <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.18]+0x2c>
delay_micros():
     572:	86 ea       	ldi	r24, 0xA6	; 166
     574:	8a 95       	dec	r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:387
    #ifdef ENABLE_DEBUG_UPDI_SENDER
    _send_ptr = _back;
    #endif
    TIM::delay_50us();
  } while (--limit);
     576:	f1 f7       	brne	.-4      	; 0x574 <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.18]+0x18>
     578:	00 c0       	rjmp	.+0      	; 0x57a <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.18]+0x1e>
_ZN4UPDI26loop_until_key_stat_is_setEhj.constprop.18():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:388
  return false;
     57a:	21 97       	sbiw	r28, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:389
}
     57c:	a9 f7       	brne	.-22     	; 0x568 <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.18]+0xc>
     57e:	80 e0       	ldi	r24, 0x00	; 0
     580:	df 91       	pop	r29
     582:	cf 91       	pop	r28
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:382
bool UPDI::loop_until_key_stat_is_set (uint8_t bitmap, uint16_t limit) {
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  uint16_t _back = _send_ptr;
  #endif
  do {
    if (is_key_stat(bitmap)) return true;
     584:	1f 91       	pop	r17
     586:	08 95       	ret
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:393
  return false;
}

/* __attribute__((optimize("O0"))) */
bool UPDI::set_nvmprog_key (void) {
  if (!send_bytes(nvmprog_key, sizeof(nvmprog_key))) return false;
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	fa cf       	rjmp	.-12     	; 0x580 <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.18]+0x24>

0000058c <UPDI::set_nvmprog_key()>:
_ZN4UPDI15set_nvmprog_keyEv():
     58c:	6a e0       	ldi	r22, 0x0A	; 10
     58e:	86 e1       	ldi	r24, 0x16	; 22
     590:	98 e3       	ldi	r25, 0x38	; 56
     592:	e1 dd       	rcall	.-1086   	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:394
  return loop_until_key_stat_is_set(UPDI_KEY_NVMPROG);
     594:	88 23       	and	r24, r24
     596:	11 f0       	breq	.+4      	; 0x59c <UPDI::set_nvmprog_key()+0x10>
     598:	80 e1       	ldi	r24, 0x10	; 16
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:395
}
     59a:	e0 cf       	rjmp	.-64     	; 0x55c <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.18]>
     59c:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:347
  } while (--limit);
  return false;
}

/* __attribute__((optimize("O0"))) */
bool UPDI::loop_until_sys_stat_is_set (uint8_t bitmap, uint16_t limit) {
     59e:	08 95       	ret

000005a0 <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.21]>:
_ZN4UPDI26loop_until_sys_stat_is_setEhj.constprop.21():
     5a0:	1f 93       	push	r17
     5a2:	cf 93       	push	r28
     5a4:	df 93       	push	r29
     5a6:	18 2f       	mov	r17, r24
     5a8:	d0 e0       	ldi	r29, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:297
  send_bytes(set_ptr, sizeof(set_ptr));
  return RECV();
}

bool UPDI::is_cs_stat (uint8_t code, uint8_t check) {
  return check == (get_cs_stat(code) & check);
     5aa:	c0 e0       	ldi	r28, 0x00	; 0
is_cs_stat():
     5ac:	8b e0       	ldi	r24, 0x0B	; 11
     5ae:	26 de       	rcall	.-948    	; 0x1fc <UPDI::get_cs_stat(unsigned char)>
     5b0:	81 23       	and	r24, r17
_ZN4UPDI26loop_until_sys_stat_is_setEhj.constprop.21():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:352
bool UPDI::loop_until_sys_stat_is_set (uint8_t bitmap, uint16_t limit) {
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  uint16_t _back = _send_ptr;
  #endif
  do {
    if (is_sys_stat(bitmap)) return true;
     5b2:	18 17       	cp	r17, r24
     5b4:	59 f0       	breq	.+22     	; 0x5cc <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.21]+0x2c>
delay_micros():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.8/cores/megaAVR/api/delay_busywait.h:31
     5b6:	86 ea       	ldi	r24, 0xA6	; 166
     5b8:	8a 95       	dec	r24
     5ba:	f1 f7       	brne	.-4      	; 0x5b8 <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.21]+0x18>
     5bc:	00 c0       	rjmp	.+0      	; 0x5be <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.21]+0x1e>
_ZN4UPDI26loop_until_sys_stat_is_setEhj.constprop.21():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:357
    #ifdef ENABLE_DEBUG_UPDI_SENDER
    _send_ptr = _back;
    #endif
    TIM::delay_50us();
  } while (--limit);
     5be:	21 97       	sbiw	r28, 0x01	; 1
     5c0:	a9 f7       	brne	.-22     	; 0x5ac <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.21]+0xc>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:358
  return false;
     5c2:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:359
}
     5c4:	df 91       	pop	r29
     5c6:	cf 91       	pop	r28
     5c8:	1f 91       	pop	r17
     5ca:	08 95       	ret
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:352
bool UPDI::loop_until_sys_stat_is_set (uint8_t bitmap, uint16_t limit) {
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  uint16_t _back = _send_ptr;
  #endif
  do {
    if (is_sys_stat(bitmap)) return true;
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	fa cf       	rjmp	.-12     	; 0x5c4 <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.21]+0x24>

000005d0 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>:
_ZN4UPDI28loop_until_sys_stat_is_clearEhj():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:332
uint8_t UPDI::get_cs_asi_ctra (void) {
  return get_cs_stat(UPDI_CS_ASI_CTRLA);
}

/* __attribute__((optimize("O0"))) */
bool UPDI::loop_until_sys_stat_is_clear (uint8_t bitmap, uint16_t limit) {
     5d0:	1f 93       	push	r17
     5d2:	cf 93       	push	r28
     5d4:	df 93       	push	r29
     5d6:	18 2f       	mov	r17, r24
     5d8:	eb 01       	movw	r28, r22
is_cs_stat():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:297
  send_bytes(set_ptr, sizeof(set_ptr));
  return RECV();
}

bool UPDI::is_cs_stat (uint8_t code, uint8_t check) {
  return check == (get_cs_stat(code) & check);
     5da:	8b e0       	ldi	r24, 0x0B	; 11
     5dc:	0f de       	rcall	.-994    	; 0x1fc <UPDI::get_cs_stat(unsigned char)>
     5de:	81 23       	and	r24, r17
_ZN4UPDI28loop_until_sys_stat_is_clearEhj():
     5e0:	18 13       	cpse	r17, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:337
bool UPDI::loop_until_sys_stat_is_clear (uint8_t bitmap, uint16_t limit) {
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  uint16_t _back = _send_ptr;
  #endif
  do {
    if (!is_sys_stat(bitmap)) return true;
     5e2:	0b c0       	rjmp	.+22     	; 0x5fa <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)+0x2a>
delay_micros():
     5e4:	86 ea       	ldi	r24, 0xA6	; 166
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.8/cores/megaAVR/api/delay_busywait.h:31
     5e6:	8a 95       	dec	r24
     5e8:	f1 f7       	brne	.-4      	; 0x5e6 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)+0x16>
     5ea:	00 c0       	rjmp	.+0      	; 0x5ec <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)+0x1c>
_ZN4UPDI28loop_until_sys_stat_is_clearEhj():
     5ec:	21 97       	sbiw	r28, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:342
    #ifdef ENABLE_DEBUG_UPDI_SENDER
    _send_ptr = _back;
    #endif
    TIM::delay_50us();
  } while (--limit);
     5ee:	a9 f7       	brne	.-22     	; 0x5da <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)+0xa>
     5f0:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:343
  return false;
     5f2:	df 91       	pop	r29
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:344
}
     5f4:	cf 91       	pop	r28
     5f6:	1f 91       	pop	r17
     5f8:	08 95       	ret
     5fa:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:337
bool UPDI::loop_until_sys_stat_is_clear (uint8_t bitmap, uint16_t limit) {
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  uint16_t _back = _send_ptr;
  #endif
  do {
    if (!is_sys_stat(bitmap)) return true;
     5fc:	fa cf       	rjmp	.-12     	; 0x5f2 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)+0x22>

000005fe <UPDI::HV_Pulse()>:
_ZN4UPDI8HV_PulseEv():
     5fe:	80 91 5e 38 	lds	r24, 0x385E	; 0x80385e <JTAG2::updi_desc+0x2>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:425

void UPDI::HV_Pulse (void) {
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  UPDI::_send_buf_push(JTAG2::updi_desc.hvupdi_variant);
  #endif
  if (JTAG2::updi_desc.hvupdi_variant != '0'
     602:	8d 7f       	andi	r24, 0xFD	; 253
     604:	80 33       	cpi	r24, 0x30	; 48
     606:	09 f0       	breq	.+2      	; 0x60a <UPDI::HV_Pulse()+0xc>
     608:	38 c0       	rjmp	.+112    	; 0x67a <UPDI::HV_Pulse()+0x7c>
HV_Pulse_ON():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:191
/*
 * HV charge pump drive control
 */

void TIM::HV_Pulse_ON (void) {
  TCA0_SPLIT_CTRLB = TCA_SPLIT_HCMP0EN_bm | TCA_SPLIT_HCMP1EN_bm;
     60a:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__RODATA_PM_OFFSET__+0x7f8a01>
_ZN4UPDI8HV_PulseEv():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:432

  /* Run high voltage generator */
  TIM::HV_Pulse_ON();

  /* Perform a hardware reset (if wired) */
  openDrainWrite(TRST_PIN, LOW);
     60e:	21 9a       	sbi	0x04, 1	; 4
delay_micros():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.8/cores/megaAVR/api/delay_busywait.h:31
     610:	86 ea       	ldi	r24, 0xA6	; 166
     612:	8a 95       	dec	r24
     614:	f1 f7       	brne	.-4      	; 0x612 <UPDI::HV_Pulse()+0x14>
     616:	00 c0       	rjmp	.+0      	; 0x618 <UPDI::HV_Pulse()+0x1a>
_ZN4UPDI8HV_PulseEv():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:434
  TIM::delay_50us();
  openDrainWrite(TRST_PIN, HIGH);
     618:	21 98       	cbi	0x04, 1	; 4
delay_micros():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.8/cores/megaAVR/api/delay_busywait.h:31
     61a:	8f ec       	ldi	r24, 0xCF	; 207
     61c:	97 e0       	ldi	r25, 0x07	; 7
     61e:	01 97       	sbiw	r24, 0x01	; 1
     620:	f1 f7       	brne	.-4      	; 0x61e <UPDI::HV_Pulse()+0x20>
     622:	00 c0       	rjmp	.+0      	; 0x624 <UPDI::HV_Pulse()+0x26>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:438
  TIM::delay_800us();
  /* During this time, raise the circuit to sufficient voltage */

  if (JTAG2::updi_desc.hvupdi_variant == '0')
     624:	00 00       	nop
_ZN4UPDI8HV_PulseEv():
     626:	80 91 5e 38 	lds	r24, 0x385E	; 0x80385e <JTAG2::updi_desc+0x2>
     62a:	80 33       	cpi	r24, 0x30	; 48
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:439
    digitalWrite(HV12_PIN, HIGH);
     62c:	11 f5       	brne	.+68     	; 0x672 <UPDI::HV_Pulse()+0x74>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.8/cores/megaAVR/api/delay_busywait.h:31
     62e:	0e 9a       	sbi	0x01, 6	; 1
delay_micros():
     630:	8f ec       	ldi	r24, 0xCF	; 207
     632:	97 e0       	ldi	r25, 0x07	; 7
     634:	01 97       	sbiw	r24, 0x01	; 1
     636:	f1 f7       	brne	.-4      	; 0x634 <UPDI::HV_Pulse()+0x36>
     638:	00 c0       	rjmp	.+0      	; 0x63a <UPDI::HV_Pulse()+0x3c>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:446
    digitalWrite(HV8_PIN, HIGH);

  /* Apply high voltage only for the required time */
  TIM::delay_800us();

  if (JTAG2::updi_desc.hvupdi_variant == '0')
     63a:	00 00       	nop
_ZN4UPDI8HV_PulseEv():
     63c:	80 91 5e 38 	lds	r24, 0x385E	; 0x80385e <JTAG2::updi_desc+0x2>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:447
    digitalWrite(HV12_PIN, LOW);
     640:	80 33       	cpi	r24, 0x30	; 48
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:195
}

void TIM::HV_Pulse_OFF (void) {
  TCA0_SPLIT_CTRLB = 0;
     642:	c9 f4       	brne	.+50     	; 0x676 <UPDI::HV_Pulse()+0x78>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:454
    digitalWrite(HV8_PIN, LOW);

  TIM::HV_Pulse_OFF();

  /* Keep the UPDI signal low for as long as necessary */
  UPDI_USART.BAUD = UPDI_BAUD_SHORT_BREAK;
     644:	0e 98       	cbi	0x01, 6	; 1
HV_Pulse_OFF():
     646:	10 92 01 0a 	sts	0x0A01, r1	; 0x800a01 <__RODATA_PM_OFFSET__+0x7f8a01>
_ZN4UPDI8HV_PulseEv():
     64a:	88 ee       	ldi	r24, 0xE8	; 232
     64c:	93 e0       	ldi	r25, 0x03	; 3
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:455
  SEND(UPDI_NOP);
     64e:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__RODATA_PM_OFFSET__+0x7f8808>
     652:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__RODATA_PM_OFFSET__+0x7f8809>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:456
  UPDI_USART.BAUD = UPDI_BAUD_CALC;
     656:	80 e0       	ldi	r24, 0x00	; 0
     658:	64 dd       	rcall	.-1336   	; 0x122 <UPDI::SEND(unsigned char)>
     65a:	80 eb       	ldi	r24, 0xB0	; 176
     65c:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:459

  bit_clear(UPDI_CONTROL, UPDI_CLKU_bp);
  bit_set(UPDI_CONTROL, UPDI_ERHV_bp);
     65e:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__RODATA_PM_OFFSET__+0x7f8808>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:462

  /* Wait for system reset to finish */
  loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
     662:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__RODATA_PM_OFFSET__+0x7f8809>
     666:	e6 98       	cbi	0x1c, 6	; 28
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:441
  /* During this time, raise the circuit to sufficient voltage */

  if (JTAG2::updi_desc.hvupdi_variant == '0')
    digitalWrite(HV12_PIN, HIGH);
  else
    digitalWrite(HV8_PIN, HIGH);
     668:	e3 9a       	sbi	0x1c, 3	; 28
     66a:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:449
  TIM::delay_800us();

  if (JTAG2::updi_desc.hvupdi_variant == '0')
    digitalWrite(HV12_PIN, LOW);
  else
    digitalWrite(HV8_PIN, LOW);
     66c:	60 e0       	ldi	r22, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:463
  bit_clear(UPDI_CONTROL, UPDI_CLKU_bp);
  bit_set(UPDI_CONTROL, UPDI_ERHV_bp);

  /* Wait for system reset to finish */
  loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
}
     66e:	80 e2       	ldi	r24, 0x20	; 32
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:563

/**********************
 * UPDI control start *
 **********************/

bool UPDI::enter_updi (bool skip) {
     670:	af cf       	rjmp	.-162    	; 0x5d0 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
     672:	2d 9a       	sbi	0x05, 5	; 5
     674:	dd cf       	rjmp	.-70     	; 0x630 <UPDI::HV_Pulse()+0x32>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:565
  /* Release the physical reset */
  openDrainWrite(TRST_PIN, HIGH);
     676:	2d 98       	cbi	0x05, 5	; 5
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:568

  /* target reset deactive */
  if (!skip) {
     678:	e6 cf       	rjmp	.-52     	; 0x646 <UPDI::HV_Pulse()+0x48>
     67a:	08 95       	ret

0000067c <UPDI::enter_updi(bool)>:
_ZN4UPDI10enter_updiEb():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:570
    /* HV control forced permission */
    if (bit_is_set(UPDI_CONTROL, UPDI_FCHV_bp)) {
     67c:	0f 93       	push	r16
     67e:	1f 93       	push	r17
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:571
      HV_Pulse();
     680:	cf 93       	push	r28
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:572
      loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS, 500);
     682:	df 93       	push	r29
     684:	21 98       	cbi	0x04, 1	; 4
     686:	81 11       	cpse	r24, r1
     688:	18 c0       	rjmp	.+48     	; 0x6ba <UPDI::enter_updi(bool)+0x3e>
     68a:	e4 9b       	sbis	0x1c, 4	; 28
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:575

      /* send nvmprog_key */
      if (!set_nvmprog_key()) return false;
     68c:	40 c0       	rjmp	.+128    	; 0x70e <UPDI::enter_updi(bool)+0x92>
     68e:	b7 df       	rcall	.-146    	; 0x5fe <UPDI::HV_Pulse()>
     690:	64 ef       	ldi	r22, 0xF4	; 244
     692:	71 e0       	ldi	r23, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:630
        /* Version 4 is now considered the same as 2. */
        bit_set(UPDI_NVMCTRL, UPDI_GEN2_bp);
        break;
      }
      default : {
        return false;
     694:	80 e2       	ldi	r24, 0x20	; 32
     696:	9c df       	rcall	.-200    	; 0x5d0 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:578

      /* send nvmprog_key */
      if (!set_nvmprog_key()) return false;

      /* restart target : change mode */
      if (!updi_reset(true) || !updi_reset(false)) return false;
     698:	79 df       	rcall	.-270    	; 0x58c <UPDI::set_nvmprog_key()>
     69a:	81 11       	cpse	r24, r1
     69c:	02 c0       	rjmp	.+4      	; 0x6a2 <UPDI::enter_updi(bool)+0x26>
     69e:	80 e0       	ldi	r24, 0x00	; 0
     6a0:	59 c0       	rjmp	.+178    	; 0x754 <UPDI::enter_updi(bool)+0xd8>
     6a2:	81 e0       	ldi	r24, 0x01	; 1
     6a4:	4f de       	rcall	.-866    	; 0x344 <UPDI::updi_reset(bool)>
     6a6:	88 23       	and	r24, r24
     6a8:	d1 f3       	breq	.-12     	; 0x69e <UPDI::enter_updi(bool)+0x22>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:579
      loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	4b de       	rcall	.-874    	; 0x344 <UPDI::updi_reset(bool)>
     6ae:	88 23       	and	r24, r24
     6b0:	b1 f3       	breq	.-20     	; 0x69e <UPDI::enter_updi(bool)+0x22>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:584
    }
    else
      BREAK();
  }
  if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) {
     6b2:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:320
  set_ptr[2] = data;
  return send_bytes(set_ptr, sizeof(set_ptr));
}

bool UPDI::set_cs_ctra (uint8_t data) {
  return set_cs_stat(UPDI_CS_CTRLA, data);
     6b4:	60 e0       	ldi	r22, 0x00	; 0
     6b6:	80 e2       	ldi	r24, 0x20	; 32
     6b8:	8b df       	rcall	.-234    	; 0x5d0 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
     6ba:	e0 99       	sbic	0x1c, 0	; 28
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:586
    else
      BREAK();
  }
  if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) {
    /* Minimize guard time */
    if (!set_cs_ctra(UPDI_GTVAL)) return false;
     6bc:	3e c0       	rjmp	.+124    	; 0x73a <UPDI::enter_updi(bool)+0xbe>
set_cs_ctra():
     6be:	66 e0       	ldi	r22, 0x06	; 6
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:297
  send_bytes(set_ptr, sizeof(set_ptr));
  return RECV();
}

bool UPDI::is_cs_stat (uint8_t code, uint8_t check) {
  return check == (get_cs_stat(code) & check);
     6c0:	82 e0       	ldi	r24, 0x02	; 2
     6c2:	5a dd       	rcall	.-1356   	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>
_ZN4UPDI10enter_updiEb():
     6c4:	88 23       	and	r24, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:587
      BREAK();
  }
  if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) {
    /* Minimize guard time */
    if (!set_cs_ctra(UPDI_GTVAL)) return false;
    if (is_sys_stat(UPDI_SYS_RSTSYS)) {
     6c6:	59 f3       	breq	.-42     	; 0x69e <UPDI::enter_updi(bool)+0x22>
is_cs_stat():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:412
}

bool UPDI::read_sib (uint8_t *s_ptr) {
  static uint8_t set_ptr[] = { UPDI_SYNCH, UPDI_SIB_256 };
  uint8_t _len = 32;
  if (!send_bytes(set_ptr, sizeof(set_ptr))) return false;
     6c8:	8b e0       	ldi	r24, 0x0B	; 11
     6ca:	98 dd       	rcall	.-1232   	; 0x1fc <UPDI::get_cs_stat(unsigned char)>
_ZN4UPDI10enter_updiEb():
     6cc:	85 fd       	sbrc	r24, 5
     6ce:	21 c0       	rjmp	.+66     	; 0x712 <UPDI::enter_updi(bool)+0x96>
read_sib():
     6d0:	62 e0       	ldi	r22, 0x02	; 2
     6d2:	80 e2       	ldi	r24, 0x20	; 32
     6d4:	98 e3       	ldi	r25, 0x38	; 56
     6d6:	3f dd       	rcall	.-1410   	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     6d8:	c8 e6       	ldi	r28, 0x68	; 104
     6da:	d8 e3       	ldi	r29, 0x38	; 56
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:413
  do { *s_ptr++ = RECV(); } while (--_len);
     6dc:	08 e8       	ldi	r16, 0x88	; 136
     6de:	18 e3       	ldi	r17, 0x38	; 56
     6e0:	88 23       	and	r24, r24
     6e2:	e9 f2       	breq	.-70     	; 0x69e <UPDI::enter_updi(bool)+0x22>
     6e4:	12 dd       	rcall	.-1500   	; 0x10a <UPDI::RECV()>
     6e6:	89 93       	st	Y+, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:596

    /*** Get System Information Block ***/
    /* Determine system requirements not announced by host control here */
    uint8_t* _p = &JTAG2::updi_desc.sib[0];
    if (!read_sib(_p)) return false;
    JTAG2::updi_desc.nvmctrl_version = _p[10];
     6e8:	0c 17       	cp	r16, r28
     6ea:	1d 07       	cpc	r17, r29
     6ec:	d9 f7       	brne	.-10     	; 0x6e4 <UPDI::enter_updi(bool)+0x68>
_ZN4UPDI10enter_updiEb():
     6ee:	90 91 72 38 	lds	r25, 0x3872	; 0x803872 <JTAG2::updi_desc+0x16>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:597
    switch (_p[0]) {
     6f2:	90 93 5f 38 	sts	0x385F, r25	; 0x80385f <JTAG2::updi_desc+0x3>
     6f6:	80 91 68 38 	lds	r24, 0x3868	; 0x803868 <JTAG2::updi_desc+0xc>
     6fa:	81 34       	cpi	r24, 0x41	; 65
     6fc:	19 f0       	breq	.+6      	; 0x704 <UPDI::enter_updi(bool)+0x88>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:616
        /* AVR Dx SIB = 'AVR     P:2D:1-3' */
        /* AVR DA SIB = '    AVR P:2D:1-3' (Regacy) */
        /* AVR EA SIB = 'AVR     P:3D:1-3' */
        /* AVR DU SIB = 'AVR     P:4D:1-3' */
        /* AVR EB SIB = 'AVR     P:5D:1-3' */
        if (JTAG2::updi_desc.nvmctrl_version == '3') {
     6fe:	90 f4       	brcc	.+36     	; 0x724 <UPDI::enter_updi(bool)+0xa8>
     700:	80 32       	cpi	r24, 0x20	; 32
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:623
          bit_set(UPDI_NVMCTRL, UPDI_GEN3_bp);
        }
        else if (JTAG2::updi_desc.nvmctrl_version == '5') {
          // 'AVR_EB' series
          bit_set(UPDI_NVMCTRL, UPDI_GEN5_bp);
          bit_set(UPDI_NVMCTRL, UPDI_GEN3_bp);
     702:	69 f6       	brne	.-102    	; 0x69e <UPDI::enter_updi(bool)+0x22>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:626
        }
        /* Version 4 is now considered the same as 2. */
        bit_set(UPDI_NVMCTRL, UPDI_GEN2_bp);
     704:	93 33       	cpi	r25, 0x33	; 51
     706:	69 f5       	brne	.+90     	; 0x762 <UPDI::enter_updi(bool)+0xe6>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:582
      /* restart target : change mode */
      if (!updi_reset(true) || !updi_reset(false)) return false;
      loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
    }
    else
      BREAK();
     708:	ed 9a       	sbi	0x1d, 5	; 29
     70a:	ee 9a       	sbi	0x1d, 6	; 29
     70c:	10 c0       	rjmp	.+32     	; 0x72e <UPDI::enter_updi(bool)+0xb2>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:588
  }
  if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) {
    /* Minimize guard time */
    if (!set_cs_ctra(UPDI_GTVAL)) return false;
    if (is_sys_stat(UPDI_SYS_RSTSYS)) {
      UPDI::Target_Reset(false);
     70e:	fb dd       	rcall	.-1034   	; 0x306 <UPDI::BREAK()>
     710:	d4 cf       	rjmp	.-88     	; 0x6ba <UPDI::enter_updi(bool)+0x3e>
     712:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:589
      if (!loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS, 500)) return false;
     714:	1c de       	rcall	.-968    	; 0x34e <UPDI::Target_Reset(bool)>
     716:	64 ef       	ldi	r22, 0xF4	; 244
     718:	71 e0       	ldi	r23, 0x01	; 1
     71a:	80 e2       	ldi	r24, 0x20	; 32
     71c:	59 df       	rcall	.-334    	; 0x5d0 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
     71e:	81 11       	cpse	r24, r1
     720:	d7 cf       	rjmp	.-82     	; 0x6d0 <UPDI::enter_updi(bool)+0x54>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:597
    /*** Get System Information Block ***/
    /* Determine system requirements not announced by host control here */
    uint8_t* _p = &JTAG2::updi_desc.sib[0];
    if (!read_sib(_p)) return false;
    JTAG2::updi_desc.nvmctrl_version = _p[10];
    switch (_p[0]) {
     722:	bd cf       	rjmp	.-134    	; 0x69e <UPDI::enter_updi(bool)+0x22>
     724:	8d 36       	cpi	r24, 0x6D	; 109
     726:	d9 f0       	breq	.+54     	; 0x75e <UPDI::enter_updi(bool)+0xe2>
     728:	84 37       	cpi	r24, 0x74	; 116
     72a:	09 f0       	breq	.+2      	; 0x72e <UPDI::enter_updi(bool)+0xb2>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:633
      }
      default : {
        return false;
      }
    }
    bit_set(UPDI_CONTROL, UPDI_INFO_bp);
     72c:	b8 cf       	rjmp	.-144    	; 0x69e <UPDI::enter_updi(bool)+0x22>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:636

    /* Measure the power supply voltage */
    bool hvol = SYS::get_vcc() >= 4250
     72e:	e0 9a       	sbi	0x1c, 0	; 28
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:638
              // && JTAG2::updi_desc.nvmctrl_version == '2'
              && bit_is_clear(UPDI_CONTROL, UPDI_ERHV_bp);
     730:	5e de       	rcall	.-836    	; 0x3ee <SYS::get_vcc()>
     732:	8a 39       	cpi	r24, 0x9A	; 154
     734:	90 41       	sbci	r25, 0x10	; 16
     736:	08 f0       	brcs	.+2      	; 0x73a <UPDI::enter_updi(bool)+0xbe>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:328
bool UPDI::set_cs_asi_ctra (uint8_t data) {
  return set_cs_stat(UPDI_CS_ASI_CTRLA, data);
}

uint8_t UPDI::get_cs_asi_ctra (void) {
  return get_cs_stat(UPDI_CS_ASI_CTRLA);
     738:	8c b3       	in	r24, 0x1c	; 28
get_cs_asi_ctra():
     73a:	89 e0       	ldi	r24, 0x09	; 9
     73c:	5f dd       	rcall	.-1346   	; 0x1fc <UPDI::get_cs_stat(unsigned char)>
_ZN4UPDI10enter_updiEb():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:645
    /* Instructs double speed mode if there is sufficient voltage and not after HV control */
    // if (hvol && !set_cs_asi_ctra(UPDI_SET_UPDICLKSEL_8M)) return false;
  }

  /* If the double speed mode change is successful, change the speed */
  if ((get_cs_asi_ctra() & UPDI_SET_UPDICLKSEL_bm)
     73e:	83 70       	andi	r24, 0x03	; 3
     740:	82 30       	cpi	r24, 0x02	; 2
     742:	99 f4       	brne	.+38     	; 0x76a <UPDI::enter_updi(bool)+0xee>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:647
                        == UPDI_SET_UPDICLKSEL_8M) {
    UPDI_USART.BAUD = UPDI_BAUD_CALC >> 1;
     744:	88 e5       	ldi	r24, 0x58	; 88
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__RODATA_PM_OFFSET__+0x7f8808>
     74c:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__RODATA_PM_OFFSET__+0x7f8809>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:648
    bit_set(UPDI_CONTROL, UPDI_CLKU_bp);
     750:	e6 9a       	sbi	0x1c, 6	; 28
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:654
  }
  else {
    UPDI_USART.BAUD = UPDI_BAUD_CALC;
    bit_clear(UPDI_CONTROL, UPDI_CLKU_bp);
  }
  return true;
     752:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:655
}
     754:	df 91       	pop	r29
     756:	cf 91       	pop	r28
     758:	1f 91       	pop	r17
     75a:	0f 91       	pop	r16
     75c:	08 95       	ret
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:601
    JTAG2::updi_desc.nvmctrl_version = _p[10];
    switch (_p[0]) {
      case 'm' : {              // 'megaAVR' series
        /* megaAVR SIB = 'megaAVR P:0D:1-3' */
        /* always vesrion 0 */
        bit_set(UPDI_NVMCTRL, UPDI_LOWF_bp);
     75e:	ef 9a       	sbi	0x1d, 7	; 29
     760:	e6 cf       	rjmp	.-52     	; 0x72e <UPDI::enter_updi(bool)+0xb2>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:620
        /* AVR EB SIB = 'AVR     P:5D:1-3' */
        if (JTAG2::updi_desc.nvmctrl_version == '3') {
          // 'AVR_Ex' series
          bit_set(UPDI_NVMCTRL, UPDI_GEN3_bp);
        }
        else if (JTAG2::updi_desc.nvmctrl_version == '5') {
     762:	95 33       	cpi	r25, 0x35	; 53
     764:	91 f6       	brne	.-92     	; 0x70a <UPDI::enter_updi(bool)+0x8e>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:622
          // 'AVR_EB' series
          bit_set(UPDI_NVMCTRL, UPDI_GEN5_bp);
     766:	eb 9a       	sbi	0x1d, 3	; 29
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:651
                        == UPDI_SET_UPDICLKSEL_8M) {
    UPDI_USART.BAUD = UPDI_BAUD_CALC >> 1;
    bit_set(UPDI_CONTROL, UPDI_CLKU_bp);
  }
  else {
    UPDI_USART.BAUD = UPDI_BAUD_CALC;
     768:	cf cf       	rjmp	.-98     	; 0x708 <UPDI::enter_updi(bool)+0x8c>
     76a:	80 eb       	ldi	r24, 0xB0	; 176
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__RODATA_PM_OFFSET__+0x7f8808>
     772:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__RODATA_PM_OFFSET__+0x7f8809>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:652
    bit_clear(UPDI_CONTROL, UPDI_CLKU_bp);
     776:	e6 98       	cbi	0x1c, 6	; 28
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:49
  /* NVMCTRL version 3,5 */
  uint8_t nvm_wait_v3 (void) {
    #ifdef ENABLE_DEBUG_UPDI_SENDER
    uint16_t _back = UPDI::_send_ptr;
    #endif
    while (UPDI::ld8(NVMCTRL_V3_REG_STATUS) & 3) {
     778:	ec cf       	rjmp	.-40     	; 0x752 <UPDI::enter_updi(bool)+0xd6>

0000077a <NVM::nvm_wait_v3()>:
_ZN3NVM11nvm_wait_v3Ev():
     77a:	66 e0       	ldi	r22, 0x06	; 6
     77c:	70 e1       	ldi	r23, 0x10	; 16
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	d3 dd       	rcall	.-1114   	; 0x32a <UPDI::ld8(unsigned long)>
     784:	83 70       	andi	r24, 0x03	; 3
     786:	29 f0       	breq	.+10     	; 0x792 <NVM::nvm_wait_v3()+0x18>
delay_micros():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.8/cores/megaAVR/api/delay_busywait.h:31
     788:	86 ea       	ldi	r24, 0xA6	; 166
     78a:	8a 95       	dec	r24
     78c:	f1 f7       	brne	.-4      	; 0x78a <NVM::nvm_wait_v3()+0x10>
     78e:	00 c0       	rjmp	.+0      	; 0x790 <NVM::nvm_wait_v3()+0x16>
     790:	f4 cf       	rjmp	.-24     	; 0x77a <NVM::nvm_wait_v3()>
_ZN3NVM11nvm_wait_v3Ev():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:55
      #ifdef ENABLE_DEBUG_UPDI_SENDER
      UPDI::_send_ptr = _back;
      #endif
      TIM::delay_50us();
    }
    return UPDI_LASTL;
     792:	8e b3       	in	r24, 0x1e	; 30
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:56
  }
     794:	08 95       	ret

00000796 <NVM::nvm_wait()>:
_ZN3NVM8nvm_waitEv():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:35
  /* NVMCTRL version 0,2,4 */
  uint8_t nvm_wait (void) {
    #ifdef ENABLE_DEBUG_UPDI_SENDER
    uint16_t _back = UPDI::_send_ptr;
    #endif
    while (UPDI::ld8(NVMCTRL_REG_STATUS) & 3) {
     796:	62 e0       	ldi	r22, 0x02	; 2
     798:	70 e1       	ldi	r23, 0x10	; 16
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	c5 dd       	rcall	.-1142   	; 0x32a <UPDI::ld8(unsigned long)>
     7a0:	83 70       	andi	r24, 0x03	; 3
     7a2:	29 f0       	breq	.+10     	; 0x7ae <NVM::nvm_wait()+0x18>
delay_micros():
     7a4:	86 ea       	ldi	r24, 0xA6	; 166
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.8/cores/megaAVR/api/delay_busywait.h:31
     7a6:	8a 95       	dec	r24
     7a8:	f1 f7       	brne	.-4      	; 0x7a6 <NVM::nvm_wait()+0x10>
     7aa:	00 c0       	rjmp	.+0      	; 0x7ac <NVM::nvm_wait()+0x16>
     7ac:	f4 cf       	rjmp	.-24     	; 0x796 <NVM::nvm_wait()>
_ZN3NVM8nvm_waitEv():
     7ae:	8e b3       	in	r24, 0x1e	; 30
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:41
      #ifdef ENABLE_DEBUG_UPDI_SENDER
      UPDI::_send_ptr = _back;
      #endif
      TIM::delay_50us();
    }
    return UPDI_LASTL;
     7b0:	08 95       	ret

000007b2 <UPDI::runtime(unsigned char)>:
_ZN4UPDI7runtimeEh():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:42
  }
     7b2:	af 92       	push	r10
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:703

/************************
 * UPDI control process *
 ************************/

bool UPDI::runtime (uint8_t updi_cmd) {
     7b4:	bf 92       	push	r11
     7b6:	cf 92       	push	r12
     7b8:	df 92       	push	r13
     7ba:	ef 92       	push	r14
     7bc:	ff 92       	push	r15
     7be:	0f 93       	push	r16
     7c0:	1f 93       	push	r17
     7c2:	cf 93       	push	r28
     7c4:	df 93       	push	r29
     7c6:	cd b7       	in	r28, 0x3d	; 61
     7c8:	de b7       	in	r29, 0x3e	; 62
     7ca:	26 97       	sbiw	r28, 0x06	; 6
     7cc:	cd bf       	out	0x3d, r28	; 61
     7ce:	de bf       	out	0x3e, r29	; 62
     7d0:	8e 83       	std	Y+6, r24	; 0x06
     7d2:	1d 82       	std	Y+5, r1	; 0x05
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:704
  volatile bool _result = false;
     7d4:	84 e4       	ldi	r24, 0x44	; 68
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:705
  if (setjmp(TIM::CONTEXT) == 0) {
     7d6:	98 e3       	ldi	r25, 0x38	; 56
     7d8:	ab d6       	rcall	.+3414   	; 0x1530 <setjmp>
     7da:	89 2b       	or	r24, r25
     7dc:	09 f0       	breq	.+2      	; 0x7e0 <UPDI::runtime(unsigned char)+0x2e>
     7de:	89 c0       	rjmp	.+274    	; 0x8f2 <__DATA_REGION_LENGTH__+0xf2>
Timeout_Start():
     7e0:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
     7e2:	f8 94       	cli
Timeout_Start():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:118
/*
 * Timeout control
 */

void TIM::Timeout_Start (uint16_t _ms) {
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     7e4:	10 92 8a 0a 	sts	0x0A8A, r1	; 0x800a8a <__RODATA_PM_OFFSET__+0x7f8a8a>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:119
    TCB0_CNT = 0;
     7e8:	10 92 8b 0a 	sts	0x0A8B, r1	; 0x800a8b <__RODATA_PM_OFFSET__+0x7f8a8b>
     7ec:	28 ec       	ldi	r18, 0xC8	; 200
     7ee:	30 e0       	ldi	r19, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:120
    TCB0_CCMP = _ms >> 2;
     7f0:	20 93 8c 0a 	sts	0x0A8C, r18	; 0x800a8c <__RODATA_PM_OFFSET__+0x7f8a8c>
     7f4:	30 93 8d 0a 	sts	0x0A8D, r19	; 0x800a8d <__RODATA_PM_OFFSET__+0x7f8a8d>
     7f8:	81 e0       	ldi	r24, 0x01	; 1
     7fa:	80 93 85 0a 	sts	0x0A85, r24	; 0x800a85 <__RODATA_PM_OFFSET__+0x7f8a85>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:121
    TCB0_INTCTRL = TCB_CAPT_bm;
     7fe:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__RODATA_PM_OFFSET__+0x7f8a86>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:122
    TCB0_INTFLAGS = TCB_CAPT_bm;
     802:	8f e0       	ldi	r24, 0x0F	; 15
     804:	80 93 80 0a 	sts	0x0A80, r24	; 0x800a80 <__RODATA_PM_OFFSET__+0x7f8a80>
__iRestore():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:123
    TCB0_CTRLA = TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
     808:	9f bf       	out	0x3f, r25	; 63
_ZN4UPDI7runtimeEh():
     80a:	2e 81       	ldd	r18, Y+6	; 0x06
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:70
     80c:	23 30       	cpi	r18, 0x03	; 3
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:707
    TIM::Timeout_Start(800);
    switch (updi_cmd) {
     80e:	09 f4       	brne	.+2      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     810:	78 c2       	rjmp	.+1264   	; 0xd02 <__DATA_REGION_LENGTH__+0x502>
     812:	24 30       	cpi	r18, 0x04	; 4
     814:	09 f4       	brne	.+2      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     816:	be c2       	rjmp	.+1404   	; 0xd94 <__DATA_REGION_LENGTH__+0x594>
write_memory():
     818:	e8 e8       	ldi	r30, 0x88	; 136
     81a:	f8 e3       	ldi	r31, 0x38	; 56
_ZN4UPDI7runtimeEh():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:314
/******************
 * NVM write core *
 ******************/

bool NVM::write_memory (void) {
  uint8_t mem_type = JTAG2::packet.body[JTAG2::MEM_TYPE];
     81c:	22 30       	cpi	r18, 0x02	; 2
     81e:	09 f4       	brne	.+2      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:707
     820:	ad c0       	rjmp	.+346    	; 0x97c <__DATA_REGION_LENGTH__+0x17c>
     822:	22 85       	ldd	r18, Z+10	; 0x0a
     824:	33 85       	ldd	r19, Z+11	; 0x0b
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:709
      case UPDI_CMD_READ_MEMORY : {
        size_t byte_count = _CAPS16(JTAG2::packet.body[JTAG2::DATA_LENGTH])->word;
     826:	c6 84       	ldd	r12, Z+14	; 0x0e
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:710
        uint32_t start_addr = _CAPS32(JTAG2::packet.body[JTAG2::DATA_ADDRESS])->dword;
     828:	d7 84       	ldd	r13, Z+15	; 0x0f
     82a:	e0 88       	ldd	r14, Z+16	; 0x10
     82c:	f1 88       	ldd	r15, Z+17	; 0x11
read_memory():
     82e:	82 e8       	ldi	r24, 0x82	; 130
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:268
/***********************
 * Memory reading core *
 ***********************/

bool NVM::read_memory (uint32_t start_addr, size_t byte_count) {
  JTAG2::packet.body[JTAG2::MESSAGE_ID] = JTAG2::RSP_MEMORY;
     830:	80 87       	std	Z+8, r24	; 0x08
     832:	c9 01       	movw	r24, r18
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:272
  uint8_t *data = &JTAG2::packet.body[JTAG2::RSP_DATA];

  /* Reads from 1 to 256 bytes and even bytes 258 to 512 are allowed */
  if (byte_count == 0 || byte_count > 512 || (byte_count > 256 && byte_count & 1)) {
     834:	01 97       	sbiw	r24, 0x01	; 1
     836:	81 15       	cp	r24, r1
     838:	42 e0       	ldi	r20, 0x02	; 2
     83a:	94 07       	cpc	r25, r20
     83c:	30 f4       	brcc	.+12     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
     83e:	21 30       	cpi	r18, 0x01	; 1
     840:	e1 e0       	ldi	r30, 0x01	; 1
     842:	3e 07       	cpc	r19, r30
     844:	28 f0       	brcs	.+10     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
     846:	20 ff       	sbrs	r18, 0
     848:	03 c0       	rjmp	.+6      	; 0x850 <__DATA_REGION_LENGTH__+0x50>
write_memory():
     84a:	83 ea       	ldi	r24, 0xA3	; 163
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:363
    }
  }

  /* Other writes are allowed from 1 to 256 bytes */
  if (byte_count == 0 || byte_count > 256) {
    set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	18 c1       	rjmp	.+560    	; 0xa80 <__DATA_REGION_LENGTH__+0x280>
read_memory():
     850:	e8 e8       	ldi	r30, 0x88	; 136
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:276
  /* Reads from 1 to 256 bytes and even bytes 258 to 512 are allowed */
  if (byte_count == 0 || byte_count > 512 || (byte_count > 256 && byte_count & 1)) {
    set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
    return true;
  }
  JTAG2::packet.size_word[0] = byte_count + 1;
     852:	f8 e3       	ldi	r31, 0x38	; 56
     854:	a9 01       	movw	r20, r18
     856:	4f 5f       	subi	r20, 0xFF	; 255
     858:	5f 4f       	sbci	r21, 0xFF	; 255
     85a:	43 83       	std	Z+3, r20	; 0x03
     85c:	54 83       	std	Z+4, r21	; 0x04
     85e:	21 30       	cpi	r18, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:279

  /* Reading only 1 byte may be special */
  if (byte_count == 1) {
     860:	31 05       	cpc	r19, r1
     862:	09 f0       	breq	.+2      	; 0x866 <__DATA_REGION_LENGTH__+0x66>
     864:	5a c0       	rjmp	.+180    	; 0x91a <__DATA_REGION_LENGTH__+0x11a>
     866:	41 85       	ldd	r20, Z+9	; 0x09
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:281
    #ifdef ENABLE_ADDFEATS_LOCK_SIG
    if (JTAG2::packet.body[JTAG2::MEM_TYPE] == JTAG2::MTYPE_SIGN_JTAG) {
     868:	44 3b       	cpi	r20, 0xB4	; 180
     86a:	09 f0       	breq	.+2      	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
     86c:	56 c0       	rjmp	.+172    	; 0x91a <__DATA_REGION_LENGTH__+0x11a>
     86e:	96 01       	movw	r18, r12
read_signature():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:283
      /* Signature reading branches to special processing */
      return NVM::read_signature((uint16_t)start_addr);
     870:	eb 99       	sbic	0x1d, 3	; 29
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:219
 * Signature reading *
 *********************/

bool NVM::read_signature (uint16_t start_addr) {
  /* The starting address is 0x1080 for AVR_EB, and 0x1100 for others. */
  if (start_addr == (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN5_bp) ? 0x1080 : 0x1100)) {
     872:	22 c0       	rjmp	.+68     	; 0x8b8 <__DATA_REGION_LENGTH__+0xb8>
_ZN4UPDI7runtimeEh():
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	91 e1       	ldi	r25, 0x11	; 17
read_signature():
     878:	28 17       	cp	r18, r24
     87a:	39 07       	cpc	r19, r25
     87c:	a9 f4       	brne	.+42     	; 0x8a8 <__DATA_REGION_LENGTH__+0xa8>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:220
    JTAG2::updi_desc.nvm_signature_offset = start_addr;
     87e:	0c e5       	ldi	r16, 0x5C	; 92
     880:	18 e3       	ldi	r17, 0x38	; 56
     882:	f8 01       	movw	r30, r16
     884:	c2 86       	std	Z+10, r12	; 0x0a
     886:	d3 86       	std	Z+11, r13	; 0x0b
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:221
    if (bit_is_set(UPDI_CONTROL, UPDI::UPDI_PROG_bp)) {
     888:	e1 9b       	sbis	0x1c, 1	; 28
     88a:	19 c0       	rjmp	.+50     	; 0x8be <__DATA_REGION_LENGTH__+0xbe>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:223
      /* In program mode you should be able to read from IO memory */
      if (!UPDI::lds8(start_addr, &JTAG2::updi_desc.signature[0], 3)) {
     88c:	23 e0       	ldi	r18, 0x03	; 3
     88e:	43 e6       	ldi	r20, 0x63	; 99
     890:	58 e3       	ldi	r21, 0x38	; 56
     892:	c7 01       	movw	r24, r14
     894:	b6 01       	movw	r22, r12
     896:	88 27       	eor	r24, r24
     898:	99 27       	eor	r25, r25
     89a:	f5 dc       	rcall	.-1558   	; 0x286 <UPDI::lds8(unsigned long, unsigned char*, unsigned char)>
     89c:	81 11       	cpse	r24, r1
     89e:	04 c0       	rjmp	.+8      	; 0x8a8 <__DATA_REGION_LENGTH__+0xa8>
     8a0:	f8 01       	movw	r30, r16
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:226
        /* If there is a communication error, return a signature of all zeros */
        /* Typically this only occurs when the UPDI pin is used for GPIO */
        JTAG2::updi_desc.signature[0] = 0;
     8a2:	17 82       	std	Z+7, r1	; 0x07
     8a4:	10 86       	std	Z+8, r1	; 0x08
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:227
        JTAG2::updi_desc.signature[1] = 0;
     8a6:	11 86       	std	Z+9, r1	; 0x09
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:228
        JTAG2::updi_desc.signature[2] = 0;
     8a8:	80 91 66 38 	lds	r24, 0x3866	; 0x803866 <JTAG2::updi_desc+0xa>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:255
    *q++ = UPDI_CONTROL;
    *q++ = UPDI_NVMCTRL;
    for (uint8_t i = 0; i < sizeof(JTAG2::updi_desc); i++) *q++ = *p++;
    #endif
  }
  const uint8_t idx = start_addr - JTAG2::updi_desc.nvm_signature_offset;
     8ac:	ec 2d       	mov	r30, r12
     8ae:	e8 1b       	sub	r30, r24
     8b0:	e3 30       	cpi	r30, 0x03	; 3
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:256
  if (idx < 3) {
     8b2:	b8 f0       	brcs	.+46     	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
_ZN4UPDI7runtimeEh():
     8b4:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:532
  if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) {
    HV_Pulse();
  }

  /* Transition to CHIPERASE mode by system reset */
  if (!set_erase_key()) return false;
     8b6:	1c c0       	rjmp	.+56     	; 0x8f0 <__DATA_REGION_LENGTH__+0xf0>
     8b8:	80 e8       	ldi	r24, 0x80	; 128
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:219
 * Signature reading *
 *********************/

bool NVM::read_signature (uint16_t start_addr) {
  /* The starting address is 0x1080 for AVR_EB, and 0x1100 for others. */
  if (start_addr == (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN5_bp) ? 0x1080 : 0x1100)) {
     8ba:	90 e1       	ldi	r25, 0x10	; 16
     8bc:	dd cf       	rjmp	.-70     	; 0x878 <__DATA_REGION_LENGTH__+0x78>
read_signature():
     8be:	e0 9b       	sbis	0x1c, 0	; 28
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:231
        JTAG2::updi_desc.signature[0] = 0;
        JTAG2::updi_desc.signature[1] = 0;
        JTAG2::updi_desc.signature[2] = 0;
      }
    }
    else if (bit_is_set(UPDI_CONTROL, UPDI::UPDI_INFO_bp)) {
     8c0:	0c c0       	rjmp	.+24     	; 0x8da <__DATA_REGION_LENGTH__+0xda>
     8c2:	84 85       	ldd	r24, Z+12	; 0x0c
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:233
      /* Returns a dummy signature on locking devices */
      uint8_t c = JTAG2::updi_desc.sib[0];
     8c4:	80 32       	cpi	r24, 0x20	; 32
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:234
      if (c == ' ') c = JTAG2::updi_desc.sib[4];  /* Applies only to very old AVR_DA */
     8c6:	09 f4       	brne	.+2      	; 0x8ca <__DATA_REGION_LENGTH__+0xca>
     8c8:	80 89       	ldd	r24, Z+16	; 0x10
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:235
      JTAG2::updi_desc.signature[0] = 0x1E; // AVR fixed $1E
     8ca:	ec e5       	ldi	r30, 0x5C	; 92
     8cc:	f8 e3       	ldi	r31, 0x38	; 56
     8ce:	9e e1       	ldi	r25, 0x1E	; 30
     8d0:	97 83       	std	Z+7, r25	; 0x07
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:236
      JTAG2::updi_desc.signature[1] = c;    // Series model 'm','t' or 'A'
     8d2:	80 87       	std	Z+8, r24	; 0x08
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:243
    }
    else {
      /* Returns a special value for devices that have UPDI disabled (offline) */
      JTAG2::updi_desc.signature[0] = 0xFF;
      JTAG2::updi_desc.signature[1] = 0xFF;
      JTAG2::updi_desc.signature[2] = 0xFF;
     8d4:	86 89       	ldd	r24, Z+22	; 0x16
     8d6:	81 87       	std	Z+9, r24	; 0x09
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:241
      JTAG2::updi_desc.signature[1] = c;    // Series model 'm','t' or 'A'
      JTAG2::updi_desc.signature[2] = JTAG2::updi_desc.sib[10]; // NVMCTRL version '0','2','3' or '5'
    }
    else {
      /* Returns a special value for devices that have UPDI disabled (offline) */
      JTAG2::updi_desc.signature[0] = 0xFF;
     8d8:	e7 cf       	rjmp	.-50     	; 0x8a8 <__DATA_REGION_LENGTH__+0xa8>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:242
      JTAG2::updi_desc.signature[1] = 0xFF;
     8da:	8f ef       	ldi	r24, 0xFF	; 255
     8dc:	87 83       	std	Z+7, r24	; 0x07
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:257
    for (uint8_t i = 0; i < sizeof(JTAG2::updi_desc); i++) *q++ = *p++;
    #endif
  }
  const uint8_t idx = start_addr - JTAG2::updi_desc.nvm_signature_offset;
  if (idx < 3) {
    JTAG2::packet.body[JTAG2::RSP_DATA] = JTAG2::updi_desc.signature[idx];
     8de:	80 87       	std	Z+8, r24	; 0x08
     8e0:	fa cf       	rjmp	.-12     	; 0x8d6 <__DATA_REGION_LENGTH__+0xd6>
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	e4 5a       	subi	r30, 0xA4	; 164
     8e6:	f7 4c       	sbci	r31, 0xC7	; 199
     8e8:	87 81       	ldd	r24, Z+7	; 0x07
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:258
    return true;
     8ea:	80 93 91 38 	sts	0x3891, r24	; 0x803891 <JTAG2::packet+0x9>
_ZN4UPDI7runtimeEh():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:730
        _result = Target_Reset(true) && Target_Reset(false);
        break;
      }
    }
  }
  TIM::Timeout_Stop();
     8ee:	81 e0       	ldi	r24, 0x01	; 1
     8f0:	8d 83       	std	Y+5, r24	; 0x05
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:731
  UPDI_USART.CTRLB = UPDI_USART_ON;
     8f2:	6a dd       	rcall	.-1324   	; 0x3c8 <TIM::Timeout_Stop()>
     8f4:	88 ec       	ldi	r24, 0xC8	; 200
     8f6:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__RODATA_PM_OFFSET__+0x7f8806>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:734
  wdt_reset();
  return _result;
}
     8fa:	a8 95       	wdr
     8fc:	8d 81       	ldd	r24, Y+5	; 0x05
     8fe:	26 96       	adiw	r28, 0x06	; 6
     900:	cd bf       	out	0x3d, r28	; 61
     902:	de bf       	out	0x3e, r29	; 62
     904:	df 91       	pop	r29
     906:	cf 91       	pop	r28
     908:	1f 91       	pop	r17
     90a:	0f 91       	pop	r16
     90c:	ff 90       	pop	r15
     90e:	ef 90       	pop	r14
     910:	df 90       	pop	r13
     912:	cf 90       	pop	r12
     914:	bf 90       	pop	r11
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:297
      return true;
    }
    #endif
  }

  if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_PROG_bp)) {
     916:	af 90       	pop	r10
     918:	08 95       	ret
read_memory():
     91a:	e1 99       	sbic	0x1c, 1	; 28
     91c:	08 c0       	rjmp	.+16     	; 0x92e <__DATA_REGION_LENGTH__+0x12e>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:299
    /* A normal read when the device is locked returns a dummy. */
    do { *data++ = 0xFF; } while (--byte_count);
     91e:	e1 e9       	ldi	r30, 0x91	; 145
     920:	f8 e3       	ldi	r31, 0x38	; 56
     922:	8f ef       	ldi	r24, 0xFF	; 255
     924:	81 93       	st	Z+, r24
     926:	21 50       	subi	r18, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:303
    return true;
  }

  if ((byte_count - 1) >> 8)
     928:	31 09       	sbc	r19, r1
     92a:	e1 f7       	brne	.-8      	; 0x924 <__DATA_REGION_LENGTH__+0x124>
     92c:	e0 cf       	rjmp	.-64     	; 0x8ee <__DATA_REGION_LENGTH__+0xee>
     92e:	89 2f       	mov	r24, r25
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:276
  do { *data++ = RECV(); } while (--len);
  return UPDI_LASTH == 0;
}

bool UPDI::lds16 (uint32_t addr, uint8_t *data, size_t len) {
  uint8_t repeat = (uint16_t)len >> 1;
     930:	99 27       	eor	r25, r25
     932:	89 2b       	or	r24, r25
     934:	e9 f0       	breq	.+58     	; 0x970 <__DATA_REGION_LENGTH__+0x170>
lds16():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:277
  if (!send_repeat_header(addr, UPDI_LD|UPDI_DATA2, repeat)) return false;
     936:	36 95       	lsr	r19
     938:	27 95       	ror	r18
     93a:	b2 2e       	mov	r11, r18
     93c:	41 e2       	ldi	r20, 0x21	; 33
     93e:	c7 01       	movw	r24, r14
     940:	b6 01       	movw	r22, r12
     942:	84 dc       	rcall	.-1784   	; 0x24c <UPDI::send_repeat_header(unsigned long, unsigned char, unsigned char)>
     944:	88 23       	and	r24, r24
     946:	09 f4       	brne	.+2      	; 0x94a <__DATA_REGION_LENGTH__+0x14a>
     948:	b5 cf       	rjmp	.-150    	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:279
  do {
    *data++ = RECV();
     94a:	08 e8       	ldi	r16, 0x88	; 136
     94c:	18 e3       	ldi	r17, 0x38	; 56
     94e:	dd db       	rcall	.-2118   	; 0x10a <UPDI::RECV()>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:280
    *data++ = RECV();
     950:	f8 01       	movw	r30, r16
     952:	81 87       	std	Z+9, r24	; 0x09
     954:	da db       	rcall	.-2124   	; 0x10a <UPDI::RECV()>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:281
  } while (--repeat);
     956:	f8 01       	movw	r30, r16
     958:	82 87       	std	Z+10, r24	; 0x0a
     95a:	ba 94       	dec	r11
     95c:	0e 5f       	subi	r16, 0xFE	; 254
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:282
  return UPDI_LASTH == 0;
     95e:	1f 4f       	sbci	r17, 0xFF	; 255
     960:	b1 10       	cpse	r11, r1
     962:	f5 cf       	rjmp	.-22     	; 0x94e <__DATA_REGION_LENGTH__+0x14e>
     964:	9f b3       	in	r25, 0x1f	; 31
     966:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:306
    return UPDI::lds16(start_addr, data, byte_count);
  else
    return UPDI::lds8(start_addr, data, byte_count);
     968:	99 23       	and	r25, r25
     96a:	09 f4       	brne	.+2      	; 0x96e <__DATA_REGION_LENGTH__+0x16e>
     96c:	c1 cf       	rjmp	.-126    	; 0x8f0 <__DATA_REGION_LENGTH__+0xf0>
     96e:	a2 cf       	rjmp	.-188    	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
read_memory():
     970:	41 e9       	ldi	r20, 0x91	; 145
     972:	58 e3       	ldi	r21, 0x38	; 56
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:316
 ******************/

bool NVM::write_memory (void) {
  uint8_t mem_type = JTAG2::packet.body[JTAG2::MEM_TYPE];
  uint8_t *data = &JTAG2::packet.body[JTAG2::DATA_START];
  size_t byte_count = _CAPS16(JTAG2::packet.body[JTAG2::DATA_LENGTH])->word;
     974:	c7 01       	movw	r24, r14
     976:	b6 01       	movw	r22, r12
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:317
  uint32_t start_addr = _CAPS32(JTAG2::packet.body[JTAG2::DATA_ADDRESS])->dword;
     978:	86 dc       	rcall	.-1780   	; 0x286 <UPDI::lds8(unsigned long, unsigned char*, unsigned char)>
     97a:	ba cf       	rjmp	.-140    	; 0x8f0 <__DATA_REGION_LENGTH__+0xf0>
write_memory():
     97c:	b1 84       	ldd	r11, Z+9	; 0x09
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:320

  /* Address specification outside the processing range is considered an IO area operation */
  if (start_addr >> 24) {
     97e:	02 85       	ldd	r16, Z+10	; 0x0a
     980:	13 85       	ldd	r17, Z+11	; 0x0b
     982:	c6 84       	ldd	r12, Z+14	; 0x0e
     984:	d7 84       	ldd	r13, Z+15	; 0x0f
     986:	e0 88       	ldd	r14, Z+16	; 0x10
     988:	f1 88       	ldd	r15, Z+17	; 0x11
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:321
    start_addr &= 0xFFFF;
     98a:	8f 2d       	mov	r24, r15
     98c:	99 27       	eor	r25, r25
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:322
    mem_type = JTAG2::MTYPE_SRAM;
     98e:	aa 27       	eor	r26, r26
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:324
  }
  set_response(JTAG2::RSP_OK);
     990:	bb 27       	eor	r27, r27
     992:	89 2b       	or	r24, r25
     994:	8a 2b       	or	r24, r26
     996:	8b 2b       	or	r24, r27
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:329

  /* Can only be written to USERROW on locked devices */
  /* This write is only allowed in multiples of 32 bytes */
  if (bit_is_set(UPDI_CONTROL, UPDI::UPDI_INFO_bp)
   && mem_type == JTAG2::MTYPE_XMEGA_USERSIG) // 0xC5
     998:	21 f0       	breq	.+8      	; 0x9a2 <__DATA_REGION_LENGTH__+0x1a2>
     99a:	ee 24       	eor	r14, r14
     99c:	ff 24       	eor	r15, r15
_ZN4UPDI7runtimeEh():
     99e:	30 e2       	ldi	r19, 0x20	; 32
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:471
 * USERROW region writing *
 *****************************************/

bool UPDI::write_userrow (const uint32_t start_addr, uint8_t *data, const size_t byte_count) {
  /* Only data lengths that are multiples of 32 bytes are allowed. */
  if (byte_count == 0 || byte_count & 0x1F) {
     9a0:	b3 2e       	mov	r11, r19
write_memory():
     9a2:	80 e8       	ldi	r24, 0x80	; 128
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	60 dd       	rcall	.-1344   	; 0x468 <JTAG2::set_response(JTAG2::jtag_response_e)>
     9a8:	e0 9b       	sbis	0x1c, 0	; 28
     9aa:	50 c0       	rjmp	.+160    	; 0xa4c <__DATA_REGION_LENGTH__+0x24c>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:472
    JTAG2::packet.body[JTAG2::MESSAGE_ID] = JTAG2::RSP_ILLEGAL_MEMORY_RANGE;
     9ac:	f5 ec       	ldi	r31, 0xC5	; 197
     9ae:	bf 12       	cpse	r11, r31
     9b0:	4d c0       	rjmp	.+154    	; 0xa4c <__DATA_REGION_LENGTH__+0x24c>
write_userrow():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:405
  return loop_until_key_stat_is_set(UPDI_KEY_CHIPERASE);
}

/* __attribute__((optimize("O0"))) */
bool UPDI::set_urowwrite_key (void) {
  if (!send_bytes(urowwrite_key, sizeof(urowwrite_key))) return false;
     9b2:	01 15       	cp	r16, r1
     9b4:	11 05       	cpc	r17, r1
     9b6:	29 f0       	breq	.+10     	; 0x9c2 <__DATA_REGION_LENGTH__+0x1c2>
     9b8:	c8 01       	movw	r24, r16
     9ba:	8f 71       	andi	r24, 0x1F	; 31
     9bc:	99 27       	eor	r25, r25
     9be:	89 2b       	or	r24, r25
     9c0:	21 f0       	breq	.+8      	; 0x9ca <__DATA_REGION_LENGTH__+0x1ca>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:406
  return loop_until_key_stat_is_set(UPDI_KEY_UROWWRITE);
     9c2:	83 ea       	ldi	r24, 0xA3	; 163
     9c4:	80 93 90 38 	sts	0x3890, r24	; 0x803890 <JTAG2::packet+0x8>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:477
    JTAG2::packet.body[JTAG2::MESSAGE_ID] = JTAG2::RSP_ILLEGAL_MEMORY_RANGE;
    return true;
  }

  /* Send the authentication key */
  if (!set_urowwrite_key()) return false;
     9c8:	92 cf       	rjmp	.-220    	; 0x8ee <__DATA_REGION_LENGTH__+0xee>
set_urowwrite_key():
     9ca:	6a e0       	ldi	r22, 0x0A	; 10
     9cc:	82 e2       	ldi	r24, 0x22	; 34
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:480

  /* Transition to USERROW mode by system reset */
  if (!updi_reset(true) || !updi_reset(false)) return false;
     9ce:	98 e3       	ldi	r25, 0x38	; 56
     9d0:	c2 db       	rcall	.-2172   	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     9d2:	88 23       	and	r24, r24
     9d4:	09 f4       	brne	.+2      	; 0x9d8 <__DATA_REGION_LENGTH__+0x1d8>
     9d6:	6e cf       	rjmp	.-292    	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
     9d8:	80 e2       	ldi	r24, 0x20	; 32
     9da:	c0 dd       	rcall	.-1152   	; 0x55c <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.18]>
write_userrow():
     9dc:	88 23       	and	r24, r24
     9de:	09 f4       	brne	.+2      	; 0x9e2 <__DATA_REGION_LENGTH__+0x1e2>
     9e0:	69 cf       	rjmp	.-302    	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
     9e2:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:483

  /* Wait for system reset to finish */
  loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
     9e4:	af dc       	rcall	.-1698   	; 0x344 <UPDI::updi_reset(bool)>
     9e6:	88 23       	and	r24, r24
     9e8:	09 f4       	brne	.+2      	; 0x9ec <__DATA_REGION_LENGTH__+0x1ec>
     9ea:	64 cf       	rjmp	.-312    	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
     9ec:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:486

  /* Make sure you are in USERROW mode */
  loop_until_sys_stat_is_set(UPDI_SYS_UROWPROG);
     9ee:	aa dc       	rcall	.-1708   	; 0x344 <UPDI::updi_reset(bool)>
     9f0:	88 23       	and	r24, r24
     9f2:	09 f4       	brne	.+2      	; 0x9f6 <__DATA_REGION_LENGTH__+0x1f6>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:489

  /* Write data to buffer memory */
  sts8rsd(start_addr, data, byte_count);
     9f4:	5f cf       	rjmp	.-322    	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
     9f6:	70 e0       	ldi	r23, 0x00	; 0
     9f8:	60 e0       	ldi	r22, 0x00	; 0
     9fa:	80 e2       	ldi	r24, 0x20	; 32
     9fc:	e9 dd       	rcall	.-1070   	; 0x5d0 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:493
  /* Ignore any errors here */

  /* After writing the memory, write the end flag */
  set_cs_stat(UPDI_CS_ASI_SYS_CTRLA, UPDI_SET_UROWDONE | UPDI_SET_CLKREQ);
     9fe:	84 e0       	ldi	r24, 0x04	; 4
     a00:	cf dd       	rcall	.-1122   	; 0x5a0 <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.21]>
     a02:	40 2f       	mov	r20, r16
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:498

  /* Wait for data to be transferred to USERROW */
  /* AVR_Dx requires at least 100 * 50us wait loops */
  /* AVR_Ex may not end forever, so give up midway */
  loop_until_sys_stat_is_clear(UPDI_SYS_UROWPROG, 200);
     a04:	c7 01       	movw	r24, r14
     a06:	b6 01       	movw	r22, r12
     a08:	bf db       	rcall	.-2178   	; 0x188 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.15]>
     a0a:	63 e0       	ldi	r22, 0x03	; 3
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:502
  /* Ignore any errors here */

  /* Step completed */
  set_cs_stat(UPDI_CS_ASI_KEY_STATUS, UPDI_KEY_UROWWRITE);
     a0c:	8a e0       	ldi	r24, 0x0A	; 10
     a0e:	b4 db       	rcall	.-2200   	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>
     a10:	68 ec       	ldi	r22, 0xC8	; 200
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:505

  /* If previously in program mode, send unlock key */
  if (bit_is_set(UPDI_CONTROL, UPDI_PROG_bp)) {
     a12:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:510
    set_nvmprog_key();
  }

  /* Exit USERROW mode */
  if (!updi_reset(true) || !updi_reset(false)) return false;
     a14:	84 e0       	ldi	r24, 0x04	; 4
     a16:	dc dd       	rcall	.-1096   	; 0x5d0 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
     a18:	60 e2       	ldi	r22, 0x20	; 32
     a1a:	87 e0       	ldi	r24, 0x07	; 7
     a1c:	ad db       	rcall	.-2214   	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>
     a1e:	e1 99       	sbic	0x1c, 1	; 28
     a20:	13 c0       	rjmp	.+38     	; 0xa48 <__DATA_REGION_LENGTH__+0x248>
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	8f dc       	rcall	.-1762   	; 0x344 <UPDI::updi_reset(bool)>
     a26:	88 23       	and	r24, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:511
  loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
     a28:	09 f4       	brne	.+2      	; 0xa2c <__DATA_REGION_LENGTH__+0x22c>
     a2a:	44 cf       	rjmp	.-376    	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
     a2c:	80 e0       	ldi	r24, 0x00	; 0
     a2e:	8a dc       	rcall	.-1772   	; 0x344 <UPDI::updi_reset(bool)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:514

  /* Make sure you are in program mode if necessary */
  if (bit_is_set(UPDI_CONTROL, UPDI_PROG_bp)) {
     a30:	88 23       	and	r24, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:515
    loop_until_sys_stat_is_set(UPDI_SYS_NVMPROG);
     a32:	09 f4       	brne	.+2      	; 0xa36 <__DATA_REGION_LENGTH__+0x236>
     a34:	3f cf       	rjmp	.-386    	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
     a36:	70 e0       	ldi	r23, 0x00	; 0
     a38:	60 e0       	ldi	r22, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:506
  /* Step completed */
  set_cs_stat(UPDI_CS_ASI_KEY_STATUS, UPDI_KEY_UROWWRITE);

  /* If previously in program mode, send unlock key */
  if (bit_is_set(UPDI_CONTROL, UPDI_PROG_bp)) {
    set_nvmprog_key();
     a3a:	80 e2       	ldi	r24, 0x20	; 32
     a3c:	c9 dd       	rcall	.-1134   	; 0x5d0 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:333
    return UPDI::write_userrow(start_addr, data, byte_count);

  /* From this point on, only program mode is allowed. */
  if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_PROG_bp)) return false;
     a3e:	e1 9b       	sbis	0x1c, 1	; 28
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:336

  /* About flash regions */
  switch (mem_type) {
     a40:	56 cf       	rjmp	.-340    	; 0x8ee <__DATA_REGION_LENGTH__+0xee>
     a42:	88 e0       	ldi	r24, 0x08	; 8
     a44:	ad dd       	rcall	.-1190   	; 0x5a0 <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.21]>
     a46:	53 cf       	rjmp	.-346    	; 0x8ee <__DATA_REGION_LENGTH__+0xee>
     a48:	a1 dd       	rcall	.-1214   	; 0x58c <UPDI::set_nvmprog_key()>
     a4a:	eb cf       	rjmp	.-42     	; 0xa22 <__DATA_REGION_LENGTH__+0x222>
write_memory():
     a4c:	e1 9b       	sbis	0x1c, 1	; 28
     a4e:	32 cf       	rjmp	.-412    	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
     a50:	20 eb       	ldi	r18, 0xB0	; 176
     a52:	b2 16       	cp	r11, r18
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:342
    case JTAG2::MTYPE_FLASH_PAGE :            // 0xB0
    case JTAG2::MTYPE_XMEGA_APP_FLASH :       // 0xC0
    case JTAG2::MTYPE_XMEGA_BOOT_FLASH : {    // 0xC1

      /* Instructions with mismatched page sizes are rejected */
      if (JTAG2::updi_desc.flash_page_size != byte_count && 256 != byte_count) {
     a54:	41 f0       	breq	.+16     	; 0xa66 <__DATA_REGION_LENGTH__+0x266>
     a56:	b2 16       	cp	r11, r18
     a58:	08 f4       	brcc	.+2      	; 0xa5c <__DATA_REGION_LENGTH__+0x25c>
     a5a:	bd c0       	rjmp	.+378    	; 0xbd6 <__DATA_REGION_LENGTH__+0x3d6>
     a5c:	80 e4       	ldi	r24, 0x40	; 64
     a5e:	8b 0d       	add	r24, r11
     a60:	82 30       	cpi	r24, 0x02	; 2
     a62:	08 f0       	brcs	.+2      	; 0xa66 <__DATA_REGION_LENGTH__+0x266>
     a64:	b8 c0       	rjmp	.+368    	; 0xbd6 <__DATA_REGION_LENGTH__+0x3d6>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:344
        /* Kill the process with a strong error */
        set_response(JTAG2::RSP_NO_TARGET_POWER);
     a66:	80 91 60 38 	lds	r24, 0x3860	; 0x803860 <JTAG2::updi_desc+0x4>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:363
    }
  }

  /* Other writes are allowed from 1 to 256 bytes */
  if (byte_count == 0 || byte_count > 256) {
    set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
     a6a:	90 91 61 38 	lds	r25, 0x3861	; 0x803861 <JTAG2::updi_desc+0x5>
     a6e:	08 17       	cp	r16, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:350
        return true;
      }

      /* Page boundaries require special handling */
      bool is_bound = bit_is_clear(UPDI_CONTROL, UPDI::UPDI_ERFM_bp)
        && ((JTAG2::updi_desc.flash_page_size - 1) & (uint16_t)start_addr) == 0;
     a70:	19 07       	cpc	r17, r25
     a72:	41 f0       	breq	.+16     	; 0xa84 <__DATA_REGION_LENGTH__+0x284>
     a74:	01 15       	cp	r16, r1
     a76:	41 e0       	ldi	r20, 0x01	; 1
     a78:	14 07       	cpc	r17, r20
     a7a:	21 f0       	breq	.+8      	; 0xa84 <__DATA_REGION_LENGTH__+0x284>
     a7c:	8b ea       	ldi	r24, 0xAB	; 171
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	f3 dc       	rcall	.-1562   	; 0x468 <JTAG2::set_response(JTAG2::jtag_response_e)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:352

      if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp))
     a82:	35 cf       	rjmp	.-406    	; 0x8ee <__DATA_REGION_LENGTH__+0xee>
     a84:	e2 99       	sbic	0x1c, 2	; 28
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:162

  bool write_flash_v3 (uint32_t start_addr, uint8_t *data, size_t byte_count, bool is_bound) {
    /* NVMCTRL version 3 or 5 */
    /* If the chip is not erased, erase the page. */
    /* However, only when the beginning of the page boundary is addressed */
    if (is_bound) {
     a86:	06 c0       	rjmp	.+12     	; 0xa94 <__DATA_REGION_LENGTH__+0x294>
     a88:	01 97       	sbiw	r24, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:163
      nvm_wait_v3();
     a8a:	8c 21       	and	r24, r12
     a8c:	9d 21       	and	r25, r13
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:164
      if (!UPDI::st8(start_addr, 0xFF)) return false;
     a8e:	21 e0       	ldi	r18, 0x01	; 1
     a90:	89 2b       	or	r24, r25
     a92:	09 f0       	breq	.+2      	; 0xa96 <__DATA_REGION_LENGTH__+0x296>
_ZN4UPDI7runtimeEh():
     a94:	20 e0       	ldi	r18, 0x00	; 0
write_memory():
     a96:	ed 9b       	sbis	0x1d, 5	; 29
     a98:	25 c0       	rjmp	.+74     	; 0xae4 <__DATA_REGION_LENGTH__+0x2e4>
write_flash_v3():
     a9a:	22 23       	and	r18, r18
     a9c:	d9 f0       	breq	.+54     	; 0xad4 <__DATA_REGION_LENGTH__+0x2d4>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:79
    return nvm_ctrl_change(nvmcmd);
  }

  /* NVMCTRL version 3,5 */
  bool nvm_ctrl_v3 (uint8_t nvmcmd) {
    nvm_wait_v3();
     a9e:	6d de       	rcall	.-806    	; 0x77a <NVM::nvm_wait_v3()>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:80
    return nvm_ctrl_change(nvmcmd);
     aa0:	4f ef       	ldi	r20, 0xFF	; 255
     aa2:	c7 01       	movw	r24, r14
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:167
    if (is_bound) {
      nvm_wait_v3();
      if (!UPDI::st8(start_addr, 0xFF)) return false;
      if (!nvm_ctrl_v3(NVM_V3_CMD_FLPER)) return false;
    }
    else if (!nvm_ctrl_v3(NVM_V3_CMD_FLPBCLR)) return false;
     aa4:	b6 01       	movw	r22, r12
     aa6:	b2 db       	rcall	.-2204   	; 0x20c <UPDI::st8(unsigned long, unsigned char)>
     aa8:	88 23       	and	r24, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:168
    nvm_wait_v3();
     aaa:	09 f4       	brne	.+2      	; 0xaae <__DATA_REGION_LENGTH__+0x2ae>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:170

    if (byte_count == 1) UPDI::st8(start_addr, *data);
     aac:	03 cf       	rjmp	.-506    	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
nvm_ctrl_v3():
     aae:	65 de       	rcall	.-822    	; 0x77a <NVM::nvm_wait_v3()>
     ab0:	88 e0       	ldi	r24, 0x08	; 8
     ab2:	c5 dc       	rcall	.-1654   	; 0x43e <NVM::nvm_ctrl_change(unsigned char)>
write_flash_v3():
     ab4:	88 23       	and	r24, r24
     ab6:	09 f4       	brne	.+2      	; 0xaba <__DATA_REGION_LENGTH__+0x2ba>
     ab8:	fd ce       	rjmp	.-518    	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
     aba:	5f de       	rcall	.-834    	; 0x77a <NVM::nvm_wait_v3()>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:79
    return nvm_ctrl_change(nvmcmd);
  }

  /* NVMCTRL version 3,5 */
  bool nvm_ctrl_v3 (uint8_t nvmcmd) {
    nvm_wait_v3();
     abc:	01 30       	cpi	r16, 0x01	; 1
     abe:	11 05       	cpc	r17, r1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:80
    return nvm_ctrl_change(nvmcmd);
     ac0:	61 f4       	brne	.+24     	; 0xada <__DATA_REGION_LENGTH__+0x2da>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:74
  }

  /* NVMCTRL version 2,4 */
  bool nvm_ctrl_v2 (uint8_t nvmcmd) {
    nvm_wait();
    return nvm_ctrl_change(nvmcmd);
     ac2:	40 91 9a 38 	lds	r20, 0x389A	; 0x80389a <JTAG2::packet+0x12>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:79
  }

  /* NVMCTRL version 3,5 */
  bool nvm_ctrl_v3 (uint8_t nvmcmd) {
    nvm_wait_v3();
     ac6:	c7 01       	movw	r24, r14
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:80
    return nvm_ctrl_change(nvmcmd);
     ac8:	b6 01       	movw	r22, r12
     aca:	a0 db       	rcall	.-2240   	; 0x20c <UPDI::st8(unsigned long, unsigned char)>
nvm_ctrl_v3():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:171
    }
    else if (!nvm_ctrl_v3(NVM_V3_CMD_FLPBCLR)) return false;
    nvm_wait_v3();

    if (byte_count == 1) UPDI::st8(start_addr, *data);
    else UPDI::sts8rsd(start_addr, data, byte_count);
     acc:	56 de       	rcall	.-852    	; 0x77a <NVM::nvm_wait_v3()>
     ace:	84 e0       	ldi	r24, 0x04	; 4
nvm_ctrl_v2():
     ad0:	b6 dc       	rcall	.-1684   	; 0x43e <NVM::nvm_ctrl_change(unsigned char)>
     ad2:	0e cf       	rjmp	.-484    	; 0x8f0 <__DATA_REGION_LENGTH__+0xf0>
nvm_ctrl_v3():
     ad4:	52 de       	rcall	.-860    	; 0x77a <NVM::nvm_wait_v3()>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:354
      bool is_bound = bit_is_clear(UPDI_CONTROL, UPDI::UPDI_ERFM_bp)
        && ((JTAG2::updi_desc.flash_page_size - 1) & (uint16_t)start_addr) == 0;

      if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp))
        return write_flash_v3(start_addr, data, byte_count, is_bound);
      else if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN2_bp))
     ad6:	8f e0       	ldi	r24, 0x0F	; 15
     ad8:	ec cf       	rjmp	.-40     	; 0xab2 <__DATA_REGION_LENGTH__+0x2b2>
write_flash_v3():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:180

  bool write_flash_v2 (uint32_t start_addr, uint8_t *data, size_t byte_count, bool is_bound) {
    /* NVMCTRL version 2 or 4 */
    /* If the chip is not erased, erase the page. */
    /* However, only when the beginning of the page boundary is addressed */
    if (is_bound) {
     ada:	40 2f       	mov	r20, r16
     adc:	c7 01       	movw	r24, r14
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:73
    return true;
  }

  /* NVMCTRL version 2,4 */
  bool nvm_ctrl_v2 (uint8_t nvmcmd) {
    nvm_wait();
     ade:	b6 01       	movw	r22, r12
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:74
    return nvm_ctrl_change(nvmcmd);
     ae0:	53 db       	rcall	.-2394   	; 0x188 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.15]>
     ae2:	f4 cf       	rjmp	.-24     	; 0xacc <__DATA_REGION_LENGTH__+0x2cc>
write_memory():
     ae4:	ee 9b       	sbis	0x1d, 6	; 29
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:184
    /* However, only when the beginning of the page boundary is addressed */
    if (is_bound) {
      if (!nvm_ctrl_v2(NVM_V2_CMD_FLPER)) return false;
      if (!UPDI::st8(start_addr, 0xFF)) return false;
    }
    if (!nvm_ctrl_v2(NVM_V2_CMD_FLWR)) return false;
     ae6:	62 c0       	rjmp	.+196    	; 0xbac <__DATA_REGION_LENGTH__+0x3ac>
write_flash_v2():
     ae8:	21 11       	cpse	r18, r1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:187

    /* This version allows bulk writes of 512 bytes */
    if (byte_count == 1) UPDI::st8(start_addr, *data);
     aea:	0f c0       	rjmp	.+30     	; 0xb0a <__DATA_REGION_LENGTH__+0x30a>
nvm_ctrl_v2():
     aec:	54 de       	rcall	.-856    	; 0x796 <NVM::nvm_wait()>
     aee:	82 e0       	ldi	r24, 0x02	; 2
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:130
      set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
      return true;
    }
    if (!nvm_ctrl_v2(NVM_V2_CMD_EEERWR)) return false;

    if (byte_count == 1) UPDI::st8(start_addr, *data);
     af0:	a6 dc       	rcall	.-1716   	; 0x43e <NVM::nvm_ctrl_change(unsigned char)>
write_flash_v2():
     af2:	88 23       	and	r24, r24
     af4:	09 f4       	brne	.+2      	; 0xaf8 <__DATA_REGION_LENGTH__+0x2f8>
     af6:	de ce       	rjmp	.-580    	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
     af8:	01 30       	cpi	r16, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:73
    return true;
  }

  /* NVMCTRL version 2,4 */
  bool nvm_ctrl_v2 (uint8_t nvmcmd) {
    nvm_wait();
     afa:	11 05       	cpc	r17, r1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:74
    return nvm_ctrl_change(nvmcmd);
     afc:	99 f4       	brne	.+38     	; 0xb24 <__DATA_REGION_LENGTH__+0x324>
write_eeprom_v2():
     afe:	40 91 9a 38 	lds	r20, 0x389A	; 0x80389a <JTAG2::packet+0x12>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:181
  bool write_flash_v2 (uint32_t start_addr, uint8_t *data, size_t byte_count, bool is_bound) {
    /* NVMCTRL version 2 or 4 */
    /* If the chip is not erased, erase the page. */
    /* However, only when the beginning of the page boundary is addressed */
    if (is_bound) {
      if (!nvm_ctrl_v2(NVM_V2_CMD_FLPER)) return false;
     b02:	c7 01       	movw	r24, r14
     b04:	b6 01       	movw	r22, r12
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:182
      if (!UPDI::st8(start_addr, 0xFF)) return false;
     b06:	82 db       	rcall	.-2300   	; 0x20c <UPDI::st8(unsigned long, unsigned char)>
     b08:	49 c0       	rjmp	.+146    	; 0xb9c <__DATA_REGION_LENGTH__+0x39c>
nvm_ctrl_v2():
     b0a:	45 de       	rcall	.-886    	; 0x796 <NVM::nvm_wait()>
     b0c:	88 e0       	ldi	r24, 0x08	; 8
     b0e:	97 dc       	rcall	.-1746   	; 0x43e <NVM::nvm_ctrl_change(unsigned char)>
write_flash_v2():
     b10:	88 23       	and	r24, r24
     b12:	09 f4       	brne	.+2      	; 0xb16 <__DATA_REGION_LENGTH__+0x316>
     b14:	cf ce       	rjmp	.-610    	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:188
    }
    if (!nvm_ctrl_v2(NVM_V2_CMD_FLWR)) return false;

    /* This version allows bulk writes of 512 bytes */
    if (byte_count == 1) UPDI::st8(start_addr, *data);
    else if ((byte_count - 1) >> 8) UPDI::sts16rsd(start_addr, data, byte_count);
     b16:	4f ef       	ldi	r20, 0xFF	; 255
     b18:	c7 01       	movw	r24, r14
     b1a:	b6 01       	movw	r22, r12
     b1c:	77 db       	rcall	.-2322   	; 0x20c <UPDI::st8(unsigned long, unsigned char)>
     b1e:	81 11       	cpse	r24, r1
     b20:	e5 cf       	rjmp	.-54     	; 0xaec <__DATA_REGION_LENGTH__+0x2ec>
     b22:	c8 ce       	rjmp	.-624    	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:238
  if (!set_cs_ctra(UPDI_GTVAL)) return false;
  return true;
}

bool UPDI::sts16rsd (uint32_t addr, uint8_t *data, size_t len) {
  _CAPS32(_set_ptr_l[2])->dword = addr;
     b24:	c8 01       	movw	r24, r16
     b26:	01 97       	sbiw	r24, 0x01	; 1
     b28:	89 2f       	mov	r24, r25
     b2a:	99 27       	eor	r25, r25
     b2c:	89 2b       	or	r24, r25
     b2e:	09 f4       	brne	.+2      	; 0xb32 <__DATA_REGION_LENGTH__+0x332>
     b30:	38 c0       	rjmp	.+112    	; 0xba2 <__DATA_REGION_LENGTH__+0x3a2>
sts16rsd():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:239
  uint8_t repeat = len >> 1;
     b32:	c0 92 3f 38 	sts	0x383F, r12	; 0x80383f <UPDI::_set_ptr_l+0x2>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:240
  _set_repeat[2] = repeat - 1;
     b36:	d0 92 40 38 	sts	0x3840, r13	; 0x803840 <UPDI::_set_ptr_l+0x3>
     b3a:	e0 92 41 38 	sts	0x3841, r14	; 0x803841 <UPDI::_set_ptr_l+0x4>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:241
  _set_repeat[4] = UPDI_PTR_INC|UPDI_ST|UPDI_DATA2;
     b3e:	f0 92 42 38 	sts	0x3842, r15	; 0x803842 <UPDI::_set_ptr_l+0x5>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:242
  if (!send_bytes(_set_ptr_l, sizeof(_set_ptr_l) - 1)) return false;
     b42:	16 95       	lsr	r17
     b44:	07 95       	ror	r16
     b46:	f0 2e       	mov	r15, r16
     b48:	e8 e3       	ldi	r30, 0x38	; 56
     b4a:	f8 e3       	ldi	r31, 0x38	; 56
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:243
  if (UPDI_ACK != RECV()) return false;
     b4c:	01 50       	subi	r16, 0x01	; 1
     b4e:	02 83       	std	Z+2, r16	; 0x02
     b50:	85 e6       	ldi	r24, 0x65	; 101
     b52:	84 83       	std	Z+4, r24	; 0x04
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:320
  set_ptr[2] = data;
  return send_bytes(set_ptr, sizeof(set_ptr));
}

bool UPDI::set_cs_ctra (uint8_t data) {
  return set_cs_stat(UPDI_CS_CTRLA, data);
     b54:	65 e0       	ldi	r22, 0x05	; 5
     b56:	8d e3       	ldi	r24, 0x3D	; 61
     b58:	98 e3       	ldi	r25, 0x38	; 56
     b5a:	fd da       	rcall	.-2566   	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:244
  uint8_t repeat = len >> 1;
  _set_repeat[2] = repeat - 1;
  _set_repeat[4] = UPDI_PTR_INC|UPDI_ST|UPDI_DATA2;
  if (!send_bytes(_set_ptr_l, sizeof(_set_ptr_l) - 1)) return false;
  if (UPDI_ACK != RECV()) return false;
  if (!set_cs_ctra(UPDI_SET_RSD|UPDI_GTVAL_RSD)) return false;
     b5c:	88 23       	and	r24, r24
     b5e:	f1 f0       	breq	.+60     	; 0xb9c <__DATA_REGION_LENGTH__+0x39c>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:245
  if (!send_bytes(_set_repeat, sizeof(_set_repeat))) return false;
     b60:	d4 da       	rcall	.-2648   	; 0x10a <UPDI::RECV()>
     b62:	80 34       	cpi	r24, 0x40	; 64
     b64:	d9 f4       	brne	.+54     	; 0xb9c <__DATA_REGION_LENGTH__+0x39c>
set_cs_ctra():
     b66:	6e e0       	ldi	r22, 0x0E	; 14
     b68:	82 e0       	ldi	r24, 0x02	; 2
     b6a:	06 db       	rcall	.-2548   	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>
sts16rsd():
     b6c:	88 23       	and	r24, r24
     b6e:	b1 f0       	breq	.+44     	; 0xb9c <__DATA_REGION_LENGTH__+0x39c>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:247
  do {              /* Repeat word send */
    SEND(*data++);  /* Submission errors must be ignored */
     b70:	65 e0       	ldi	r22, 0x05	; 5
     b72:	88 e3       	ldi	r24, 0x38	; 56
     b74:	98 e3       	ldi	r25, 0x38	; 56
     b76:	ef da       	rcall	.-2594   	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:248
    SEND(*data++);  /* Submission errors must be ignored */
     b78:	88 23       	and	r24, r24
     b7a:	81 f0       	breq	.+32     	; 0xb9c <__DATA_REGION_LENGTH__+0x39c>
     b7c:	08 e8       	ldi	r16, 0x88	; 136
     b7e:	18 e3       	ldi	r17, 0x38	; 56
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:249
  } while (--repeat);
     b80:	f8 01       	movw	r30, r16
     b82:	82 89       	ldd	r24, Z+18	; 0x12
     b84:	ce da       	rcall	.-2660   	; 0x122 <UPDI::SEND(unsigned char)>
     b86:	f8 01       	movw	r30, r16
     b88:	83 89       	ldd	r24, Z+19	; 0x13
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:320
  set_ptr[2] = data;
  return send_bytes(set_ptr, sizeof(set_ptr));
}

bool UPDI::set_cs_ctra (uint8_t data) {
  return set_cs_stat(UPDI_CS_CTRLA, data);
     b8a:	cb da       	rcall	.-2666   	; 0x122 <UPDI::SEND(unsigned char)>
     b8c:	fa 94       	dec	r15
     b8e:	0e 5f       	subi	r16, 0xFE	; 254
     b90:	1f 4f       	sbci	r17, 0xFF	; 255
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:73
    return true;
  }

  /* NVMCTRL version 2,4 */
  bool nvm_ctrl_v2 (uint8_t nvmcmd) {
    nvm_wait();
     b92:	f1 10       	cpse	r15, r1
     b94:	f5 cf       	rjmp	.-22     	; 0xb80 <__DATA_REGION_LENGTH__+0x380>
set_cs_ctra():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:74
    return nvm_ctrl_change(nvmcmd);
     b96:	66 e0       	ldi	r22, 0x06	; 6
     b98:	82 e0       	ldi	r24, 0x02	; 2
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:189
    if (!nvm_ctrl_v2(NVM_V2_CMD_FLWR)) return false;

    /* This version allows bulk writes of 512 bytes */
    if (byte_count == 1) UPDI::st8(start_addr, *data);
    else if ((byte_count - 1) >> 8) UPDI::sts16rsd(start_addr, data, byte_count);
    else UPDI::sts8rsd(start_addr, data, byte_count);
     b9a:	ee da       	rcall	.-2596   	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>
nvm_ctrl_v2():
     b9c:	fc dd       	rcall	.-1032   	; 0x796 <NVM::nvm_wait()>
     b9e:	80 e0       	ldi	r24, 0x00	; 0
     ba0:	97 cf       	rjmp	.-210    	; 0xad0 <__DATA_REGION_LENGTH__+0x2d0>
write_flash_v2():
     ba2:	40 2f       	mov	r20, r16
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:198

  bool write_flash_v0 (uint32_t start_addr, uint8_t *data, size_t byte_count, bool is_bound) {
    /* NVMCTRL version 0 */
    /* This version does not require page erasure. */
    /* Just clearing the buffer buffer is sufficient. */
    if (is_bound) {
     ba4:	c7 01       	movw	r24, r14
     ba6:	b6 01       	movw	r22, r12
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:144
    if (byte_count > 64) {
      /* If the limit is exceeded, it will fall back and force a Single-byte write */
      set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
      return true;
    }
    nvm_wait();
     ba8:	ef da       	rcall	.-2594   	; 0x188 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.15]>
     baa:	f8 cf       	rjmp	.-16     	; 0xb9c <__DATA_REGION_LENGTH__+0x39c>
write_flash_v0():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:146

    if (byte_count == 1) UPDI::st8(start_addr, *data);
     bac:	21 11       	cpse	r18, r1
     bae:	0d c0       	rjmp	.+26     	; 0xbca <__DATA_REGION_LENGTH__+0x3ca>
write_eeprom_v0():
     bb0:	f2 dd       	rcall	.-1052   	; 0x796 <NVM::nvm_wait()>
     bb2:	01 30       	cpi	r16, 0x01	; 1
     bb4:	11 05       	cpc	r17, r1
     bb6:	09 f0       	breq	.+2      	; 0xbba <__DATA_REGION_LENGTH__+0x3ba>
     bb8:	9f c0       	rjmp	.+318    	; 0xcf8 <__DATA_REGION_LENGTH__+0x4f8>
     bba:	40 91 9a 38 	lds	r20, 0x389A	; 0x80389a <JTAG2::packet+0x12>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:149
    else UPDI::sts8rsd(start_addr, data, byte_count);

    return nvm_ctrl(NVM_CMD_ERWP);
     bbe:	c7 01       	movw	r24, r14
     bc0:	b6 01       	movw	r22, r12
     bc2:	24 db       	rcall	.-2488   	; 0x20c <UPDI::st8(unsigned long, unsigned char)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:199
  bool write_flash_v0 (uint32_t start_addr, uint8_t *data, size_t byte_count, bool is_bound) {
    /* NVMCTRL version 0 */
    /* This version does not require page erasure. */
    /* Just clearing the buffer buffer is sufficient. */
    if (is_bound) {
      nvm_wait();
     bc4:	83 e0       	ldi	r24, 0x03	; 3
     bc6:	35 dc       	rcall	.-1942   	; 0x432 <NVM::nvm_ctrl(unsigned char)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:200
      if (!nvm_ctrl(NVM_CMD_PBC)) return false;
     bc8:	93 ce       	rjmp	.-730    	; 0x8f0 <__DATA_REGION_LENGTH__+0xf0>
write_flash_v0():
     bca:	e5 dd       	rcall	.-1078   	; 0x796 <NVM::nvm_wait()>
     bcc:	84 e0       	ldi	r24, 0x04	; 4
     bce:	31 dc       	rcall	.-1950   	; 0x432 <NVM::nvm_ctrl(unsigned char)>
     bd0:	81 11       	cpse	r24, r1
     bd2:	ee cf       	rjmp	.-36     	; 0xbb0 <__DATA_REGION_LENGTH__+0x3b0>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:362
        return write_flash_v0(start_addr, data, byte_count, is_bound);
    }
  }

  /* Other writes are allowed from 1 to 256 bytes */
  if (byte_count == 0 || byte_count > 256) {
     bd4:	6f ce       	rjmp	.-802    	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
write_memory():
     bd6:	c8 01       	movw	r24, r16
     bd8:	01 97       	sbiw	r24, 0x01	; 1
     bda:	8f 3f       	cpi	r24, 0xFF	; 255
     bdc:	91 05       	cpc	r25, r1
     bde:	11 f0       	breq	.+4      	; 0xbe4 <__DATA_REGION_LENGTH__+0x3e4>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:367
    set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
    return true;
  }

  switch (mem_type) {
     be0:	08 f0       	brcs	.+2      	; 0xbe4 <__DATA_REGION_LENGTH__+0x3e4>
     be2:	33 ce       	rjmp	.-922    	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
     be4:	f1 eb       	ldi	r31, 0xB1	; 177
     be6:	bf 16       	cp	r11, r31
     be8:	41 f0       	breq	.+16     	; 0xbfa <__DATA_REGION_LENGTH__+0x3fa>
     bea:	fb 15       	cp	r31, r11
     bec:	f0 f0       	brcs	.+60     	; 0xc2a <__DATA_REGION_LENGTH__+0x42a>
     bee:	20 e2       	ldi	r18, 0x20	; 32
     bf0:	b2 16       	cp	r11, r18
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:388
      /* FUSES in other implementations is equivalent to EEPROM */
    }
    case JTAG2::MTYPE_XMEGA_EEPROM :          // 0xC4
    case JTAG2::MTYPE_EEPROM_PAGE :           // 0xB1
    case JTAG2::MTYPE_EEPROM : {              // 0x22
      if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp))
     bf2:	21 f1       	breq	.+72     	; 0xc3c <__DATA_REGION_LENGTH__+0x43c>
     bf4:	42 e2       	ldi	r20, 0x22	; 34
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:106
   ***********************************/

  bool write_eeprom_v3 (uint32_t start_addr, uint8_t *data, size_t byte_count) {
    /* NVMCTRL version 3 or 5 */
    /* This version can write 8 bytes in bulk */
    if (byte_count > 8) {
     bf6:	b4 12       	cpse	r11, r20
     bf8:	1e c0       	rjmp	.+60     	; 0xc36 <__DATA_REGION_LENGTH__+0x436>
     bfa:	ed 9b       	sbis	0x1d, 5	; 29
     bfc:	61 c0       	rjmp	.+194    	; 0xcc0 <__DATA_REGION_LENGTH__+0x4c0>
write_eeprom_v3():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:79
    return nvm_ctrl_change(nvmcmd);
  }

  /* NVMCTRL version 3,5 */
  bool nvm_ctrl_v3 (uint8_t nvmcmd) {
    nvm_wait_v3();
     bfe:	09 30       	cpi	r16, 0x09	; 9
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:80
    return nvm_ctrl_change(nvmcmd);
     c00:	11 05       	cpc	r17, r1
     c02:	08 f0       	brcs	.+2      	; 0xc06 <__DATA_REGION_LENGTH__+0x406>
     c04:	22 ce       	rjmp	.-956    	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
nvm_ctrl_v3():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:111
    if (byte_count > 8) {
      /* If the limit is exceeded, it will fall back and force a Single-byte write */
      set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
      return true;
    }
    if (!nvm_ctrl_v3(NVM_V3_CMD_EEPBCLR)) return false;
     c06:	b9 dd       	rcall	.-1166   	; 0x77a <NVM::nvm_wait_v3()>
     c08:	8f e1       	ldi	r24, 0x1F	; 31
     c0a:	19 dc       	rcall	.-1998   	; 0x43e <NVM::nvm_ctrl_change(unsigned char)>
write_eeprom_v3():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:113

    if (byte_count == 1) UPDI::st8(start_addr, *data);
     c0c:	88 23       	and	r24, r24
     c0e:	09 f4       	brne	.+2      	; 0xc12 <__DATA_REGION_LENGTH__+0x412>
     c10:	51 ce       	rjmp	.-862    	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
     c12:	01 30       	cpi	r16, 0x01	; 1
     c14:	11 05       	cpc	r17, r1
     c16:	09 f0       	breq	.+2      	; 0xc1a <__DATA_REGION_LENGTH__+0x41a>
     c18:	4c c0       	rjmp	.+152    	; 0xcb2 <__DATA_REGION_LENGTH__+0x4b2>
     c1a:	40 91 9a 38 	lds	r20, 0x389A	; 0x80389a <JTAG2::packet+0x12>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:79
    return nvm_ctrl_change(nvmcmd);
  }

  /* NVMCTRL version 3,5 */
  bool nvm_ctrl_v3 (uint8_t nvmcmd) {
    nvm_wait_v3();
     c1e:	c7 01       	movw	r24, r14
     c20:	b6 01       	movw	r22, r12
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:80
    return nvm_ctrl_change(nvmcmd);
     c22:	f4 da       	rcall	.-2584   	; 0x20c <UPDI::st8(unsigned long, unsigned char)>
nvm_ctrl_v3():
     c24:	aa dd       	rcall	.-1196   	; 0x77a <NVM::nvm_wait_v3()>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:367
  if (byte_count == 0 || byte_count > 256) {
    set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
    return true;
  }

  switch (mem_type) {
     c26:	85 e1       	ldi	r24, 0x15	; 21
     c28:	53 cf       	rjmp	.-346    	; 0xad0 <__DATA_REGION_LENGTH__+0x2d0>
write_memory():
     c2a:	83 eb       	ldi	r24, 0xB3	; 179
     c2c:	8b 15       	cp	r24, r11
     c2e:	68 f4       	brcc	.+26     	; 0xc4a <__DATA_REGION_LENGTH__+0x44a>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:397
      else
        return write_eeprom_v0(start_addr, data, byte_count);
    }
    default :
      /* Other memory types are rejected */
      set_response(JTAG2::RSP_ILLEGAL_MEMORY_TYPE);
     c30:	94 ec       	ldi	r25, 0xC4	; 196
     c32:	b9 16       	cp	r11, r25
     c34:	11 f3       	breq	.-60     	; 0xbfa <__DATA_REGION_LENGTH__+0x3fa>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:370
  }

  switch (mem_type) {
    /* Can write to the IO region as is */
    case JTAG2::MTYPE_SRAM : {                // 0x20
      return UPDI::sts8(start_addr, data, byte_count);
     c36:	82 ea       	ldi	r24, 0xA2	; 162
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	22 cf       	rjmp	.-444    	; 0xa80 <__DATA_REGION_LENGTH__+0x280>
     c3c:	20 2f       	mov	r18, r16
     c3e:	4a e9       	ldi	r20, 0x9A	; 154
     c40:	58 e3       	ldi	r21, 0x38	; 56
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:377
    /* EEPROM region */
    case JTAG2::MTYPE_LOCK_BITS :             // 0xB3
    case JTAG2::MTYPE_FUSE_BITS : {           // 0xB2
      /* The NVMCTRL version 0 implementation is special. */
      if (bit_is_clear(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp)
      && bit_is_clear(UPDI_NVMCTRL, UPDI::UPDI_GEN2_bp)) {
     c42:	c7 01       	movw	r24, r14
     c44:	b6 01       	movw	r22, r12
     c46:	3d db       	rcall	.-2438   	; 0x2c2 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)>
     c48:	53 ce       	rjmp	.-858    	; 0x8f0 <__DATA_REGION_LENGTH__+0xf0>
     c4a:	ed 99       	sbic	0x1d, 5	; 29
     c4c:	d6 cf       	rjmp	.-84     	; 0xbfa <__DATA_REGION_LENGTH__+0x3fa>
     c4e:	ee 99       	sbic	0x1d, 6	; 29
     c50:	d4 cf       	rjmp	.-88     	; 0xbfa <__DATA_REGION_LENGTH__+0x3fa>
     c52:	f8 01       	movw	r30, r16
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:91

  bool write_fuse (uint16_t addr, uint8_t data) {
    /* Version 0 of FUSE can write one byte at a time in a special way */
    struct fuse_packet_t { uint16_t data; uint16_t addr; } fuse_packet;
    fuse_packet.data = data;
    fuse_packet.addr = addr;
     c54:	e8 57       	subi	r30, 0x78	; 120
     c56:	f7 4c       	sbci	r31, 0xC7	; 199
     c58:	5f 01       	movw	r10, r30
     c5a:	08 e8       	ldi	r16, 0x88	; 136
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:90
   **********************************************/

  bool write_fuse (uint16_t addr, uint8_t data) {
    /* Version 0 of FUSE can write one byte at a time in a special way */
    struct fuse_packet_t { uint16_t data; uint16_t addr; } fuse_packet;
    fuse_packet.data = data;
     c5c:	18 e3       	ldi	r17, 0x38	; 56
write_fuse():
     c5e:	c6 01       	movw	r24, r12
     c60:	88 58       	subi	r24, 0x88	; 136
     c62:	98 43       	sbci	r25, 0x38	; 56
     c64:	6c 01       	movw	r12, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:91
    fuse_packet.addr = addr;
     c66:	f8 01       	movw	r30, r16
     c68:	82 89       	ldd	r24, Z+18	; 0x12
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	89 83       	std	Y+1, r24	; 0x01
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:92
    nvm_wait();
     c6e:	9a 83       	std	Y+2, r25	; 0x02
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:93
    if (!UPDI::sts8(NVMCTRL_REG_DATA,
     c70:	c6 01       	movw	r24, r12
     c72:	80 0f       	add	r24, r16
     c74:	91 1f       	adc	r25, r17
     c76:	8b 83       	std	Y+3, r24	; 0x03
     c78:	9c 83       	std	Y+4, r25	; 0x04
     c7a:	8d dd       	rcall	.-1254   	; 0x796 <NVM::nvm_wait()>
     c7c:	24 e0       	ldi	r18, 0x04	; 4
     c7e:	ae 01       	movw	r20, r28
     c80:	4f 5f       	subi	r20, 0xFF	; 255
     c82:	5f 4f       	sbci	r21, 0xFF	; 255
     c84:	66 e0       	ldi	r22, 0x06	; 6
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:95
      (uint8_t*)&fuse_packet, sizeof(fuse_packet))) return false;
    if (!nvm_ctrl(NVM_CMD_WFU)) return false;
     c86:	70 e1       	ldi	r23, 0x10	; 16
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	1a db       	rcall	.-2508   	; 0x2c2 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:96
    return ((nvm_wait() & 7) == 0);
     c8e:	88 23       	and	r24, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:379
    case JTAG2::MTYPE_FUSE_BITS : {           // 0xB2
      /* The NVMCTRL version 0 implementation is special. */
      if (bit_is_clear(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp)
      && bit_is_clear(UPDI_NVMCTRL, UPDI::UPDI_GEN2_bp)) {
        do {
          if (!write_fuse(start_addr++, *data++)) return false;
     c90:	09 f4       	brne	.+2      	; 0xc94 <__DATA_REGION_LENGTH__+0x494>
     c92:	10 ce       	rjmp	.-992    	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
     c94:	87 e0       	ldi	r24, 0x07	; 7
     c96:	cd db       	rcall	.-2150   	; 0x432 <NVM::nvm_ctrl(unsigned char)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:380
        } while (--byte_count);
     c98:	88 23       	and	r24, r24
     c9a:	09 f4       	brne	.+2      	; 0xc9e <__DATA_REGION_LENGTH__+0x49e>
     c9c:	0b ce       	rjmp	.-1002   	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:114
      return true;
    }
    if (!nvm_ctrl_v3(NVM_V3_CMD_EEPBCLR)) return false;

    if (byte_count == 1) UPDI::st8(start_addr, *data);
    else UPDI::sts8(start_addr, data, byte_count);
     c9e:	7b dd       	rcall	.-1290   	; 0x796 <NVM::nvm_wait()>
write_memory():
     ca0:	87 70       	andi	r24, 0x07	; 7
     ca2:	09 f0       	breq	.+2      	; 0xca6 <__DATA_REGION_LENGTH__+0x4a6>
     ca4:	07 ce       	rjmp	.-1010   	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
     ca6:	0f 5f       	subi	r16, 0xFF	; 255
     ca8:	1f 4f       	sbci	r17, 0xFF	; 255
     caa:	0a 15       	cp	r16, r10
     cac:	1b 05       	cpc	r17, r11
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:390
    case JTAG2::MTYPE_XMEGA_EEPROM :          // 0xC4
    case JTAG2::MTYPE_EEPROM_PAGE :           // 0xB1
    case JTAG2::MTYPE_EEPROM : {              // 0x22
      if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp))
        return write_eeprom_v3(start_addr, data, byte_count);
      else if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN2_bp))
     cae:	d9 f6       	brne	.-74     	; 0xc66 <__DATA_REGION_LENGTH__+0x466>
     cb0:	1e ce       	rjmp	.-964    	; 0x8ee <__DATA_REGION_LENGTH__+0xee>
write_eeprom_v3():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:123

  bool write_eeprom_v2 (uint32_t start_addr, uint8_t *data, size_t byte_count) {
    /* NVMCTRL version 2 or 4 */
    /* This version cannot be written in bulk transfer */
    /* Only 2 bytes (1 word) can be written at a time */
    if (byte_count > 2) {
     cb2:	20 2f       	mov	r18, r16
     cb4:	4a e9       	ldi	r20, 0x9A	; 154
     cb6:	58 e3       	ldi	r21, 0x38	; 56
     cb8:	c7 01       	movw	r24, r14
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:73
    return true;
  }

  /* NVMCTRL version 2,4 */
  bool nvm_ctrl_v2 (uint8_t nvmcmd) {
    nvm_wait();
     cba:	b6 01       	movw	r22, r12
     cbc:	02 db       	rcall	.-2556   	; 0x2c2 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:74
    return nvm_ctrl_change(nvmcmd);
     cbe:	b2 cf       	rjmp	.-156    	; 0xc24 <__DATA_REGION_LENGTH__+0x424>
write_memory():
     cc0:	ee 9b       	sbis	0x1d, 6	; 29
     cc2:	15 c0       	rjmp	.+42     	; 0xcee <__DATA_REGION_LENGTH__+0x4ee>
write_eeprom_v2():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:128
    if (byte_count > 2) {
      /* If the limit is exceeded, it will fall back and force a Single-byte write */
      set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
      return true;
    }
    if (!nvm_ctrl_v2(NVM_V2_CMD_EEERWR)) return false;
     cc4:	03 30       	cpi	r16, 0x03	; 3
     cc6:	11 05       	cpc	r17, r1
     cc8:	08 f0       	brcs	.+2      	; 0xccc <__DATA_REGION_LENGTH__+0x4cc>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:130

    if (byte_count == 1) UPDI::st8(start_addr, *data);
     cca:	bf cd       	rjmp	.-1154   	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
nvm_ctrl_v2():
     ccc:	64 dd       	rcall	.-1336   	; 0x796 <NVM::nvm_wait()>
     cce:	83 e1       	ldi	r24, 0x13	; 19
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:131
    else UPDI::sts8(start_addr, data, byte_count);
     cd0:	b6 db       	rcall	.-2196   	; 0x43e <NVM::nvm_ctrl_change(unsigned char)>
write_eeprom_v2():
     cd2:	88 23       	and	r24, r24
     cd4:	09 f4       	brne	.+2      	; 0xcd8 <__DATA_REGION_LENGTH__+0x4d8>
     cd6:	ee cd       	rjmp	.-1060   	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
     cd8:	01 30       	cpi	r16, 0x01	; 1
     cda:	11 05       	cpc	r17, r1
     cdc:	09 f4       	brne	.+2      	; 0xce0 <__DATA_REGION_LENGTH__+0x4e0>
     cde:	0f cf       	rjmp	.-482    	; 0xafe <__DATA_REGION_LENGTH__+0x2fe>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:139
  }

  bool write_eeprom_v0 (uint32_t start_addr, uint8_t *data, size_t byte_count) {
    /* NVMCTRL version 0 */
    /* This version allows fast bulk writes of 32 or 64 bytes */
    if (byte_count > 64) {
     ce0:	22 e0       	ldi	r18, 0x02	; 2
     ce2:	4a e9       	ldi	r20, 0x9A	; 154
     ce4:	58 e3       	ldi	r21, 0x38	; 56
     ce6:	c7 01       	movw	r24, r14
     ce8:	b6 01       	movw	r22, r12
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:147
      return true;
    }
    nvm_wait();

    if (byte_count == 1) UPDI::st8(start_addr, *data);
    else UPDI::sts8rsd(start_addr, data, byte_count);
     cea:	eb da       	rcall	.-2602   	; 0x2c2 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)>
     cec:	57 cf       	rjmp	.-338    	; 0xb9c <__DATA_REGION_LENGTH__+0x39c>
write_eeprom_v0():
     cee:	01 34       	cpi	r16, 0x41	; 65
     cf0:	11 05       	cpc	r17, r1
     cf2:	08 f4       	brcc	.+2      	; 0xcf6 <__DATA_REGION_LENGTH__+0x4f6>
     cf4:	5d cf       	rjmp	.-326    	; 0xbb0 <__DATA_REGION_LENGTH__+0x3b0>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:719
      case UPDI_CMD_WRITE_MEMORY : {
        _result = NVM::write_memory();
        break;
      }
      case UPDI_CMD_ERASE : {
        if (JTAG2::packet.body[JTAG2::MEM_TYPE] == JTAG2::XMEGA_ERASE_CHIP) {
     cf6:	a9 cd       	rjmp	.-1198   	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
     cf8:	40 2f       	mov	r20, r16
     cfa:	c7 01       	movw	r24, r14
     cfc:	b6 01       	movw	r22, r12
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:527
 ****************************/

// __attribute__((optimize("O0")))
bool UPDI::chip_erase (void) {
  /* If UPDI is prohibited, try HV control */
  if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) {
     cfe:	44 da       	rcall	.-2936   	; 0x188 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.15]>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:399
  return loop_until_key_stat_is_set(UPDI_KEY_NVMPROG);
}

/* __attribute__((optimize("O0"))) */
bool UPDI::set_erase_key (void) {
  if (!send_bytes(erase_key, sizeof(erase_key))) return false;
     d00:	61 cf       	rjmp	.-318    	; 0xbc4 <__DATA_REGION_LENGTH__+0x3c4>
_ZN4UPDI7runtimeEh():
     d02:	80 91 91 38 	lds	r24, 0x3891	; 0x803891 <JTAG2::packet+0x9>
     d06:	81 11       	cpse	r24, r1
     d08:	f4 cd       	rjmp	.-1048   	; 0x8f2 <__DATA_REGION_LENGTH__+0xf2>
chip_erase():
     d0a:	e0 9b       	sbis	0x1c, 0	; 28
     d0c:	41 c0       	rjmp	.+130    	; 0xd90 <__DATA_REGION_LENGTH__+0x590>
set_erase_key():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:400
  return loop_until_key_stat_is_set(UPDI_KEY_CHIPERASE);
     d0e:	6a e0       	ldi	r22, 0x0A	; 10
     d10:	8c e2       	ldi	r24, 0x2C	; 44
     d12:	98 e3       	ldi	r25, 0x38	; 56
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:532
  if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) {
    HV_Pulse();
  }

  /* Transition to CHIPERASE mode by system reset */
  if (!set_erase_key()) return false;
     d14:	20 da       	rcall	.-3008   	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     d16:	88 23       	and	r24, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:535

  /* Issue a system reset */
  if (!updi_reset(true) || !updi_reset(false)) return false;
     d18:	09 f4       	brne	.+2      	; 0xd1c <__DATA_REGION_LENGTH__+0x51c>
     d1a:	cc cd       	rjmp	.-1128   	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
     d1c:	88 e0       	ldi	r24, 0x08	; 8
     d1e:	1e dc       	rcall	.-1988   	; 0x55c <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.18]>
chip_erase():
     d20:	88 23       	and	r24, r24
     d22:	09 f4       	brne	.+2      	; 0xd26 <__DATA_REGION_LENGTH__+0x526>
     d24:	c7 cd       	rjmp	.-1138   	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	0d db       	rcall	.-2534   	; 0x344 <UPDI::updi_reset(bool)>
     d2a:	88 23       	and	r24, r24
     d2c:	09 f4       	brne	.+2      	; 0xd30 <__DATA_REGION_LENGTH__+0x530>
     d2e:	c2 cd       	rjmp	.-1148   	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:538

  /* If LOCKSTATUS is clear, the chip is unlocked */
  loop_until_sys_stat_is_clear(UPDI_SYS_LOCKSTATUS);
     d30:	80 e0       	ldi	r24, 0x00	; 0
     d32:	08 db       	rcall	.-2544   	; 0x344 <UPDI::updi_reset(bool)>
     d34:	88 23       	and	r24, r24
     d36:	09 f4       	brne	.+2      	; 0xd3a <__DATA_REGION_LENGTH__+0x53a>
     d38:	bd cd       	rjmp	.-1158   	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
     d3a:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:297
  send_bytes(set_ptr, sizeof(set_ptr));
  return RECV();
}

bool UPDI::is_cs_stat (uint8_t code, uint8_t check) {
  return check == (get_cs_stat(code) & check);
     d3c:	60 e0       	ldi	r22, 0x00	; 0
     d3e:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:367
bool UPDI::loop_until_key_stat_is_clear (uint8_t bitmap, uint16_t limit) {
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  uint16_t _back = _send_ptr;
  #endif
  do {
    if (!is_key_stat(bitmap)) return true;
     d40:	47 dc       	rcall	.-1906   	; 0x5d0 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.8/cores/megaAVR/api/delay_busywait.h:31
     d42:	10 e0       	ldi	r17, 0x00	; 0
     d44:	00 e0       	ldi	r16, 0x00	; 0
is_cs_stat():
     d46:	87 e0       	ldi	r24, 0x07	; 7
     d48:	59 da       	rcall	.-2894   	; 0x1fc <UPDI::get_cs_stat(unsigned char)>
loop_until_key_stat_is_clear():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:372
    #ifdef ENABLE_DEBUG_UPDI_SENDER
    _send_ptr = _back;
    #endif
    TIM::delay_50us();
  } while (--limit);
     d4a:	83 ff       	sbrs	r24, 3
     d4c:	07 c0       	rjmp	.+14     	; 0xd5c <__DATA_REGION_LENGTH__+0x55c>
delay_micros():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:548
  /* Chip erasure was successful */
  bit_set(UPDI_CONTROL, UPDI_ERFM_bp);

  /* Once the HV control and device is successfully unlocked, */
  /* you should be able to enter program mode. */
  if (!set_nvmprog_key()) return false;
     d4e:	f6 ea       	ldi	r31, 0xA6	; 166
     d50:	fa 95       	dec	r31
     d52:	f1 f7       	brne	.-4      	; 0xd50 <__DATA_REGION_LENGTH__+0x550>
     d54:	00 c0       	rjmp	.+0      	; 0xd56 <__DATA_REGION_LENGTH__+0x556>
loop_until_key_stat_is_clear():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:549
  if (!updi_reset(true) || !updi_reset(false)) return false;
     d56:	01 50       	subi	r16, 0x01	; 1
     d58:	11 09       	sbc	r17, r1
     d5a:	a9 f7       	brne	.-22     	; 0xd46 <__DATA_REGION_LENGTH__+0x546>
chip_erase():
     d5c:	e2 9a       	sbi	0x1c, 2	; 28
     d5e:	16 dc       	rcall	.-2004   	; 0x58c <UPDI::set_nvmprog_key()>
     d60:	88 23       	and	r24, r24
     d62:	09 f4       	brne	.+2      	; 0xd66 <__DATA_REGION_LENGTH__+0x566>
     d64:	a7 cd       	rjmp	.-1202   	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	ed da       	rcall	.-2598   	; 0x344 <UPDI::updi_reset(bool)>
     d6a:	88 23       	and	r24, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:550
  loop_until_sys_stat_is_clear(UPDI_SYS_LOCKSTATUS);
     d6c:	09 f4       	brne	.+2      	; 0xd70 <__DATA_REGION_LENGTH__+0x570>
     d6e:	a2 cd       	rjmp	.-1212   	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
     d70:	80 e0       	ldi	r24, 0x00	; 0
     d72:	e8 da       	rcall	.-2608   	; 0x344 <UPDI::updi_reset(bool)>
     d74:	88 23       	and	r24, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:551
  loop_until_sys_stat_is_set(UPDI_SYS_NVMPROG);
     d76:	09 f4       	brne	.+2      	; 0xd7a <__DATA_REGION_LENGTH__+0x57a>
     d78:	9d cd       	rjmp	.-1222   	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
     d7a:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:554

  /* After performing HV control, it is necessary to obtain SIB */
  bit_clear(UPDI_CONTROL, UPDI_INFO_bp);
     d7c:	60 e0       	ldi	r22, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:555
  bit_set(UPDI_CONTROL, UPDI_PROG_bp);
     d7e:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:556
  return enter_updi(true);
     d80:	27 dc       	rcall	.-1970   	; 0x5d0 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
     d82:	88 e0       	ldi	r24, 0x08	; 8
     d84:	0d dc       	rcall	.-2022   	; 0x5a0 <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.21]>
     d86:	e0 98       	cbi	0x1c, 0	; 28
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:528

// __attribute__((optimize("O0")))
bool UPDI::chip_erase (void) {
  /* If UPDI is prohibited, try HV control */
  if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) {
    HV_Pulse();
     d88:	e1 9a       	sbi	0x1c, 1	; 28
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	77 dc       	rcall	.-1810   	; 0x67c <UPDI::enter_updi(bool)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:725
          _result = chip_erase();
        }
        break;
      }
      case UPDI_CMD_GO : {
        _result = Target_Reset(true) && Target_Reset(false);
     d8e:	b0 cd       	rjmp	.-1184   	; 0x8f0 <__DATA_REGION_LENGTH__+0xf0>
     d90:	36 dc       	rcall	.-1940   	; 0x5fe <UPDI::HV_Pulse()>
     d92:	bd cf       	rjmp	.-134    	; 0xd0e <__DATA_REGION_LENGTH__+0x50e>
_ZN4UPDI7runtimeEh():
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	db da       	rcall	.-2634   	; 0x34e <UPDI::Target_Reset(bool)>
     d98:	88 23       	and	r24, r24
     d9a:	09 f4       	brne	.+2      	; 0xd9e <__DATA_REGION_LENGTH__+0x59e>
     d9c:	a9 cd       	rjmp	.-1198   	; 0x8f0 <__DATA_REGION_LENGTH__+0xf0>
     d9e:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:683

/**********************
 * UPDI authorization *
 **********************/

bool UPDI::updi_activate (void) {
     da0:	d6 da       	rcall	.-2644   	; 0x34e <UPDI::Target_Reset(bool)>
     da2:	a6 cd       	rjmp	.-1204   	; 0x8f0 <__DATA_REGION_LENGTH__+0xf0>

00000da4 <UPDI::updi_activate()>:
_ZN4UPDI13updi_activateEv():
     da4:	cf 93       	push	r28
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:684
  volatile uint8_t count = 4;
     da6:	df 93       	push	r29
     da8:	1f 92       	push	r1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:685
  while (--count && bit_is_clear(UPDI_CONTROL, UPDI_PROG_bp)) {
     daa:	cd b7       	in	r28, 0x3d	; 61
     dac:	de b7       	in	r29, 0x3e	; 62
     dae:	84 e0       	ldi	r24, 0x04	; 4
     db0:	89 83       	std	Y+1, r24	; 0x01
     db2:	89 81       	ldd	r24, Y+1	; 0x01
     db4:	81 50       	subi	r24, 0x01	; 1
     db6:	89 83       	std	Y+1, r24	; 0x01
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:696

    /* After the 2nd lap, forced HV control is allowed for JP short. */
    if (count < 2 && JTAG2::updi_desc.hvupdi_variant != '1' && !digitalRead(JP_SENSE_PIN))
      bit_set(UPDI_CONTROL, UPDI_FCHV_bp);
  }
  return bit_is_set(UPDI_CONTROL, UPDI_PROG_bp);
     db8:	88 23       	and	r24, r24
     dba:	11 f0       	breq	.+4      	; 0xdc0 <UPDI::updi_activate()+0x1c>
     dbc:	e1 9b       	sbis	0x1c, 1	; 28
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:697
}
     dbe:	07 c0       	rjmp	.+14     	; 0xdce <UPDI::updi_activate()+0x2a>
     dc0:	8c b3       	in	r24, 0x1c	; 28
     dc2:	86 95       	lsr	r24
     dc4:	81 70       	andi	r24, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:686
 **********************/

bool UPDI::updi_activate (void) {
  volatile uint8_t count = 4;
  while (--count && bit_is_clear(UPDI_CONTROL, UPDI_PROG_bp)) {
    if (setjmp(TIM::CONTEXT) == 0) {
     dc6:	0f 90       	pop	r0
     dc8:	df 91       	pop	r29
     dca:	cf 91       	pop	r28
     dcc:	08 95       	ret
     dce:	84 e4       	ldi	r24, 0x44	; 68
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:118
/*
 * Timeout control
 */

void TIM::Timeout_Start (uint16_t _ms) {
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     dd0:	98 e3       	ldi	r25, 0x38	; 56
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:119
    TCB0_CNT = 0;
     dd2:	ae d3       	rcall	.+1884   	; 0x1530 <setjmp>
     dd4:	89 2b       	or	r24, r25
     dd6:	31 f5       	brne	.+76     	; 0xe24 <UPDI::updi_activate()+0x80>
Timeout_Start():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:120
    TCB0_CCMP = _ms >> 2;
     dd8:	8f b7       	in	r24, 0x3f	; 63
__iCliRetVal():
     dda:	f8 94       	cli
Timeout_Start():
     ddc:	ea e8       	ldi	r30, 0x8A	; 138
     dde:	fa e0       	ldi	r31, 0x0A	; 10
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:121
    TCB0_INTCTRL = TCB_CAPT_bm;
     de0:	10 82       	st	Z, r1
     de2:	11 82       	std	Z+1, r1	; 0x01
     de4:	2f e1       	ldi	r18, 0x1F	; 31
     de6:	30 e0       	ldi	r19, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:122
    TCB0_INTFLAGS = TCB_CAPT_bm;
     de8:	ec e8       	ldi	r30, 0x8C	; 140
     dea:	fa e0       	ldi	r31, 0x0A	; 10
     dec:	20 83       	st	Z, r18
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:123
    TCB0_CTRLA = TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
     dee:	31 83       	std	Z+1, r19	; 0x01
     df0:	21 e0       	ldi	r18, 0x01	; 1
     df2:	e5 e8       	ldi	r30, 0x85	; 133
     df4:	fa e0       	ldi	r31, 0x0A	; 10
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:70
     df6:	20 83       	st	Z, r18
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:688
      TIM::Timeout_Start(125);
      enter_updi(false) && enter_prog();
     df8:	e6 e8       	ldi	r30, 0x86	; 134
     dfa:	fa e0       	ldi	r31, 0x0A	; 10
     dfc:	20 83       	st	Z, r18
     dfe:	2f e0       	ldi	r18, 0x0F	; 15
     e00:	e0 e8       	ldi	r30, 0x80	; 128
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:662
/******************************
 * Programming control starts *
 ******************************/

bool UPDI::enter_prog (void) {
  if (bit_is_clear(UPDI_CONTROL, UPDI_PROG_bp)) {
     e02:	fa e0       	ldi	r31, 0x0A	; 10
     e04:	20 83       	st	Z, r18
__iRestore():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:663
    loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
     e06:	8f bf       	out	0x3f, r24	; 63
_ZN4UPDI13updi_activateEv():
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	38 dc       	rcall	.-1936   	; 0x67c <UPDI::enter_updi(bool)>
     e0c:	88 23       	and	r24, r24
     e0e:	51 f0       	breq	.+20     	; 0xe24 <UPDI::updi_activate()+0x80>
enter_prog():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:664
    if (!(UPDI_LASTL & UPDI_SYS_NVMPROG)) {
     e10:	e1 99       	sbic	0x1c, 1	; 28
     e12:	08 c0       	rjmp	.+16     	; 0xe24 <UPDI::updi_activate()+0x80>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:673
      }
      if (!updi_reset(true) || !updi_reset(false)) return false;
      loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
      loop_until_sys_stat_is_set(UPDI_SYS_NVMPROG);
    }
    bit_set(UPDI_CONTROL, UPDI_INFO_bp);
     e14:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:674
    bit_set(UPDI_CONTROL, UPDI_PROG_bp);
     e16:	60 e0       	ldi	r22, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:690
  while (--count && bit_is_clear(UPDI_CONTROL, UPDI_PROG_bp)) {
    if (setjmp(TIM::CONTEXT) == 0) {
      TIM::Timeout_Start(125);
      enter_updi(false) && enter_prog();
    }
    TIM::Timeout_Stop();
     e18:	80 e2       	ldi	r24, 0x20	; 32
     e1a:	da db       	rcall	.-2124   	; 0x5d0 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:693

    /* After the 2nd lap, forced HV control is allowed for JP short. */
    if (count < 2 && JTAG2::updi_desc.hvupdi_variant != '1' && !digitalRead(JP_SENSE_PIN))
     e1c:	f3 9b       	sbis	0x1e, 3	; 30
     e1e:	10 c0       	rjmp	.+32     	; 0xe40 <UPDI::updi_activate()+0x9c>
     e20:	e0 9a       	sbi	0x1c, 0	; 28
     e22:	e1 9a       	sbi	0x1c, 1	; 28
_ZN4UPDI13updi_activateEv():
     e24:	d1 da       	rcall	.-2654   	; 0x3c8 <TIM::Timeout_Stop()>
     e26:	89 81       	ldd	r24, Y+1	; 0x01
     e28:	82 30       	cpi	r24, 0x02	; 2
     e2a:	08 f0       	brcs	.+2      	; 0xe2e <UPDI::updi_activate()+0x8a>
     e2c:	c2 cf       	rjmp	.-124    	; 0xdb2 <UPDI::updi_activate()+0xe>
     e2e:	80 91 5e 38 	lds	r24, 0x385E	; 0x80385e <JTAG2::updi_desc+0x2>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:694
      bit_set(UPDI_CONTROL, UPDI_FCHV_bp);
     e32:	81 33       	cpi	r24, 0x31	; 49
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:665

bool UPDI::enter_prog (void) {
  if (bit_is_clear(UPDI_CONTROL, UPDI_PROG_bp)) {
    loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
    if (!(UPDI_LASTL & UPDI_SYS_NVMPROG)) {
      if (UPDI_LASTL & UPDI_SYS_LOCKSTATUS) return false;
     e34:	09 f4       	brne	.+2      	; 0xe38 <UPDI::updi_activate()+0x94>
     e36:	bd cf       	rjmp	.-134    	; 0xdb2 <UPDI::updi_activate()+0xe>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:297
  send_bytes(set_ptr, sizeof(set_ptr));
  return RECV();
}

bool UPDI::is_cs_stat (uint8_t code, uint8_t check) {
  return check == (get_cs_stat(code) & check);
     e38:	53 99       	sbic	0x0a, 3	; 10
     e3a:	bb cf       	rjmp	.-138    	; 0xdb2 <UPDI::updi_activate()+0xe>
     e3c:	e4 9a       	sbi	0x1c, 4	; 28
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:666
bool UPDI::enter_prog (void) {
  if (bit_is_clear(UPDI_CONTROL, UPDI_PROG_bp)) {
    loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
    if (!(UPDI_LASTL & UPDI_SYS_NVMPROG)) {
      if (UPDI_LASTL & UPDI_SYS_LOCKSTATUS) return false;
      if (!is_key_stat(UPDI_KEY_NVMPROG)) {
     e3e:	b9 cf       	rjmp	.-142    	; 0xdb2 <UPDI::updi_activate()+0xe>
enter_prog():
     e40:	f0 99       	sbic	0x1e, 0	; 30
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:669
        if (!set_nvmprog_key()) return false;
      }
      if (!updi_reset(true) || !updi_reset(false)) return false;
     e42:	f0 cf       	rjmp	.-32     	; 0xe24 <UPDI::updi_activate()+0x80>
is_cs_stat():
     e44:	87 e0       	ldi	r24, 0x07	; 7
     e46:	da d9       	rcall	.-3148   	; 0x1fc <UPDI::get_cs_stat(unsigned char)>
enter_prog():
     e48:	84 ff       	sbrs	r24, 4
     e4a:	0f c0       	rjmp	.+30     	; 0xe6a <UPDI::updi_activate()+0xc6>
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	7a da       	rcall	.-2828   	; 0x344 <UPDI::updi_reset(bool)>
     e50:	88 23       	and	r24, r24
     e52:	41 f3       	breq	.-48     	; 0xe24 <UPDI::updi_activate()+0x80>
     e54:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:670
      loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
     e56:	76 da       	rcall	.-2836   	; 0x344 <UPDI::updi_reset(bool)>
     e58:	88 23       	and	r24, r24
     e5a:	21 f3       	breq	.-56     	; 0xe24 <UPDI::updi_activate()+0x80>
     e5c:	70 e0       	ldi	r23, 0x00	; 0
     e5e:	60 e0       	ldi	r22, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:671
      loop_until_sys_stat_is_set(UPDI_SYS_NVMPROG);
     e60:	80 e2       	ldi	r24, 0x20	; 32
     e62:	b6 db       	rcall	.-2196   	; 0x5d0 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
     e64:	88 e0       	ldi	r24, 0x08	; 8
     e66:	9c db       	rcall	.-2248   	; 0x5a0 <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.21]>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:667
  if (bit_is_clear(UPDI_CONTROL, UPDI_PROG_bp)) {
    loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
    if (!(UPDI_LASTL & UPDI_SYS_NVMPROG)) {
      if (UPDI_LASTL & UPDI_SYS_LOCKSTATUS) return false;
      if (!is_key_stat(UPDI_KEY_NVMPROG)) {
        if (!set_nvmprog_key()) return false;
     e68:	db cf       	rjmp	.-74     	; 0xe20 <UPDI::updi_activate()+0x7c>
     e6a:	90 db       	rcall	.-2272   	; 0x58c <UPDI::set_nvmprog_key()>
     e6c:	81 11       	cpse	r24, r1
     e6e:	ee cf       	rjmp	.-36     	; 0xe4c <UPDI::updi_activate()+0xa8>
     e70:	d9 cf       	rjmp	.-78     	; 0xe24 <UPDI::updi_activate()+0x80>

00000e72 <__vector_13>:
__vector_13():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:307
 *
 * There is no way to return to the interrupt source from here
 */

ISR(TCB0_INT_vect, ISR_NAKED) {
  __asm__ __volatile__ ("EOR R1,R1");
     e72:	11 24       	eor	r1, r1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:308
  TCB0_CTRLA = 0;
     e74:	10 92 80 0a 	sts	0x0A80, r1	; 0x800a80 <__RODATA_PM_OFFSET__+0x7f8a80>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:309
  TCB0_INTFLAGS = TCB_CAPT_bm;
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__RODATA_PM_OFFSET__+0x7f8a86>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:310
  longjmp(TIM::CONTEXT, 2);
     e7e:	62 e0       	ldi	r22, 0x02	; 2
     e80:	70 e0       	ldi	r23, 0x00	; 0
     e82:	84 e4       	ldi	r24, 0x44	; 68
     e84:	98 e3       	ldi	r25, 0x38	; 56
     e86:	74 d3       	rcall	.+1768   	; 0x1570 <longjmp>

00000e88 <__vector_6>:
__vector_6():
     e88:	1f 92       	push	r1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:253

/*
 * RTS monitoring upper and lower end interrupts
 */

ISR(portIntrruptVector(RTS_SENSE_PIN)) {
     e8a:	0f 92       	push	r0
     e8c:	0f b6       	in	r0, 0x3f	; 63
     e8e:	0f 92       	push	r0
     e90:	11 24       	eor	r1, r1
     e92:	2f 93       	push	r18
     e94:	3f 93       	push	r19
     e96:	4f 93       	push	r20
     e98:	5f 93       	push	r21
     e9a:	6f 93       	push	r22
     e9c:	7f 93       	push	r23
     e9e:	8f 93       	push	r24
     ea0:	9f 93       	push	r25
     ea2:	af 93       	push	r26
     ea4:	bf 93       	push	r27
     ea6:	ef 93       	push	r30
     ea8:	ff 93       	push	r31
     eaa:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__RODATA_PM_OFFSET__+0x7f8409>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:255
  portRegister(RTS_SENSE_PIN).INTFLAGS =
  portRegister(RTS_SENSE_PIN).INTFLAGS;
     eae:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <__RODATA_PM_OFFSET__+0x7f8409>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:254
/*
 * RTS monitoring upper and lower end interrupts
 */

ISR(portIntrruptVector(RTS_SENSE_PIN)) {
  portRegister(RTS_SENSE_PIN).INTFLAGS =
     eb2:	12 9b       	sbis	0x02, 2	; 2
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:257
  portRegister(RTS_SENSE_PIN).INTFLAGS;

  if ( digitalRead(RTS_SENSE_PIN) ) {
     eb4:	1a c0       	rjmp	.+52     	; 0xeea <__vector_6+0x62>
     eb6:	e9 99       	sbic	0x1d, 1	; 29
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:259
    /* Detection HIGH signal level */
    if (bit_is_clear(UPDI_NVMCTRL, 1)) {
     eb8:	05 c0       	rjmp	.+10     	; 0xec4 <__vector_6+0x3c>
     eba:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:263
      /* If no LOW level signal is detected, */
      /* Indicates that the console that was open at the time of POR was closed. */
      /* Reboot the system with the target in the reset state. */
      UPDI::Target_Reset(true);
     ebc:	48 da       	rcall	.-2928   	; 0x34e <UPDI::Target_Reset(bool)>
WDT_REBOOT():
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	8d da       	rcall	.-2790   	; 0x3dc <SYS::WDT_SET(unsigned char)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:153
void SYS::WDT_ON (void) { WDT_SET(WDT_PERIOD_8KCLK_gc); }

void SYS::WDT_Short (void) { WDT_SET(WDT_PERIOD_128CLK_gc); }

void SYS::WDT_REBOOT (void) {
  WDT_SET(WDT_PERIOD_8CLK_gc);
     ec2:	ff cf       	rjmp	.-2      	; 0xec2 <__vector_6+0x3a>
__vector_6():
     ec4:	e8 9a       	sbi	0x1d, 0	; 29
     ec6:	68 da       	rcall	.-2864   	; 0x398 <TIM::LED_HeartBeat()>
     ec8:	ff 91       	pop	r31
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:267
      SYS::WDT_REBOOT();
    }
    /* Otherwise, heartbeat the LED and raise the flag. */
    bit_set(UPDI_NVMCTRL, 0);
     eca:	ef 91       	pop	r30
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:268
    TIM::LED_HeartBeat();
     ecc:	bf 91       	pop	r27
     ece:	af 91       	pop	r26
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:298
    SYS::WDT_Short();
    /* This WDT is released when JTAG communication starts. */
    /* Once the time is up, the target will be released */
    /* from the reset state after rebooting the system. */
  }
}
     ed0:	9f 91       	pop	r25
     ed2:	8f 91       	pop	r24
     ed4:	7f 91       	pop	r23
     ed6:	6f 91       	pop	r22
     ed8:	5f 91       	pop	r21
     eda:	4f 91       	pop	r20
     edc:	3f 91       	pop	r19
     ede:	2f 91       	pop	r18
     ee0:	0f 90       	pop	r0
     ee2:	0f be       	out	0x3f, r0	; 63
     ee4:	0f 90       	pop	r0
     ee6:	1f 90       	pop	r1
     ee8:	18 95       	reti
     eea:	e8 9b       	sbis	0x1d, 0	; 29
     eec:	03 c0       	rjmp	.+6      	; 0xef4 <__vector_6+0x6c>
WDT_REBOOT():
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	75 da       	rcall	.-2838   	; 0x3dc <SYS::WDT_SET(unsigned char)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:270
    }
    /* Otherwise, heartbeat the LED and raise the flag. */
    bit_set(UPDI_NVMCTRL, 0);
    TIM::LED_HeartBeat();
  }
  else if (bit_is_set(UPDI_NVMCTRL, 0)) {
     ef2:	ff cf       	rjmp	.-2      	; 0xef2 <__vector_6+0x6a>
__vector_6():
     ef4:	e9 9a       	sbi	0x1d, 1	; 29
PG_Enable():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:153
     ef6:	48 9a       	sbi	0x09, 0	; 9
__vector_6():
     ef8:	37 da       	rcall	.-2962   	; 0x368 <TIM::LED_Flash()>
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	28 da       	rcall	.-2992   	; 0x34e <UPDI::Target_Reset(bool)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:280
  }
  else {
    /* Detection LOW signal level */
    /* The first low level signal keeps the target in reset state */
    /* and starts counting the time limit. */
    bit_set(UPDI_NVMCTRL, 1);
     efe:	21 9a       	sbi	0x04, 1	; 4
WDT_Short():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:96
/******************
 * Various ON/OFF *
 ******************/

void SYS::PG_Enable (void) {
  digitalWrite(PGEN_PIN, HIGH);
     f00:	85 e0       	ldi	r24, 0x05	; 5
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:287
    /* Disable UART passthrough */
    /* Prioritizes reception of JTAG communication */
    SYS::PG_Enable();

    /* LED blinks alternately */
    TIM::LED_Flash();
     f02:	6c da       	rcall	.-2856   	; 0x3dc <SYS::WDT_SET(unsigned char)>
     f04:	e1 cf       	rjmp	.-62     	; 0xec8 <__vector_6+0x40>

00000f06 <__vector_7>:
__vector_7():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:289

    UPDI::Target_Reset(true);
     f06:	30 da       	rcall	.-2976   	; 0x368 <TIM::LED_Flash()>
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	21 da       	rcall	.-3006   	; 0x34e <UPDI::Target_Reset(bool)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:290
    openDrainWrite(TRST_PIN, LOW);
     f0c:	88 e0       	ldi	r24, 0x08	; 8
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:150

void SYS::WDT_OFF (void) { WDT_SET(WDT_PERIOD_OFF_gc); }

void SYS::WDT_ON (void) { WDT_SET(WDT_PERIOD_8KCLK_gc); }

void SYS::WDT_Short (void) { WDT_SET(WDT_PERIOD_128CLK_gc); }
     f0e:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__RODATA_PM_OFFSET__+0x7f8806>
delay_micros():
     f12:	8f ec       	ldi	r24, 0xCF	; 207
     f14:	97 e0       	ldi	r25, 0x07	; 7
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:224
 * This handler never returns to the main process
 */

ISR(portIntrruptVector(SW_SENSE_PIN), ISR_NAKED) {
  /* LED is blinking */
  TIM::LED_Flash();
     f16:	01 97       	sbiw	r24, 0x01	; 1
     f18:	f1 f7       	brne	.-4      	; 0xf16 <__vector_7+0x10>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:227

  /* Target reset ON */
  UPDI::Target_Reset(true);
     f1a:	00 c0       	rjmp	.+0      	; 0xf1c <__vector_7+0x16>
     f1c:	00 00       	nop
__vector_7():
     f1e:	01 9a       	sbi	0x00, 1	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:228
  UPDI_USART.CTRLB = UPDI_USART_OFF;
     f20:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <__RODATA_PM_OFFSET__+0x7f8411>
     f24:	09 98       	cbi	0x01, 1	; 1
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.8/cores/megaAVR/api/delay_busywait.h:31
     f26:	21 9a       	sbi	0x04, 1	; 4
LED_TCB1():
     f28:	80 91 5b 38 	lds	r24, 0x385B	; 0x80385b <TIM::mode>
     f2c:	83 30       	cpi	r24, 0x03	; 3
     f2e:	99 f0       	breq	.+38     	; 0xf56 <__vector_7+0x50>
     f30:	83 e0       	ldi	r24, 0x03	; 3
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:234

  /* Chattering suppression */
  delay_micros(800);

  /* Keep target reset */
  pinMode(UPDI_TDAT_PIN, OUTPUT);
     f32:	80 93 5b 38 	sts	0x385B, r24	; 0x80385b <TIM::mode>
     f36:	89 ea       	ldi	r24, 0xA9	; 169
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:235
  digitalWrite(UPDI_TDAT_PIN, LOW);
     f38:	95 e5       	ldi	r25, 0x55	; 85
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:236
  openDrainWrite(TRST_PIN, LOW);
     f3a:	80 93 9c 0a 	sts	0x0A9C, r24	; 0x800a9c <__RODATA_PM_OFFSET__+0x7f8a9c>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:151
    LEDG_EVOUT = EVSYS_USER_CHANNEL2_gc;
  }
}

void LED_TCB1 (uint8_t mode, uint16_t ccmp) {
  if (TIM::mode != mode) {
     f3e:	90 93 9d 0a 	sts	0x0A9D, r25	; 0x800a9d <__RODATA_PM_OFFSET__+0x7f8a9d>
     f42:	10 92 9a 0a 	sts	0x0A9A, r1	; 0x800a9a <__RODATA_PM_OFFSET__+0x7f8a9a>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:152
    TIM::mode = mode;
     f46:	10 92 9b 0a 	sts	0x0A9B, r1	; 0x800a9b <__RODATA_PM_OFFSET__+0x7f8a9b>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:153
    TCB1_CCMP = ccmp;
     f4a:	8f e4       	ldi	r24, 0x4F	; 79
     f4c:	80 93 90 0a 	sts	0x0A90, r24	; 0x800a90 <__RODATA_PM_OFFSET__+0x7f8a90>
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <__RODATA_PM_OFFSET__+0x7f81a9>
__vector_7():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:154
    TCB1_CNT = 0;
     f56:	30 9b       	sbis	0x06, 0	; 6
     f58:	fe cf       	rjmp	.-4      	; 0xf56 <__vector_7+0x50>
WDT_REBOOT():
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	3f da       	rcall	.-2946   	; 0x3dc <SYS::WDT_SET(unsigned char)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:155
    TCB1_CTRLA = TCB_RUNSTDBY_bm | TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
     f5e:	ff cf       	rjmp	.-2      	; 0xf5e <__vector_7+0x58>

00000f60 <main>:
main():
     f60:	cf 93       	push	r28
     f62:	df 93       	push	r29
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:156
    LEDG_EVOUT = EVSYS_USER_CHANNEL0_gc;
     f64:	00 d0       	rcall	.+0      	; 0xf66 <main+0x6>
     f66:	cd b7       	in	r28, 0x3d	; 61
     f68:	de b7       	in	r29, 0x3e	; 62
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:242

  /* LED blinks alternately */
  TIM::LED_Blink();

  /* Waits while pressed */
  while (!digitalRead(SW_SENSE_PIN));
     f6a:	f8 94       	cli
initVariant():
     f6c:	24 e0       	ldi	r18, 0x04	; 4
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:153

void SYS::WDT_REBOOT (void) {
  WDT_SET(WDT_PERIOD_8CLK_gc);
     f6e:	e0 e1       	ldi	r30, 0x10	; 16
     f70:	f4 e0       	ldi	r31, 0x04	; 4
     f72:	83 e0       	ldi	r24, 0x03	; 3
     f74:	98 e0       	ldi	r25, 0x08	; 8
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.8/variants/tinyAVR2_20/variant.h:281
    "   DEC  R24     \n"
    "   BRNE 2b        " /* 3 loop PORTA to PORTC */
    : : "z" ((register8_t*)&PORTA_PIN0CTRL),
        "r" ((uint8_t)PORT_ISC_INPUT_DISABLE_gc)
      : "r24", "r25"
  );
     f76:	21 93       	st	Z+, r18
     f78:	9a 95       	dec	r25
     f7a:	e9 f7       	brne	.-6      	; 0xf76 <main+0x16>
     f7c:	78 96       	adiw	r30, 0x18	; 24
     f7e:	8a 95       	dec	r24
     f80:	c9 f7       	brne	.-14     	; 0xf74 <main+0x14>
_CLKCTRL_SETUP():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.8/cores/megaAVR/api/CLKCTRL_megaAVR.h:127
  // _PROTECTED_WRITE(CLKCTRL.MCLKCTRLA, CLKCTRL_CLKSEL_OSC20M_gc);

#else

  #if defined(_CLKCTRL_PDIV_)
  _PROTECTED_WRITE(CLKCTRL_MCLKCTRLB, _CLKCTRL_PDIV_ | CLKCTRL_PEN_bm);
     f82:	88 ed       	ldi	r24, 0xD8	; 216
     f84:	41 e0       	ldi	r20, 0x01	; 1
     f86:	50 e0       	ldi	r21, 0x00	; 0
     f88:	84 bf       	out	0x34, r24	; 52
     f8a:	40 93 61 00 	sts	0x0061, r20	; 0x800061 <__RODATA_PM_OFFSET__+0x7f8061>
setup():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:17
#include <avr/io.h>

void SYS::setup (void) {

  /* Target reset release */
  pinControlRegister(TRST_PIN) = TRST_PIN_CONFIG;
     f8e:	8c e0       	ldi	r24, 0x0C	; 12
     f90:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <__RODATA_PM_OFFSET__+0x7f8431>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:20

  /* Outgoing port */
  PORTA_DIRSET = _BV(pinPosition(HVP1_PIN))
     f94:	88 ef       	ldi	r24, 0xF8	; 248
     f96:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <__RODATA_PM_OFFSET__+0x7f8401>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:25
               | _BV(pinPosition(HVP2_PIN))
               | _BV(pinPosition(HV12_PIN))
               | _BV(pinPosition(LEDG_PIN))
               | _BV(pinPosition(LEDY_PIN));
  PORTB_DIRSET = _BV(pinPosition(HV8_PIN));
     f9a:	80 e2       	ldi	r24, 0x20	; 32
     f9c:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__RODATA_PM_OFFSET__+0x7f8421>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:28

  /* USART switching LOW=Target opening (PG_Disable) */
  PORTC_DIRSET = _BV(pinPosition(PGEN_PIN));
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <__RODATA_PM_OFFSET__+0x7f8441>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:31

  /* LED output */
  LEDG_EVOUT_MUX = LEDG_EVOUT_ALT;          /* OUT:PA7 */
     fa6:	80 93 e0 05 	sts	0x05E0, r24	; 0x8005e0 <__RODATA_PM_OFFSET__+0x7f85e0>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:32
  PORTMUX_CCLROUTEA = PORTMUX_LUT3_ALT1_gc; /* OUT:PA5 IN:PC0,PC1,PC2 */
     faa:	98 e0       	ldi	r25, 0x08	; 8
     fac:	90 93 e1 05 	sts	0x05E1, r25	; 0x8005e1 <__RODATA_PM_OFFSET__+0x7f85e1>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:33
  PORTA_OUTSET = _BV(pinPosition(LEDG_PIN))
     fb0:	30 ea       	ldi	r19, 0xA0	; 160
     fb2:	30 93 05 04 	sts	0x0405, r19	; 0x800405 <__RODATA_PM_OFFSET__+0x7f8405>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:37
               | _BV(pinPosition(LEDY_PIN));

  /* USART Alternative Selection */
  PORTMUX_USARTROUTEA = JTAG_PMUX_ALT | UPDI_PMUX_ALT;
     fb6:	35 e0       	ldi	r19, 0x05	; 5
     fb8:	30 93 e2 05 	sts	0x05E2, r19	; 0x8005e2 <__RODATA_PM_OFFSET__+0x7f85e2>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:40

  /* JTAG port */
  pinControlRegister(JTAG_TXD_PIN) = JTAG_TXD_CONFIG;
     fbc:	90 93 52 04 	sts	0x0452, r25	; 0x800452 <__RODATA_PM_OFFSET__+0x7f8452>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:41
  pinControlRegister(JTAG_RXD_PIN) = JTAG_RXD_CONFIG;
     fc0:	90 93 51 04 	sts	0x0451, r25	; 0x800451 <__RODATA_PM_OFFSET__+0x7f8451>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:44

  /* UPDI port */
  pinControlRegister(UPDI_TDAT_PIN) = UPDI_TDAT_CONFIG;
     fc4:	90 93 11 04 	sts	0x0411, r25	; 0x800411 <__RODATA_PM_OFFSET__+0x7f8411>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:47

  /* HV generator */
  pinControlRegister(HVP1_PIN) = HVP1_PIN_CONFIG;
     fc8:	20 93 13 04 	sts	0x0413, r18	; 0x800413 <__RODATA_PM_OFFSET__+0x7f8413>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:48
  pinControlRegister(HVP2_PIN) = HVP2_PIN_CONFIG;
     fcc:	44 e8       	ldi	r20, 0x84	; 132
     fce:	40 93 14 04 	sts	0x0414, r20	; 0x800414 <__RODATA_PM_OFFSET__+0x7f8414>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:51

  /* SW1 Interrupt permission */
  pinControlRegister(SW_SENSE_PIN) = SW_SENSE_CONFIG;
     fd2:	4d e0       	ldi	r20, 0x0D	; 13
     fd4:	40 93 30 04 	sts	0x0430, r20	; 0x800430 <__RODATA_PM_OFFSET__+0x7f8430>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:54

  /* RTS monitor */
  pinControlRegister(RTS_SENSE_PIN) = RTS_SENSE_CONFIG;
     fd8:	49 e0       	ldi	r20, 0x09	; 9
     fda:	40 93 12 04 	sts	0x0412, r20	; 0x800412 <__RODATA_PM_OFFSET__+0x7f8412>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:57

  /* JP1 monitor */
  pinControlRegister(JP_SENSE_PIN) = JP_SENSE_CONFIG;
     fde:	90 93 53 04 	sts	0x0453, r25	; 0x800453 <__RODATA_PM_OFFSET__+0x7f8453>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:60

  /* Initialize state variables */
  UPDI_CONTROL = 0;
     fe2:	1c ba       	out	0x1c, r1	; 28
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:61
  UPDI_NVMCTRL = 0;
     fe4:	1d ba       	out	0x1d, r1	; 29
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:46

void TIM::setup (void) {

  /* EVSYS signal distribution */

  EVSYS_CHANNEL0 = EVSYS_CHANNEL0_CCL_LUT0_gc;
     fe6:	90 e1       	ldi	r25, 0x10	; 16
     fe8:	90 93 90 01 	sts	0x0190, r25	; 0x800190 <__RODATA_PM_OFFSET__+0x7f8190>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:47
  EVSYS_CHANNEL1 = EVSYS_CHANNEL1_RTC_PIT_DIV128_gc;
     fec:	9a e0       	ldi	r25, 0x0A	; 10
     fee:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <__RODATA_PM_OFFSET__+0x7f8191>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:48
  EVSYS_CHANNEL2 = EVSYS_CHANNEL2_CCL_LUT1_gc;
     ff2:	91 e1       	ldi	r25, 0x11	; 17
     ff4:	90 93 92 01 	sts	0x0192, r25	; 0x800192 <__RODATA_PM_OFFSET__+0x7f8192>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:49
  EVSYS_CHANNEL3 = EVSYS_CHANNEL3_PORTA_PIN5_gc;
     ff8:	9d e4       	ldi	r25, 0x4D	; 77
     ffa:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <__RODATA_PM_OFFSET__+0x7f8193>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:50
  EVSYS_USERTCB0COUNT = EVSYS_USER_CHANNEL1_gc;
     ffe:	92 e0       	ldi	r25, 0x02	; 2
    1000:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <__RODATA_PM_OFFSET__+0x7f81b1>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:51
  EVSYS_USERTCB1COUNT = EVSYS_USER_CHANNEL1_gc;
    1004:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <__RODATA_PM_OFFSET__+0x7f81b3>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:52
  EVSYS_USERCCLLUT0A  = EVSYS_USER_CHANNEL3_gc;
    1008:	20 93 a0 01 	sts	0x01A0, r18	; 0x8001a0 <__RODATA_PM_OFFSET__+0x7f81a0>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:53
  EVSYS_USERCCLLUT1A  = EVSYS_USER_CHANNEL3_gc;
    100c:	20 93 a2 01 	sts	0x01A2, r18	; 0x8001a2 <__RODATA_PM_OFFSET__+0x7f81a2>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:58

  /* CCL/LUT construction */

  /* TRUTH0: 010 is ON */
  CCL_TRUTH0    = CCL_TRUTH_2_bm;
    1010:	20 93 cb 01 	sts	0x01CB, r18	; 0x8001cb <__RODATA_PM_OFFSET__+0x7f81cb>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:59
  CCL_LUT0CTRLC = CCL_INSEL0_EVENTA_gc;
    1014:	93 e0       	ldi	r25, 0x03	; 3
    1016:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <__RODATA_PM_OFFSET__+0x7f81ca>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:60
  CCL_LUT0CTRLB = CCL_INSEL1_TCB1_gc;                       /* IN1:POS */
    101a:	20 ec       	ldi	r18, 0xC0	; 192
    101c:	20 93 c9 01 	sts	0x01C9, r18	; 0x8001c9 <__RODATA_PM_OFFSET__+0x7f81c9>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:61
  CCL_LUT0CTRLA = CCL_ENABLE_bm;
    1020:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <__RODATA_PM_OFFSET__+0x7f81c8>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:64

  /* TRUTH1: 001 010 is ON */
  CCL_TRUTH1    = CCL_TRUTH_1_bm | CCL_TRUTH_2_bm;
    1024:	26 e0       	ldi	r18, 0x06	; 6
    1026:	20 93 cf 01 	sts	0x01CF, r18	; 0x8001cf <__RODATA_PM_OFFSET__+0x7f81cf>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:65
  CCL_LUT1CTRLC = CCL_INSEL0_EVENTA_gc;
    102a:	90 93 ce 01 	sts	0x01CE, r25	; 0x8001ce <__RODATA_PM_OFFSET__+0x7f81ce>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:66
  CCL_LUT1CTRLB = CCL_INSEL0_TCA0_gc | CCL_INSEL1_TCB1_gc;  /* IN0:POS IN1:POS */
    102e:	9a ec       	ldi	r25, 0xCA	; 202
    1030:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <__RODATA_PM_OFFSET__+0x7f81cd>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:67
  CCL_LUT1CTRLA = CCL_ENABLE_bm;
    1034:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <__RODATA_PM_OFFSET__+0x7f81cc>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:73

  /* TRUTH3: 001 010 is ON */
  /* CCL_INSEL0_USART0_gc : USART0TX normal HIGH */
  /* CCL_INSEL1_IO_gc     : USART1RX normal HIGH */
  /* CCL_INSEL2_IO_gc     : USART1TX normal HIGH */
  CCL_TRUTH3    = (uint8_t) ~CCL_TRUTH_7_bm;
    1038:	9f e7       	ldi	r25, 0x7F	; 127
    103a:	90 93 d7 01 	sts	0x01D7, r25	; 0x8001d7 <__RODATA_PM_OFFSET__+0x7f81d7>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:74
  CCL_LUT3CTRLC = CCL_INSEL2_IO_gc;
    103e:	30 93 d6 01 	sts	0x01D6, r19	; 0x8001d6 <__RODATA_PM_OFFSET__+0x7f81d6>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:75
  CCL_LUT3CTRLB = CCL_INSEL0_USART0_gc | CCL_INSEL1_IO_gc;
    1042:	98 e5       	ldi	r25, 0x58	; 88
    1044:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <__RODATA_PM_OFFSET__+0x7f81d5>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:76
  CCL_LUT3CTRLA = CCL_ENABLE_bm | CCL_OUTEN_bm;
    1048:	91 e4       	ldi	r25, 0x41	; 65
    104a:	90 93 d4 01 	sts	0x01D4, r25	; 0x8001d4 <__RODATA_PM_OFFSET__+0x7f81d4>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:79

  /* CCL enable */
  CCL_CTRLA = CCL_RUNSTDBY_bm | CCL_ENABLE_bm;
    104e:	90 93 c0 01 	sts	0x01C0, r25	; 0x8001c0 <__RODATA_PM_OFFSET__+0x7f81c0>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:82

  /* RTC_PIT enable */
  RTC_PITCTRLA = RTC_PITEN_bm;
    1052:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__RODATA_PM_OFFSET__+0x7f8150>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:87

  /* Timer */

  /* TCA0 */
  TCA0_SPLIT_CTRLD = TCA_SPLIT_SPLITM_bm;
    1056:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <__RODATA_PM_OFFSET__+0x7f8a03>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:88
  TCA0_SPLIT_LPER  = TCA0_STEP - 2;
    105a:	99 e8       	ldi	r25, 0x89	; 137
    105c:	90 93 26 0a 	sts	0x0A26, r25	; 0x800a26 <__RODATA_PM_OFFSET__+0x7f8a26>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:89
  TCA0_SPLIT_LCMP0 = TCA0_STEP / 2;
    1060:	95 e4       	ldi	r25, 0x45	; 69
    1062:	90 93 28 0a 	sts	0x0A28, r25	; 0x800a28 <__RODATA_PM_OFFSET__+0x7f8a28>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:90
  TCA0_SPLIT_HPER  = 1;
    1066:	80 93 27 0a 	sts	0x0A27, r24	; 0x800a27 <__RODATA_PM_OFFSET__+0x7f8a27>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:91
  TCA0_SPLIT_HCMP0 = 1;     /* WOA3=PA3 */
    106a:	80 93 29 0a 	sts	0x0A29, r24	; 0x800a29 <__RODATA_PM_OFFSET__+0x7f8a29>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:92
  TCA0_SPLIT_HCMP1 = 1;     /* WOA4=PA4 */
    106e:	80 93 2b 0a 	sts	0x0A2B, r24	; 0x800a2b <__RODATA_PM_OFFSET__+0x7f8a2b>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:93
  TCA0_SPLIT_CTRLA = TCA_SPLIT_RUNSTDBY_bm | TCA_SPLIT_ENABLE_bm | TCA_SPLIT_CLKSEL_DIV1024_gc;
    1072:	8f e8       	ldi	r24, 0x8F	; 143
    1074:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__RODATA_PM_OFFSET__+0x7f8a00>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:96

  /* TCB1 */
  TCB1_CTRLB = TCB_CNTMODE_PWM8_gc;
    1078:	87 e0       	ldi	r24, 0x07	; 7
    107a:	80 93 91 0a 	sts	0x0A91, r24	; 0x800a91 <__RODATA_PM_OFFSET__+0x7f8a91>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:105
   *
   * Heartbeat with RTS Deactive
   * Flash if RTS Active
   */

  if ( digitalRead(RTS_SENSE_PIN) ) {
    107e:	12 9b       	sbis	0x02, 2	; 2
    1080:	89 c0       	rjmp	.+274    	; 0x1194 <main+0x234>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:106
    LED_HeartBeat();
    1082:	8a d9       	rcall	.-3308   	; 0x398 <TIM::LED_HeartBeat()>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:452
/******************
 * Initialization *
 ******************/

void JTAG2::setup (void) {
  JTAG_USART.BAUD = pgm_read_word( &BAUD_TABLE[BAUD_19200] );
    1084:	ed e9       	ldi	r30, 0x9D	; 157
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	85 91       	lpm	r24, Z+
    108a:	94 91       	lpm	r25, Z
    108c:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__RODATA_PM_OFFSET__+0x7f8828>
    1090:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__RODATA_PM_OFFSET__+0x7f8829>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:453
  JTAG_USART.CTRLA = JTAG_USART_CTRLA;
    1094:	10 92 25 08 	sts	0x0825, r1	; 0x800825 <__RODATA_PM_OFFSET__+0x7f8825>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:454
  JTAG_USART.CTRLC = JTAG_USART_CTRLC;
    1098:	83 e0       	ldi	r24, 0x03	; 3
    109a:	80 93 27 08 	sts	0x0827, r24	; 0x800827 <__RODATA_PM_OFFSET__+0x7f8827>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:455
  JTAG_USART.CTRLB = JTAG_USART_OFF;
    109e:	88 e8       	ldi	r24, 0x88	; 136
    10a0:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__RODATA_PM_OFFSET__+0x7f8826>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:70
  }
  #endif
}

void UPDI::setup (void) {
  UPDI_USART.BAUD  = UPDI_BAUD_CALC;
    10a4:	80 eb       	ldi	r24, 0xB0	; 176
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__RODATA_PM_OFFSET__+0x7f8808>
    10ac:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__RODATA_PM_OFFSET__+0x7f8809>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:71
  UPDI_USART.CTRLA = UPDI_USART_CTRLA;
    10b0:	8a e0       	ldi	r24, 0x0A	; 10
    10b2:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__RODATA_PM_OFFSET__+0x7f8805>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:72
  UPDI_USART.CTRLC = UPDI_USART_CTRLC;
    10b6:	8b e2       	ldi	r24, 0x2B	; 43
    10b8:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <__RODATA_PM_OFFSET__+0x7f8807>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:73
  UPDI_USART.CTRLB = UPDI_USART_ON;
    10bc:	88 ec       	ldi	r24, 0xC8	; 200
    10be:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__RODATA_PM_OFFSET__+0x7f8806>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:74
  bit_clear(UPDI_CONTROL, UPDI_CLKU_bp);
    10c2:	e6 98       	cbi	0x1c, 6	; 28
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:77

  /* Release target from reset state after resetting WDT timeout */
  if ( bit_is_set(RSTCTRL_RSTFR, RSTCTRL_WDRF_bp) ) Target_Reset(false);
    10c4:	80 91 40 00 	lds	r24, 0x0040	; 0x800040 <__RODATA_PM_OFFSET__+0x7f8040>
    10c8:	83 ff       	sbrs	r24, 3
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <main+0x170>
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	3f d9       	rcall	.-3458   	; 0x34e <UPDI::Target_Reset(bool)>
ready():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:121
 * Run at the end of the boot sequence *
 ***************************************/

void SYS::ready (void) {
  /* Clears the reset state flag. */
  RSTCTRL_RSTFR = RSTCTRL_RSTFR;
    10d0:	80 91 40 00 	lds	r24, 0x0040	; 0x800040 <__RODATA_PM_OFFSET__+0x7f8040>
    10d4:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__RODATA_PM_OFFSET__+0x7f8040>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:125

  /* Clear asynchronous interrupts detected during initialization */
  portRegister(RTS_SENSE_PIN).INTFLAGS =
  portRegister(RTS_SENSE_PIN).INTFLAGS;
    10d8:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__RODATA_PM_OFFSET__+0x7f8409>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:124
void SYS::ready (void) {
  /* Clears the reset state flag. */
  RSTCTRL_RSTFR = RSTCTRL_RSTFR;

  /* Clear asynchronous interrupts detected during initialization */
  portRegister(RTS_SENSE_PIN).INTFLAGS =
    10dc:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <__RODATA_PM_OFFSET__+0x7f8409>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:128
  portRegister(RTS_SENSE_PIN).INTFLAGS;

  /*** Hibernation mode ***/
  set_sleep_mode(SLEEP_MODE_STANDBY);
    10e0:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <__RODATA_PM_OFFSET__+0x7f8050>
    10e4:	89 7f       	andi	r24, 0xF9	; 249
    10e6:	82 60       	ori	r24, 0x02	; 2
    10e8:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__RODATA_PM_OFFSET__+0x7f8050>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:131

  /* Interrupt permission */
  sei();
    10ec:	78 94       	sei
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:134

  /* It stays in a low power state until the first interrupt occurs. */
  sleep_enable();
    10ee:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <__RODATA_PM_OFFSET__+0x7f8050>
    10f2:	81 60       	ori	r24, 0x01	; 1
    10f4:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__RODATA_PM_OFFSET__+0x7f8050>
LED_TCB1():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:153
}

void LED_TCB1 (uint8_t mode, uint16_t ccmp) {
  if (TIM::mode != mode) {
    TIM::mode = mode;
    TCB1_CCMP = ccmp;
    10f8:	45 e1       	ldi	r20, 0x15	; 21
    10fa:	64 2e       	mov	r6, r20
    10fc:	44 e0       	ldi	r20, 0x04	; 4
    10fe:	74 2e       	mov	r7, r20
get_parameter():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:255
      }
      case PAR_EMU_MODE : {
        /* This response code indicates an UPDI-only implementation */
        /* In normal JTAGICEmkII this is never queried */
        packet.body[1] = 0x55;
        packet.size_word[0] = 2;
    1100:	52 e0       	ldi	r21, 0x02	; 2
    1102:	25 2e       	mov	r2, r21
    1104:	31 2c       	mov	r3, r1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:265
        packet.size_word[0] = 2;
        break;
      }
      case PAR_VTARGET : {
        _CAPS16(packet.body[1])->word = SYS::get_vcc();
        packet.size_word[0] = 3;
    1106:	63 e0       	ldi	r22, 0x03	; 3
    1108:	46 2e       	mov	r4, r22
    110a:	51 2c       	mov	r5, r1
sign_on_response():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:168
   * SIGN_ON Response *
   ********************/

  void sign_on_response (void) {
    UPDI_NVMCTRL = 0;
    packet.size = sizeof(sign_on_resp);
    110c:	7d e1       	ldi	r23, 0x1D	; 29
    110e:	87 2e       	mov	r8, r23
    1110:	91 2c       	mov	r9, r1
    1112:	a1 2c       	mov	r10, r1
    1114:	b1 2c       	mov	r11, r1
get():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:85
  /*******************
   * Local functions *
   *******************/

  uint8_t get (void) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_RXCIF_bp);
    1116:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
    111a:	87 ff       	sbrs	r24, 7
    111c:	fc cf       	rjmp	.-8      	; 0x1116 <main+0x1b6>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:86
    return JTAG_USART.RXDATAL;
    111e:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__RODATA_PM_OFFSET__+0x7f8820>
packet_receive():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:125
    uint16_t _crc = ~0;
    uint8_t *p = (uint8_t*) &packet.soh;
    uint8_t *q = (uint8_t*) &packet.soh;

    /* Waiting for reception (infinite loop) */
    while (get() != MESSAGE_START);
    1122:	8b 31       	cpi	r24, 0x1B	; 27
    1124:	c1 f7       	brne	.-16     	; 0x1116 <main+0x1b6>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:126
    (*p++) = MESSAGE_START;
    1126:	80 93 88 38 	sts	0x3888, r24	; 0x803888 <JTAG2::packet>
    112a:	e9 e8       	ldi	r30, 0x89	; 137
    112c:	f8 e3       	ldi	r31, 0x38	; 56
get():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:85
  /*******************
   * Local functions *
   *******************/

  uint8_t get (void) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_RXCIF_bp);
    112e:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
    1132:	87 ff       	sbrs	r24, 7
    1134:	fc cf       	rjmp	.-8      	; 0x112e <main+0x1ce>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:86
    return JTAG_USART.RXDATAL;
    1136:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__RODATA_PM_OFFSET__+0x7f8820>
packet_receive():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:129
    /* Waiting for reception (infinite loop) */
    while (get() != MESSAGE_START);
    (*p++) = MESSAGE_START;

    /* First 7bytes */
    for (int8_t i = 0; i < 7; i++) *p++ = get();
    113a:	81 93       	st	Z+, r24
    113c:	28 e3       	ldi	r18, 0x38	; 56
    113e:	e0 39       	cpi	r30, 0x90	; 144
    1140:	f2 07       	cpc	r31, r18
    1142:	a9 f7       	brne	.-22     	; 0x112e <main+0x1ce>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:132

    /* STX confirmation */
    if (packet.stx != TOKEN) return false;
    1144:	80 91 8f 38 	lds	r24, 0x388F	; 0x80388f <JTAG2::packet+0x7>
    1148:	8e 30       	cpi	r24, 0x0E	; 14
    114a:	29 f7       	brne	.-54     	; 0x1116 <main+0x1b6>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:135

    /* Check packet length */
    if (packet.size > sizeof(packet.body)) return false;
    114c:	80 91 8b 38 	lds	r24, 0x388B	; 0x80388b <JTAG2::packet+0x3>
    1150:	90 91 8c 38 	lds	r25, 0x388C	; 0x80388c <JTAG2::packet+0x4>
    1154:	a0 91 8d 38 	lds	r26, 0x388D	; 0x80388d <JTAG2::packet+0x5>
    1158:	b0 91 8e 38 	lds	r27, 0x388E	; 0x80388e <JTAG2::packet+0x6>
    115c:	85 31       	cpi	r24, 0x15	; 21
    115e:	92 40       	sbci	r25, 0x02	; 2
    1160:	a1 05       	cpc	r26, r1
    1162:	b1 05       	cpc	r27, r1
    1164:	c0 f6       	brcc	.-80     	; 0x1116 <main+0x1b6>
    1166:	00 e9       	ldi	r16, 0x90	; 144
    1168:	18 e3       	ldi	r17, 0x38	; 56
    116a:	68 01       	movw	r12, r16
main():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:138

    /* receive the rest */
    for (int16_t j = -2; j < packet.size_word[0]; j++) *p++ = get();
    116c:	8e ef       	ldi	r24, 0xFE	; 254
    116e:	9f ef       	ldi	r25, 0xFF	; 255
packet_receive():
    1170:	20 91 8b 38 	lds	r18, 0x388B	; 0x80388b <JTAG2::packet+0x3>
    1174:	30 91 8c 38 	lds	r19, 0x388C	; 0x80388c <JTAG2::packet+0x4>
    1178:	82 17       	cp	r24, r18
    117a:	93 07       	cpc	r25, r19
    117c:	6c f4       	brge	.+26     	; 0x1198 <main+0x238>
get():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:85
  /*******************
   * Local functions *
   *******************/

  uint8_t get (void) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_RXCIF_bp);
    117e:	20 91 24 08 	lds	r18, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
    1182:	27 ff       	sbrs	r18, 7
    1184:	fc cf       	rjmp	.-8      	; 0x117e <main+0x21e>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:86
    return JTAG_USART.RXDATAL;
    1186:	20 91 20 08 	lds	r18, 0x0820	; 0x800820 <__RODATA_PM_OFFSET__+0x7f8820>
packet_receive():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:138

    /* Check packet length */
    if (packet.size > sizeof(packet.body)) return false;

    /* receive the rest */
    for (int16_t j = -2; j < packet.size_word[0]; j++) *p++ = get();
    118a:	d6 01       	movw	r26, r12
    118c:	2d 93       	st	X+, r18
    118e:	6d 01       	movw	r12, r26
    1190:	01 96       	adiw	r24, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:109

  if ( digitalRead(RTS_SENSE_PIN) ) {
    LED_HeartBeat();
  }
  else {
    LED_Flash();
    1192:	ee cf       	rjmp	.-36     	; 0x1170 <main+0x210>
setup():
    1194:	e9 d8       	rcall	.-3630   	; 0x368 <TIM::LED_Flash()>
    1196:	76 cf       	rjmp	.-276    	; 0x1084 <main+0x124>
packet_receive():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:138
    1198:	38 e8       	ldi	r19, 0x88	; 136
    119a:	e3 2e       	mov	r14, r19
    119c:	38 e3       	ldi	r19, 0x38	; 56
    119e:	f3 2e       	mov	r15, r19
main():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:120
  /****************
   * JTAG Receive *
   ****************/

  bool packet_receive (void) {
    uint16_t _crc = ~0;
    11a0:	8f ef       	ldi	r24, 0xFF	; 255
    11a2:	9f ef       	ldi	r25, 0xFF	; 255
packet_receive():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:141

    /* receive the rest */
    for (int16_t j = -2; j < packet.size_word[0]; j++) *p++ = get();

    /* CRC check when receive buffer is filled */
    while (p != q) _crc = crc16_update(_crc, *q++);
    11a4:	ec 14       	cp	r14, r12
    11a6:	fd 04       	cpc	r15, r13
    11a8:	29 f0       	breq	.+10     	; 0x11b4 <main+0x254>
    11aa:	f7 01       	movw	r30, r14
    11ac:	61 91       	ld	r22, Z+
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:100
  void flush (void) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_TXCIF_bp);
  }

  uint16_t crc16_update(uint16_t _crc, uint8_t _data) {
    return _crc_ccitt_update(_crc, _data);
    11ae:	7f 01       	movw	r14, r30
crc16_update():
    11b0:	6d d9       	rcall	.-3366   	; 0x48c <_crc_ccitt_update(unsigned int, unsigned char)>
    11b2:	f8 cf       	rjmp	.-16     	; 0x11a4 <main+0x244>
wakeup_jtag():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:478
 * Main loop *
 *************/

void JTAG2::wakeup_jtag (void) {
  for (;;) {
    if (packet_receive()) process_command();
    11b4:	89 2b       	or	r24, r25
    11b6:	09 f0       	breq	.+2      	; 0x11ba <main+0x25a>
    11b8:	ae cf       	rjmp	.-164    	; 0x1116 <main+0x1b6>
process_command():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:332
  /****************
   * JTAG Process *
   ****************/

  inline void process_command (void) {
    wdt_reset();
    11ba:	a8 95       	wdr
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:336
    #ifdef ENABLE_DEBUG_UPDI_SENDER
    UPDI::_send_buf_clear();
    #endif
    uint8_t message_id = packet.body[MESSAGE_ID];
    11bc:	80 91 90 38 	lds	r24, 0x3890	; 0x803890 <JTAG2::packet+0x8>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:337
    switch (message_id) {
    11c0:	8b 30       	cpi	r24, 0x0B	; 11
    11c2:	09 f4       	brne	.+2      	; 0x11c6 <main+0x266>
    11c4:	1c c1       	rjmp	.+568    	; 0x13fe <main+0x49e>
    11c6:	08 f0       	brcs	.+2      	; 0x11ca <main+0x26a>
    11c8:	4f c0       	rjmp	.+158    	; 0x1268 <main+0x308>
    11ca:	83 30       	cpi	r24, 0x03	; 3
    11cc:	09 f4       	brne	.+2      	; 0x11d0 <main+0x270>
    11ce:	c0 c0       	rjmp	.+384    	; 0x1350 <main+0x3f0>
    11d0:	08 f0       	brcs	.+2      	; 0x11d4 <main+0x274>
    11d2:	40 c0       	rjmp	.+128    	; 0x1254 <main+0x2f4>
    11d4:	81 30       	cpi	r24, 0x01	; 1
    11d6:	09 f4       	brne	.+2      	; 0x11da <main+0x27a>
    11d8:	61 c0       	rjmp	.+194    	; 0x129c <main+0x33c>
    11da:	08 f4       	brcc	.+2      	; 0x11de <main+0x27e>
    11dc:	95 c1       	rjmp	.+810    	; 0x1508 <main+0x5a8>
set_parameter():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:190
   * CMND_SET_PARAMETER *
   **********************/

  bool set_parameter (void) {
    uint8_t param_val = packet.body[RSP_DATA + 1];
    switch ( packet.body[RSP_DATA] ) {
    11de:	80 91 91 38 	lds	r24, 0x3891	; 0x803891 <JTAG2::packet+0x9>
    11e2:	85 30       	cpi	r24, 0x05	; 5
    11e4:	09 f0       	breq	.+2      	; 0x11e8 <main+0x288>
    11e6:	49 c0       	rjmp	.+146    	; 0x127a <main+0x31a>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:189
  /**********************
   * CMND_SET_PARAMETER *
   **********************/

  bool set_parameter (void) {
    uint8_t param_val = packet.body[RSP_DATA + 1];
    11e8:	d0 90 92 38 	lds	r13, 0x3892	; 0x803892 <JTAG2::packet+0xa>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:194
    switch ( packet.body[RSP_DATA] ) {
      /* JTAG interface speed */
      case PAR_BAUD_RATE : {
        /* Compatible range confirmation */
        if ((param_val >= BAUD_LOWER) && (param_val <= BAUD_UPPER)) {
    11ec:	8e ef       	ldi	r24, 0xFE	; 254
    11ee:	8d 0d       	add	r24, r13
    11f0:	88 31       	cpi	r24, 0x18	; 24
    11f2:	08 f0       	brcs	.+2      	; 0x11f6 <main+0x296>
    11f4:	a9 c0       	rjmp	.+338    	; 0x1348 <main+0x3e8>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:195
          uint16_t baud = pgm_read_word( &BAUD_TABLE[param_val] );
    11f6:	8d 2d       	mov	r24, r13
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	fc 01       	movw	r30, r24
    11fc:	ee 0f       	add	r30, r30
    11fe:	ff 1f       	adc	r31, r31
    1200:	eb 56       	subi	r30, 0x6B	; 107
    1202:	ff 4f       	sbci	r31, 0xFF	; 255
    1204:	05 91       	lpm	r16, Z+
    1206:	14 91       	lpm	r17, Z
    1208:	78 01       	movw	r14, r16
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:196
          if (baud) {
    120a:	01 15       	cp	r16, r1
    120c:	11 05       	cpc	r17, r1
    120e:	09 f4       	brne	.+2      	; 0x1212 <main+0x2b2>
    1210:	9b c0       	rjmp	.+310    	; 0x1348 <main+0x3e8>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:198
            /* If normal, respond and then change speed */
            param_baud_rate_val = (jtag_baud_rate_e) param_val;
    1212:	80 93 36 38 	sts	0x3836, r24	; 0x803836 <JTAG2::param_baud_rate_val>
    1216:	90 93 37 38 	sts	0x3837, r25	; 0x803837 <JTAG2::param_baud_rate_val+0x1>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:199
            set_response(RSP_OK);
    121a:	80 e8       	ldi	r24, 0x80	; 128
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	24 d9       	rcall	.-3512   	; 0x468 <JTAG2::set_response(JTAG2::jtag_response_e)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:200
            answer_transfer();
    1220:	47 d9       	rcall	.-3442   	; 0x4b0 <JTAG2::answer_transfer()>
flush():
    1222:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:96
    JTAG_USART.STATUS = USART_TXCIF_bm;
    return JTAG_USART.TXDATAL = _data;
  }

  void flush (void) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_TXCIF_bp);
    1226:	86 ff       	sbrs	r24, 6
    1228:	fc cf       	rjmp	.-8      	; 0x1222 <main+0x2c2>
set_parameter():
    122a:	00 34       	cpi	r16, 0x40	; 64
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:203
            param_baud_rate_val = (jtag_baud_rate_e) param_val;
            set_response(RSP_OK);
            answer_transfer();
            flush();
            /* If the division ratio is too small, change to double speed mode */
            if (baud < 64) {
    122c:	11 05       	cpc	r17, r1
    122e:	30 f4       	brcc	.+12     	; 0x123c <main+0x2dc>
    1230:	8a ec       	ldi	r24, 0xCA	; 202
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:204
              JTAG_USART.CTRLB = JTAG_USART_DBLON;
    1232:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__RODATA_PM_OFFSET__+0x7f8826>
    1236:	78 01       	movw	r14, r16
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:205
              baud <<= 1;
    1238:	ee 0c       	add	r14, r14
    123a:	ff 1c       	adc	r15, r15
    123c:	e0 92 28 08 	sts	0x0828, r14	; 0x800828 <__RODATA_PM_OFFSET__+0x7f8828>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:207
            }
            JTAG_USART.BAUD = baud;
    1240:	f0 92 29 08 	sts	0x0829, r15	; 0x800829 <__RODATA_PM_OFFSET__+0x7f8829>
    1244:	95 e0       	ldi	r25, 0x05	; 5
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:209
            /* Speed to allow terminal mode */
            if (param_val == BAUD_38400 || param_val == BAUD_666666)
    1246:	d9 16       	cp	r13, r25
    1248:	19 f0       	breq	.+6      	; 0x1250 <main+0x2f0>
    124a:	a8 e1       	ldi	r26, 0x18	; 24
    124c:	da 12       	cpse	r13, r26
    124e:	63 cf       	rjmp	.-314    	; 0x1116 <main+0x1b6>
    1250:	e5 9a       	sbi	0x1c, 5	; 28
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:210
              bit_set(UPDI_CONTROL, UPDI::UPDI_TERM_bp);
    1252:	61 cf       	rjmp	.-318    	; 0x1116 <main+0x1b6>
process_command():
    1254:	85 30       	cpi	r24, 0x05	; 5
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:337
    wdt_reset();
    #ifdef ENABLE_DEBUG_UPDI_SENDER
    UPDI::_send_buf_clear();
    #endif
    uint8_t message_id = packet.body[MESSAGE_ID];
    switch (message_id) {
    1256:	09 f4       	brne	.+2      	; 0x125a <main+0x2fa>
    1258:	12 c1       	rjmp	.+548    	; 0x147e <main+0x51e>
    125a:	08 f4       	brcc	.+2      	; 0x125e <main+0x2fe>
    125c:	17 c1       	rjmp	.+558    	; 0x148c <main+0x52c>
    125e:	88 30       	cpi	r24, 0x08	; 8
    1260:	61 f0       	breq	.+24     	; 0x127a <main+0x31a>
    1262:	80 ea       	ldi	r24, 0xA0	; 160
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:440
        // SYS::WDT_REBOOT();
        SYS::System_Reset();
      }
      /* Returns negation for unknown commands */
      default : {
        set_response(RSP_FAILED);
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	72 c0       	rjmp	.+228    	; 0x134c <main+0x3ec>
    1268:	86 31       	cpi	r24, 0x16	; 22
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:337
    wdt_reset();
    #ifdef ENABLE_DEBUG_UPDI_SENDER
    UPDI::_send_buf_clear();
    #endif
    uint8_t message_id = packet.body[MESSAGE_ID];
    switch (message_id) {
    126a:	50 f4       	brcc	.+20     	; 0x1280 <main+0x320>
    126c:	84 31       	cpi	r24, 0x14	; 20
    126e:	28 f4       	brcc	.+10     	; 0x127a <main+0x31a>
    1270:	8c 30       	cpi	r24, 0x0C	; 12
    1272:	09 f4       	brne	.+2      	; 0x1276 <main+0x316>
    1274:	12 c1       	rjmp	.+548    	; 0x149a <main+0x53a>
    1276:	8f 30       	cpi	r24, 0x0F	; 15
    1278:	a1 f7       	brne	.-24     	; 0x1262 <main+0x302>
main():
    127a:	80 e8       	ldi	r24, 0x80	; 128
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:405
        #endif
        break;
      }
      case CMND_XMEGA_ERASE : {
        /* Current implementation only supports chip erase */
        set_response(
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	66 c0       	rjmp	.+204    	; 0x134c <main+0x3ec>
process_command():
    1280:	86 33       	cpi	r24, 0x36	; 54
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:337
    wdt_reset();
    #ifdef ENABLE_DEBUG_UPDI_SENDER
    UPDI::_send_buf_clear();
    #endif
    uint8_t message_id = packet.body[MESSAGE_ID];
    switch (message_id) {
    1282:	d9 f3       	breq	.-10     	; 0x127a <main+0x31a>
    1284:	85 35       	cpi	r24, 0x55	; 85
    1286:	09 f4       	brne	.+2      	; 0x128a <main+0x32a>
    1288:	25 c1       	rjmp	.+586    	; 0x14d4 <main+0x574>
    128a:	84 33       	cpi	r24, 0x34	; 52
    128c:	51 f7       	brne	.-44     	; 0x1262 <main+0x302>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:406
        break;
      }
      case CMND_XMEGA_ERASE : {
        /* Current implementation only supports chip erase */
        set_response(
          UPDI::runtime(UPDI::UPDI_CMD_ERASE)
    128e:	83 e0       	ldi	r24, 0x03	; 3
    1290:	90 da       	rcall	.-2784   	; 0x7b2 <UPDI::runtime(unsigned char)>
    1292:	81 11       	cpse	r24, r1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:405
        #endif
        break;
      }
      case CMND_XMEGA_ERASE : {
        /* Current implementation only supports chip erase */
        set_response(
    1294:	f2 cf       	rjmp	.-28     	; 0x127a <main+0x31a>
main():
    1296:	8d ea       	ldi	r24, 0xAD	; 173
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	58 c0       	rjmp	.+176    	; 0x134c <main+0x3ec>
RTS_Disable():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:108
void SYS::RTS_Enable (void) {
  pinControlRegister(RTS_SENSE_PIN) = RTS_SENSE_CONFIG;
}

void SYS::RTS_Disable (void) {
  pinControlRegister(RTS_SENSE_PIN) = RTS_SENSE_DISABLE;
    129c:	88 e0       	ldi	r24, 0x08	; 8
    129e:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <__RODATA_PM_OFFSET__+0x7f8412>
WDT_ON():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:148
  _PROTECTED_WRITE(WDT_CTRLA, _wdt_period);
}

void SYS::WDT_OFF (void) { WDT_SET(WDT_PERIOD_OFF_gc); }

void SYS::WDT_ON (void) { WDT_SET(WDT_PERIOD_8KCLK_gc); }
    12a2:	8b e0       	ldi	r24, 0x0B	; 11
    12a4:	9b d8       	rcall	.-3786   	; 0x3dc <SYS::WDT_SET(unsigned char)>
LED_Stop():
    12a6:	80 91 5b 38 	lds	r24, 0x385B	; 0x80385b <TIM::mode>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:178
}

/* Suspension (before UPDI approval) */
/* TCA0 changed to charge pump drive speed */
void TIM::LED_Stop (void) {
  if (TIM::mode != 0) {
    12aa:	88 23       	and	r24, r24
    12ac:	41 f0       	breq	.+16     	; 0x12be <main+0x35e>
    12ae:	10 92 5b 38 	sts	0x385B, r1	; 0x80385b <TIM::mode>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:180
    TIM::mode = 0;
    TCA0_SPLIT_CTRLA = TCA_SPLIT_RUNSTDBY_bm | TCA_SPLIT_ENABLE_bm | TCA_SPLIT_CLKSEL_DIV1_gc;
    12b2:	81 e8       	ldi	r24, 0x81	; 129
    12b4:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__RODATA_PM_OFFSET__+0x7f8a00>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:181
    LEDG_EVOUT = EVSYS_USER_OFF_gc;
    12b8:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <__RODATA_PM_OFFSET__+0x7f81a9>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:182
    digitalWrite(LEDG_PIN, LOW);
    12bc:	0f 98       	cbi	0x01, 7	; 1
process_command():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:342
    switch (message_id) {
      case CMND_GET_SIGN_ON : {
        SYS::RTS_Disable();
        SYS::WDT_ON();
        TIM::LED_Stop();
        UPDI::Target_Reset(true);
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	46 d8       	rcall	.-3956   	; 0x34e <UPDI::Target_Reset(bool)>
    12c2:	21 9a       	sbi	0x04, 1	; 4
PG_Enable():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:343
        openDrainWrite(TRST_PIN, LOW);
    12c4:	48 9a       	sbi	0x09, 0	; 9
transfer_enable():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:96
/******************
 * Various ON/OFF *
 ******************/

void SYS::PG_Enable (void) {
  digitalWrite(PGEN_PIN, HIGH);
    12c6:	42 9a       	sbi	0x08, 2	; 8
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:105
    return _crc_ccitt_update(_crc, _data);
  }

  void transfer_enable (void) {
    SYS::PG_Enable();
    pinMode(JTAG_TXD_PIN, OUTPUT);
    12c8:	10 92 52 04 	sts	0x0452, r1	; 0x800452 <__RODATA_PM_OFFSET__+0x7f8452>
    12cc:	88 ec       	ldi	r24, 0xC8	; 200
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:106
    JTAG_USART.CTRLB = JTAG_USART_ON;
    12ce:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__RODATA_PM_OFFSET__+0x7f8826>
sign_on_response():
    12d2:	1d ba       	out	0x1d, r1	; 29
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:167
  /********************
   * SIGN_ON Response *
   ********************/

  void sign_on_response (void) {
    UPDI_NVMCTRL = 0;
    12d4:	80 92 8b 38 	sts	0x388B, r8	; 0x80388b <JTAG2::packet+0x3>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:168
    packet.size = sizeof(sign_on_resp);
    12d8:	90 92 8c 38 	sts	0x388C, r9	; 0x80388c <JTAG2::packet+0x4>
    12dc:	a0 92 8d 38 	sts	0x388D, r10	; 0x80388d <JTAG2::packet+0x5>
    12e0:	b0 92 8e 38 	sts	0x388E, r11	; 0x80388e <JTAG2::packet+0x6>
    12e4:	e8 e7       	ldi	r30, 0x78	; 120
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	84 91       	lpm	r24, Z
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:170
    for (uint8_t i = 0; i < sizeof(sign_on_resp); i++)
      packet.body[i] = pgm_read_byte( &sign_on_resp[i] );
    12ea:	d8 01       	movw	r26, r16
    12ec:	8d 93       	st	X+, r24
    12ee:	8d 01       	movw	r16, r26
    12f0:	31 96       	adiw	r30, 0x01	; 1
    12f2:	8d ea       	ldi	r24, 0xAD	; 173
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:169
   ********************/

  void sign_on_response (void) {
    UPDI_NVMCTRL = 0;
    packet.size = sizeof(sign_on_resp);
    for (uint8_t i = 0; i < sizeof(sign_on_resp); i++)
    12f4:	98 e3       	ldi	r25, 0x38	; 56
    12f6:	8a 17       	cp	r24, r26
    12f8:	9b 07       	cpc	r25, r27
    12fa:	b1 f7       	brne	.-20     	; 0x12e8 <main+0x388>
    12fc:	80 91 07 11 	lds	r24, 0x1107	; 0x801107 <__RODATA_PM_OFFSET__+0x7f9107>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:175
      packet.body[i] = pgm_read_byte( &sign_on_resp[i] );
    /* Generate version information from SERNUM */
    uint8_t* p = (uint8_t*) &SIGROW_SERNUM0;
    uint8_t* q = (uint8_t*) &SIGROW_SERNUM4;
    uint8_t* r = (uint8_t*) &packet.body[10];
      *r++ = *q++ ^ *p++ ^ *p++;
    1300:	90 91 03 11 	lds	r25, 0x1103	; 0x801103 <__RODATA_PM_OFFSET__+0x7f9103>
    1304:	89 27       	eor	r24, r25
    1306:	90 91 04 11 	lds	r25, 0x1104	; 0x801104 <__RODATA_PM_OFFSET__+0x7f9104>
    130a:	89 27       	eor	r24, r25
    130c:	80 93 9a 38 	sts	0x389A, r24	; 0x80389a <JTAG2::packet+0x12>
    1310:	80 91 08 11 	lds	r24, 0x1108	; 0x801108 <__RODATA_PM_OFFSET__+0x7f9108>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:176
      *r++ = *q++ ^ *p++ ^ *p++;
    1314:	90 91 05 11 	lds	r25, 0x1105	; 0x801105 <__RODATA_PM_OFFSET__+0x7f9105>
    1318:	89 27       	eor	r24, r25
    131a:	90 91 06 11 	lds	r25, 0x1106	; 0x801106 <__RODATA_PM_OFFSET__+0x7f9106>
    131e:	89 27       	eor	r24, r25
    1320:	80 93 9b 38 	sts	0x389B, r24	; 0x80389b <JTAG2::packet+0x13>
    1324:	80 91 09 11 	lds	r24, 0x1109	; 0x801109 <__RODATA_PM_OFFSET__+0x7f9109>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:177
      *r++ = *q++;
    1328:	80 93 9c 38 	sts	0x389C, r24	; 0x80389c <JTAG2::packet+0x14>
    132c:	80 91 0a 11 	lds	r24, 0x110A	; 0x80110a <__RODATA_PM_OFFSET__+0x7f910a>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:178
      *r++ = *q++;
    1330:	80 93 9d 38 	sts	0x389D, r24	; 0x80389d <JTAG2::packet+0x15>
    1334:	80 91 0b 11 	lds	r24, 0x110B	; 0x80110b <__RODATA_PM_OFFSET__+0x7f910b>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:179
      *r++ = *q++;
    1338:	80 93 9e 38 	sts	0x389E, r24	; 0x80389e <JTAG2::packet+0x16>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:180
      *r++ = *q++;
    133c:	80 91 0c 11 	lds	r24, 0x110C	; 0x80110c <__RODATA_PM_OFFSET__+0x7f910c>
    1340:	80 93 9f 38 	sts	0x389F, r24	; 0x80389f <JTAG2::packet+0x17>
process_command():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:443
      /* Returns negation for unknown commands */
      default : {
        set_response(RSP_FAILED);
      }
    }
    answer_transfer();
    1344:	b5 d8       	rcall	.-3734   	; 0x4b0 <JTAG2::answer_transfer()>
    1346:	e7 ce       	rjmp	.-562    	; 0x1116 <main+0x1b6>
set_parameter():
    1348:	86 ea       	ldi	r24, 0xA6	; 166
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:215
              bit_set(UPDI_CONTROL, UPDI::UPDI_TERM_bp);
            return false;
          }
        }
        /* Range violation results in failure response */
        set_response(RSP_ILLEGAL_VALUE);
    134a:	90 e0       	ldi	r25, 0x00	; 0
process_command():
    134c:	8d d8       	rcall	.-3814   	; 0x468 <JTAG2::set_response(JTAG2::jtag_response_e)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:440
        // SYS::WDT_REBOOT();
        SYS::System_Reset();
      }
      /* Returns negation for unknown commands */
      default : {
        set_response(RSP_FAILED);
    134e:	fa cf       	rjmp	.-12     	; 0x1344 <main+0x3e4>
get_parameter():
    1350:	80 91 91 38 	lds	r24, 0x3891	; 0x803891 <JTAG2::packet+0x9>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:236
  /**********************
   * CMND_GET_PARAMETER *
   **********************/

  void get_parameter (void) {
    switch ( packet.body[RSP_DATA] ) {
    1354:	83 30       	cpi	r24, 0x03	; 3
    1356:	89 f1       	breq	.+98     	; 0x13ba <main+0x45a>
    1358:	38 f4       	brcc	.+14     	; 0x1368 <main+0x408>
    135a:	81 30       	cpi	r24, 0x01	; 1
    135c:	71 f0       	breq	.+28     	; 0x137a <main+0x41a>
    135e:	82 30       	cpi	r24, 0x02	; 2
    1360:	b1 f0       	breq	.+44     	; 0x138e <main+0x42e>
    1362:	81 ea       	ldi	r24, 0xA1	; 161
    1364:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:283
          packet.size_word[0] = 1 + sizeof(updi_desc.sib);
          break;
        }
      }
      default : {
        set_response(RSP_ILLEGAL_PARAMETER);
    1366:	f2 cf       	rjmp	.-28     	; 0x134c <main+0x3ec>
    1368:	86 30       	cpi	r24, 0x06	; 6
    136a:	79 f1       	breq	.+94     	; 0x13ca <main+0x46a>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:236
  /**********************
   * CMND_GET_PARAMETER *
   **********************/

  void get_parameter (void) {
    switch ( packet.body[RSP_DATA] ) {
    136c:	8d 31       	cpi	r24, 0x1D	; 29
    136e:	99 f1       	breq	.+102    	; 0x13d6 <main+0x476>
    1370:	85 30       	cpi	r24, 0x05	; 5
    1372:	b9 f7       	brne	.-18     	; 0x1362 <main+0x402>
    1374:	80 91 36 38 	lds	r24, 0x3836	; 0x803836 <JTAG2::param_baud_rate_val>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:259
        packet.body[1] = 0x55;
        packet.size_word[0] = 2;
        break;
      }
      case PAR_BAUD_RATE : {
        packet.body[1] = param_baud_rate_val;
    1378:	21 c0       	rjmp	.+66     	; 0x13bc <main+0x45c>
    137a:	82 e0       	ldi	r24, 0x02	; 2
    137c:	80 93 91 38 	sts	0x3891, r24	; 0x803891 <JTAG2::packet+0x9>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:238
   **********************/

  void get_parameter (void) {
    switch ( packet.body[RSP_DATA] ) {
      case PAR_HW_VER : {
        packet.body[1] = sign_on_resp[5];
    1380:	80 93 92 38 	sts	0x3892, r24	; 0x803892 <JTAG2::packet+0xa>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:239
        packet.body[2] = sign_on_resp[9];
    1384:	40 92 8b 38 	sts	0x388B, r4	; 0x80388b <JTAG2::packet+0x3>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:265
        packet.size_word[0] = 2;
        break;
      }
      case PAR_VTARGET : {
        _CAPS16(packet.body[1])->word = SYS::get_vcc();
        packet.size_word[0] = 3;
    1388:	50 92 8c 38 	sts	0x388C, r5	; 0x80388c <JTAG2::packet+0x4>
    138c:	12 c0       	rjmp	.+36     	; 0x13b2 <main+0x452>
    138e:	85 e3       	ldi	r24, 0x35	; 53
    1390:	80 93 91 38 	sts	0x3891, r24	; 0x803891 <JTAG2::packet+0x9>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:244
        packet.body[2] = sign_on_resp[9];
        packet.size_word[0] = 3;
        break;
      }
      case PAR_FW_VER : {
        packet.body[1] = sign_on_resp[3];
    1394:	87 e0       	ldi	r24, 0x07	; 7
    1396:	80 93 92 38 	sts	0x3892, r24	; 0x803892 <JTAG2::packet+0xa>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:245
        packet.body[2] = sign_on_resp[4];
    139a:	82 e2       	ldi	r24, 0x22	; 34
    139c:	80 93 93 38 	sts	0x3893, r24	; 0x803893 <JTAG2::packet+0xb>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:246
        packet.body[3] = sign_on_resp[7];
    13a0:	86 e0       	ldi	r24, 0x06	; 6
    13a2:	80 93 94 38 	sts	0x3894, r24	; 0x803894 <JTAG2::packet+0xc>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:247
        packet.body[4] = sign_on_resp[8];
    13a6:	e5 e0       	ldi	r30, 0x05	; 5
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:248
        packet.size_word[0] = 5;
    13aa:	e0 93 8b 38 	sts	0x388B, r30	; 0x80388b <JTAG2::packet+0x3>
    13ae:	f0 93 8c 38 	sts	0x388C, r31	; 0x80388c <JTAG2::packet+0x4>
    13b2:	81 e8       	ldi	r24, 0x81	; 129
    13b4:	80 93 90 38 	sts	0x3890, r24	; 0x803890 <JTAG2::packet+0x8>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:287
      default : {
        set_response(RSP_ILLEGAL_PARAMETER);
        return;
      }
    }
    packet.body[MESSAGE_ID] = RSP_PARAMETER;
    13b8:	c5 cf       	rjmp	.-118    	; 0x1344 <main+0x3e4>
    13ba:	85 e5       	ldi	r24, 0x55	; 85
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:254
        break;
      }
      case PAR_EMU_MODE : {
        /* This response code indicates an UPDI-only implementation */
        /* In normal JTAGICEmkII this is never queried */
        packet.body[1] = 0x55;
    13bc:	80 93 91 38 	sts	0x3891, r24	; 0x803891 <JTAG2::packet+0x9>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:259
        packet.size_word[0] = 2;
        break;
      }
      case PAR_BAUD_RATE : {
        packet.body[1] = param_baud_rate_val;
    13c0:	20 92 8b 38 	sts	0x388B, r2	; 0x80388b <JTAG2::packet+0x3>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:260
        packet.size_word[0] = 2;
    13c4:	30 92 8c 38 	sts	0x388C, r3	; 0x80388c <JTAG2::packet+0x4>
    13c8:	f4 cf       	rjmp	.-24     	; 0x13b2 <main+0x452>
    13ca:	11 d8       	rcall	.-4062   	; 0x3ee <SYS::get_vcc()>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:264
        break;
      }
      case PAR_VTARGET : {
        _CAPS16(packet.body[1])->word = SYS::get_vcc();
    13cc:	80 93 91 38 	sts	0x3891, r24	; 0x803891 <JTAG2::packet+0x9>
    13d0:	90 93 92 38 	sts	0x3892, r25	; 0x803892 <JTAG2::packet+0xa>
    13d4:	d7 cf       	rjmp	.-82     	; 0x1384 <main+0x424>
    13d6:	e0 9b       	sbis	0x1c, 0	; 28
    13d8:	c4 cf       	rjmp	.-120    	; 0x1362 <main+0x402>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:274
      case PAR_TARGET_SIGNATURE : {
        /* SIB information can be returned as an extended signature. */
        /* Responds correctly only during programming mode.          */
        /* otherwise an error will be returned.                      */
        /* Silicon revision (REVID) can be read as normal IO memory. */
        if (bit_is_set(UPDI_CONTROL, UPDI::UPDI_INFO_bp)) {
    13da:	e8 e6       	ldi	r30, 0x68	; 104
    13dc:	f8 e3       	ldi	r31, 0x38	; 56
    13de:	a1 e9       	ldi	r26, 0x91	; 145
    13e0:	b8 e3       	ldi	r27, 0x38	; 56
    13e2:	81 91       	ld	r24, Z+
    13e4:	8d 93       	st	X+, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:277
          uint8_t *q = &packet.body[RSP_DATA];
          uint8_t *p = &updi_desc.sib[0];
          for (uint8_t i = 0; i < sizeof(updi_desc.sib); i++) *q++ = *p++;
    13e6:	88 e8       	ldi	r24, 0x88	; 136
    13e8:	98 e3       	ldi	r25, 0x38	; 56
    13ea:	8e 17       	cp	r24, r30
    13ec:	9f 07       	cpc	r25, r31
    13ee:	c9 f7       	brne	.-14     	; 0x13e2 <main+0x482>
    13f0:	a1 e2       	ldi	r26, 0x21	; 33
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:278
          packet.size_word[0] = 1 + sizeof(updi_desc.sib);
    13f4:	a0 93 8b 38 	sts	0x388B, r26	; 0x80388b <JTAG2::packet+0x3>
    13f8:	b0 93 8c 38 	sts	0x388C, r27	; 0x80388c <JTAG2::packet+0x4>
    13fc:	da cf       	rjmp	.-76     	; 0x13b2 <main+0x452>
process_command():
    13fe:	e7 99       	sbic	0x1c, 7	; 28
    1400:	3c cf       	rjmp	.-392    	; 0x127a <main+0x31a>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:359
        get_parameter();
        break;
      }
      case CMND_RESET : {
        /* Run only the first time */
        if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_INIT_bp)) {
    1402:	80 91 91 38 	lds	r24, 0x3891	; 0x803891 <JTAG2::packet+0x9>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:360
          uint8_t hv_control = packet.body[RSP_DATA];
    1406:	98 2f       	mov	r25, r24
    1408:	90 73       	andi	r25, 0x30	; 48
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:361
          if ((hv_control & '0') == '0') {
    140a:	90 33       	cpi	r25, 0x30	; 48
    140c:	29 f4       	brne	.+10     	; 0x1418 <main+0x4b8>
    140e:	80 93 5e 38 	sts	0x385E, r24	; 0x80385e <JTAG2::updi_desc+0x2>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:365
            /* If the general reset setting is neither 0 nor 1. */
            /* Accepts special extension settings.              */
            /* This forces HV control.                          */
            updi_desc.hvupdi_variant = hv_control;
    1412:	81 33       	cpi	r24, 0x31	; 49
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:367
            /* '1' must be passed for automatic HV control to be inhibited */
            if (hv_control != '1') bit_set(UPDI_CONTROL, UPDI::UPDI_FCHV_bp);
    1414:	09 f0       	breq	.+2      	; 0x1418 <main+0x4b8>
    1416:	e4 9a       	sbi	0x1c, 4	; 28
    1418:	c5 dc       	rcall	.-1654   	; 0xda4 <UPDI::updi_activate()>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:370
          }
          /* Here UPDI control is tried */
          UPDI::updi_activate();
    141a:	80 91 5b 38 	lds	r24, 0x385B	; 0x80385b <TIM::mode>
    141e:	e5 9b       	sbis	0x1c, 5	; 28
    1420:	1a c0       	rjmp	.+52     	; 0x1456 <main+0x4f6>
LED_TCB1():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:371
          if (bit_is_set(UPDI_CONTROL, UPDI::UPDI_TERM_bp)) {
    1422:	83 30       	cpi	r24, 0x03	; 3
    1424:	99 f0       	breq	.+38     	; 0x144c <main+0x4ec>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:151
    LEDG_EVOUT = EVSYS_USER_CHANNEL2_gc;
  }
}

void LED_TCB1 (uint8_t mode, uint16_t ccmp) {
  if (TIM::mode != mode) {
    1426:	83 e0       	ldi	r24, 0x03	; 3
    1428:	80 93 5b 38 	sts	0x385B, r24	; 0x80385b <TIM::mode>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:152
    TIM::mode = mode;
    142c:	e9 ea       	ldi	r30, 0xA9	; 169
    142e:	f5 e5       	ldi	r31, 0x55	; 85
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:153
    TCB1_CCMP = ccmp;
    1430:	e0 93 9c 0a 	sts	0x0A9C, r30	; 0x800a9c <__RODATA_PM_OFFSET__+0x7f8a9c>
    1434:	f0 93 9d 0a 	sts	0x0A9D, r31	; 0x800a9d <__RODATA_PM_OFFSET__+0x7f8a9d>
    1438:	10 92 9a 0a 	sts	0x0A9A, r1	; 0x800a9a <__RODATA_PM_OFFSET__+0x7f8a9a>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:154
    TCB1_CNT = 0;
    143c:	10 92 9b 0a 	sts	0x0A9B, r1	; 0x800a9b <__RODATA_PM_OFFSET__+0x7f8a9b>
    1440:	8f e4       	ldi	r24, 0x4F	; 79
    1442:	80 93 90 0a 	sts	0x0A90, r24	; 0x800a90 <__RODATA_PM_OFFSET__+0x7f8a90>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:155
    TCB1_CTRLA = TCB_RUNSTDBY_bm | TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <__RODATA_PM_OFFSET__+0x7f81a9>
WDT_OFF():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:156
    LEDG_EVOUT = EVSYS_USER_CHANNEL0_gc;
    144c:	80 e0       	ldi	r24, 0x00	; 0
    144e:	0e 94 ee 01 	call	0x3dc	; 0x3dc <SYS::WDT_SET(unsigned char)>
process_command():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:146
void SYS::WDT_SET (uint8_t _wdt_period) {
  loop_until_bit_is_clear(WDT_STATUS, WDT_SYNCBUSY_bp);
  _PROTECTED_WRITE(WDT_CTRLA, _wdt_period);
}

void SYS::WDT_OFF (void) { WDT_SET(WDT_PERIOD_OFF_gc); }
    1452:	e7 9a       	sbi	0x1c, 7	; 28
    1454:	12 cf       	rjmp	.-476    	; 0x127a <main+0x31a>
LED_TCB1():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:380
          }
          else {
            /* If not set to interactive mode, the LED will flash rapidly */
            TIM::LED_Fast();
          }
          bit_set(UPDI_CONTROL, UPDI::UPDI_INIT_bp);
    1456:	84 30       	cpi	r24, 0x04	; 4
    1458:	e1 f3       	breq	.-8      	; 0x1452 <main+0x4f2>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:151
    LEDG_EVOUT = EVSYS_USER_CHANNEL2_gc;
  }
}

void LED_TCB1 (uint8_t mode, uint16_t ccmp) {
  if (TIM::mode != mode) {
    145a:	f4 e0       	ldi	r31, 0x04	; 4
    145c:	f0 93 5b 38 	sts	0x385B, r31	; 0x80385b <TIM::mode>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:152
    TIM::mode = mode;
    1460:	60 92 9c 0a 	sts	0x0A9C, r6	; 0x800a9c <__RODATA_PM_OFFSET__+0x7f8a9c>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:153
    TCB1_CCMP = ccmp;
    1464:	70 92 9d 0a 	sts	0x0A9D, r7	; 0x800a9d <__RODATA_PM_OFFSET__+0x7f8a9d>
    1468:	10 92 9a 0a 	sts	0x0A9A, r1	; 0x800a9a <__RODATA_PM_OFFSET__+0x7f8a9a>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:154
    TCB1_CNT = 0;
    146c:	10 92 9b 0a 	sts	0x0A9B, r1	; 0x800a9b <__RODATA_PM_OFFSET__+0x7f8a9b>
    1470:	8f e4       	ldi	r24, 0x4F	; 79
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:155
    TCB1_CTRLA = TCB_RUNSTDBY_bm | TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
    1472:	80 93 90 0a 	sts	0x0A90, r24	; 0x800a90 <__RODATA_PM_OFFSET__+0x7f8a90>
    1476:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:156
    LEDG_EVOUT = EVSYS_USER_CHANNEL0_gc;
    1478:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <__RODATA_PM_OFFSET__+0x7f81a9>
    147c:	ea cf       	rjmp	.-44     	; 0x1452 <main+0x4f2>
process_command():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:389
        UPDI::_send_buf_copy();
        #endif
        break;
      }
      case CMND_READ_MEMORY : {
        if (!UPDI::runtime(UPDI::UPDI_CMD_READ_MEMORY)) {
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	98 d9       	rcall	.-3280   	; 0x7b2 <UPDI::runtime(unsigned char)>
    1482:	81 11       	cpse	r24, r1
    1484:	5f cf       	rjmp	.-322    	; 0x1344 <main+0x3e4>
    1486:	8b ea       	ldi	r24, 0xAB	; 171
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:390
          set_response(RSP_NO_TARGET_POWER);
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	60 cf       	rjmp	.-320    	; 0x134c <main+0x3ec>
    148c:	82 e0       	ldi	r24, 0x02	; 2
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:395
        }
        break;
      }
      case CMND_WRITE_MEMORY : {
        if (!UPDI::runtime(UPDI::UPDI_CMD_WRITE_MEMORY)) {
    148e:	91 d9       	rcall	.-3294   	; 0x7b2 <UPDI::runtime(unsigned char)>
    1490:	81 11       	cpse	r24, r1
    1492:	58 cf       	rjmp	.-336    	; 0x1344 <main+0x3e4>
    1494:	85 ea       	ldi	r24, 0xA5	; 165
    1496:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:396
          set_response(RSP_ILLEGAL_MCU_STATE);
    1498:	59 cf       	rjmp	.-334    	; 0x134c <main+0x3ec>
set_descripter():
    149a:	80 91 84 39 	lds	r24, 0x3984	; 0x803984 <JTAG2::packet+0xfc>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:298

  void set_descripter (uint8_t type) {
    if (type == CMND_SET_DEVICE_DESC) {
      const struct jtag_device_descriptor *desc =
           (struct jtag_device_descriptor*)&packet.body[RSP_DATA];
      updi_desc.flash_page_size = *(uint16_t*)(&desc->uiFlashPageSize[0]);
    149e:	90 91 85 39 	lds	r25, 0x3985	; 0x803985 <JTAG2::packet+0xfd>
    14a2:	80 93 60 38 	sts	0x3860, r24	; 0x803860 <JTAG2::updi_desc+0x4>
    14a6:	90 93 61 38 	sts	0x3861, r25	; 0x803861 <JTAG2::updi_desc+0x5>
    14aa:	80 91 86 39 	lds	r24, 0x3986	; 0x803986 <JTAG2::packet+0xfe>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:299
      updi_desc.eeprom_page_size = desc->ucEepromPageSize;
    14ae:	80 93 62 38 	sts	0x3862, r24	; 0x803862 <JTAG2::updi_desc+0x6>
    14b2:	90 91 81 39 	lds	r25, 0x3981	; 0x803981 <JTAG2::packet+0xf9>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:300
      if ((desc->ucIDRAddress & '0') == '0') {
    14b6:	29 2f       	mov	r18, r25
    14b8:	20 73       	andi	r18, 0x30	; 48
    14ba:	20 33       	cpi	r18, 0x30	; 48
    14bc:	19 f4       	brne	.+6      	; 0x14c4 <main+0x564>
    14be:	90 93 5e 38 	sts	0x385E, r25	; 0x80385e <JTAG2::updi_desc+0x2>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:304
        /* Accepts special extension settings. */
        /* 0x31 must be passed for automatic HV control to be inhibited. */
        /* This parameter can be specified in the `idr` descriptor in the `part` section. */
        updi_desc.hvupdi_variant = desc->ucIDRAddress;  // Valid value 0x30,0x31 or 0x32
    14c2:	db ce       	rjmp	.-586    	; 0x127a <main+0x31a>
    14c4:	80 32       	cpi	r24, 0x20	; 32
    14c6:	20 f4       	brcc	.+8      	; 0x14d0 <main+0x570>
main():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:309
      }
      else {
        /* If the EEPROM page size is 32 or more, it is considered a HV=12V system. */
        /* This setting will be referenced when automatic HV control is requested.  */
        updi_desc.hvupdi_variant = updi_desc.eeprom_page_size >= 32 ? '0' : '2';
    14c8:	82 e3       	ldi	r24, 0x32	; 50
set_descripter():
    14ca:	80 93 5e 38 	sts	0x385E, r24	; 0x80385e <JTAG2::updi_desc+0x2>
    14ce:	d5 ce       	rjmp	.-598    	; 0x127a <main+0x31a>
main():
    14d0:	80 e3       	ldi	r24, 0x30	; 48
    14d2:	fb cf       	rjmp	.-10     	; 0x14ca <main+0x56a>
set_descripter():
    14d4:	81 e9       	ldi	r24, 0x91	; 145
    14d6:	98 e3       	ldi	r25, 0x38	; 56
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:317
    else if (type == CMND_SET_UPDI_PARAMS) {
      /* This structure is used instead of CMND_SET_DEVICE_DESC after */
      /* answering 0x55 ('U') to PAR_EMU_MODE of CMND_GET_PARAMETER.  */
      /* Once you have confirmed the magic number and data length,    */
      /* you can simply clone it into your internal structure.        */
      const struct updi_device_descriptor *desc =
    14d8:	89 83       	std	Y+1, r24	; 0x01
    14da:	9a 83       	std	Y+2, r25	; 0x02
    14dc:	80 91 91 38 	lds	r24, 0x3891	; 0x803891 <JTAG2::packet+0x9>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:319
           (struct updi_device_descriptor*)&packet.body[RSP_DATA];
      if (desc->magicnumber == 'U' && desc->length <= sizeof(updi_desc) - 2) {
    14e0:	85 35       	cpi	r24, 0x55	; 85
    14e2:	09 f0       	breq	.+2      	; 0x14e6 <main+0x586>
    14e4:	ca ce       	rjmp	.-620    	; 0x127a <main+0x31a>
    14e6:	90 91 92 38 	lds	r25, 0x3892	; 0x803892 <JTAG2::packet+0xa>
    14ea:	9b 32       	cpi	r25, 0x2B	; 43
    14ec:	08 f0       	brcs	.+2      	; 0x14f0 <main+0x590>
    14ee:	c5 ce       	rjmp	.-630    	; 0x127a <main+0x31a>
    14f0:	de 01       	movw	r26, r28
    14f2:	13 96       	adiw	r26, 0x03	; 3
    14f4:	ee e5       	ldi	r30, 0x5E	; 94
    14f6:	f8 e3       	ldi	r31, 0x38	; 56
main():
    14f8:	80 e0       	ldi	r24, 0x00	; 0
set_descripter():
    14fa:	98 17       	cp	r25, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:322
        uint8_t *q = 2 + (uint8_t*)&updi_desc;
        uint8_t *p = 2 + (uint8_t*)&desc;
        for (int8_t i = 0; i < desc->length; i++) *q++ = *p++;
    14fc:	09 f4       	brne	.+2      	; 0x1500 <main+0x5a0>
    14fe:	bd ce       	rjmp	.-646    	; 0x127a <main+0x31a>
    1500:	2d 91       	ld	r18, X+
    1502:	21 93       	st	Z+, r18
    1504:	8f 5f       	subi	r24, 0xFF	; 255
    1506:	f9 cf       	rjmp	.-14     	; 0x14fa <main+0x59a>
process_command():
    1508:	80 e8       	ldi	r24, 0x80	; 128
    150a:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:429
      case CMND_GET_SYNC : {
        set_response(RSP_OK);
        break;
      }
      case CMND_SIGN_OFF : {
        set_response(RSP_OK);
    150c:	0e 94 34 02 	call	0x468	; 0x468 <JTAG2::set_response(JTAG2::jtag_response_e)>
    1510:	0e 94 58 02 	call	0x4b0	; 0x4b0 <JTAG2::answer_transfer()>
flush():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:430
        answer_transfer();
    1514:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:96
    JTAG_USART.STATUS = USART_TXCIF_bm;
    return JTAG_USART.TXDATAL = _data;
  }

  void flush (void) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_TXCIF_bp);
    1518:	86 ff       	sbrs	r24, 6
    151a:	fc cf       	rjmp	.-8      	; 0x1514 <main+0x5b4>
process_command():
    151c:	e1 9b       	sbis	0x1c, 1	; 28
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:432
      }
      case CMND_SIGN_OFF : {
        set_response(RSP_OK);
        answer_transfer();
        flush();
        if (bit_is_set(UPDI_CONTROL, UPDI::UPDI_PROG_bp))
    151e:	02 c0       	rjmp	.+4      	; 0x1524 <main+0x5c4>
    1520:	84 e0       	ldi	r24, 0x04	; 4
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:433
          UPDI::runtime(UPDI::UPDI_CMD_GO);
    1522:	47 d9       	rcall	.-3442   	; 0x7b2 <UPDI::runtime(unsigned char)>
System_Reset():
    1524:	88 ed       	ldi	r24, 0xD8	; 216
    1526:	91 e0       	ldi	r25, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:88
/*************
 * Self reset *
 *************/

void SYS::System_Reset (void) {
  _PROTECTED_WRITE(RSTCTRL_SWRR, RSTCTRL_SWRE_bm);
    1528:	84 bf       	out	0x34, r24	; 52
    152a:	90 93 41 00 	sts	0x0041, r25	; 0x800041 <__RODATA_PM_OFFSET__+0x7f8041>
    152e:	99 ce       	rjmp	.-718    	; 0x1262 <main+0x302>

00001530 <setjmp>:
setjmp():
    1530:	dc 01       	movw	r26, r24
    1532:	2d 92       	st	X+, r2
    1534:	3d 92       	st	X+, r3
    1536:	4d 92       	st	X+, r4
    1538:	5d 92       	st	X+, r5
    153a:	6d 92       	st	X+, r6
    153c:	7d 92       	st	X+, r7
    153e:	8d 92       	st	X+, r8
    1540:	9d 92       	st	X+, r9
    1542:	ad 92       	st	X+, r10
    1544:	bd 92       	st	X+, r11
    1546:	cd 92       	st	X+, r12
    1548:	dd 92       	st	X+, r13
    154a:	ed 92       	st	X+, r14
    154c:	fd 92       	st	X+, r15
    154e:	0d 93       	st	X+, r16
    1550:	1d 93       	st	X+, r17
    1552:	cd 93       	st	X+, r28
    1554:	dd 93       	st	X+, r29
    1556:	ff 91       	pop	r31
    1558:	ef 91       	pop	r30
    155a:	8d b7       	in	r24, 0x3d	; 61
    155c:	8d 93       	st	X+, r24
    155e:	8e b7       	in	r24, 0x3e	; 62
    1560:	8d 93       	st	X+, r24
    1562:	8f b7       	in	r24, 0x3f	; 63
    1564:	8d 93       	st	X+, r24
    1566:	ed 93       	st	X+, r30
    1568:	fd 93       	st	X+, r31
    156a:	88 27       	eor	r24, r24
    156c:	99 27       	eor	r25, r25
    156e:	09 94       	ijmp

00001570 <longjmp>:
longjmp():
    1570:	dc 01       	movw	r26, r24
    1572:	cb 01       	movw	r24, r22
    1574:	81 30       	cpi	r24, 0x01	; 1
    1576:	91 05       	cpc	r25, r1
    1578:	81 1d       	adc	r24, r1
    157a:	2d 90       	ld	r2, X+
    157c:	3d 90       	ld	r3, X+
    157e:	4d 90       	ld	r4, X+
    1580:	5d 90       	ld	r5, X+
    1582:	6d 90       	ld	r6, X+
    1584:	7d 90       	ld	r7, X+
    1586:	8d 90       	ld	r8, X+
    1588:	9d 90       	ld	r9, X+
    158a:	ad 90       	ld	r10, X+
    158c:	bd 90       	ld	r11, X+
    158e:	cd 90       	ld	r12, X+
    1590:	dd 90       	ld	r13, X+
    1592:	ed 90       	ld	r14, X+
    1594:	fd 90       	ld	r15, X+
    1596:	0d 91       	ld	r16, X+
    1598:	1d 91       	ld	r17, X+
    159a:	cd 91       	ld	r28, X+
    159c:	dd 91       	ld	r29, X+
    159e:	ed 91       	ld	r30, X+
    15a0:	fd 91       	ld	r31, X+
    15a2:	0d 90       	ld	r0, X+
    15a4:	0f be       	out	0x3f, r0	; 63
    15a6:	ed bf       	out	0x3d, r30	; 61
    15a8:	fe bf       	out	0x3e, r31	; 62
    15aa:	ed 91       	ld	r30, X+
    15ac:	fd 91       	ld	r31, X+
    15ae:	09 94       	ijmp

000015b0 <_exit>:
exit():
    15b0:	f8 94       	cli

000015b2 <__stop_program>:
__stop_program():
    15b2:	ff cf       	rjmp	.-2      	; 0x15b2 <__stop_program>

Disassembly of section .nvmem:

000015f8 <.nvmem>:
	...
