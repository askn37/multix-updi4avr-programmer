
/var/folders/mz/_z9vt_y13rdf9tt_4qkvv0k40000gn/T/arduino_build_441522/UPDI4AVR_FW634B.ino.elf:     file format elf32-avr


Disassembly of section .data:

00803800 <__data_start>:
__data_start():
  803800:	55 c8       	rjmp	.-3926   	; 0x8028ac <__RODATA_PM_OFFSET__+0x7fa8ac>
  803802:	00 c3       	rjmp	.+1536   	; 0x803e04 <__bss_end+0x358>
  803804:	04 55       	subi	r16, 0x54	; 84

00803805 <UPDI::st8(unsigned long, unsigned char)::set_ptr>:
  803805:	55 48 00 00 00 00                                   UH....

0080380b <UPDI::ld8(unsigned long)::set_ptr>:
  80380b:	55 08 00 00 00 00                                   U.....

00803811 <UPDI::get_cs_stat(unsigned char)::set_ptr>:
  803811:	55 00                                               U.

00803813 <UPDI::set_cs_stat(unsigned char, unsigned char)::set_ptr>:
  803813:	55 00 00                                            U..

00803816 <UPDI::nvmprog_key>:
  803816:	55 e0 20 67 6f 72 50 4d 56 4e                       U. gorPMVN

00803820 <UPDI::read_sib(unsigned char*)::set_ptr>:
  803820:	55 e6                                               U.

00803822 <UPDI::urowwrite_key>:
  803822:	55 e0 65 74 26 73 55 4d 56 4e                       U.et&sUMVN

0080382c <UPDI::erase_key>:
  80382c:	55 e0 65 73 61 72 45 4d 56 4e                       U.esarEMVN

00803836 <JTAG2::param_baud_rate_val>:
  803836:	04 00                                               ..

00803838 <JTAG2::before_seqnum>:
  803838:	ff ff                                               ..

0080383a <UPDI::_set_repeat>:
  80383a:	55 a0 00 55 04                                      U..U.

0080383f <UPDI::_set_ptr_l>:
  80383f:	55 6a 00 00 00 00 00                                Uj.....

Disassembly of section .text:

00000000 <__vectors>:
__vectors():
../../../../crt1/gcrt1.S:61
       0:	67 c0       	rjmp	.+206    	; 0xd0 <__ctors_end>
       2:	00 00       	nop
../../../../crt1/gcrt1.S:67
       4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
       6:	00 00       	nop
../../../../crt1/gcrt1.S:68
       8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
       a:	00 00       	nop
../../../../crt1/gcrt1.S:69
       c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
       e:	00 00       	nop
../../../../crt1/gcrt1.S:70
      10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
      12:	00 00       	nop
../../../../crt1/gcrt1.S:71
      14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
      16:	00 00       	nop
../../../../crt1/gcrt1.S:72
      18:	07 c7       	rjmp	.+3598   	; 0xe28 <__vector_6>
      1a:	00 00       	nop
../../../../crt1/gcrt1.S:73
      1c:	36 c7       	rjmp	.+3692   	; 0xe8a <__vector_7>
      1e:	00 00       	nop
../../../../crt1/gcrt1.S:74
      20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
      22:	00 00       	nop
../../../../crt1/gcrt1.S:75
      24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
      26:	00 00       	nop
../../../../crt1/gcrt1.S:76
      28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
      2a:	00 00       	nop
../../../../crt1/gcrt1.S:77
      2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
      2e:	00 00       	nop
../../../../crt1/gcrt1.S:78
      30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
      32:	00 00       	nop
../../../../crt1/gcrt1.S:79
      34:	ee c6       	rjmp	.+3548   	; 0xe12 <__vector_13>
      36:	00 00       	nop
../../../../crt1/gcrt1.S:80
      38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
      3a:	00 00       	nop
../../../../crt1/gcrt1.S:81
      3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
      3e:	00 00       	nop
../../../../crt1/gcrt1.S:82
      40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
      42:	00 00       	nop
../../../../crt1/gcrt1.S:83
      44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
      46:	00 00       	nop
../../../../crt1/gcrt1.S:84
      48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
      4a:	00 00       	nop
../../../../crt1/gcrt1.S:85
      4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
      4e:	00 00       	nop
../../../../crt1/gcrt1.S:86
      50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
      52:	00 00       	nop
../../../../crt1/gcrt1.S:87
      54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
      56:	00 00       	nop
../../../../crt1/gcrt1.S:88
      58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
      5a:	00 00       	nop
../../../../crt1/gcrt1.S:89
      5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
      5e:	00 00       	nop
../../../../crt1/gcrt1.S:90
      60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
      62:	00 00       	nop
../../../../crt1/gcrt1.S:91
      64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
      66:	00 00       	nop
../../../../crt1/gcrt1.S:92
      68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
      6a:	00 00       	nop
../../../../crt1/gcrt1.S:93
      6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
      6e:	00 00       	nop
../../../../crt1/gcrt1.S:94
      70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
      72:	00 00       	nop
../../../../crt1/gcrt1.S:95
      74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
	...

00000078 <__trampolines_end>:
__trampolines_start():
      78:	86 01       	movw	r16, r12
      7a:	02 35       	cpi	r16, 0x52	; 82
      7c:	07 02       	muls	r16, r23
      7e:	02 22       	and	r0, r18
      80:	06 02       	muls	r16, r22
      82:	00 00       	nop
      84:	00 00       	nop
      86:	00 00       	nop
      88:	55 50       	subi	r21, 0x05	; 5
      8a:	44 49       	sbci	r20, 0x94	; 148
      8c:	34 41       	sbci	r19, 0x14	; 20
      8e:	56 52       	subi	r21, 0x26	; 38
      90:	00 00       	nop
      92:	00 00       	nop
	...

00000095 <JTAG2::BAUD_TABLE>:
      95:	00 00 1b 41 8d 20 47 10 23 08 12 04 b6 02 5b 01     ...A. G.#.....[.
      a5:	da 0a 04 01 ae 00 57 00 2b 00 39 01 9c 00 00 00     ......W.+.9.....
      b5:	00 00 0b 01 c8 00 a0 00 85 00 64 00 50 00 43 00     ..........d.P.C.
      c5:	3c 00 28 00 1b 00 14 00 0d 00 00                    <.(........

000000d0 <__ctors_end>:
__dtors_end():
../../../../crt1/gcrt1.S:230
      d0:	11 24       	eor	r1, r1
../../../../crt1/gcrt1.S:231
      d2:	1f be       	out	0x3f, r1	; 63
../../../../crt1/gcrt1.S:232
      d4:	cf ef       	ldi	r28, 0xFF	; 255
../../../../crt1/gcrt1.S:234
      d6:	cd bf       	out	0x3d, r28	; 61
../../../../crt1/gcrt1.S:236
      d8:	df e3       	ldi	r29, 0x3F	; 63
../../../../crt1/gcrt1.S:237
      da:	de bf       	out	0x3e, r29	; 62

000000dc <__do_copy_data>:
__do_copy_data():
      dc:	18 e3       	ldi	r17, 0x38	; 56
      de:	a0 e0       	ldi	r26, 0x00	; 0
      e0:	b8 e3       	ldi	r27, 0x38	; 56
      e2:	e6 ef       	ldi	r30, 0xF6	; 246
      e4:	f5 e1       	ldi	r31, 0x15	; 21
      e6:	02 c0       	rjmp	.+4      	; 0xec <__do_copy_data+0x10>
      e8:	05 90       	lpm	r0, Z+
      ea:	0d 92       	st	X+, r0
      ec:	a6 34       	cpi	r26, 0x46	; 70
      ee:	b1 07       	cpc	r27, r17
      f0:	d9 f7       	brne	.-10     	; 0xe8 <__do_copy_data+0xc>

000000f2 <__do_clear_bss>:
__do_clear_bss():
      f2:	2a e3       	ldi	r18, 0x3A	; 58
      f4:	a6 e4       	ldi	r26, 0x46	; 70
      f6:	b8 e3       	ldi	r27, 0x38	; 56
      f8:	01 c0       	rjmp	.+2      	; 0xfc <.do_clear_bss_start>

000000fa <.do_clear_bss_loop>:
      fa:	1d 92       	st	X+, r1

000000fc <.do_clear_bss_start>:
      fc:	ac 3a       	cpi	r26, 0xAC	; 172
      fe:	b2 07       	cpc	r27, r18
     100:	e1 f7       	brne	.-8      	; 0xfa <.do_clear_bss_loop>
.do_clear_bss_start():
../../../../crt1/gcrt1.S:314
     102:	f5 d6       	rcall	.+3562   	; 0xeee <main>
../../../../crt1/gcrt1.S:315
     104:	0c 94 f9 0a 	jmp	0x15f2	; 0x15f2 <_exit>

00000108 <__bad_interrupt>:
__vector_22():
../../../../crt1/gcrt1.S:209
     108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <UPDI::RECV()>:
_ZN4UPDI4RECVEv():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:103
/*
 * UPDI reception
 */

uint8_t UPDI::RECV (void) {
  loop_until_bit_is_set(UPDI_USART.STATUS, USART_RXCIF_bp);
     10a:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
     10e:	87 ff       	sbrs	r24, 7
     110:	fc cf       	rjmp	.-8      	; 0x10a <UPDI::RECV()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:104
  UPDI_LASTH = UPDI_USART.RXDATAH ^ 0x80;
     112:	80 91 01 08 	lds	r24, 0x0801	; 0x800801 <__RODATA_PM_OFFSET__+0x7f8801>
     116:	80 58       	subi	r24, 0x80	; 128
     118:	8f bb       	out	0x1f, r24	; 31
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:110
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  UPDI_LASTL = UPDI_USART.RXDATAL;
  _send_buf_push(UPDI_LASTL);
  return UPDI_LASTL;
  #else
  return UPDI_LASTL = UPDI_USART.RXDATAL;
     11a:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__RODATA_PM_OFFSET__+0x7f8800>
     11e:	8e bb       	out	0x1e, r24	; 30
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:112
  #endif
}
     120:	08 95       	ret

00000122 <UPDI::SEND(unsigned char)>:
_ZN4UPDI4SENDEh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:118

/*
 * UPDI transmission : Verify transmitted value with loopback reception
 */

bool UPDI::SEND (uint8_t _data) {
     122:	cf 93       	push	r28
     124:	c8 2f       	mov	r28, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:123
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  _send_buf_push(_data);
  #endif
  bool _r;
  loop_until_bit_is_set(UPDI_USART.STATUS, USART_DREIF_bp);
     126:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
     12a:	85 ff       	sbrs	r24, 5
     12c:	fc cf       	rjmp	.-8      	; 0x126 <UPDI::SEND(unsigned char)+0x4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:124
  UPDI_USART.STATUS = USART_TXCIF_bm;
     12e:	80 e4       	ldi	r24, 0x40	; 64
     130:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:125
  UPDI_USART.TXDATAL = _data;
     134:	c0 93 02 08 	sts	0x0802, r28	; 0x800802 <__RODATA_PM_OFFSET__+0x7f8802>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:126
  loop_until_bit_is_set(UPDI_USART.STATUS, USART_TXCIF_bp);
     138:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
     13c:	86 ff       	sbrs	r24, 6
     13e:	fc cf       	rjmp	.-8      	; 0x138 <UPDI::SEND(unsigned char)+0x16>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:127
  _r = _data == RECV();
     140:	e4 df       	rcall	.-56     	; 0x10a <UPDI::RECV()>
     142:	98 2f       	mov	r25, r24
     144:	81 e0       	ldi	r24, 0x01	; 1
     146:	9c 13       	cpse	r25, r28
     148:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:128
  if (!_r) bit_set(UPDI_LASTH, 0x20);
     14a:	9c 17       	cp	r25, r28
     14c:	11 f0       	breq	.+4      	; 0x152 <UPDI::SEND(unsigned char)+0x30>
     14e:	9f b3       	in	r25, 0x1f	; 31
     150:	9f bb       	out	0x1f, r25	; 31
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:130
  return _r;
}
     152:	cf 91       	pop	r28
     154:	08 95       	ret

00000156 <UPDI::send_bytes(unsigned char*, unsigned char)>:
_ZN4UPDI10send_bytesEPhh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:154
/*
 * Send byte chunks
 */

/* __attribute__((optimize("O0"))) */
bool UPDI::send_bytes (uint8_t *data, uint8_t len) {
     156:	0f 93       	push	r16
     158:	1f 93       	push	r17
     15a:	cf 93       	push	r28
     15c:	c6 2f       	mov	r28, r22
     15e:	8c 01       	movw	r16, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:156
  do {
    if (!SEND(*data++)) return false;
     160:	f8 01       	movw	r30, r16
     162:	81 91       	ld	r24, Z+
     164:	8f 01       	movw	r16, r30
     166:	dd df       	rcall	.-70     	; 0x122 <UPDI::SEND(unsigned char)>
     168:	88 23       	and	r24, r24
     16a:	11 f0       	breq	.+4      	; 0x170 <UPDI::send_bytes(unsigned char*, unsigned char)+0x1a>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:157
  } while (--len);
     16c:	c1 50       	subi	r28, 0x01	; 1
     16e:	c1 f7       	brne	.-16     	; 0x160 <UPDI::send_bytes(unsigned char*, unsigned char)+0xa>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:159
  return true;
}
     170:	cf 91       	pop	r28
     172:	1f 91       	pop	r17
     174:	0f 91       	pop	r16
     176:	08 95       	ret

00000178 <UPDI::set_cs_stat(unsigned char, unsigned char)>:
_ZN4UPDI11set_cs_statEhh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:311
 * Control status transmission
 */

bool UPDI::set_cs_stat (uint8_t code, uint8_t data) {
  static uint8_t set_ptr[] = { UPDI_SYNCH, 0, 0 };
  set_ptr[1] = UPDI_STCS | code;
     178:	e3 e1       	ldi	r30, 0x13	; 19
     17a:	f8 e3       	ldi	r31, 0x38	; 56
     17c:	80 6c       	ori	r24, 0xC0	; 192
     17e:	81 83       	std	Z+1, r24	; 0x01
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:312
  set_ptr[2] = data;
     180:	62 83       	std	Z+2, r22	; 0x02
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:313
  return send_bytes(set_ptr, sizeof(set_ptr));
     182:	63 e0       	ldi	r22, 0x03	; 3
     184:	cf 01       	movw	r24, r30
     186:	e7 cf       	rjmp	.-50     	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>

00000188 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.17]>:
_ZN4UPDI7sts8rsdEmPhh.constprop.17():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:219
    } while (--repeat);
  }
  return len == 0;
}

bool UPDI::sts8rsd (uint32_t addr, uint8_t *data, uint8_t len) {
     188:	0f 93       	push	r16
     18a:	1f 93       	push	r17
     18c:	cf 93       	push	r28
     18e:	c4 2f       	mov	r28, r20
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:220
  _CAPS32(_set_ptr_l[2])->dword = addr;
     190:	60 93 41 38 	sts	0x3841, r22	; 0x803841 <UPDI::_set_ptr_l+0x2>
     194:	70 93 42 38 	sts	0x3842, r23	; 0x803842 <UPDI::_set_ptr_l+0x3>
     198:	80 93 43 38 	sts	0x3843, r24	; 0x803843 <UPDI::_set_ptr_l+0x4>
     19c:	90 93 44 38 	sts	0x3844, r25	; 0x803844 <UPDI::_set_ptr_l+0x5>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:221
  _set_repeat[2] = len - 1;
     1a0:	8f ef       	ldi	r24, 0xFF	; 255
     1a2:	84 0f       	add	r24, r20
     1a4:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <UPDI::_set_repeat+0x2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:222
  _set_repeat[4] = UPDI_PTR_INC|UPDI_ST|UPDI_DATA1;
     1a8:	84 e6       	ldi	r24, 0x64	; 100
     1aa:	80 93 3e 38 	sts	0x383E, r24	; 0x80383e <UPDI::_set_repeat+0x4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:223
  if (!send_bytes(_set_ptr_l, sizeof(_set_ptr_l) - 1)) return false;
     1ae:	65 e0       	ldi	r22, 0x05	; 5
     1b0:	8f e3       	ldi	r24, 0x3F	; 63
     1b2:	98 e3       	ldi	r25, 0x38	; 56
     1b4:	d0 df       	rcall	.-96     	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     1b6:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:224
  if (UPDI_ACK != RECV()) return false;
     1b8:	e1 f0       	breq	.+56     	; 0x1f2 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.17]+0x6a>
     1ba:	a7 df       	rcall	.-178    	; 0x10a <UPDI::RECV()>
     1bc:	80 34       	cpi	r24, 0x40	; 64
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:317
  set_ptr[2] = data;
  return send_bytes(set_ptr, sizeof(set_ptr));
}

bool UPDI::set_cs_ctra (uint8_t data) {
  return set_cs_stat(UPDI_CS_CTRLA, data);
     1be:	c9 f4       	brne	.+50     	; 0x1f2 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.17]+0x6a>
set_cs_ctra():
     1c0:	6e e0       	ldi	r22, 0x0E	; 14
     1c2:	82 e0       	ldi	r24, 0x02	; 2
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:225
  _CAPS32(_set_ptr_l[2])->dword = addr;
  _set_repeat[2] = len - 1;
  _set_repeat[4] = UPDI_PTR_INC|UPDI_ST|UPDI_DATA1;
  if (!send_bytes(_set_ptr_l, sizeof(_set_ptr_l) - 1)) return false;
  if (UPDI_ACK != RECV()) return false;
  if (!set_cs_ctra(UPDI_SET_RSD|UPDI_GTVAL_RSD)) return false;
     1c4:	d9 df       	rcall	.-78     	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>
_ZN4UPDI7sts8rsdEmPhh.constprop.17():
     1c6:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:226
  if (!send_bytes(_set_repeat, sizeof(_set_repeat))) return false;
     1c8:	a1 f0       	breq	.+40     	; 0x1f2 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.17]+0x6a>
     1ca:	65 e0       	ldi	r22, 0x05	; 5
     1cc:	8a e3       	ldi	r24, 0x3A	; 58
     1ce:	98 e3       	ldi	r25, 0x38	; 56
     1d0:	c2 df       	rcall	.-124    	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     1d2:	88 23       	and	r24, r24
     1d4:	71 f0       	breq	.+28     	; 0x1f2 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.17]+0x6a>
     1d6:	00 ea       	ldi	r16, 0xA0	; 160
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:228
  do {              /* Repeat byte send */
    SEND(*data++);  /* Submission errors must be ignored */
     1d8:	18 e3       	ldi	r17, 0x38	; 56
     1da:	f8 01       	movw	r30, r16
     1dc:	81 91       	ld	r24, Z+
     1de:	8f 01       	movw	r16, r30
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:229
  } while (--len);
     1e0:	a0 df       	rcall	.-192    	; 0x122 <UPDI::SEND(unsigned char)>
     1e2:	c1 50       	subi	r28, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:317
  set_ptr[2] = data;
  return send_bytes(set_ptr, sizeof(set_ptr));
}

bool UPDI::set_cs_ctra (uint8_t data) {
  return set_cs_stat(UPDI_CS_CTRLA, data);
     1e4:	d1 f7       	brne	.-12     	; 0x1da <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.17]+0x52>
set_cs_ctra():
     1e6:	66 e0       	ldi	r22, 0x06	; 6
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:232
  do {              /* Repeat byte send */
    SEND(*data++);  /* Submission errors must be ignored */
  } while (--len);
  if (!set_cs_ctra(UPDI_GTVAL)) return false;
  return true;
}
     1e8:	82 e0       	ldi	r24, 0x02	; 2
_ZN4UPDI7sts8rsdEmPhh.constprop.17():
     1ea:	cf 91       	pop	r28
     1ec:	1f 91       	pop	r17
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:317
  set_ptr[2] = data;
  return send_bytes(set_ptr, sizeof(set_ptr));
}

bool UPDI::set_cs_ctra (uint8_t data) {
  return set_cs_stat(UPDI_CS_CTRLA, data);
     1ee:	0f 91       	pop	r16
set_cs_ctra():
     1f0:	c3 cf       	rjmp	.-122    	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>
_ZN4UPDI7sts8rsdEmPhh.constprop.17():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:232
  do {              /* Repeat byte send */
    SEND(*data++);  /* Submission errors must be ignored */
  } while (--len);
  if (!set_cs_ctra(UPDI_GTVAL)) return false;
  return true;
}
     1f2:	80 e0       	ldi	r24, 0x00	; 0
     1f4:	cf 91       	pop	r28
     1f6:	1f 91       	pop	r17
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:288
 * Control status reception
 */

uint8_t UPDI::get_cs_stat (uint8_t code) {
  static uint8_t set_ptr[] = { UPDI_SYNCH, 0 };
  set_ptr[1] = UPDI_LDCS | code;
     1f8:	0f 91       	pop	r16
     1fa:	08 95       	ret

000001fc <UPDI::get_cs_stat(unsigned char)>:
_ZN4UPDI11get_cs_statEh():
     1fc:	80 68       	ori	r24, 0x80	; 128
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:289
  send_bytes(set_ptr, sizeof(set_ptr));
     1fe:	80 93 12 38 	sts	0x3812, r24	; 0x803812 <UPDI::get_cs_stat(unsigned char)::set_ptr+0x1>
     202:	62 e0       	ldi	r22, 0x02	; 2
     204:	81 e1       	ldi	r24, 0x11	; 17
     206:	98 e3       	ldi	r25, 0x38	; 56
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:290
  return RECV();
     208:	a6 df       	rcall	.-180    	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     20a:	7f cf       	rjmp	.-258    	; 0x10a <UPDI::RECV()>

0000020c <UPDI::st8(unsigned long, unsigned char)>:
_ZN4UPDI3st8Emh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:179

/*
 * Single byte transmission
 */

bool UPDI::st8 (uint32_t addr, uint8_t data) {
     20c:	cf 93       	push	r28
     20e:	c4 2f       	mov	r28, r20
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:185
  static uint8_t set_ptr[] = {
      UPDI_SYNCH
    , UPDI_STS | UPDI_ADDR3 | UPDI_DATA1
    , 0, 0, 0, 0    // 24bit address
  };
  _CAPS32(set_ptr[2])->dword = addr;
     210:	60 93 07 38 	sts	0x3807, r22	; 0x803807 <UPDI::st8(unsigned long, unsigned char)::set_ptr+0x2>
     214:	70 93 08 38 	sts	0x3808, r23	; 0x803808 <UPDI::st8(unsigned long, unsigned char)::set_ptr+0x3>
     218:	80 93 09 38 	sts	0x3809, r24	; 0x803809 <UPDI::st8(unsigned long, unsigned char)::set_ptr+0x4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:186
  if (!send_bytes(set_ptr, sizeof(set_ptr) - 1)) return false;
     21c:	90 93 0a 38 	sts	0x380A, r25	; 0x80380a <UPDI::st8(unsigned long, unsigned char)::set_ptr+0x5>
     220:	65 e0       	ldi	r22, 0x05	; 5
     222:	85 e0       	ldi	r24, 0x05	; 5
     224:	98 e3       	ldi	r25, 0x38	; 56
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:189
  if (UPDI_ACK != RECV()) return false;
  if (!SEND(data)) return false;
  return UPDI_ACK == RECV();
     226:	97 df       	rcall	.-210    	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     228:	81 11       	cpse	r24, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:187
    , UPDI_STS | UPDI_ADDR3 | UPDI_DATA1
    , 0, 0, 0, 0    // 24bit address
  };
  _CAPS32(set_ptr[2])->dword = addr;
  if (!send_bytes(set_ptr, sizeof(set_ptr) - 1)) return false;
  if (UPDI_ACK != RECV()) return false;
     22a:	02 c0       	rjmp	.+4      	; 0x230 <UPDI::st8(unsigned long, unsigned char)+0x24>
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	0b c0       	rjmp	.+22     	; 0x246 <UPDI::st8(unsigned long, unsigned char)+0x3a>
     230:	6c df       	rcall	.-296    	; 0x10a <UPDI::RECV()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:188
  if (!SEND(data)) return false;
     232:	80 34       	cpi	r24, 0x40	; 64
     234:	d9 f7       	brne	.-10     	; 0x22c <UPDI::st8(unsigned long, unsigned char)+0x20>
     236:	8c 2f       	mov	r24, r28
     238:	74 df       	rcall	.-280    	; 0x122 <UPDI::SEND(unsigned char)>
     23a:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:189
  return UPDI_ACK == RECV();
     23c:	b9 f3       	breq	.-18     	; 0x22c <UPDI::st8(unsigned long, unsigned char)+0x20>
     23e:	65 df       	rcall	.-310    	; 0x10a <UPDI::RECV()>
     240:	91 e0       	ldi	r25, 0x01	; 1
     242:	80 34       	cpi	r24, 0x40	; 64
     244:	99 f7       	brne	.-26     	; 0x22c <UPDI::st8(unsigned long, unsigned char)+0x20>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:190
}
     246:	89 2f       	mov	r24, r25
     248:	cf 91       	pop	r28
     24a:	08 95       	ret

0000024c <UPDI::send_repeat_header(unsigned long, unsigned char, unsigned char)>:
_ZN4UPDI18send_repeat_headerEmhh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:167
 * Repeat header transmission
 */

/* __attribute__((optimize("O0"))) */
bool UPDI::send_repeat_header (uint32_t addr, uint8_t cmd, uint8_t len) {
  _CAPS32(_set_ptr_l[2])->dword = addr;
     24c:	60 93 41 38 	sts	0x3841, r22	; 0x803841 <UPDI::_set_ptr_l+0x2>
     250:	70 93 42 38 	sts	0x3842, r23	; 0x803842 <UPDI::_set_ptr_l+0x3>
     254:	80 93 43 38 	sts	0x3843, r24	; 0x803843 <UPDI::_set_ptr_l+0x4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:168
  _set_repeat[2] = len - 1;
     258:	90 93 44 38 	sts	0x3844, r25	; 0x803844 <UPDI::_set_ptr_l+0x5>
     25c:	21 50       	subi	r18, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:169
  _set_repeat[4] = UPDI_PTR_INC | cmd;  // ST,LD + DATA1,DATA2
     25e:	20 93 3c 38 	sts	0x383C, r18	; 0x80383c <UPDI::_set_repeat+0x2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:170
  if (!send_bytes(_set_ptr_l, sizeof(_set_ptr_l) - 1)) return false;
     262:	44 60       	ori	r20, 0x04	; 4
     264:	40 93 3e 38 	sts	0x383E, r20	; 0x80383e <UPDI::_set_repeat+0x4>
     268:	65 e0       	ldi	r22, 0x05	; 5
     26a:	8f e3       	ldi	r24, 0x3F	; 63
     26c:	98 e3       	ldi	r25, 0x38	; 56
     26e:	73 df       	rcall	.-282    	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:171
  if (UPDI_ACK != RECV()) return false;
     270:	88 23       	and	r24, r24
     272:	39 f0       	breq	.+14     	; 0x282 <UPDI::send_repeat_header(unsigned long, unsigned char, unsigned char)+0x36>
     274:	4a df       	rcall	.-364    	; 0x10a <UPDI::RECV()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:172
  return send_bytes(_set_repeat, sizeof(_set_repeat));
     276:	80 34       	cpi	r24, 0x40	; 64
     278:	21 f4       	brne	.+8      	; 0x282 <UPDI::send_repeat_header(unsigned long, unsigned char, unsigned char)+0x36>
     27a:	65 e0       	ldi	r22, 0x05	; 5
     27c:	8a e3       	ldi	r24, 0x3A	; 58
     27e:	98 e3       	ldi	r25, 0x38	; 56
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:173
}
     280:	6a cf       	rjmp	.-300    	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:196

/*
 * Transmission
 */

bool UPDI::sts8 (uint32_t addr, uint8_t *data, uint8_t len) {
     282:	80 e0       	ldi	r24, 0x00	; 0
     284:	08 95       	ret

00000286 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)>:
_ZN4UPDI4sts8EmPhh():
     286:	ff 92       	push	r15
     288:	0f 93       	push	r16
     28a:	1f 93       	push	r17
     28c:	cf 93       	push	r28
     28e:	df 93       	push	r29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:197
  if (send_repeat_header(addr, UPDI_ST|UPDI_DATA1, len)) {
     290:	f4 2e       	mov	r15, r20
     292:	d5 2f       	mov	r29, r21
     294:	c2 2f       	mov	r28, r18
     296:	40 e6       	ldi	r20, 0x60	; 96
     298:	d9 df       	rcall	.-78     	; 0x24c <UPDI::send_repeat_header(unsigned long, unsigned char, unsigned char)>
     29a:	88 23       	and	r24, r24
     29c:	69 f0       	breq	.+26     	; 0x2b8 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)+0x32>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:199
    do {
      if (!SEND(*data++)) break;
     29e:	0f 2d       	mov	r16, r15
     2a0:	1d 2f       	mov	r17, r29
     2a2:	f8 01       	movw	r30, r16
     2a4:	81 91       	ld	r24, Z+
     2a6:	8f 01       	movw	r16, r30
     2a8:	3c df       	rcall	.-392    	; 0x122 <UPDI::SEND(unsigned char)>
     2aa:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:200
      if (UPDI_ACK != RECV()) break;
     2ac:	29 f0       	breq	.+10     	; 0x2b8 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)+0x32>
     2ae:	2d df       	rcall	.-422    	; 0x10a <UPDI::RECV()>
     2b0:	80 34       	cpi	r24, 0x40	; 64
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:201
    } while (--len);
     2b2:	11 f4       	brne	.+4      	; 0x2b8 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)+0x32>
     2b4:	c1 50       	subi	r28, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:203
  }
  return len == 0;
     2b6:	a9 f7       	brne	.-22     	; 0x2a2 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)+0x1c>
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	c1 11       	cpse	r28, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:204
}
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	df 91       	pop	r29
     2c0:	cf 91       	pop	r28
     2c2:	1f 91       	pop	r17
     2c4:	0f 91       	pop	r16
     2c6:	ff 90       	pop	r15
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:133
  if (!_r) bit_set(UPDI_LASTH, 0x20);
  return _r;
}

/* BREAK character : Generated by slowing down the sending speed */
void UPDI::BREAK (void) {
     2c8:	08 95       	ret

000002ca <UPDI::BREAK()>:
_ZN4UPDI5BREAKEv():
     2ca:	cf 93       	push	r28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:134
  UPDI_USART.BAUD = UPDI_BAUD_BREAK;
     2cc:	df 93       	push	r29
     2ce:	c0 e0       	ldi	r28, 0x00	; 0
     2d0:	d8 e0       	ldi	r29, 0x08	; 8
     2d2:	80 ec       	ldi	r24, 0xC0	; 192
     2d4:	94 e4       	ldi	r25, 0x44	; 68
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:136
  /* Maintains low level signal at least 768bit long */
  SEND(UPDI_NOP);
     2d6:	88 87       	std	Y+8, r24	; 0x08
     2d8:	99 87       	std	Y+9, r25	; 0x09
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:137
  UPDI_USART.BAUD = UPDI_BAUD_CALC;
     2da:	80 e0       	ldi	r24, 0x00	; 0
     2dc:	22 df       	rcall	.-444    	; 0x122 <UPDI::SEND(unsigned char)>
     2de:	80 eb       	ldi	r24, 0xB0	; 176
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:138
  bit_clear(UPDI_CONTROL, UPDI_CLKU_bp);
     2e0:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:139
}
     2e2:	88 87       	std	Y+8, r24	; 0x08
     2e4:	99 87       	std	Y+9, r25	; 0x09
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:261
  static uint8_t set_ptr[] = {
      UPDI_SYNCH
    , UPDI_LDS|UPDI_ADDR3|UPDI_DATA1
    , 0, 0, 0, 0  // 24bit address
  };
  _CAPS16(set_ptr[2])->word = (uint16_t)addr;
     2e6:	e6 98       	cbi	0x1c, 6	; 28
     2e8:	df 91       	pop	r29
     2ea:	cf 91       	pop	r28
     2ec:	08 95       	ret

000002ee <UPDI::ld8(unsigned long)>:
_ZN4UPDI3ld8Em():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:262
  while (!send_bytes(set_ptr, sizeof(set_ptr) - 1)) BREAK();
     2ee:	60 93 0d 38 	sts	0x380D, r22	; 0x80380d <UPDI::ld8(unsigned long)::set_ptr+0x2>
     2f2:	70 93 0e 38 	sts	0x380E, r23	; 0x80380e <UPDI::ld8(unsigned long)::set_ptr+0x3>
     2f6:	65 e0       	ldi	r22, 0x05	; 5
     2f8:	8b e0       	ldi	r24, 0x0B	; 11
     2fa:	98 e3       	ldi	r25, 0x38	; 56
     2fc:	2c df       	rcall	.-424    	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     2fe:	81 11       	cpse	r24, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:263
  return RECV();
     300:	02 c0       	rjmp	.+4      	; 0x306 <UPDI::ld8(unsigned long)+0x18>
     302:	e3 df       	rcall	.-58     	; 0x2ca <UPDI::BREAK()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:93
  return send_bytes(set_ptr, sizeof(set_ptr));
}

/* This only does a system reset */
bool UPDI::updi_reset (bool logic) {
  return set_cs_stat(
     304:	f8 cf       	rjmp	.-16     	; 0x2f6 <UPDI::ld8(unsigned long)+0x8>
     306:	01 cf       	rjmp	.-510    	; 0x10a <UPDI::RECV()>

00000308 <UPDI::updi_reset(bool)>:
_ZN4UPDI10updi_resetEb():
     308:	60 e0       	ldi	r22, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:95
    UPDI_CS_ASI_RESET_REQ,
    (logic ? UPDI_RSTREQ : UPDI_NOP));
     30a:	81 11       	cpse	r24, r1
     30c:	69 e5       	ldi	r22, 0x59	; 89
     30e:	88 e0       	ldi	r24, 0x08	; 8
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:78
  UPDI_USART.CTRLB = UPDI_USART_ON;
  bit_clear(UPDI_CONTROL, UPDI_CLKU_bp);
}

/* This special system reset will log you out of UPDI */
bool UPDI::Target_Reset (bool _enable) {
     310:	33 cf       	rjmp	.-410    	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>

00000312 <UPDI::Target_Reset(bool)>:
_ZN4UPDI12Target_ResetEb():
     312:	cf 93       	push	r28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:86
    , UPDI_STCS | UPDI_CS_ASI_RESET_REQ
    , 0
    , UPDI_STCS | UPDI_CS_CTRLB
    , UPDI_SET_UPDIDIS
  };
  BREAK();
     314:	c8 2f       	mov	r28, r24
     316:	d9 df       	rcall	.-78     	; 0x2ca <UPDI::BREAK()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:87
  set_ptr[2] = _enable ? UPDI_RSTREQ : UPDI_NOP;
     318:	80 e0       	ldi	r24, 0x00	; 0
     31a:	c1 11       	cpse	r28, r1
     31c:	89 e5       	ldi	r24, 0x59	; 89
     31e:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <__DATA_REGION_ORIGIN__+0x2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:88
  return send_bytes(set_ptr, sizeof(set_ptr));
     322:	65 e0       	ldi	r22, 0x05	; 5
     324:	80 e0       	ldi	r24, 0x00	; 0
     326:	98 e3       	ldi	r25, 0x38	; 56
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:89
}
     328:	cf 91       	pop	r28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:88
    , UPDI_STCS | UPDI_CS_CTRLB
    , UPDI_SET_UPDIDIS
  };
  BREAK();
  set_ptr[2] = _enable ? UPDI_RSTREQ : UPDI_NOP;
  return send_bytes(set_ptr, sizeof(set_ptr));
     32a:	15 cf       	rjmp	.-470    	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>

0000032c <TIM::LED_Flash()>:
_ZN3TIM9LED_FlashEv():
     32c:	80 91 61 38 	lds	r24, 0x3861	; 0x803861 <TIM::mode>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:139
    LEDG_EVOUT = EVSYS_USER_CHANNEL2_gc;
  }
}

void LED_TCB1 (uint8_t mode, uint16_t ccmp) {
  if (TIM::mode != mode) {
     330:	82 30       	cpi	r24, 0x02	; 2
     332:	99 f0       	breq	.+38     	; 0x35a <TIM::LED_Flash()+0x2e>
     334:	82 e0       	ldi	r24, 0x02	; 2
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:140
    TIM::mode = mode;
     336:	80 93 61 38 	sts	0x3861, r24	; 0x803861 <TIM::mode>
     33a:	89 ea       	ldi	r24, 0xA9	; 169
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:141
    TCB1_CCMP = ccmp;
     33c:	98 e0       	ldi	r25, 0x08	; 8
     33e:	80 93 9c 0a 	sts	0x0A9C, r24	; 0x800a9c <__RODATA_PM_OFFSET__+0x7f8a9c>
     342:	90 93 9d 0a 	sts	0x0A9D, r25	; 0x800a9d <__RODATA_PM_OFFSET__+0x7f8a9d>
     346:	10 92 9a 0a 	sts	0x0A9A, r1	; 0x800a9a <__RODATA_PM_OFFSET__+0x7f8a9a>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:142
    TCB1_CNT = 0;
     34a:	10 92 9b 0a 	sts	0x0A9B, r1	; 0x800a9b <__RODATA_PM_OFFSET__+0x7f8a9b>
     34e:	8f e4       	ldi	r24, 0x4F	; 79
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:143
    TCB1_CTRLA = TCB_RUNSTDBY_bm | TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
     350:	80 93 90 0a 	sts	0x0A90, r24	; 0x800a90 <__RODATA_PM_OFFSET__+0x7f8a90>
     354:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:144
    LEDG_EVOUT = EVSYS_USER_CHANNEL0_gc;
     356:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <__RODATA_PM_OFFSET__+0x7f81a9>
     35a:	08 95       	ret

0000035c <TIM::Timeout_Stop()>:
_ZN3TIM12Timeout_StopEv():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:151
}

/* Flash (after RTS assert/UPDI authorization) */
void TIM::LED_Flash (void) {
  LED_TCB1(2, TCB1_FLASH);
}
     35c:	8f b7       	in	r24, 0x3f	; 63
__iCliRetVal():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:116
    TCB0_CTRLA = TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
  }
}

void TIM::Timeout_Stop (void) {
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     35e:	f8 94       	cli
_ZN3TIM12Timeout_StopEv():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     360:	10 92 80 0a 	sts	0x0A80, r1	; 0x800a80 <__RODATA_PM_OFFSET__+0x7f8a80>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:117
    TCB0_CTRLA = 0;
     364:	91 e0       	ldi	r25, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:118
    TCB0_INTFLAGS = TCB_CAPT_bm;
     366:	90 93 86 0a 	sts	0x0A86, r25	; 0x800a86 <__RODATA_PM_OFFSET__+0x7f8a86>
__iRestore():
     36a:	8f bf       	out	0x3f, r24	; 63
_ZN3TIM12Timeout_StopEv():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     36c:	18 95       	reti
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:120
  }
  reti();
     36e:	08 95       	ret

00000370 <SYS::WDT_SET(unsigned char)>:
_ZN3SYS7WDT_SETEh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:121
}
     370:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__RODATA_PM_OFFSET__+0x7f8101>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:160
/*****************
 * WDT operation *
 *****************/

void SYS::WDT_SET (uint8_t _wdt_period) {
  loop_until_bit_is_clear(WDT_STATUS, WDT_SYNCBUSY_bp);
     374:	90 fd       	sbrc	r25, 0
     376:	fc cf       	rjmp	.-8      	; 0x370 <SYS::WDT_SET(unsigned char)>
     378:	98 ed       	ldi	r25, 0xD8	; 216
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:161
  _PROTECTED_WRITE(WDT_CTRLA, _wdt_period);
     37a:	94 bf       	out	0x34, r25	; 52
     37c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__RODATA_PM_OFFSET__+0x7f8100>
     380:	08 95       	ret

00000382 <SYS::get_vcc()>:
_ZN3SYS7get_vccEv():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:162
}
     382:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:70
 * Self VCC measurement *
 ************************/

/*** This routine is exclusive to the tinyAVR-2 series. ***/
uint16_t SYS::get_vcc (void) {
  ADC0_CTRLA = ADC_ENABLE_bm;
     384:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__RODATA_PM_OFFSET__+0x7f8600>
     388:	10 92 01 06 	sts	0x0601, r1	; 0x800601 <__RODATA_PM_OFFSET__+0x7f8601>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:71
  ADC0_CTRLB = ADC_PRESC_DIV2_gc;
     38c:	84 e5       	ldi	r24, 0x54	; 84
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:72
  ADC0_CTRLC = ADC_REFSEL_1024MV_gc | ((F_CPU / 1000000UL) << ADC_TIMEBASE_gp);
     38e:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__RODATA_PM_OFFSET__+0x7f8602>
     392:	81 e1       	ldi	r24, 0x11	; 17
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:73
  ADC0_CTRLE = 17; /* (SAMPDUR + 0.5) * fCLK_ADC = 10.5 µs sample duration */
     394:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__RODATA_PM_OFFSET__+0x7f8608>
     398:	91 e3       	ldi	r25, 0x31	; 49
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:74
  ADC0_MUXPOS = ADC_MUXPOS_VDDDIV10_gc; /* ADC channel VDD/10 */
     39a:	90 93 0c 06 	sts	0x060C, r25	; 0x80060c <__RODATA_PM_OFFSET__+0x7f860c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:75
  ADC0_COMMAND = ADC_MODE_SINGLE_12BIT_gc | ADC_START_IMMEDIATE_gc;
     39e:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <__RODATA_PM_OFFSET__+0x7f860a>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:76
  loop_until_bit_is_set(ADC0_INTFLAGS, ADC_SAMPRDY_bp);
     3a2:	80 91 05 06 	lds	r24, 0x0605	; 0x800605 <__RODATA_PM_OFFSET__+0x7f8605>
     3a6:	81 ff       	sbrs	r24, 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:77
  uint16_t adc_reading = ADC0_SAMPLE;
     3a8:	fc cf       	rjmp	.-8      	; 0x3a2 <SYS::get_vcc()+0x20>
     3aa:	20 91 14 06 	lds	r18, 0x0614	; 0x800614 <__RODATA_PM_OFFSET__+0x7f8614>
     3ae:	30 91 15 06 	lds	r19, 0x0615	; 0x800615 <__RODATA_PM_OFFSET__+0x7f8615>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:78
  adc_reading += adc_reading + (adc_reading >> 1);  /* x2.5 */
     3b2:	c9 01       	movw	r24, r18
     3b4:	96 95       	lsr	r25
     3b6:	87 95       	ror	r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:79
  ADC0_CTRLA = 0;
     3b8:	22 0f       	add	r18, r18
     3ba:	33 1f       	adc	r19, r19
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:81
  return adc_reading;
}
     3bc:	10 92 00 06 	sts	0x0600, r1	; 0x800600 <__RODATA_PM_OFFSET__+0x7f8600>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:69
    return UPDI_LASTL;
  }

  /* NVMCTRL version 0 (,2,3,5) */
  bool nvm_ctrl (uint8_t nvmcmd) {
    return UPDI::st8(NVMCTRL_REG_CTRLA, nvmcmd);
     3c0:	82 0f       	add	r24, r18
     3c2:	93 1f       	adc	r25, r19
     3c4:	08 95       	ret

000003c6 <NVM::nvm_ctrl(unsigned char)>:
_ZN3NVM8nvm_ctrlEh():
     3c6:	48 2f       	mov	r20, r24
     3c8:	60 e0       	ldi	r22, 0x00	; 0
     3ca:	70 e1       	ldi	r23, 0x10	; 16
     3cc:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:73
  }

  /* NVMCTRL version 2,3,5 */
  bool nvm_ctrl_change (uint8_t nvmcmd) {
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	1d cf       	rjmp	.-454    	; 0x20c <UPDI::st8(unsigned long, unsigned char)>

000003d2 <NVM::nvm_ctrl_change(unsigned char)>:
_ZN3NVM15nvm_ctrl_changeEh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:74
    if (UPDI::ld8(NVMCTRL_REG_CTRLA) == nvmcmd) return true;
     3d2:	cf 93       	push	r28
     3d4:	c8 2f       	mov	r28, r24
     3d6:	60 e0       	ldi	r22, 0x00	; 0
     3d8:	70 e1       	ldi	r23, 0x10	; 16
     3da:	80 e0       	ldi	r24, 0x00	; 0
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	87 df       	rcall	.-242    	; 0x2ee <UPDI::ld8(unsigned long)>
     3e0:	8c 13       	cpse	r24, r28
     3e2:	03 c0       	rjmp	.+6      	; 0x3ea <NVM::nvm_ctrl_change(unsigned char)+0x18>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:78
    if (!nvm_ctrl(NVM_CMD_NOCMD)) return false;
    if (NVM_CMD_NOCMD != nvmcmd) return nvm_ctrl(nvmcmd);
    return true;
  }
     3e4:	81 e0       	ldi	r24, 0x01	; 1
     3e6:	cf 91       	pop	r28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:75
  }

  /* NVMCTRL version 2,3,5 */
  bool nvm_ctrl_change (uint8_t nvmcmd) {
    if (UPDI::ld8(NVMCTRL_REG_CTRLA) == nvmcmd) return true;
    if (!nvm_ctrl(NVM_CMD_NOCMD)) return false;
     3e8:	08 95       	ret
     3ea:	80 e0       	ldi	r24, 0x00	; 0
     3ec:	ec df       	rcall	.-40     	; 0x3c6 <NVM::nvm_ctrl(unsigned char)>
     3ee:	88 23       	and	r24, r24
     3f0:	d1 f3       	breq	.-12     	; 0x3e6 <NVM::nvm_ctrl_change(unsigned char)+0x14>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:76
    if (NVM_CMD_NOCMD != nvmcmd) return nvm_ctrl(nvmcmd);
     3f2:	cc 23       	and	r28, r28
     3f4:	b9 f3       	breq	.-18     	; 0x3e4 <NVM::nvm_ctrl_change(unsigned char)+0x12>
     3f6:	8c 2f       	mov	r24, r28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:78
    return true;
  }
     3f8:	cf 91       	pop	r28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:76

  /* NVMCTRL version 2,3,5 */
  bool nvm_ctrl_change (uint8_t nvmcmd) {
    if (UPDI::ld8(NVMCTRL_REG_CTRLA) == nvmcmd) return true;
    if (!nvm_ctrl(NVM_CMD_NOCMD)) return false;
    if (NVM_CMD_NOCMD != nvmcmd) return nvm_ctrl(nvmcmd);
     3fa:	e5 cf       	rjmp	.-54     	; 0x3c6 <NVM::nvm_ctrl(unsigned char)>

000003fc <JTAG2::set_response(JTAG2::jtag_response_e)>:
_ZN5JTAG212set_responseENS_15jtag_response_eE():
     3fc:	ee e8       	ldi	r30, 0x8E	; 142
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:470
/*****************
 * JTAG Response *
 *****************/

void JTAG2::set_response (jtag_response_e response_code) {
  packet.size = 4;
     3fe:	f8 e3       	ldi	r31, 0x38	; 56
     400:	44 e0       	ldi	r20, 0x04	; 4
     402:	50 e0       	ldi	r21, 0x00	; 0
     404:	60 e0       	ldi	r22, 0x00	; 0
     406:	70 e0       	ldi	r23, 0x00	; 0
     408:	43 83       	std	Z+3, r20	; 0x03
     40a:	54 83       	std	Z+4, r21	; 0x04
     40c:	65 83       	std	Z+5, r22	; 0x05
     40e:	76 83       	std	Z+6, r23	; 0x06
     410:	80 87       	std	Z+8, r24	; 0x08
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:472
  /* response number */
  packet.body[MESSAGE_ID] = response_code;
     412:	8c b3       	in	r24, 0x1c	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:474
  /* Internal status flag */
  packet.body[RSP_DATA    ] = UPDI_CONTROL;
     414:	81 87       	std	Z+9, r24	; 0x09
     416:	8d b3       	in	r24, 0x1d	; 29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:475
  packet.body[RSP_DATA + 1] = UPDI_NVMCTRL;
     418:	82 87       	std	Z+10, r24	; 0x0a
     41a:	8e b3       	in	r24, 0x1e	; 30
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:476
  packet.body[RSP_DATA + 2] = UPDI_LASTL;
     41c:	83 87       	std	Z+11, r24	; 0x0b
     41e:	08 95       	ret

00000420 <_crc_ccitt_update(unsigned int, unsigned char)>:
_ZL17_crc_ccitt_updatejh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:477
}
     420:	86 27       	eor	r24, r22
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/crc16.h:285
        "eor    %A0,__tmp_reg__"

        : "=d" (__ret)
        : "r" (__data), "0" (__crc)
        : "r0"
    );
     422:	08 2e       	mov	r0, r24
     424:	82 95       	swap	r24
     426:	80 7f       	andi	r24, 0xF0	; 240
     428:	80 25       	eor	r24, r0
     42a:	09 2e       	mov	r0, r25
     42c:	98 2f       	mov	r25, r24
     42e:	82 95       	swap	r24
     430:	8f 70       	andi	r24, 0x0F	; 15
     432:	08 26       	eor	r0, r24
     434:	86 95       	lsr	r24
     436:	98 27       	eor	r25, r24
     438:	89 27       	eor	r24, r25
     43a:	88 0f       	add	r24, r24
     43c:	88 0f       	add	r24, r24
     43e:	88 0f       	add	r24, r24
     440:	80 25       	eor	r24, r0
     442:	08 95       	ret

00000444 <JTAG2::answer_transfer()>:
_ZN5JTAG215answer_transferEv():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/crc16.h:287
    return __ret;
}
     444:	af 92       	push	r10
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:150

  /***************
   * JTAG Answer *
   ***************/

  void answer_transfer (void) {
     446:	bf 92       	push	r11
     448:	cf 92       	push	r12
     44a:	df 92       	push	r13
     44c:	ef 92       	push	r14
     44e:	ff 92       	push	r15
     450:	0f 93       	push	r16
     452:	1f 93       	push	r17
     454:	cf 93       	push	r28
     456:	df 93       	push	r29
     458:	00 d0       	rcall	.+0      	; 0x45a <JTAG2::answer_transfer()+0x16>
     45a:	cd b7       	in	r28, 0x3d	; 61
     45c:	de b7       	in	r29, 0x3e	; 62
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:151
    uint16_t _crc = ~0;
     45e:	8f ef       	ldi	r24, 0xFF	; 255
     460:	9f ef       	ldi	r25, 0xFF	; 255
     462:	89 83       	std	Y+1, r24	; 0x01
     464:	9a 83       	std	Y+2, r25	; 0x02
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:152
    int16_t _len = packet.size_word[0] + 8;
     466:	e0 90 91 38 	lds	r14, 0x3891	; 0x803891 <JTAG2::packet+0x3>
     46a:	f0 90 92 38 	lds	r15, 0x3892	; 0x803892 <JTAG2::packet+0x4>
     46e:	87 01       	movw	r16, r14
     470:	08 5f       	subi	r16, 0xF8	; 248
     472:	1f 4f       	sbci	r17, 0xFF	; 255
     474:	8e e8       	ldi	r24, 0x8E	; 142
     476:	c8 2e       	mov	r12, r24
     478:	88 e3       	ldi	r24, 0x38	; 56
     47a:	d8 2e       	mov	r13, r24
     47c:	56 01       	movw	r10, r12
     47e:	81 e0       	ldi	r24, 0x01	; 1
     480:	e8 1a       	sub	r14, r24
     482:	f1 08       	sbc	r15, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:155
    uint8_t *_p = (uint8_t*) &packet.soh;
    uint8_t *_q = (uint8_t*) &packet.soh;
    while (_len--) _crc = crc16_update(_crc, *_q++);
     484:	a7 ef       	ldi	r26, 0xF7	; 247
     486:	ea 16       	cp	r14, r26
     488:	af ef       	ldi	r26, 0xFF	; 255
     48a:	fa 06       	cpc	r15, r26
     48c:	49 f0       	breq	.+18     	; 0x4a0 <JTAG2::answer_transfer()+0x5c>
     48e:	f5 01       	movw	r30, r10
     490:	61 91       	ld	r22, Z+
     492:	5f 01       	movw	r10, r30
crc16_update():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:101
  void flush (void) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_TXCIF_bp);
  }

  uint16_t crc16_update(uint16_t _crc, uint8_t _data) {
    return _crc_ccitt_update(_crc, _data);
     494:	89 81       	ldd	r24, Y+1	; 0x01
     496:	9a 81       	ldd	r25, Y+2	; 0x02
     498:	c3 df       	rcall	.-122    	; 0x420 <_crc_ccitt_update(unsigned int, unsigned char)>
_ZN5JTAG215answer_transferEv():
     49a:	89 83       	std	Y+1, r24	; 0x01
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:155
  void answer_transfer (void) {
    uint16_t _crc = ~0;
    int16_t _len = packet.size_word[0] + 8;
    uint8_t *_p = (uint8_t*) &packet.soh;
    uint8_t *_q = (uint8_t*) &packet.soh;
    while (_len--) _crc = crc16_update(_crc, *_q++);
     49c:	9a 83       	std	Y+2, r25	; 0x02
     49e:	ef cf       	rjmp	.-34     	; 0x47e <JTAG2::answer_transfer()+0x3a>
     4a0:	f8 01       	movw	r30, r16
     4a2:	e2 57       	subi	r30, 0x72	; 114
     4a4:	f7 4c       	sbci	r31, 0xC7	; 199
     4a6:	89 81       	ldd	r24, Y+1	; 0x01
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:156
    (*_q++) = _CAPS16(_crc)->bytes[0];
     4a8:	80 83       	st	Z, r24
     4aa:	8a 81       	ldd	r24, Y+2	; 0x02
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:157
    (*_q++) = _CAPS16(_crc)->bytes[1];
     4ac:	81 83       	std	Z+1, r24	; 0x01
     4ae:	2f b7       	in	r18, 0x3f	; 63
__iCliRetVal():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:158
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     4b0:	f8 94       	cli
_ZN5JTAG215answer_transferEv():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     4b2:	32 96       	adiw	r30, 0x02	; 2
put():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:157
    int16_t _len = packet.size_word[0] + 8;
    uint8_t *_p = (uint8_t*) &packet.soh;
    uint8_t *_q = (uint8_t*) &packet.soh;
    while (_len--) _crc = crc16_update(_crc, *_q++);
    (*_q++) = _CAPS16(_crc)->bytes[0];
    (*_q++) = _CAPS16(_crc)->bytes[1];
     4b4:	90 e4       	ldi	r25, 0x40	; 64
_ZN5JTAG215answer_transferEv():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:92
    return JTAG_USART.RXDATAL;
  }

  uint8_t put (uint8_t _data) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_DREIF_bp);
    JTAG_USART.STATUS = USART_TXCIF_bm;
     4b6:	ce 16       	cp	r12, r30
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:159
    uint8_t *_q = (uint8_t*) &packet.soh;
    while (_len--) _crc = crc16_update(_crc, *_q++);
    (*_q++) = _CAPS16(_crc)->bytes[0];
    (*_q++) = _CAPS16(_crc)->bytes[1];
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
      while (_p != _q) put(*_p++);
     4b8:	df 06       	cpc	r13, r31
     4ba:	71 f4       	brne	.+28     	; 0x4d8 <JTAG2::answer_transfer()+0x94>
__iRestore():
     4bc:	2f bf       	out	0x3f, r18	; 63
_ZN5JTAG215answer_transferEv():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:161
    }
  }
     4be:	0f 90       	pop	r0
     4c0:	0f 90       	pop	r0
     4c2:	df 91       	pop	r29
     4c4:	cf 91       	pop	r28
     4c6:	1f 91       	pop	r17
     4c8:	0f 91       	pop	r16
     4ca:	ff 90       	pop	r15
     4cc:	ef 90       	pop	r14
     4ce:	df 90       	pop	r13
     4d0:	cf 90       	pop	r12
     4d2:	bf 90       	pop	r11
     4d4:	af 90       	pop	r10
     4d6:	08 95       	ret
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:159
    uint8_t *_q = (uint8_t*) &packet.soh;
    while (_len--) _crc = crc16_update(_crc, *_q++);
    (*_q++) = _CAPS16(_crc)->bytes[0];
    (*_q++) = _CAPS16(_crc)->bytes[1];
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
      while (_p != _q) put(*_p++);
     4d8:	d6 01       	movw	r26, r12
     4da:	8d 91       	ld	r24, X+
     4dc:	6d 01       	movw	r12, r26
put():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:91
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_RXCIF_bp);
    return JTAG_USART.RXDATAL;
  }

  uint8_t put (uint8_t _data) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_DREIF_bp);
     4de:	30 91 24 08 	lds	r19, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
     4e2:	35 ff       	sbrs	r19, 5
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:92
    JTAG_USART.STATUS = USART_TXCIF_bm;
     4e4:	fc cf       	rjmp	.-8      	; 0x4de <JTAG2::answer_transfer()+0x9a>
     4e6:	90 93 24 08 	sts	0x0824, r25	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:93
    return JTAG_USART.TXDATAL = _data;
     4ea:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <__RODATA_PM_OFFSET__+0x7f8822>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:374
  } while (--limit);
  return false;
}

/* __attribute__((optimize("O0"))) */
bool UPDI::loop_until_key_stat_is_set (uint8_t bitmap, uint16_t limit) {
     4ee:	e3 cf       	rjmp	.-58     	; 0x4b6 <JTAG2::answer_transfer()+0x72>

000004f0 <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.20]>:
_ZN4UPDI26loop_until_key_stat_is_setEhj.constprop.20():
     4f0:	1f 93       	push	r17
     4f2:	cf 93       	push	r28
     4f4:	df 93       	push	r29
     4f6:	18 2f       	mov	r17, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:294
  send_bytes(set_ptr, sizeof(set_ptr));
  return RECV();
}

bool UPDI::is_cs_stat (uint8_t code, uint8_t check) {
  return check == (get_cs_stat(code) & check);
     4f8:	d0 e0       	ldi	r29, 0x00	; 0
     4fa:	c0 e0       	ldi	r28, 0x00	; 0
is_cs_stat():
     4fc:	87 e0       	ldi	r24, 0x07	; 7
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:379
bool UPDI::loop_until_key_stat_is_set (uint8_t bitmap, uint16_t limit) {
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  uint16_t _back = _send_ptr;
  #endif
  do {
    if (is_key_stat(bitmap)) return true;
     4fe:	7e de       	rcall	.-772    	; 0x1fc <UPDI::get_cs_stat(unsigned char)>
     500:	81 23       	and	r24, r17
_ZN4UPDI26loop_until_key_stat_is_setEhj.constprop.20():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.8/cores/megaAVR/api/delay_busywait.h:31
static __inline__ __attribute__((__always_inline__)) void delay_micros (uint32_t _us);
static __inline__ __attribute__((__always_inline__)) void delay_millis (uint32_t _ms);

void delay_micros (uint32_t _us) {
  if (F_CPU >= 1000000L) {
    __builtin_avr_delay_cycles((F_CPU / 1000000L) * _us);
     502:	18 17       	cp	r17, r24
     504:	59 f0       	breq	.+22     	; 0x51c <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.20]+0x2c>
delay_micros():
     506:	86 ea       	ldi	r24, 0xA6	; 166
     508:	8a 95       	dec	r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:384
    #ifdef ENABLE_DEBUG_UPDI_SENDER
    _send_ptr = _back;
    #endif
    TIM::delay_50us();
  } while (--limit);
     50a:	f1 f7       	brne	.-4      	; 0x508 <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.20]+0x18>
     50c:	00 c0       	rjmp	.+0      	; 0x50e <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.20]+0x1e>
_ZN4UPDI26loop_until_key_stat_is_setEhj.constprop.20():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:385
  return false;
     50e:	21 97       	sbiw	r28, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:386
}
     510:	a9 f7       	brne	.-22     	; 0x4fc <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.20]+0xc>
     512:	80 e0       	ldi	r24, 0x00	; 0
     514:	df 91       	pop	r29
     516:	cf 91       	pop	r28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:379
bool UPDI::loop_until_key_stat_is_set (uint8_t bitmap, uint16_t limit) {
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  uint16_t _back = _send_ptr;
  #endif
  do {
    if (is_key_stat(bitmap)) return true;
     518:	1f 91       	pop	r17
     51a:	08 95       	ret
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:390
  return false;
}

/* __attribute__((optimize("O0"))) */
bool UPDI::set_nvmprog_key (void) {
  if (!send_bytes(nvmprog_key, sizeof(nvmprog_key))) return false;
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	fa cf       	rjmp	.-12     	; 0x514 <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.20]+0x24>

00000520 <UPDI::set_nvmprog_key()>:
_ZN4UPDI15set_nvmprog_keyEv():
     520:	6a e0       	ldi	r22, 0x0A	; 10
     522:	86 e1       	ldi	r24, 0x16	; 22
     524:	98 e3       	ldi	r25, 0x38	; 56
     526:	17 de       	rcall	.-978    	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:391
  return loop_until_key_stat_is_set(UPDI_KEY_NVMPROG);
     528:	88 23       	and	r24, r24
     52a:	11 f0       	breq	.+4      	; 0x530 <UPDI::set_nvmprog_key()+0x10>
     52c:	80 e1       	ldi	r24, 0x10	; 16
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:392
}
     52e:	e0 cf       	rjmp	.-64     	; 0x4f0 <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.20]>
     530:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:344
  } while (--limit);
  return false;
}

/* __attribute__((optimize("O0"))) */
bool UPDI::loop_until_sys_stat_is_set (uint8_t bitmap, uint16_t limit) {
     532:	08 95       	ret

00000534 <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.23]>:
_ZN4UPDI26loop_until_sys_stat_is_setEhj.constprop.23():
     534:	1f 93       	push	r17
     536:	cf 93       	push	r28
     538:	df 93       	push	r29
     53a:	18 2f       	mov	r17, r24
     53c:	d0 e0       	ldi	r29, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:294
  send_bytes(set_ptr, sizeof(set_ptr));
  return RECV();
}

bool UPDI::is_cs_stat (uint8_t code, uint8_t check) {
  return check == (get_cs_stat(code) & check);
     53e:	c0 e0       	ldi	r28, 0x00	; 0
is_cs_stat():
     540:	8b e0       	ldi	r24, 0x0B	; 11
     542:	5c de       	rcall	.-840    	; 0x1fc <UPDI::get_cs_stat(unsigned char)>
     544:	81 23       	and	r24, r17
_ZN4UPDI26loop_until_sys_stat_is_setEhj.constprop.23():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:349
bool UPDI::loop_until_sys_stat_is_set (uint8_t bitmap, uint16_t limit) {
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  uint16_t _back = _send_ptr;
  #endif
  do {
    if (is_sys_stat(bitmap)) return true;
     546:	18 17       	cp	r17, r24
     548:	59 f0       	breq	.+22     	; 0x560 <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.23]+0x2c>
delay_micros():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.8/cores/megaAVR/api/delay_busywait.h:31
     54a:	86 ea       	ldi	r24, 0xA6	; 166
     54c:	8a 95       	dec	r24
     54e:	f1 f7       	brne	.-4      	; 0x54c <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.23]+0x18>
     550:	00 c0       	rjmp	.+0      	; 0x552 <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.23]+0x1e>
_ZN4UPDI26loop_until_sys_stat_is_setEhj.constprop.23():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:354
    #ifdef ENABLE_DEBUG_UPDI_SENDER
    _send_ptr = _back;
    #endif
    TIM::delay_50us();
  } while (--limit);
     552:	21 97       	sbiw	r28, 0x01	; 1
     554:	a9 f7       	brne	.-22     	; 0x540 <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.23]+0xc>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:355
  return false;
     556:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:356
}
     558:	df 91       	pop	r29
     55a:	cf 91       	pop	r28
     55c:	1f 91       	pop	r17
     55e:	08 95       	ret
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:349
bool UPDI::loop_until_sys_stat_is_set (uint8_t bitmap, uint16_t limit) {
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  uint16_t _back = _send_ptr;
  #endif
  do {
    if (is_sys_stat(bitmap)) return true;
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	fa cf       	rjmp	.-12     	; 0x558 <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.23]+0x24>

00000564 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>:
_ZN4UPDI28loop_until_sys_stat_is_clearEhj():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:329
uint8_t UPDI::get_cs_asi_ctra (void) {
  return get_cs_stat(UPDI_CS_ASI_CTRLA);
}

/* __attribute__((optimize("O0"))) */
bool UPDI::loop_until_sys_stat_is_clear (uint8_t bitmap, uint16_t limit) {
     564:	1f 93       	push	r17
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
     56a:	18 2f       	mov	r17, r24
     56c:	eb 01       	movw	r28, r22
is_cs_stat():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:294
  send_bytes(set_ptr, sizeof(set_ptr));
  return RECV();
}

bool UPDI::is_cs_stat (uint8_t code, uint8_t check) {
  return check == (get_cs_stat(code) & check);
     56e:	8b e0       	ldi	r24, 0x0B	; 11
     570:	45 de       	rcall	.-886    	; 0x1fc <UPDI::get_cs_stat(unsigned char)>
     572:	81 23       	and	r24, r17
_ZN4UPDI28loop_until_sys_stat_is_clearEhj():
     574:	18 13       	cpse	r17, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:334
bool UPDI::loop_until_sys_stat_is_clear (uint8_t bitmap, uint16_t limit) {
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  uint16_t _back = _send_ptr;
  #endif
  do {
    if (!is_sys_stat(bitmap)) return true;
     576:	0b c0       	rjmp	.+22     	; 0x58e <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)+0x2a>
delay_micros():
     578:	86 ea       	ldi	r24, 0xA6	; 166
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.8/cores/megaAVR/api/delay_busywait.h:31
     57a:	8a 95       	dec	r24
     57c:	f1 f7       	brne	.-4      	; 0x57a <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)+0x16>
     57e:	00 c0       	rjmp	.+0      	; 0x580 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)+0x1c>
_ZN4UPDI28loop_until_sys_stat_is_clearEhj():
     580:	21 97       	sbiw	r28, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:339
    #ifdef ENABLE_DEBUG_UPDI_SENDER
    _send_ptr = _back;
    #endif
    TIM::delay_50us();
  } while (--limit);
     582:	a9 f7       	brne	.-22     	; 0x56e <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)+0xa>
     584:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:340
  return false;
     586:	df 91       	pop	r29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:341
}
     588:	cf 91       	pop	r28
     58a:	1f 91       	pop	r17
     58c:	08 95       	ret
     58e:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:334
bool UPDI::loop_until_sys_stat_is_clear (uint8_t bitmap, uint16_t limit) {
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  uint16_t _back = _send_ptr;
  #endif
  do {
    if (!is_sys_stat(bitmap)) return true;
     590:	fa cf       	rjmp	.-12     	; 0x586 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)+0x22>

00000592 <UPDI::HV_Pulse()>:
_ZN4UPDI8HV_PulseEv():
     592:	80 91 64 38 	lds	r24, 0x3864	; 0x803864 <JTAG2::updi_desc+0x2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:422

void UPDI::HV_Pulse (void) {
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  UPDI::_send_buf_push(JTAG2::updi_desc.hvupdi_variant);
  #endif
  if (JTAG2::updi_desc.hvupdi_variant != '0'
     596:	8d 7f       	andi	r24, 0xFD	; 253
     598:	80 33       	cpi	r24, 0x30	; 48
     59a:	09 f0       	breq	.+2      	; 0x59e <UPDI::HV_Pulse()+0xc>
     59c:	38 c0       	rjmp	.+112    	; 0x60e <UPDI::HV_Pulse()+0x7c>
HV_Pulse_ON():
     59e:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__RODATA_PM_OFFSET__+0x7f8a01>
_ZN4UPDI8HV_PulseEv():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:429

  /* Run high voltage generator */
  TIM::HV_Pulse_ON();

  /* Perform a hardware reset (if wired) */
  openDrainWrite(TRST_PIN, LOW);
     5a2:	21 9a       	sbi	0x04, 1	; 4
delay_micros():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.8/cores/megaAVR/api/delay_busywait.h:31
     5a4:	86 ea       	ldi	r24, 0xA6	; 166
     5a6:	8a 95       	dec	r24
     5a8:	f1 f7       	brne	.-4      	; 0x5a6 <UPDI::HV_Pulse()+0x14>
     5aa:	00 c0       	rjmp	.+0      	; 0x5ac <UPDI::HV_Pulse()+0x1a>
_ZN4UPDI8HV_PulseEv():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:431
  TIM::delay_50us();
  openDrainWrite(TRST_PIN, HIGH);
     5ac:	21 98       	cbi	0x04, 1	; 4
delay_micros():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.8/cores/megaAVR/api/delay_busywait.h:31
     5ae:	8f ec       	ldi	r24, 0xCF	; 207
     5b0:	97 e0       	ldi	r25, 0x07	; 7
     5b2:	01 97       	sbiw	r24, 0x01	; 1
     5b4:	f1 f7       	brne	.-4      	; 0x5b2 <UPDI::HV_Pulse()+0x20>
     5b6:	00 c0       	rjmp	.+0      	; 0x5b8 <UPDI::HV_Pulse()+0x26>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:435
  TIM::delay_800us();
  /* During this time, raise the circuit to sufficient voltage */

  if (JTAG2::updi_desc.hvupdi_variant == '0')
     5b8:	00 00       	nop
_ZN4UPDI8HV_PulseEv():
     5ba:	80 91 64 38 	lds	r24, 0x3864	; 0x803864 <JTAG2::updi_desc+0x2>
     5be:	80 33       	cpi	r24, 0x30	; 48
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:436
    digitalWrite(HV12_PIN, HIGH);
     5c0:	11 f5       	brne	.+68     	; 0x606 <UPDI::HV_Pulse()+0x74>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.8/cores/megaAVR/api/delay_busywait.h:31
     5c2:	0e 9a       	sbi	0x01, 6	; 1
delay_micros():
     5c4:	8f ec       	ldi	r24, 0xCF	; 207
     5c6:	97 e0       	ldi	r25, 0x07	; 7
     5c8:	01 97       	sbiw	r24, 0x01	; 1
     5ca:	f1 f7       	brne	.-4      	; 0x5c8 <UPDI::HV_Pulse()+0x36>
     5cc:	00 c0       	rjmp	.+0      	; 0x5ce <UPDI::HV_Pulse()+0x3c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:443
    digitalWrite(HV8_PIN, HIGH);

  /* Apply high voltage only for the required time */
  TIM::delay_800us();

  if (JTAG2::updi_desc.hvupdi_variant == '0')
     5ce:	00 00       	nop
_ZN4UPDI8HV_PulseEv():
     5d0:	80 91 64 38 	lds	r24, 0x3864	; 0x803864 <JTAG2::updi_desc+0x2>
     5d4:	80 33       	cpi	r24, 0x30	; 48
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:444
    digitalWrite(HV12_PIN, LOW);
     5d6:	c9 f4       	brne	.+50     	; 0x60a <UPDI::HV_Pulse()+0x78>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:183
void TIM::HV_Pulse_ON (void) {
  TCA0_SPLIT_CTRLB = TCA_SPLIT_HCMP0EN_bm | TCA_SPLIT_HCMP1EN_bm;
}

void TIM::HV_Pulse_OFF (void) {
  TCA0_SPLIT_CTRLB = 0;
     5d8:	0e 98       	cbi	0x01, 6	; 1
HV_Pulse_OFF():
     5da:	10 92 01 0a 	sts	0x0A01, r1	; 0x800a01 <__RODATA_PM_OFFSET__+0x7f8a01>
_ZN4UPDI8HV_PulseEv():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:451
    digitalWrite(HV8_PIN, LOW);

  TIM::HV_Pulse_OFF();

  /* Keep the UPDI signal low for as long as necessary */
  UPDI_USART.BAUD = UPDI_BAUD_SHORT_BREAK;
     5de:	88 ee       	ldi	r24, 0xE8	; 232
     5e0:	93 e0       	ldi	r25, 0x03	; 3
     5e2:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__RODATA_PM_OFFSET__+0x7f8808>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:452
  SEND(UPDI_NOP);
     5e6:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__RODATA_PM_OFFSET__+0x7f8809>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:453
  UPDI_USART.BAUD = UPDI_BAUD_CALC;
     5ea:	80 e0       	ldi	r24, 0x00	; 0
     5ec:	9a dd       	rcall	.-1228   	; 0x122 <UPDI::SEND(unsigned char)>
     5ee:	80 eb       	ldi	r24, 0xB0	; 176
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__RODATA_PM_OFFSET__+0x7f8808>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:456

  bit_clear(UPDI_CONTROL, UPDI_CLKU_bp);
  bit_set(UPDI_CONTROL, UPDI_ERHV_bp);
     5f6:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__RODATA_PM_OFFSET__+0x7f8809>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:459

  /* Wait for system reset to finish */
  loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
     5fa:	e6 98       	cbi	0x1c, 6	; 28
     5fc:	e3 9a       	sbi	0x1c, 3	; 28
     5fe:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:438
  /* During this time, raise the circuit to sufficient voltage */

  if (JTAG2::updi_desc.hvupdi_variant == '0')
    digitalWrite(HV12_PIN, HIGH);
  else
    digitalWrite(HV8_PIN, HIGH);
     600:	60 e0       	ldi	r22, 0x00	; 0
     602:	80 e2       	ldi	r24, 0x20	; 32
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:446
  TIM::delay_800us();

  if (JTAG2::updi_desc.hvupdi_variant == '0')
    digitalWrite(HV12_PIN, LOW);
  else
    digitalWrite(HV8_PIN, LOW);
     604:	af cf       	rjmp	.-162    	; 0x564 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:460
  bit_clear(UPDI_CONTROL, UPDI_CLKU_bp);
  bit_set(UPDI_CONTROL, UPDI_ERHV_bp);

  /* Wait for system reset to finish */
  loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
}
     606:	2d 9a       	sbi	0x05, 5	; 5
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:560

/**********************
 * UPDI control start *
 **********************/

bool UPDI::enter_updi (bool skip) {
     608:	dd cf       	rjmp	.-70     	; 0x5c4 <UPDI::HV_Pulse()+0x32>
     60a:	2d 98       	cbi	0x05, 5	; 5
     60c:	e6 cf       	rjmp	.-52     	; 0x5da <UPDI::HV_Pulse()+0x48>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:562
  /* Release the physical reset */
  openDrainWrite(TRST_PIN, HIGH);
     60e:	08 95       	ret

00000610 <UPDI::enter_updi(bool)>:
_ZN4UPDI10enter_updiEb():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:563
  JTAG2::updi_desc.signature[0] = 0;
     610:	0f 93       	push	r16
     612:	1f 93       	push	r17
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:564
  JTAG2::updi_desc.signature[1] = 0;
     614:	cf 93       	push	r28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:565
  JTAG2::updi_desc.signature[2] = 0;
     616:	df 93       	push	r29
     618:	21 98       	cbi	0x04, 1	; 4
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:568

  /* target reset deactive */
  if (!skip) {
     61a:	10 92 69 38 	sts	0x3869, r1	; 0x803869 <JTAG2::updi_desc+0x7>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:570
    /* HV control forced permission */
    if (bit_is_set(UPDI_CONTROL, UPDI_FCHV_bp)) {
     61e:	10 92 6a 38 	sts	0x386A, r1	; 0x80386a <JTAG2::updi_desc+0x8>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:571
      HV_Pulse();
     622:	10 92 6b 38 	sts	0x386B, r1	; 0x80386b <JTAG2::updi_desc+0x9>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:572
      loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS, 500);
     626:	81 11       	cpse	r24, r1
     628:	1f c0       	rjmp	.+62     	; 0x668 <UPDI::enter_updi(bool)+0x58>
     62a:	e4 9b       	sbis	0x1c, 4	; 28
     62c:	59 c0       	rjmp	.+178    	; 0x6e0 <UPDI::enter_updi(bool)+0xd0>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:573
      JTAG2::updi_desc.signature[0] = 0xff;
     62e:	b1 df       	rcall	.-158    	; 0x592 <UPDI::HV_Pulse()>
     630:	64 ef       	ldi	r22, 0xF4	; 244
     632:	71 e0       	ldi	r23, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:574
      JTAG2::updi_desc.signature[1] = 0xff;
     634:	80 e2       	ldi	r24, 0x20	; 32
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:575
      JTAG2::updi_desc.signature[2] = 0xff;
     636:	96 df       	rcall	.-212    	; 0x564 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
     638:	8f ef       	ldi	r24, 0xFF	; 255
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:578

      /* send nvmprog_key */
      if (!set_nvmprog_key()) return false;
     63a:	80 93 69 38 	sts	0x3869, r24	; 0x803869 <JTAG2::updi_desc+0x7>
     63e:	80 93 6a 38 	sts	0x386A, r24	; 0x80386a <JTAG2::updi_desc+0x8>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:642
        /* Version 4 is now considered the same as 2. */
        bit_set(UPDI_NVMCTRL, UPDI_GEN2_bp);
        break;
      }
      default : {
        return false;
     642:	80 93 6b 38 	sts	0x386B, r24	; 0x80386b <JTAG2::updi_desc+0x9>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:581

      /* send nvmprog_key */
      if (!set_nvmprog_key()) return false;

      /* restart target : change mode */
      if (!updi_reset(true) || !updi_reset(false)) return false;
     646:	6c df       	rcall	.-296    	; 0x520 <UPDI::set_nvmprog_key()>
     648:	81 11       	cpse	r24, r1
     64a:	02 c0       	rjmp	.+4      	; 0x650 <UPDI::enter_updi(bool)+0x40>
     64c:	80 e0       	ldi	r24, 0x00	; 0
     64e:	6b c0       	rjmp	.+214    	; 0x726 <UPDI::enter_updi(bool)+0x116>
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	5a de       	rcall	.-844    	; 0x308 <UPDI::updi_reset(bool)>
     654:	88 23       	and	r24, r24
     656:	d1 f3       	breq	.-12     	; 0x64c <UPDI::enter_updi(bool)+0x3c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:582
      loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	56 de       	rcall	.-852    	; 0x308 <UPDI::updi_reset(bool)>
     65c:	88 23       	and	r24, r24
     65e:	b1 f3       	breq	.-20     	; 0x64c <UPDI::enter_updi(bool)+0x3c>
     660:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:587
    }
    else
      BREAK();
  }
  if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) {
     662:	60 e0       	ldi	r22, 0x00	; 0
     664:	80 e2       	ldi	r24, 0x20	; 32
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:317
  set_ptr[2] = data;
  return send_bytes(set_ptr, sizeof(set_ptr));
}

bool UPDI::set_cs_ctra (uint8_t data) {
  return set_cs_stat(UPDI_CS_CTRLA, data);
     666:	7e df       	rcall	.-260    	; 0x564 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
     668:	e0 99       	sbic	0x1c, 0	; 28
     66a:	50 c0       	rjmp	.+160    	; 0x70c <UPDI::enter_updi(bool)+0xfc>
set_cs_ctra():
     66c:	66 e0       	ldi	r22, 0x06	; 6
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:589
    else
      BREAK();
  }
  if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) {
    /* Minimize guard time */
    if (!set_cs_ctra(UPDI_GTVAL)) return false;
     66e:	82 e0       	ldi	r24, 0x02	; 2
     670:	83 dd       	rcall	.-1274   	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>
_ZN4UPDI10enter_updiEb():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:591

    JTAG2::updi_desc.signature[0] = 0xff;
     672:	88 23       	and	r24, r24
     674:	59 f3       	breq	.-42     	; 0x64c <UPDI::enter_updi(bool)+0x3c>
     676:	8f ef       	ldi	r24, 0xFF	; 255
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:592
    JTAG2::updi_desc.signature[1] = 0xff;
     678:	80 93 69 38 	sts	0x3869, r24	; 0x803869 <JTAG2::updi_desc+0x7>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:593
    JTAG2::updi_desc.signature[2] = 0xff;
     67c:	80 93 6a 38 	sts	0x386A, r24	; 0x80386a <JTAG2::updi_desc+0x8>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:294
  send_bytes(set_ptr, sizeof(set_ptr));
  return RECV();
}

bool UPDI::is_cs_stat (uint8_t code, uint8_t check) {
  return check == (get_cs_stat(code) & check);
     680:	80 93 6b 38 	sts	0x386B, r24	; 0x80386b <JTAG2::updi_desc+0x9>
is_cs_stat():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:595

    JTAG2::updi_desc.signature[0] = 0xff;
    JTAG2::updi_desc.signature[1] = 0xff;
    JTAG2::updi_desc.signature[2] = 0xff;

    if (is_sys_stat(UPDI_SYS_RSTSYS)) {
     684:	8b e0       	ldi	r24, 0x0B	; 11
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:409
}

bool UPDI::read_sib (uint8_t *s_ptr) {
  static uint8_t set_ptr[] = { UPDI_SYNCH, UPDI_SIB_256 };
  uint8_t _len = 32;
  if (!send_bytes(set_ptr, sizeof(set_ptr))) return false;
     686:	ba dd       	rcall	.-1164   	; 0x1fc <UPDI::get_cs_stat(unsigned char)>
_ZN4UPDI10enter_updiEb():
     688:	85 fd       	sbrc	r24, 5
     68a:	2c c0       	rjmp	.+88     	; 0x6e4 <UPDI::enter_updi(bool)+0xd4>
read_sib():
     68c:	62 e0       	ldi	r22, 0x02	; 2
     68e:	80 e2       	ldi	r24, 0x20	; 32
     690:	98 e3       	ldi	r25, 0x38	; 56
     692:	61 dd       	rcall	.-1342   	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     694:	ce e6       	ldi	r28, 0x6E	; 110
     696:	d8 e3       	ldi	r29, 0x38	; 56
     698:	0e e8       	ldi	r16, 0x8E	; 142
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:410
  do { *s_ptr++ = RECV(); } while (--_len);
     69a:	18 e3       	ldi	r17, 0x38	; 56
     69c:	88 23       	and	r24, r24
     69e:	b1 f2       	breq	.-84     	; 0x64c <UPDI::enter_updi(bool)+0x3c>
     6a0:	34 dd       	rcall	.-1432   	; 0x10a <UPDI::RECV()>
     6a2:	89 93       	st	Y+, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:604

    /*** Get System Information Block ***/
    /* Determine system requirements not announced by host control here */
    uint8_t* _p = &JTAG2::updi_desc.sib[0];
    if (!read_sib(_p)) return false;
    JTAG2::updi_desc.nvmctrl_version = _p[10];
     6a4:	0c 17       	cp	r16, r28
     6a6:	1d 07       	cpc	r17, r29
     6a8:	d9 f7       	brne	.-10     	; 0x6a0 <UPDI::enter_updi(bool)+0x90>
_ZN4UPDI10enter_updiEb():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:605
    JTAG2::updi_desc.signature[0] = 0x1e;
     6aa:	90 91 78 38 	lds	r25, 0x3878	; 0x803878 <JTAG2::updi_desc+0x16>
     6ae:	90 93 65 38 	sts	0x3865, r25	; 0x803865 <JTAG2::updi_desc+0x3>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:606
    JTAG2::updi_desc.signature[1] = _p[0];
     6b2:	8e e1       	ldi	r24, 0x1E	; 30
     6b4:	80 93 69 38 	sts	0x3869, r24	; 0x803869 <JTAG2::updi_desc+0x7>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:607
    JTAG2::updi_desc.signature[2] = _p[10];
     6b8:	80 91 6e 38 	lds	r24, 0x386E	; 0x80386e <JTAG2::updi_desc+0xc>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:608
    switch (_p[0]) {
     6bc:	80 93 6a 38 	sts	0x386A, r24	; 0x80386a <JTAG2::updi_desc+0x8>
     6c0:	90 93 6b 38 	sts	0x386B, r25	; 0x80386b <JTAG2::updi_desc+0x9>
     6c4:	81 34       	cpi	r24, 0x41	; 65
     6c6:	21 f0       	breq	.+8      	; 0x6d0 <UPDI::enter_updi(bool)+0xc0>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:627
        /* AVR Dx SIB = 'AVR     P:2D:1-3' */
        /* AVR DA SIB = '    AVR P:2D:1-3' (Regacy) */
        /* AVR EA SIB = 'AVR     P:3D:1-3' */
        /* AVR DU SIB = 'AVR     P:4D:1-3' */
        /* AVR EB SIB = 'AVR     P:5D:1-3' */
        JTAG2::updi_desc.signature[1] = 'A';
     6c8:	b0 f4       	brcc	.+44     	; 0x6f6 <UPDI::enter_updi(bool)+0xe6>
     6ca:	80 32       	cpi	r24, 0x20	; 32
     6cc:	09 f0       	breq	.+2      	; 0x6d0 <UPDI::enter_updi(bool)+0xc0>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:628
        if (JTAG2::updi_desc.nvmctrl_version == '3') {
     6ce:	be cf       	rjmp	.-132    	; 0x64c <UPDI::enter_updi(bool)+0x3c>
     6d0:	81 e4       	ldi	r24, 0x41	; 65
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:635
          bit_set(UPDI_NVMCTRL, UPDI_GEN3_bp);
        }
        else if (JTAG2::updi_desc.nvmctrl_version == '5') {
          // 'AVR_EB' series
          bit_set(UPDI_NVMCTRL, UPDI_GEN5_bp);
          bit_set(UPDI_NVMCTRL, UPDI_GEN3_bp);
     6d2:	80 93 6a 38 	sts	0x386A, r24	; 0x80386a <JTAG2::updi_desc+0x8>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:638
        }
        /* Version 4 is now considered the same as 2. */
        bit_set(UPDI_NVMCTRL, UPDI_GEN2_bp);
     6d6:	93 33       	cpi	r25, 0x33	; 51
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:585
      /* restart target : change mode */
      if (!updi_reset(true) || !updi_reset(false)) return false;
      loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
    }
    else
      BREAK();
     6d8:	69 f5       	brne	.+90     	; 0x734 <UPDI::enter_updi(bool)+0x124>
     6da:	ed 9a       	sbi	0x1d, 5	; 29
     6dc:	ee 9a       	sbi	0x1d, 6	; 29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:596
    JTAG2::updi_desc.signature[0] = 0xff;
    JTAG2::updi_desc.signature[1] = 0xff;
    JTAG2::updi_desc.signature[2] = 0xff;

    if (is_sys_stat(UPDI_SYS_RSTSYS)) {
      UPDI::Target_Reset(false);
     6de:	10 c0       	rjmp	.+32     	; 0x700 <UPDI::enter_updi(bool)+0xf0>
     6e0:	f4 dd       	rcall	.-1048   	; 0x2ca <UPDI::BREAK()>
     6e2:	c2 cf       	rjmp	.-124    	; 0x668 <UPDI::enter_updi(bool)+0x58>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:597
      if (!loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS, 500)) return false;
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	15 de       	rcall	.-982    	; 0x312 <UPDI::Target_Reset(bool)>
     6e8:	64 ef       	ldi	r22, 0xF4	; 244
     6ea:	71 e0       	ldi	r23, 0x01	; 1
     6ec:	80 e2       	ldi	r24, 0x20	; 32
     6ee:	3a df       	rcall	.-396    	; 0x564 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
     6f0:	81 11       	cpse	r24, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:608
    if (!read_sib(_p)) return false;
    JTAG2::updi_desc.nvmctrl_version = _p[10];
    JTAG2::updi_desc.signature[0] = 0x1e;
    JTAG2::updi_desc.signature[1] = _p[0];
    JTAG2::updi_desc.signature[2] = _p[10];
    switch (_p[0]) {
     6f2:	cc cf       	rjmp	.-104    	; 0x68c <UPDI::enter_updi(bool)+0x7c>
     6f4:	ab cf       	rjmp	.-170    	; 0x64c <UPDI::enter_updi(bool)+0x3c>
     6f6:	8d 36       	cpi	r24, 0x6D	; 109
     6f8:	d9 f0       	breq	.+54     	; 0x730 <UPDI::enter_updi(bool)+0x120>
     6fa:	84 37       	cpi	r24, 0x74	; 116
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:645
      }
      default : {
        return false;
      }
    }
    bit_set(UPDI_CONTROL, UPDI_INFO_bp);
     6fc:	09 f0       	breq	.+2      	; 0x700 <UPDI::enter_updi(bool)+0xf0>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:648

    /* Measure the power supply voltage */
    bool hvol = SYS::get_vcc() >= 4250
     6fe:	a6 cf       	rjmp	.-180    	; 0x64c <UPDI::enter_updi(bool)+0x3c>
     700:	e0 9a       	sbi	0x1c, 0	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:650
              // && JTAG2::updi_desc.nvmctrl_version == '2'
              && bit_is_clear(UPDI_CONTROL, UPDI_ERHV_bp);
     702:	3f de       	rcall	.-898    	; 0x382 <SYS::get_vcc()>
     704:	8a 39       	cpi	r24, 0x9A	; 154
     706:	90 41       	sbci	r25, 0x10	; 16
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:325
bool UPDI::set_cs_asi_ctra (uint8_t data) {
  return set_cs_stat(UPDI_CS_ASI_CTRLA, data);
}

uint8_t UPDI::get_cs_asi_ctra (void) {
  return get_cs_stat(UPDI_CS_ASI_CTRLA);
     708:	08 f0       	brcs	.+2      	; 0x70c <UPDI::enter_updi(bool)+0xfc>
     70a:	8c b3       	in	r24, 0x1c	; 28
get_cs_asi_ctra():
     70c:	89 e0       	ldi	r24, 0x09	; 9
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:657
    /* Instructs double speed mode if there is sufficient voltage and not after HV control */
    // if (hvol && !set_cs_asi_ctra(UPDI_SET_UPDICLKSEL_8M)) return false;
  }

  /* If the double speed mode change is successful, change the speed */
  if ((get_cs_asi_ctra() & UPDI_SET_UPDICLKSEL_bm)
     70e:	76 dd       	rcall	.-1300   	; 0x1fc <UPDI::get_cs_stat(unsigned char)>
_ZN4UPDI10enter_updiEb():
     710:	83 70       	andi	r24, 0x03	; 3
     712:	82 30       	cpi	r24, 0x02	; 2
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:659
                        == UPDI_SET_UPDICLKSEL_8M) {
    UPDI_USART.BAUD = UPDI_BAUD_CALC >> 1;
     714:	99 f4       	brne	.+38     	; 0x73c <UPDI::enter_updi(bool)+0x12c>
     716:	88 e5       	ldi	r24, 0x58	; 88
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__RODATA_PM_OFFSET__+0x7f8808>
     71e:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__RODATA_PM_OFFSET__+0x7f8809>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:666
  }
  else {
    UPDI_USART.BAUD = UPDI_BAUD_CALC;
    bit_clear(UPDI_CONTROL, UPDI_CLKU_bp);
  }
  return true;
     722:	e6 9a       	sbi	0x1c, 6	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:667
}
     724:	81 e0       	ldi	r24, 0x01	; 1
     726:	df 91       	pop	r29
     728:	cf 91       	pop	r28
     72a:	1f 91       	pop	r17
     72c:	0f 91       	pop	r16
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:612
    JTAG2::updi_desc.signature[2] = _p[10];
    switch (_p[0]) {
      case 'm' : {              // 'megaAVR' series
        /* megaAVR SIB = 'megaAVR P:0D:1-3' */
        /* always vesrion 0 */
        bit_set(UPDI_NVMCTRL, UPDI_LOWF_bp);
     72e:	08 95       	ret
     730:	ef 9a       	sbi	0x1d, 7	; 29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:632
        JTAG2::updi_desc.signature[1] = 'A';
        if (JTAG2::updi_desc.nvmctrl_version == '3') {
          // 'AVR_Ex' series
          bit_set(UPDI_NVMCTRL, UPDI_GEN3_bp);
        }
        else if (JTAG2::updi_desc.nvmctrl_version == '5') {
     732:	e6 cf       	rjmp	.-52     	; 0x700 <UPDI::enter_updi(bool)+0xf0>
     734:	95 33       	cpi	r25, 0x35	; 53
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:634
          // 'AVR_EB' series
          bit_set(UPDI_NVMCTRL, UPDI_GEN5_bp);
     736:	91 f6       	brne	.-92     	; 0x6dc <UPDI::enter_updi(bool)+0xcc>
     738:	eb 9a       	sbi	0x1d, 3	; 29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:663
                        == UPDI_SET_UPDICLKSEL_8M) {
    UPDI_USART.BAUD = UPDI_BAUD_CALC >> 1;
    bit_set(UPDI_CONTROL, UPDI_CLKU_bp);
  }
  else {
    UPDI_USART.BAUD = UPDI_BAUD_CALC;
     73a:	cf cf       	rjmp	.-98     	; 0x6da <UPDI::enter_updi(bool)+0xca>
     73c:	80 eb       	ldi	r24, 0xB0	; 176
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__RODATA_PM_OFFSET__+0x7f8808>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:664
    bit_clear(UPDI_CONTROL, UPDI_CLKU_bp);
     744:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__RODATA_PM_OFFSET__+0x7f8809>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:58
  /* NVMCTRL version 3,5 */
  uint8_t nvm_wait_v3 (void) {
    #ifdef ENABLE_DEBUG_UPDI_SENDER
    uint16_t _back = UPDI::_send_ptr;
    #endif
    while (UPDI::ld8(NVMCTRL_V3_REG_STATUS) & 3) {
     748:	e6 98       	cbi	0x1c, 6	; 28
     74a:	ec cf       	rjmp	.-40     	; 0x724 <UPDI::enter_updi(bool)+0x114>

0000074c <NVM::nvm_wait_v3()>:
_ZN3NVM11nvm_wait_v3Ev():
     74c:	66 e0       	ldi	r22, 0x06	; 6
     74e:	70 e1       	ldi	r23, 0x10	; 16
     750:	80 e0       	ldi	r24, 0x00	; 0
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	cc dd       	rcall	.-1128   	; 0x2ee <UPDI::ld8(unsigned long)>
     756:	83 70       	andi	r24, 0x03	; 3
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.8/cores/megaAVR/api/delay_busywait.h:31
     758:	29 f0       	breq	.+10     	; 0x764 <NVM::nvm_wait_v3()+0x18>
delay_micros():
     75a:	86 ea       	ldi	r24, 0xA6	; 166
     75c:	8a 95       	dec	r24
     75e:	f1 f7       	brne	.-4      	; 0x75c <NVM::nvm_wait_v3()+0x10>
     760:	00 c0       	rjmp	.+0      	; 0x762 <NVM::nvm_wait_v3()+0x16>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:64
      #ifdef ENABLE_DEBUG_UPDI_SENDER
      UPDI::_send_ptr = _back;
      #endif
      TIM::delay_50us();
    }
    return UPDI_LASTL;
     762:	f4 cf       	rjmp	.-24     	; 0x74c <NVM::nvm_wait_v3()>
_ZN3NVM11nvm_wait_v3Ev():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:65
  }
     764:	8e b3       	in	r24, 0x1e	; 30
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:44
  /* NVMCTRL version 0,2,4 */
  uint8_t nvm_wait (void) {
    #ifdef ENABLE_DEBUG_UPDI_SENDER
    uint16_t _back = UPDI::_send_ptr;
    #endif
    while (UPDI::ld8(NVMCTRL_REG_STATUS) & 3) {
     766:	08 95       	ret

00000768 <NVM::nvm_wait()>:
_ZN3NVM8nvm_waitEv():
     768:	62 e0       	ldi	r22, 0x02	; 2
     76a:	70 e1       	ldi	r23, 0x10	; 16
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	be dd       	rcall	.-1156   	; 0x2ee <UPDI::ld8(unsigned long)>
     772:	83 70       	andi	r24, 0x03	; 3
     774:	29 f0       	breq	.+10     	; 0x780 <NVM::nvm_wait()+0x18>
delay_micros():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.8/cores/megaAVR/api/delay_busywait.h:31
     776:	86 ea       	ldi	r24, 0xA6	; 166
     778:	8a 95       	dec	r24
     77a:	f1 f7       	brne	.-4      	; 0x778 <NVM::nvm_wait()+0x10>
     77c:	00 c0       	rjmp	.+0      	; 0x77e <NVM::nvm_wait()+0x16>
     77e:	f4 cf       	rjmp	.-24     	; 0x768 <NVM::nvm_wait()>
_ZN3NVM8nvm_waitEv():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:50
      #ifdef ENABLE_DEBUG_UPDI_SENDER
      UPDI::_send_ptr = _back;
      #endif
      TIM::delay_50us();
    }
    return UPDI_LASTL;
     780:	8e b3       	in	r24, 0x1e	; 30
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:51
  }
     782:	08 95       	ret

00000784 <UPDI::runtime(unsigned char)>:
_ZN4UPDI7runtimeEh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:715

/************************
 * UPDI control process *
 ************************/

bool UPDI::runtime (uint8_t updi_cmd) {
     784:	af 92       	push	r10
     786:	bf 92       	push	r11
     788:	cf 92       	push	r12
     78a:	df 92       	push	r13
     78c:	ef 92       	push	r14
     78e:	ff 92       	push	r15
     790:	0f 93       	push	r16
     792:	1f 93       	push	r17
     794:	cf 93       	push	r28
     796:	df 93       	push	r29
     798:	cd b7       	in	r28, 0x3d	; 61
     79a:	de b7       	in	r29, 0x3e	; 62
     79c:	26 97       	sbiw	r28, 0x06	; 6
     79e:	cd bf       	out	0x3d, r28	; 61
     7a0:	de bf       	out	0x3e, r29	; 62
     7a2:	8e 83       	std	Y+6, r24	; 0x06
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:716
  volatile bool _result = false;
     7a4:	1d 82       	std	Y+5, r1	; 0x05
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:717
  if (setjmp(TIM::CONTEXT) == 0) {
     7a6:	86 e4       	ldi	r24, 0x46	; 70
     7a8:	98 e3       	ldi	r25, 0x38	; 56
     7aa:	e3 d6       	rcall	.+3526   	; 0x1572 <setjmp>
     7ac:	89 2b       	or	r24, r25
     7ae:	09 f0       	breq	.+2      	; 0x7b2 <UPDI::runtime(unsigned char)+0x2e>
     7b0:	f1 c0       	rjmp	.+482    	; 0x994 <__DATA_REGION_LENGTH__+0x194>
Timeout_Start():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:106
/*
 * Timeout control
 */

void TIM::Timeout_Start (uint16_t _ms) {
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     7b2:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:50
     7b4:	f8 94       	cli
Timeout_Start():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:107
    TCB0_CNT = 0;
     7b6:	10 92 8a 0a 	sts	0x0A8A, r1	; 0x800a8a <__RODATA_PM_OFFSET__+0x7f8a8a>
     7ba:	10 92 8b 0a 	sts	0x0A8B, r1	; 0x800a8b <__RODATA_PM_OFFSET__+0x7f8a8b>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:108
    TCB0_CCMP = _ms >> 2;
     7be:	28 ec       	ldi	r18, 0xC8	; 200
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	20 93 8c 0a 	sts	0x0A8C, r18	; 0x800a8c <__RODATA_PM_OFFSET__+0x7f8a8c>
     7c6:	30 93 8d 0a 	sts	0x0A8D, r19	; 0x800a8d <__RODATA_PM_OFFSET__+0x7f8a8d>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:109
    TCB0_INTCTRL = TCB_CAPT_bm;
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	80 93 85 0a 	sts	0x0A85, r24	; 0x800a85 <__RODATA_PM_OFFSET__+0x7f8a85>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:110
    TCB0_INTFLAGS = TCB_CAPT_bm;
     7d0:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__RODATA_PM_OFFSET__+0x7f8a86>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:111
    TCB0_CTRLA = TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
     7d4:	8f e0       	ldi	r24, 0x0F	; 15
     7d6:	80 93 80 0a 	sts	0x0A80, r24	; 0x800a80 <__RODATA_PM_OFFSET__+0x7f8a80>
__iRestore():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     7da:	9f bf       	out	0x3f, r25	; 63
_ZN4UPDI7runtimeEh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:719
    TIM::Timeout_Start(800);
    switch (updi_cmd) {
     7dc:	8e 81       	ldd	r24, Y+6	; 0x06
     7de:	83 30       	cpi	r24, 0x03	; 3
     7e0:	09 f4       	brne	.+2      	; 0x7e4 <UPDI::runtime(unsigned char)+0x60>
     7e2:	1f c2       	rjmp	.+1086   	; 0xc22 <__DATA_REGION_LENGTH__+0x422>
     7e4:	84 30       	cpi	r24, 0x04	; 4
     7e6:	09 f4       	brne	.+2      	; 0x7ea <UPDI::runtime(unsigned char)+0x66>
     7e8:	65 c2       	rjmp	.+1226   	; 0xcb4 <__DATA_REGION_LENGTH__+0x4b4>
write_memory():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:275
/******************
 * NVM write core *
 ******************/

bool NVM::write_memory (void) {
  uint8_t mem_type = JTAG2::packet.body[JTAG2::MEM_TYPE];
     7ea:	ee e8       	ldi	r30, 0x8E	; 142
     7ec:	f8 e3       	ldi	r31, 0x38	; 56
_ZN4UPDI7runtimeEh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:719
     7ee:	82 30       	cpi	r24, 0x02	; 2
     7f0:	09 f4       	brne	.+2      	; 0x7f4 <UPDI::runtime(unsigned char)+0x70>
     7f2:	70 c0       	rjmp	.+224    	; 0x8d4 <__DATA_REGION_LENGTH__+0xd4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:721
      case UPDI_CMD_READ_MEMORY : {
        size_t byte_count = _CAPS16(JTAG2::packet.body[JTAG2::DATA_LENGTH])->word;
     7f4:	22 85       	ldd	r18, Z+10	; 0x0a
     7f6:	33 85       	ldd	r19, Z+11	; 0x0b
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:722
        uint32_t start_addr = _CAPS32(JTAG2::packet.body[JTAG2::DATA_ADDRESS])->dword;
     7f8:	66 85       	ldd	r22, Z+14	; 0x0e
     7fa:	77 85       	ldd	r23, Z+15	; 0x0f
     7fc:	80 89       	ldd	r24, Z+16	; 0x10
     7fe:	91 89       	ldd	r25, Z+17	; 0x11
read_memory():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:227
/***********************
 * Memory reading core *
 ***********************/

bool NVM::read_memory (uint32_t start_addr, size_t byte_count) {
  JTAG2::packet.body[JTAG2::MESSAGE_ID] = JTAG2::RSP_MEMORY;
     800:	42 e8       	ldi	r20, 0x82	; 130
     802:	40 87       	std	Z+8, r20	; 0x08
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:231
  uint8_t *data = &JTAG2::packet.body[JTAG2::RSP_DATA];

  /* Reads from 1 to 256 bytes and even bytes 258 to 512 are allowed */
  if (byte_count == 0 || byte_count > 512 || (byte_count > 256 && byte_count & 1)) {
     804:	a9 01       	movw	r20, r18
     806:	41 50       	subi	r20, 0x01	; 1
     808:	51 09       	sbc	r21, r1
     80a:	41 15       	cp	r20, r1
     80c:	e2 e0       	ldi	r30, 0x02	; 2
     80e:	5e 07       	cpc	r21, r30
     810:	30 f4       	brcc	.+12     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
     812:	21 30       	cpi	r18, 0x01	; 1
     814:	f1 e0       	ldi	r31, 0x01	; 1
     816:	3f 07       	cpc	r19, r31
     818:	40 f0       	brcs	.+16     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
     81a:	20 ff       	sbrs	r18, 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:232
    set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
     81c:	06 c0       	rjmp	.+12     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
     81e:	83 ea       	ldi	r24, 0xA3	; 163
     820:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:244
    #ifdef ENABLE_ADDFEATS_LOCK_SIG
    if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_PROG_bp)
      && JTAG2::packet.body[JTAG2::MEM_TYPE] == JTAG2::MTYPE_SIGN_JTAG) {
      /* Signature reading branches to special processing */
      JTAG2::packet.body[JTAG2::RSP_DATA] = JTAG2::updi_desc.signature[(uint8_t)start_addr & 3];
      return true;
     822:	ec dd       	rcall	.-1064   	; 0x3fc <JTAG2::set_response(JTAG2::jtag_response_e)>
_ZN4UPDI7runtimeEh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:737
          _result = chip_erase();
        }
        break;
      }
      case UPDI_CMD_GO : {
        _result = Target_Reset(true) && Target_Reset(false);
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	8d 83       	std	Y+5, r24	; 0x05
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:235
  /* Reads from 1 to 256 bytes and even bytes 258 to 512 are allowed */
  if (byte_count == 0 || byte_count > 512 || (byte_count > 256 && byte_count & 1)) {
    set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
    return true;
  }
  JTAG2::packet.size_word[0] = byte_count + 1;
     828:	b5 c0       	rjmp	.+362    	; 0x994 <__DATA_REGION_LENGTH__+0x194>
read_memory():
     82a:	ae e8       	ldi	r26, 0x8E	; 142
     82c:	b8 e3       	ldi	r27, 0x38	; 56
     82e:	f9 01       	movw	r30, r18
     830:	31 96       	adiw	r30, 0x01	; 1
     832:	13 96       	adiw	r26, 0x03	; 3
     834:	ed 93       	st	X+, r30
     836:	fc 93       	st	X, r31
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:238

  /* Reading only 1 byte may be special */
  if (byte_count == 1) {
     838:	14 97       	sbiw	r26, 0x04	; 4
     83a:	21 30       	cpi	r18, 0x01	; 1
     83c:	31 05       	cpc	r19, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:241
    #ifdef ENABLE_ADDFEATS_LOCK_SIG
    if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_PROG_bp)
      && JTAG2::packet.body[JTAG2::MEM_TYPE] == JTAG2::MTYPE_SIGN_JTAG) {
     83e:	81 f4       	brne	.+32     	; 0x860 <__DATA_REGION_LENGTH__+0x60>
     840:	e1 99       	sbic	0x1c, 1	; 28
     842:	0e c0       	rjmp	.+28     	; 0x860 <__DATA_REGION_LENGTH__+0x60>
     844:	19 96       	adiw	r26, 0x09	; 9
     846:	ec 91       	ld	r30, X
     848:	19 97       	sbiw	r26, 0x09	; 9
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:243
      /* Signature reading branches to special processing */
      JTAG2::packet.body[JTAG2::RSP_DATA] = JTAG2::updi_desc.signature[(uint8_t)start_addr & 3];
     84a:	e4 3b       	cpi	r30, 0xB4	; 180
     84c:	49 f4       	brne	.+18     	; 0x860 <__DATA_REGION_LENGTH__+0x60>
     84e:	63 70       	andi	r22, 0x03	; 3
     850:	e6 2f       	mov	r30, r22
     852:	f0 e0       	ldi	r31, 0x00	; 0
     854:	ee 59       	subi	r30, 0x9E	; 158
     856:	f7 4c       	sbci	r31, 0xC7	; 199
     858:	87 81       	ldd	r24, Z+7	; 0x07
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:258
      return true;
    }
    #endif
  }

  if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_PROG_bp)) {
     85a:	19 96       	adiw	r26, 0x09	; 9
     85c:	8c 93       	st	X, r24
     85e:	e2 cf       	rjmp	.-60     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
     860:	e1 99       	sbic	0x1c, 1	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:260
    /* A normal read when the device is locked returns a dummy. */
    do { *data++ = 0xFF; } while (--byte_count);
     862:	08 c0       	rjmp	.+16     	; 0x874 <__DATA_REGION_LENGTH__+0x74>
     864:	e7 e9       	ldi	r30, 0x97	; 151
     866:	f8 e3       	ldi	r31, 0x38	; 56
     868:	8f ef       	ldi	r24, 0xFF	; 255
     86a:	81 93       	st	Z+, r24
     86c:	21 50       	subi	r18, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:264
    return true;
  }

  if ((byte_count - 1) >> 8)
     86e:	31 09       	sbc	r19, r1
     870:	e1 f7       	brne	.-8      	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
     872:	d8 cf       	rjmp	.-80     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
     874:	45 2f       	mov	r20, r21
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:273
  do { *data++ = RECV(); } while (--len);
  return UPDI_LASTH == 0;
}

bool UPDI::lds16 (uint32_t addr, uint8_t *data, size_t len) {
  uint8_t repeat = (uint16_t)len >> 1;
     876:	55 27       	eor	r21, r21
     878:	45 2b       	or	r20, r21
     87a:	e1 f0       	breq	.+56     	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
lds16():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:274
  if (!send_repeat_header(addr, UPDI_LD|UPDI_DATA2, repeat)) return false;
     87c:	36 95       	lsr	r19
     87e:	27 95       	ror	r18
     880:	f2 2e       	mov	r15, r18
     882:	41 e2       	ldi	r20, 0x21	; 33
     884:	e3 dc       	rcall	.-1594   	; 0x24c <UPDI::send_repeat_header(unsigned long, unsigned char, unsigned char)>
     886:	0e e8       	ldi	r16, 0x8E	; 142
     888:	18 e3       	ldi	r17, 0x38	; 56
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:529
  if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) {
    HV_Pulse();
  }

  /* Transition to CHIPERASE mode by system reset */
  if (!set_erase_key()) return false;
     88a:	81 11       	cpse	r24, r1
     88c:	02 c0       	rjmp	.+4      	; 0x892 <__DATA_REGION_LENGTH__+0x92>
_ZN4UPDI7runtimeEh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:276

bool UPDI::lds16 (uint32_t addr, uint8_t *data, size_t len) {
  uint8_t repeat = (uint16_t)len >> 1;
  if (!send_repeat_header(addr, UPDI_LD|UPDI_DATA2, repeat)) return false;
  do {
    *data++ = RECV();
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	ca cf       	rjmp	.-108    	; 0x826 <__DATA_REGION_LENGTH__+0x26>
lds16():
     892:	3b dc       	rcall	.-1930   	; 0x10a <UPDI::RECV()>
     894:	f8 01       	movw	r30, r16
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:277
    *data++ = RECV();
     896:	81 87       	std	Z+9, r24	; 0x09
     898:	38 dc       	rcall	.-1936   	; 0x10a <UPDI::RECV()>
     89a:	f8 01       	movw	r30, r16
     89c:	82 87       	std	Z+10, r24	; 0x0a
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:278
  } while (--repeat);
     89e:	fa 94       	dec	r15
     8a0:	0e 5f       	subi	r16, 0xFE	; 254
     8a2:	1f 4f       	sbci	r17, 0xFF	; 255
     8a4:	f1 10       	cpse	r15, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:269
}

bool UPDI::lds8 (uint32_t addr, uint8_t *data, uint8_t len) {
  if (!send_repeat_header(addr, UPDI_LD|UPDI_DATA1, len)) return false;
  do { *data++ = RECV(); } while (--len);
  return UPDI_LASTH == 0;
     8a6:	f5 cf       	rjmp	.-22     	; 0x892 <__DATA_REGION_LENGTH__+0x92>
lds8():
     8a8:	9f b3       	in	r25, 0x1f	; 31
     8aa:	81 e0       	ldi	r24, 0x01	; 1
     8ac:	99 23       	and	r25, r25
     8ae:	09 f4       	brne	.+2      	; 0x8b2 <__DATA_REGION_LENGTH__+0xb2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:267
    return UPDI::lds16(start_addr, data, byte_count);
  else
    return UPDI::lds8(start_addr, data, byte_count);
     8b0:	ba cf       	rjmp	.-140    	; 0x826 <__DATA_REGION_LENGTH__+0x26>
  while (!send_bytes(set_ptr, sizeof(set_ptr) - 1)) BREAK();
  return RECV();
}

bool UPDI::lds8 (uint32_t addr, uint8_t *data, uint8_t len) {
  if (!send_repeat_header(addr, UPDI_LD|UPDI_DATA1, len)) return false;
     8b2:	ed cf       	rjmp	.-38     	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
read_memory():
     8b4:	12 2f       	mov	r17, r18
lds8():
     8b6:	40 e2       	ldi	r20, 0x20	; 32
     8b8:	c9 dc       	rcall	.-1646   	; 0x24c <UPDI::send_repeat_header(unsigned long, unsigned char, unsigned char)>
     8ba:	88 23       	and	r24, r24
     8bc:	41 f3       	breq	.-48     	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
     8be:	67 e9       	ldi	r22, 0x97	; 151
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:268
  do { *data++ = RECV(); } while (--len);
     8c0:	e6 2e       	mov	r14, r22
     8c2:	68 e3       	ldi	r22, 0x38	; 56
     8c4:	f6 2e       	mov	r15, r22
     8c6:	21 dc       	rcall	.-1982   	; 0x10a <UPDI::RECV()>
     8c8:	f7 01       	movw	r30, r14
     8ca:	81 93       	st	Z+, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:275
/******************
 * NVM write core *
 ******************/

bool NVM::write_memory (void) {
  uint8_t mem_type = JTAG2::packet.body[JTAG2::MEM_TYPE];
     8cc:	7f 01       	movw	r14, r30
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:277
  uint8_t *data = &JTAG2::packet.body[JTAG2::DATA_START];
  size_t byte_count = _CAPS16(JTAG2::packet.body[JTAG2::DATA_LENGTH])->word;
     8ce:	11 50       	subi	r17, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:278
  uint32_t start_addr = _CAPS32(JTAG2::packet.body[JTAG2::DATA_ADDRESS])->dword;
     8d0:	d1 f7       	brne	.-12     	; 0x8c6 <__DATA_REGION_LENGTH__+0xc6>
     8d2:	ea cf       	rjmp	.-44     	; 0x8a8 <__DATA_REGION_LENGTH__+0xa8>
write_memory():
     8d4:	81 85       	ldd	r24, Z+9	; 0x09
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:281

  /* Address specification outside the processing range is considered an IO area operation */
  if (start_addr >> 24) {
     8d6:	02 85       	ldd	r16, Z+10	; 0x0a
     8d8:	13 85       	ldd	r17, Z+11	; 0x0b
     8da:	c6 84       	ldd	r12, Z+14	; 0x0e
     8dc:	d7 84       	ldd	r13, Z+15	; 0x0f
     8de:	e0 88       	ldd	r14, Z+16	; 0x10
     8e0:	f1 88       	ldd	r15, Z+17	; 0x11
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:282
    start_addr &= 0xFFFF;
     8e2:	4f 2d       	mov	r20, r15
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:283
    mem_type = JTAG2::MTYPE_SRAM;
     8e4:	55 27       	eor	r21, r21
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:289
  }

  /* Can only be written to USERROW on locked devices */
  /* This write is only allowed in multiples of 32 bytes */
  if (bit_is_set(UPDI_CONTROL, UPDI::UPDI_INFO_bp)
   && mem_type == JTAG2::MTYPE_XMEGA_USERSIG) // 0xC5
     8e6:	66 27       	eor	r22, r22
     8e8:	77 27       	eor	r23, r23
     8ea:	45 2b       	or	r20, r21
     8ec:	46 2b       	or	r20, r22
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:468
 * USERROW region writing *
 *****************************************/

bool UPDI::write_userrow (const uint32_t start_addr, uint8_t *data, const size_t byte_count) {
  /* Only data lengths that are multiples of 32 bytes are allowed. */
  if (byte_count == 0 || byte_count & 0x1F) {
     8ee:	47 2b       	or	r20, r23
     8f0:	19 f0       	breq	.+6      	; 0x8f8 <__DATA_REGION_LENGTH__+0xf8>
     8f2:	ee 24       	eor	r14, r14
     8f4:	ff 24       	eor	r15, r15
_ZN4UPDI7runtimeEh():
     8f6:	80 e2       	ldi	r24, 0x20	; 32
write_memory():
     8f8:	e0 9b       	sbis	0x1c, 0	; 28
     8fa:	62 c0       	rjmp	.+196    	; 0x9c0 <__DATA_REGION_LENGTH__+0x1c0>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:469
    JTAG2::packet.body[JTAG2::MESSAGE_ID] = JTAG2::RSP_ILLEGAL_MEMORY_RANGE;
     8fc:	85 3c       	cpi	r24, 0xC5	; 197
     8fe:	09 f0       	breq	.+2      	; 0x902 <__DATA_REGION_LENGTH__+0x102>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:326
  }

  /* Other writes are allowed from 1 to 256 bytes */
  if (byte_count == 0 || byte_count > 256) {
    set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
    return true;
     900:	5f c0       	rjmp	.+190    	; 0x9c0 <__DATA_REGION_LENGTH__+0x1c0>
write_userrow():
     902:	01 15       	cp	r16, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:402
  return loop_until_key_stat_is_set(UPDI_KEY_CHIPERASE);
}

/* __attribute__((optimize("O0"))) */
bool UPDI::set_urowwrite_key (void) {
  if (!send_bytes(urowwrite_key, sizeof(urowwrite_key))) return false;
     904:	11 05       	cpc	r17, r1
     906:	29 f0       	breq	.+10     	; 0x912 <__DATA_REGION_LENGTH__+0x112>
     908:	c8 01       	movw	r24, r16
     90a:	8f 71       	andi	r24, 0x1F	; 31
     90c:	99 27       	eor	r25, r25
     90e:	89 2b       	or	r24, r25
     910:	29 f0       	breq	.+10     	; 0x91c <__DATA_REGION_LENGTH__+0x11c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:341
    case JTAG2::MTYPE_FUSE_BITS : {           // 0xB2
      /* The NVMCTRL version 0 implementation is special. */
      if (bit_is_clear(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp)
      && bit_is_clear(UPDI_NVMCTRL, UPDI::UPDI_GEN2_bp)) {
        do {
          if (!write_fuse(start_addr++, *data++)) return false;
     912:	83 ea       	ldi	r24, 0xA3	; 163
     914:	80 93 96 38 	sts	0x3896, r24	; 0x803896 <JTAG2::packet+0x8>
_ZN4UPDI7runtimeEh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:403
  return loop_until_key_stat_is_set(UPDI_KEY_UROWWRITE);
     918:	11 e0       	ldi	r17, 0x01	; 1
     91a:	3b c0       	rjmp	.+118    	; 0x992 <__DATA_REGION_LENGTH__+0x192>
set_urowwrite_key():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:474
    JTAG2::packet.body[JTAG2::MESSAGE_ID] = JTAG2::RSP_ILLEGAL_MEMORY_RANGE;
    return true;
  }

  /* Send the authentication key */
  if (!set_urowwrite_key()) return false;
     91c:	6a e0       	ldi	r22, 0x0A	; 10
     91e:	82 e2       	ldi	r24, 0x22	; 34
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:477

  /* Transition to USERROW mode by system reset */
  if (!updi_reset(true) || !updi_reset(false)) return false;
     920:	98 e3       	ldi	r25, 0x38	; 56
     922:	19 dc       	rcall	.-1998   	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     924:	81 11       	cpse	r24, r1
     926:	02 c0       	rjmp	.+4      	; 0x92c <__DATA_REGION_LENGTH__+0x12c>
_ZN4UPDI7runtimeEh():
     928:	10 e0       	ldi	r17, 0x00	; 0
     92a:	33 c0       	rjmp	.+102    	; 0x992 <__DATA_REGION_LENGTH__+0x192>
set_urowwrite_key():
     92c:	80 e2       	ldi	r24, 0x20	; 32
     92e:	e0 dd       	rcall	.-1088   	; 0x4f0 <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.20]>
write_userrow():
     930:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:480

  /* Wait for system reset to finish */
  loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
     932:	d1 f3       	breq	.-12     	; 0x928 <__DATA_REGION_LENGTH__+0x128>
     934:	81 e0       	ldi	r24, 0x01	; 1
     936:	e8 dc       	rcall	.-1584   	; 0x308 <UPDI::updi_reset(bool)>
     938:	88 23       	and	r24, r24
     93a:	b1 f3       	breq	.-20     	; 0x928 <__DATA_REGION_LENGTH__+0x128>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:483

  /* Make sure you are in USERROW mode */
  loop_until_sys_stat_is_set(UPDI_SYS_UROWPROG);
     93c:	80 e0       	ldi	r24, 0x00	; 0
     93e:	e4 dc       	rcall	.-1592   	; 0x308 <UPDI::updi_reset(bool)>
     940:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:486

  /* Write data to buffer memory */
  sts8rsd(start_addr, data, byte_count);
     942:	91 f3       	breq	.-28     	; 0x928 <__DATA_REGION_LENGTH__+0x128>
     944:	70 e0       	ldi	r23, 0x00	; 0
     946:	60 e0       	ldi	r22, 0x00	; 0
     948:	80 e2       	ldi	r24, 0x20	; 32
     94a:	0c de       	rcall	.-1000   	; 0x564 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:490
  /* Ignore any errors here */

  /* After writing the memory, write the end flag */
  set_cs_stat(UPDI_CS_ASI_SYS_CTRLA, UPDI_SET_UROWDONE | UPDI_SET_CLKREQ);
     94c:	84 e0       	ldi	r24, 0x04	; 4
     94e:	f2 dd       	rcall	.-1052   	; 0x534 <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.23]>
     950:	40 2f       	mov	r20, r16
     952:	c7 01       	movw	r24, r14
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:495

  /* Wait for data to be transferred to USERROW */
  /* AVR_Dx requires at least 100 * 50us wait loops */
  /* AVR_Ex may not end forever, so give up midway */
  loop_until_sys_stat_is_clear(UPDI_SYS_UROWPROG, 200);
     954:	b6 01       	movw	r22, r12
     956:	18 dc       	rcall	.-2000   	; 0x188 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.17]>
     958:	63 e0       	ldi	r22, 0x03	; 3
     95a:	8a e0       	ldi	r24, 0x0A	; 10
     95c:	0d dc       	rcall	.-2022   	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:499
  /* Ignore any errors here */

  /* Step completed */
  set_cs_stat(UPDI_CS_ASI_KEY_STATUS, UPDI_KEY_UROWWRITE);
     95e:	68 ec       	ldi	r22, 0xC8	; 200
     960:	70 e0       	ldi	r23, 0x00	; 0
     962:	84 e0       	ldi	r24, 0x04	; 4
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:502

  /* If previously in program mode, send unlock key */
  if (bit_is_set(UPDI_CONTROL, UPDI_PROG_bp)) {
     964:	ff dd       	rcall	.-1026   	; 0x564 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
     966:	60 e2       	ldi	r22, 0x20	; 32
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:507
    set_nvmprog_key();
  }

  /* Exit USERROW mode */
  if (!updi_reset(true) || !updi_reset(false)) return false;
     968:	87 e0       	ldi	r24, 0x07	; 7
     96a:	06 dc       	rcall	.-2036   	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>
     96c:	e1 99       	sbic	0x1c, 1	; 28
     96e:	26 c0       	rjmp	.+76     	; 0x9bc <__DATA_REGION_LENGTH__+0x1bc>
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	ca dc       	rcall	.-1644   	; 0x308 <UPDI::updi_reset(bool)>
     974:	88 23       	and	r24, r24
     976:	c1 f2       	breq	.-80     	; 0x928 <__DATA_REGION_LENGTH__+0x128>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:508
  loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
     978:	80 e0       	ldi	r24, 0x00	; 0
     97a:	c6 dc       	rcall	.-1652   	; 0x308 <UPDI::updi_reset(bool)>
     97c:	18 2f       	mov	r17, r24
     97e:	88 23       	and	r24, r24
     980:	99 f2       	breq	.-90     	; 0x928 <__DATA_REGION_LENGTH__+0x128>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:511

  /* Make sure you are in program mode if necessary */
  if (bit_is_set(UPDI_CONTROL, UPDI_PROG_bp)) {
     982:	70 e0       	ldi	r23, 0x00	; 0
     984:	60 e0       	ldi	r22, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:512
    loop_until_sys_stat_is_set(UPDI_SYS_NVMPROG);
     986:	80 e2       	ldi	r24, 0x20	; 32
     988:	ed dd       	rcall	.-1062   	; 0x564 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:742
        _result = Target_Reset(true) && Target_Reset(false);
        break;
      }
    }
  }
  TIM::Timeout_Stop();
     98a:	e1 9b       	sbis	0x1c, 1	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:743
  UPDI_USART.CTRLB = UPDI_USART_ON;
     98c:	02 c0       	rjmp	.+4      	; 0x992 <__DATA_REGION_LENGTH__+0x192>
     98e:	88 e0       	ldi	r24, 0x08	; 8
     990:	d1 dd       	rcall	.-1118   	; 0x534 <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.23]>
_ZN4UPDI7runtimeEh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:744
  wdt_reset();
     992:	1d 83       	std	Y+5, r17	; 0x05
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:745
  return _result;
     994:	e3 dc       	rcall	.-1594   	; 0x35c <TIM::Timeout_Stop()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:746
}
     996:	88 ec       	ldi	r24, 0xC8	; 200
     998:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__RODATA_PM_OFFSET__+0x7f8806>
     99c:	a8 95       	wdr
     99e:	8d 81       	ldd	r24, Y+5	; 0x05
     9a0:	26 96       	adiw	r28, 0x06	; 6
     9a2:	cd bf       	out	0x3d, r28	; 61
     9a4:	de bf       	out	0x3e, r29	; 62
     9a6:	df 91       	pop	r29
     9a8:	cf 91       	pop	r28
     9aa:	1f 91       	pop	r17
     9ac:	0f 91       	pop	r16
     9ae:	ff 90       	pop	r15
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:503
  /* Step completed */
  set_cs_stat(UPDI_CS_ASI_KEY_STATUS, UPDI_KEY_UROWWRITE);

  /* If previously in program mode, send unlock key */
  if (bit_is_set(UPDI_CONTROL, UPDI_PROG_bp)) {
    set_nvmprog_key();
     9b0:	ef 90       	pop	r14
     9b2:	df 90       	pop	r13
     9b4:	cf 90       	pop	r12
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:293
  if (bit_is_set(UPDI_CONTROL, UPDI::UPDI_INFO_bp)
   && mem_type == JTAG2::MTYPE_XMEGA_USERSIG) // 0xC5
    return UPDI::write_userrow(start_addr, data, byte_count);

  /* From this point on, only program mode is allowed. */
  if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_PROG_bp)) return false;
     9b6:	bf 90       	pop	r11
     9b8:	af 90       	pop	r10
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:296

  /* About flash regions */
  switch (mem_type) {
     9ba:	08 95       	ret
write_userrow():
     9bc:	b1 dd       	rcall	.-1182   	; 0x520 <UPDI::set_nvmprog_key()>
     9be:	d8 cf       	rjmp	.-80     	; 0x970 <__DATA_REGION_LENGTH__+0x170>
write_memory():
     9c0:	e1 9b       	sbis	0x1c, 1	; 28
     9c2:	b2 cf       	rjmp	.-156    	; 0x928 <__DATA_REGION_LENGTH__+0x128>
     9c4:	80 3b       	cpi	r24, 0xB0	; 176
     9c6:	39 f0       	breq	.+14     	; 0x9d6 <__DATA_REGION_LENGTH__+0x1d6>
     9c8:	08 f4       	brcc	.+2      	; 0x9cc <__DATA_REGION_LENGTH__+0x1cc>
     9ca:	97 c0       	rjmp	.+302    	; 0xafa <__DATA_REGION_LENGTH__+0x2fa>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:302
    case JTAG2::MTYPE_FLASH_PAGE :            // 0xB0
    case JTAG2::MTYPE_XMEGA_APP_FLASH :       // 0xC0
    case JTAG2::MTYPE_XMEGA_BOOT_FLASH : {    // 0xC1

      /* Instructions with mismatched page sizes are rejected */
      if (!check_pagesize(JTAG2::updi_desc.flash_page_size, byte_count)) {
     9cc:	90 e4       	ldi	r25, 0x40	; 64
     9ce:	98 0f       	add	r25, r24
     9d0:	92 30       	cpi	r25, 0x02	; 2
     9d2:	08 f0       	brcs	.+2      	; 0x9d6 <__DATA_REGION_LENGTH__+0x1d6>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:28

  bool write_fuse (uint16_t addr, uint8_t data);
  uint32_t before_address;

  bool check_pagesize (uint16_t seed, uint16_t test) {
    while (test != seed) {
     9d4:	92 c0       	rjmp	.+292    	; 0xafa <__DATA_REGION_LENGTH__+0x2fa>
     9d6:	80 91 66 38 	lds	r24, 0x3866	; 0x803866 <JTAG2::updi_desc+0x4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:29
      seed >>= 1;
     9da:	90 91 67 38 	lds	r25, 0x3867	; 0x803867 <JTAG2::updi_desc+0x5>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:30
      if (seed < 2) return false;
     9de:	9c 01       	movw	r18, r24
check_pagesize():
     9e0:	02 17       	cp	r16, r18
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:304
    case JTAG2::MTYPE_XMEGA_BOOT_FLASH : {    // 0xC1

      /* Instructions with mismatched page sizes are rejected */
      if (!check_pagesize(JTAG2::updi_desc.flash_page_size, byte_count)) {
        /* Kill the process with a strong error */
        set_response(JTAG2::RSP_FAILED);
     9e2:	13 07       	cpc	r17, r19
     9e4:	09 f4       	brne	.+2      	; 0x9e8 <__DATA_REGION_LENGTH__+0x1e8>
     9e6:	6e c1       	rjmp	.+732    	; 0xcc4 <__DATA_REGION_LENGTH__+0x4c4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:88
    return nvm_ctrl_change(nvmcmd);
  }

  /* NVMCTRL version 3,5 */
  bool nvm_ctrl_v3 (uint8_t nvmcmd) {
    nvm_wait_v3();
     9e8:	36 95       	lsr	r19
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:89
    return nvm_ctrl_change(nvmcmd);
     9ea:	27 95       	ror	r18
     9ec:	22 30       	cpi	r18, 0x02	; 2
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:180
    }
    else if (!nvm_ctrl_v3(NVM_V3_CMD_FLPBCLR)) return false;
    nvm_wait_v3();

    if (byte_count == 1) UPDI::st8(start_addr, *data);
    else UPDI::sts8rsd(start_addr, data, byte_count);
     9ee:	31 05       	cpc	r19, r1
     9f0:	b8 f7       	brcc	.-18     	; 0x9e0 <__DATA_REGION_LENGTH__+0x1e0>
write_memory():
     9f2:	80 ea       	ldi	r24, 0xA0	; 160
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	8a c0       	rjmp	.+276    	; 0xb0c <__DATA_REGION_LENGTH__+0x30c>
nvm_ctrl_v3():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:316
        && ((JTAG2::updi_desc.flash_page_size - 1) & (uint16_t)start_addr) == 0;
      before_address = start_addr;

      if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp))
        return write_flash_v3(start_addr, data, byte_count, is_bound);
      else if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN2_bp))
     9f8:	a9 de       	rcall	.-686    	; 0x74c <NVM::nvm_wait_v3()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:189

  bool write_flash_v2 (uint32_t start_addr, uint8_t *data, size_t byte_count, bool is_bound) {
    /* NVMCTRL version 2 or 4 */
    /* If the chip is not erased, erase the page. */
    /* However, only when the beginning of the page boundary is addressed */
    if (is_bound) {
     9fa:	8f e0       	ldi	r24, 0x0F	; 15
     9fc:	91 c1       	rjmp	.+802    	; 0xd20 <__DATA_REGION_LENGTH__+0x520>
write_flash_v3():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:82
    return true;
  }

  /* NVMCTRL version 2,4 */
  bool nvm_ctrl_v2 (uint8_t nvmcmd) {
    nvm_wait();
     9fe:	40 2f       	mov	r20, r16
     a00:	c7 01       	movw	r24, r14
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:83
    return nvm_ctrl_change(nvmcmd);
     a02:	b6 01       	movw	r22, r12
     a04:	c1 db       	rcall	.-2174   	; 0x188 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.17]>
     a06:	9a c1       	rjmp	.+820    	; 0xd3c <__DATA_REGION_LENGTH__+0x53c>
write_memory():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:193
    /* However, only when the beginning of the page boundary is addressed */
    if (is_bound) {
      if (!nvm_ctrl_v2(NVM_V2_CMD_FLPER)) return false;
      if (!UPDI::st8(start_addr, 0xFF)) return false;
    }
    if (!nvm_ctrl_v2(NVM_V2_CMD_FLWR)) return false;
     a08:	ee 9b       	sbis	0x1d, 6	; 29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:196

    /* This version allows bulk writes of 512 bytes */
    if (byte_count == 1) UPDI::st8(start_addr, *data);
     a0a:	62 c0       	rjmp	.+196    	; 0xad0 <__DATA_REGION_LENGTH__+0x2d0>
write_flash_v2():
     a0c:	81 11       	cpse	r24, r1
     a0e:	0f c0       	rjmp	.+30     	; 0xa2e <__DATA_REGION_LENGTH__+0x22e>
nvm_ctrl_v2():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:139
      set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
      return true;
    }
    if (!nvm_ctrl_v2(NVM_V2_CMD_EEERWR)) return false;

    if (byte_count == 1) UPDI::st8(start_addr, *data);
     a10:	ab de       	rcall	.-682    	; 0x768 <NVM::nvm_wait()>
     a12:	82 e0       	ldi	r24, 0x02	; 2
     a14:	de dc       	rcall	.-1604   	; 0x3d2 <NVM::nvm_ctrl_change(unsigned char)>
write_flash_v2():
     a16:	88 23       	and	r24, r24
     a18:	09 f4       	brne	.+2      	; 0xa1c <__DATA_REGION_LENGTH__+0x21c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:82
    return true;
  }

  /* NVMCTRL version 2,4 */
  bool nvm_ctrl_v2 (uint8_t nvmcmd) {
    nvm_wait();
     a1a:	86 cf       	rjmp	.-244    	; 0x928 <__DATA_REGION_LENGTH__+0x128>
     a1c:	01 30       	cpi	r16, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:83
    return nvm_ctrl_change(nvmcmd);
     a1e:	11 05       	cpc	r17, r1
     a20:	99 f4       	brne	.+38     	; 0xa48 <__DATA_REGION_LENGTH__+0x248>
write_eeprom_v2():
     a22:	40 91 a0 38 	lds	r20, 0x38A0	; 0x8038a0 <JTAG2::packet+0x12>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:190
  bool write_flash_v2 (uint32_t start_addr, uint8_t *data, size_t byte_count, bool is_bound) {
    /* NVMCTRL version 2 or 4 */
    /* If the chip is not erased, erase the page. */
    /* However, only when the beginning of the page boundary is addressed */
    if (is_bound) {
      if (!nvm_ctrl_v2(NVM_V2_CMD_FLPER)) return false;
     a26:	c7 01       	movw	r24, r14
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:191
      if (!UPDI::st8(start_addr, 0xFF)) return false;
     a28:	b6 01       	movw	r22, r12
     a2a:	f0 db       	rcall	.-2080   	; 0x20c <UPDI::st8(unsigned long, unsigned char)>
     a2c:	49 c0       	rjmp	.+146    	; 0xac0 <__DATA_REGION_LENGTH__+0x2c0>
nvm_ctrl_v2():
     a2e:	9c de       	rcall	.-712    	; 0x768 <NVM::nvm_wait()>
     a30:	88 e0       	ldi	r24, 0x08	; 8
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:197
    }
    if (!nvm_ctrl_v2(NVM_V2_CMD_FLWR)) return false;

    /* This version allows bulk writes of 512 bytes */
    if (byte_count == 1) UPDI::st8(start_addr, *data);
    else if ((byte_count - 1) >> 8) UPDI::sts16rsd(start_addr, data, byte_count);
     a32:	cf dc       	rcall	.-1634   	; 0x3d2 <NVM::nvm_ctrl_change(unsigned char)>
write_flash_v2():
     a34:	88 23       	and	r24, r24
     a36:	09 f4       	brne	.+2      	; 0xa3a <__DATA_REGION_LENGTH__+0x23a>
     a38:	77 cf       	rjmp	.-274    	; 0x928 <__DATA_REGION_LENGTH__+0x128>
     a3a:	4f ef       	ldi	r20, 0xFF	; 255
     a3c:	c7 01       	movw	r24, r14
     a3e:	b6 01       	movw	r22, r12
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:235
  if (!set_cs_ctra(UPDI_GTVAL)) return false;
  return true;
}

bool UPDI::sts16rsd (uint32_t addr, uint8_t *data, size_t len) {
  _CAPS32(_set_ptr_l[2])->dword = addr;
     a40:	e5 db       	rcall	.-2102   	; 0x20c <UPDI::st8(unsigned long, unsigned char)>
     a42:	81 11       	cpse	r24, r1
     a44:	e5 cf       	rjmp	.-54     	; 0xa10 <__DATA_REGION_LENGTH__+0x210>
     a46:	70 cf       	rjmp	.-288    	; 0x928 <__DATA_REGION_LENGTH__+0x128>
     a48:	c8 01       	movw	r24, r16
     a4a:	01 97       	sbiw	r24, 0x01	; 1
     a4c:	89 2f       	mov	r24, r25
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:236
  uint8_t repeat = len >> 1;
     a4e:	99 27       	eor	r25, r25
     a50:	89 2b       	or	r24, r25
     a52:	09 f4       	brne	.+2      	; 0xa56 <__DATA_REGION_LENGTH__+0x256>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:237
  _set_repeat[2] = repeat - 1;
     a54:	38 c0       	rjmp	.+112    	; 0xac6 <__DATA_REGION_LENGTH__+0x2c6>
sts16rsd():
     a56:	c0 92 41 38 	sts	0x3841, r12	; 0x803841 <UPDI::_set_ptr_l+0x2>
     a5a:	d0 92 42 38 	sts	0x3842, r13	; 0x803842 <UPDI::_set_ptr_l+0x3>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:238
  _set_repeat[4] = UPDI_PTR_INC|UPDI_ST|UPDI_DATA2;
     a5e:	e0 92 43 38 	sts	0x3843, r14	; 0x803843 <UPDI::_set_ptr_l+0x4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:239
  if (!send_bytes(_set_ptr_l, sizeof(_set_ptr_l) - 1)) return false;
     a62:	f0 92 44 38 	sts	0x3844, r15	; 0x803844 <UPDI::_set_ptr_l+0x5>
     a66:	16 95       	lsr	r17
     a68:	07 95       	ror	r16
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:240
  if (UPDI_ACK != RECV()) return false;
     a6a:	f0 2e       	mov	r15, r16
     a6c:	ea e3       	ldi	r30, 0x3A	; 58
     a6e:	f8 e3       	ldi	r31, 0x38	; 56
     a70:	01 50       	subi	r16, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:317
  set_ptr[2] = data;
  return send_bytes(set_ptr, sizeof(set_ptr));
}

bool UPDI::set_cs_ctra (uint8_t data) {
  return set_cs_stat(UPDI_CS_CTRLA, data);
     a72:	02 83       	std	Z+2, r16	; 0x02
     a74:	85 e6       	ldi	r24, 0x65	; 101
     a76:	84 83       	std	Z+4, r24	; 0x04
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:241
  uint8_t repeat = len >> 1;
  _set_repeat[2] = repeat - 1;
  _set_repeat[4] = UPDI_PTR_INC|UPDI_ST|UPDI_DATA2;
  if (!send_bytes(_set_ptr_l, sizeof(_set_ptr_l) - 1)) return false;
  if (UPDI_ACK != RECV()) return false;
  if (!set_cs_ctra(UPDI_SET_RSD|UPDI_GTVAL_RSD)) return false;
     a78:	65 e0       	ldi	r22, 0x05	; 5
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:242
  if (!send_bytes(_set_repeat, sizeof(_set_repeat))) return false;
     a7a:	8f e3       	ldi	r24, 0x3F	; 63
     a7c:	98 e3       	ldi	r25, 0x38	; 56
     a7e:	6b db       	rcall	.-2346   	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     a80:	88 23       	and	r24, r24
     a82:	f1 f0       	breq	.+60     	; 0xac0 <__DATA_REGION_LENGTH__+0x2c0>
     a84:	42 db       	rcall	.-2428   	; 0x10a <UPDI::RECV()>
     a86:	80 34       	cpi	r24, 0x40	; 64
     a88:	d9 f4       	brne	.+54     	; 0xac0 <__DATA_REGION_LENGTH__+0x2c0>
set_cs_ctra():
     a8a:	6e e0       	ldi	r22, 0x0E	; 14
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:244
  do {              /* Repeat word send */
    SEND(*data++);  /* Submission errors must be ignored */
     a8c:	82 e0       	ldi	r24, 0x02	; 2
     a8e:	74 db       	rcall	.-2328   	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>
sts16rsd():
     a90:	88 23       	and	r24, r24
     a92:	b1 f0       	breq	.+44     	; 0xac0 <__DATA_REGION_LENGTH__+0x2c0>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:245
    SEND(*data++);  /* Submission errors must be ignored */
     a94:	65 e0       	ldi	r22, 0x05	; 5
     a96:	8a e3       	ldi	r24, 0x3A	; 58
     a98:	98 e3       	ldi	r25, 0x38	; 56
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:246
  } while (--repeat);
     a9a:	5d db       	rcall	.-2374   	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     a9c:	88 23       	and	r24, r24
     a9e:	81 f0       	breq	.+32     	; 0xac0 <__DATA_REGION_LENGTH__+0x2c0>
     aa0:	0e e8       	ldi	r16, 0x8E	; 142
     aa2:	18 e3       	ldi	r17, 0x38	; 56
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:317
  set_ptr[2] = data;
  return send_bytes(set_ptr, sizeof(set_ptr));
}

bool UPDI::set_cs_ctra (uint8_t data) {
  return set_cs_stat(UPDI_CS_CTRLA, data);
     aa4:	f8 01       	movw	r30, r16
     aa6:	82 89       	ldd	r24, Z+18	; 0x12
     aa8:	3c db       	rcall	.-2440   	; 0x122 <UPDI::SEND(unsigned char)>
     aaa:	f8 01       	movw	r30, r16
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:82
    return true;
  }

  /* NVMCTRL version 2,4 */
  bool nvm_ctrl_v2 (uint8_t nvmcmd) {
    nvm_wait();
     aac:	83 89       	ldd	r24, Z+19	; 0x13
     aae:	39 db       	rcall	.-2446   	; 0x122 <UPDI::SEND(unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:83
    return nvm_ctrl_change(nvmcmd);
     ab0:	fa 94       	dec	r15
     ab2:	0e 5f       	subi	r16, 0xFE	; 254
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:198
    if (!nvm_ctrl_v2(NVM_V2_CMD_FLWR)) return false;

    /* This version allows bulk writes of 512 bytes */
    if (byte_count == 1) UPDI::st8(start_addr, *data);
    else if ((byte_count - 1) >> 8) UPDI::sts16rsd(start_addr, data, byte_count);
    else UPDI::sts8rsd(start_addr, data, byte_count);
     ab4:	1f 4f       	sbci	r17, 0xFF	; 255
     ab6:	f1 10       	cpse	r15, r1
     ab8:	f5 cf       	rjmp	.-22     	; 0xaa4 <__DATA_REGION_LENGTH__+0x2a4>
set_cs_ctra():
     aba:	66 e0       	ldi	r22, 0x06	; 6
     abc:	82 e0       	ldi	r24, 0x02	; 2
     abe:	5c db       	rcall	.-2376   	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>
nvm_ctrl_v2():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:207

  bool write_flash_v0 (uint32_t start_addr, uint8_t *data, size_t byte_count, bool is_bound) {
    /* NVMCTRL version 0 */
    /* This version does not require page erasure. */
    /* Just clearing the buffer buffer is sufficient. */
    if (is_bound) {
     ac0:	53 de       	rcall	.-858    	; 0x768 <NVM::nvm_wait()>
     ac2:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:153
    if (byte_count > 64) {
      /* If the limit is exceeded, it will fall back and force a Single-byte write */
      set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
      return true;
    }
    nvm_wait();
     ac4:	3d c1       	rjmp	.+634    	; 0xd40 <__DATA_REGION_LENGTH__+0x540>
write_flash_v2():
     ac6:	40 2f       	mov	r20, r16
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:155

    if (byte_count == 1) UPDI::st8(start_addr, *data);
     ac8:	c7 01       	movw	r24, r14
     aca:	b6 01       	movw	r22, r12
     acc:	5d db       	rcall	.-2374   	; 0x188 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.17]>
     ace:	f8 cf       	rjmp	.-16     	; 0xac0 <__DATA_REGION_LENGTH__+0x2c0>
write_flash_v0():
     ad0:	81 11       	cpse	r24, r1
     ad2:	0d c0       	rjmp	.+26     	; 0xaee <__DATA_REGION_LENGTH__+0x2ee>
write_eeprom_v0():
     ad4:	49 de       	rcall	.-878    	; 0x768 <NVM::nvm_wait()>
     ad6:	01 30       	cpi	r16, 0x01	; 1
     ad8:	11 05       	cpc	r17, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:158
    else UPDI::sts8rsd(start_addr, data, byte_count);

    return nvm_ctrl(NVM_CMD_ERWP);
     ada:	09 f0       	breq	.+2      	; 0xade <__DATA_REGION_LENGTH__+0x2de>
     adc:	9d c0       	rjmp	.+314    	; 0xc18 <__DATA_REGION_LENGTH__+0x418>
     ade:	40 91 a0 38 	lds	r20, 0x38A0	; 0x8038a0 <JTAG2::packet+0x12>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:208
  bool write_flash_v0 (uint32_t start_addr, uint8_t *data, size_t byte_count, bool is_bound) {
    /* NVMCTRL version 0 */
    /* This version does not require page erasure. */
    /* Just clearing the buffer buffer is sufficient. */
    if (is_bound) {
      nvm_wait();
     ae2:	c7 01       	movw	r24, r14
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:209
      if (!nvm_ctrl(NVM_CMD_PBC)) return false;
     ae4:	b6 01       	movw	r22, r12
     ae6:	92 db       	rcall	.-2268   	; 0x20c <UPDI::st8(unsigned long, unsigned char)>
     ae8:	83 e0       	ldi	r24, 0x03	; 3
     aea:	6d dc       	rcall	.-1830   	; 0x3c6 <NVM::nvm_ctrl(unsigned char)>
     aec:	3c c0       	rjmp	.+120    	; 0xb66 <__DATA_REGION_LENGTH__+0x366>
write_flash_v0():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:324
        return write_flash_v0(start_addr, data, byte_count, is_bound);
    }
  }

  /* Other writes are allowed from 1 to 256 bytes */
  if (byte_count == 0 || byte_count > 256) {
     aee:	3c de       	rcall	.-904    	; 0x768 <NVM::nvm_wait()>
     af0:	84 e0       	ldi	r24, 0x04	; 4
     af2:	69 dc       	rcall	.-1838   	; 0x3c6 <NVM::nvm_ctrl(unsigned char)>
     af4:	81 11       	cpse	r24, r1
     af6:	ee cf       	rjmp	.-36     	; 0xad4 <__DATA_REGION_LENGTH__+0x2d4>
     af8:	17 cf       	rjmp	.-466    	; 0x928 <__DATA_REGION_LENGTH__+0x128>
write_memory():
     afa:	98 01       	movw	r18, r16
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:325
    set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
     afc:	21 50       	subi	r18, 0x01	; 1
     afe:	31 09       	sbc	r19, r1
     b00:	2f 3f       	cpi	r18, 0xFF	; 255
     b02:	31 05       	cpc	r19, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:329
    return true;
  }

  switch (mem_type) {
     b04:	29 f0       	breq	.+10     	; 0xb10 <__DATA_REGION_LENGTH__+0x310>
     b06:	20 f0       	brcs	.+8      	; 0xb10 <__DATA_REGION_LENGTH__+0x310>
     b08:	83 ea       	ldi	r24, 0xA3	; 163
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	77 dc       	rcall	.-1810   	; 0x3fc <JTAG2::set_response(JTAG2::jtag_response_e)>
     b0e:	04 cf       	rjmp	.-504    	; 0x918 <__DATA_REGION_LENGTH__+0x118>
     b10:	81 3b       	cpi	r24, 0xB1	; 177
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:350
      /* FUSES in other implementations is equivalent to EEPROM */
    }
    case JTAG2::MTYPE_XMEGA_EEPROM :          // 0xC4
    case JTAG2::MTYPE_EEPROM_PAGE :           // 0xB1
    case JTAG2::MTYPE_EEPROM : {              // 0x22
      if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp))
     b12:	29 f0       	breq	.+10     	; 0xb1e <__DATA_REGION_LENGTH__+0x31e>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:115
   ***********************************/

  bool write_eeprom_v3 (uint32_t start_addr, uint8_t *data, size_t byte_count) {
    /* NVMCTRL version 3 or 5 */
    /* This version can write 8 bytes in bulk */
    if (byte_count > 8) {
     b14:	d8 f4       	brcc	.+54     	; 0xb4c <__DATA_REGION_LENGTH__+0x34c>
     b16:	80 32       	cpi	r24, 0x20	; 32
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:88
    return nvm_ctrl_change(nvmcmd);
  }

  /* NVMCTRL version 3,5 */
  bool nvm_ctrl_v3 (uint8_t nvmcmd) {
    nvm_wait_v3();
     b18:	01 f1       	breq	.+64     	; 0xb5a <__DATA_REGION_LENGTH__+0x35a>
     b1a:	82 32       	cpi	r24, 0x22	; 34
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:89
    return nvm_ctrl_change(nvmcmd);
     b1c:	d9 f4       	brne	.+54     	; 0xb54 <__DATA_REGION_LENGTH__+0x354>
     b1e:	ed 9b       	sbis	0x1d, 5	; 29
     b20:	5f c0       	rjmp	.+190    	; 0xbe0 <__DATA_REGION_LENGTH__+0x3e0>
write_eeprom_v3():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:120
    if (byte_count > 8) {
      /* If the limit is exceeded, it will fall back and force a Single-byte write */
      set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
      return true;
    }
    if (!nvm_ctrl_v3(NVM_V3_CMD_EEPBCLR)) return false;
     b22:	09 30       	cpi	r16, 0x09	; 9
     b24:	11 05       	cpc	r17, r1
     b26:	80 f7       	brcc	.-32     	; 0xb08 <__DATA_REGION_LENGTH__+0x308>
nvm_ctrl_v3():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:122

    if (byte_count == 1) UPDI::st8(start_addr, *data);
     b28:	11 de       	rcall	.-990    	; 0x74c <NVM::nvm_wait_v3()>
     b2a:	8f e1       	ldi	r24, 0x1F	; 31
     b2c:	52 dc       	rcall	.-1884   	; 0x3d2 <NVM::nvm_ctrl_change(unsigned char)>
write_eeprom_v3():
     b2e:	88 23       	and	r24, r24
     b30:	09 f4       	brne	.+2      	; 0xb34 <__DATA_REGION_LENGTH__+0x334>
     b32:	fa ce       	rjmp	.-524    	; 0x928 <__DATA_REGION_LENGTH__+0x128>
     b34:	01 30       	cpi	r16, 0x01	; 1
     b36:	11 05       	cpc	r17, r1
     b38:	09 f0       	breq	.+2      	; 0xb3c <__DATA_REGION_LENGTH__+0x33c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:88
    return nvm_ctrl_change(nvmcmd);
  }

  /* NVMCTRL version 3,5 */
  bool nvm_ctrl_v3 (uint8_t nvmcmd) {
    nvm_wait_v3();
     b3a:	4b c0       	rjmp	.+150    	; 0xbd2 <__DATA_REGION_LENGTH__+0x3d2>
     b3c:	40 91 a0 38 	lds	r20, 0x38A0	; 0x8038a0 <JTAG2::packet+0x12>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:329
  if (byte_count == 0 || byte_count > 256) {
    set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
    return true;
  }

  switch (mem_type) {
     b40:	c7 01       	movw	r24, r14
     b42:	b6 01       	movw	r22, r12
     b44:	63 db       	rcall	.-2362   	; 0x20c <UPDI::st8(unsigned long, unsigned char)>
nvm_ctrl_v3():
     b46:	02 de       	rcall	.-1020   	; 0x74c <NVM::nvm_wait_v3()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:359
      else
        return write_eeprom_v0(start_addr, data, byte_count);
    }
    default :
      /* Other memory types are rejected */
      set_response(JTAG2::RSP_ILLEGAL_MEMORY_TYPE);
     b48:	85 e1       	ldi	r24, 0x15	; 21
     b4a:	fa c0       	rjmp	.+500    	; 0xd40 <__DATA_REGION_LENGTH__+0x540>
write_memory():
     b4c:	84 3b       	cpi	r24, 0xB4	; 180
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:332
  }

  switch (mem_type) {
    /* Can write to the IO region as is */
    case JTAG2::MTYPE_SRAM : {                // 0x20
      return UPDI::sts8(start_addr, data, byte_count);
     b4e:	68 f0       	brcs	.+26     	; 0xb6a <__DATA_REGION_LENGTH__+0x36a>
     b50:	84 3c       	cpi	r24, 0xC4	; 196
     b52:	29 f3       	breq	.-54     	; 0xb1e <__DATA_REGION_LENGTH__+0x31e>
     b54:	82 ea       	ldi	r24, 0xA2	; 162
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	d9 cf       	rjmp	.-78     	; 0xb0c <__DATA_REGION_LENGTH__+0x30c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:83
  }

  /* NVMCTRL version 2,4 */
  bool nvm_ctrl_v2 (uint8_t nvmcmd) {
    nvm_wait();
    return nvm_ctrl_change(nvmcmd);
     b5a:	20 2f       	mov	r18, r16
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:339
    /* EEPROM region */
    case JTAG2::MTYPE_LOCK_BITS :             // 0xB3
    case JTAG2::MTYPE_FUSE_BITS : {           // 0xB2
      /* The NVMCTRL version 0 implementation is special. */
      if (bit_is_clear(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp)
      && bit_is_clear(UPDI_NVMCTRL, UPDI::UPDI_GEN2_bp)) {
     b5c:	40 ea       	ldi	r20, 0xA0	; 160
     b5e:	58 e3       	ldi	r21, 0x38	; 56
     b60:	c7 01       	movw	r24, r14
     b62:	b6 01       	movw	r22, r12
     b64:	90 db       	rcall	.-2272   	; 0x286 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)>
nvm_ctrl_v2():
     b66:	18 2f       	mov	r17, r24
     b68:	14 cf       	rjmp	.-472    	; 0x992 <__DATA_REGION_LENGTH__+0x192>
write_memory():
     b6a:	ed 99       	sbic	0x1d, 5	; 29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:100

  bool write_fuse (uint16_t addr, uint8_t data) {
    /* Version 0 of FUSE can write one byte at a time in a special way */
    struct fuse_packet_t { uint16_t data; uint16_t addr; } fuse_packet;
    fuse_packet.data = data;
    fuse_packet.addr = addr;
     b6c:	d8 cf       	rjmp	.-80     	; 0xb1e <__DATA_REGION_LENGTH__+0x31e>
     b6e:	ee 99       	sbic	0x1d, 6	; 29
     b70:	d6 cf       	rjmp	.-84     	; 0xb1e <__DATA_REGION_LENGTH__+0x31e>
     b72:	c8 01       	movw	r24, r16
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:99
   **********************************************/

  bool write_fuse (uint16_t addr, uint8_t data) {
    /* Version 0 of FUSE can write one byte at a time in a special way */
    struct fuse_packet_t { uint16_t data; uint16_t addr; } fuse_packet;
    fuse_packet.data = data;
     b74:	82 57       	subi	r24, 0x72	; 114
     b76:	97 4c       	sbci	r25, 0xC7	; 199
     b78:	5c 01       	movw	r10, r24
     b7a:	0e e8       	ldi	r16, 0x8E	; 142
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:100
    fuse_packet.addr = addr;
     b7c:	18 e3       	ldi	r17, 0x38	; 56
write_fuse():
     b7e:	f6 01       	movw	r30, r12
     b80:	ee 58       	subi	r30, 0x8E	; 142
     b82:	f8 43       	sbci	r31, 0x38	; 56
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:101
    nvm_wait();
     b84:	6f 01       	movw	r12, r30
     b86:	f8 01       	movw	r30, r16
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:102
    if (!UPDI::sts8(NVMCTRL_REG_DATA,
     b88:	82 89       	ldd	r24, Z+18	; 0x12
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	89 83       	std	Y+1, r24	; 0x01
     b8e:	9a 83       	std	Y+2, r25	; 0x02
     b90:	c6 01       	movw	r24, r12
     b92:	80 0f       	add	r24, r16
     b94:	91 1f       	adc	r25, r17
     b96:	8b 83       	std	Y+3, r24	; 0x03
     b98:	9c 83       	std	Y+4, r25	; 0x04
     b9a:	e6 dd       	rcall	.-1076   	; 0x768 <NVM::nvm_wait()>
     b9c:	24 e0       	ldi	r18, 0x04	; 4
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:104
      (uint8_t*)&fuse_packet, sizeof(fuse_packet))) return false;
    if (!nvm_ctrl(NVM_CMD_WFU)) return false;
     b9e:	ae 01       	movw	r20, r28
     ba0:	4f 5f       	subi	r20, 0xFF	; 255
     ba2:	5f 4f       	sbci	r21, 0xFF	; 255
     ba4:	66 e0       	ldi	r22, 0x06	; 6
     ba6:	70 e1       	ldi	r23, 0x10	; 16
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:105
    return ((nvm_wait() & 7) == 0);
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:341
    case JTAG2::MTYPE_FUSE_BITS : {           // 0xB2
      /* The NVMCTRL version 0 implementation is special. */
      if (bit_is_clear(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp)
      && bit_is_clear(UPDI_NVMCTRL, UPDI::UPDI_GEN2_bp)) {
        do {
          if (!write_fuse(start_addr++, *data++)) return false;
     bac:	6c db       	rcall	.-2344   	; 0x286 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)>
     bae:	88 23       	and	r24, r24
     bb0:	09 f4       	brne	.+2      	; 0xbb4 <__DATA_REGION_LENGTH__+0x3b4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:342
        } while (--byte_count);
     bb2:	ba ce       	rjmp	.-652    	; 0x928 <__DATA_REGION_LENGTH__+0x128>
     bb4:	87 e0       	ldi	r24, 0x07	; 7
     bb6:	07 dc       	rcall	.-2034   	; 0x3c6 <NVM::nvm_ctrl(unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:123
      return true;
    }
    if (!nvm_ctrl_v3(NVM_V3_CMD_EEPBCLR)) return false;

    if (byte_count == 1) UPDI::st8(start_addr, *data);
    else UPDI::sts8(start_addr, data, byte_count);
     bb8:	88 23       	and	r24, r24
     bba:	09 f4       	brne	.+2      	; 0xbbe <__DATA_REGION_LENGTH__+0x3be>
     bbc:	b5 ce       	rjmp	.-662    	; 0x928 <__DATA_REGION_LENGTH__+0x128>
     bbe:	d4 dd       	rcall	.-1112   	; 0x768 <NVM::nvm_wait()>
write_memory():
     bc0:	87 70       	andi	r24, 0x07	; 7
     bc2:	09 f0       	breq	.+2      	; 0xbc6 <__DATA_REGION_LENGTH__+0x3c6>
     bc4:	b1 ce       	rjmp	.-670    	; 0x928 <__DATA_REGION_LENGTH__+0x128>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:352
    case JTAG2::MTYPE_XMEGA_EEPROM :          // 0xC4
    case JTAG2::MTYPE_EEPROM_PAGE :           // 0xB1
    case JTAG2::MTYPE_EEPROM : {              // 0x22
      if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp))
        return write_eeprom_v3(start_addr, data, byte_count);
      else if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN2_bp))
     bc6:	0f 5f       	subi	r16, 0xFF	; 255
     bc8:	1f 4f       	sbci	r17, 0xFF	; 255
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:132

  bool write_eeprom_v2 (uint32_t start_addr, uint8_t *data, size_t byte_count) {
    /* NVMCTRL version 2 or 4 */
    /* This version cannot be written in bulk transfer */
    /* Only 2 bytes (1 word) can be written at a time */
    if (byte_count > 2) {
     bca:	a0 16       	cp	r10, r16
     bcc:	b1 06       	cpc	r11, r17
     bce:	d9 f6       	brne	.-74     	; 0xb86 <__DATA_REGION_LENGTH__+0x386>
     bd0:	a3 ce       	rjmp	.-698    	; 0x918 <__DATA_REGION_LENGTH__+0x118>
write_eeprom_v3():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:82
    return true;
  }

  /* NVMCTRL version 2,4 */
  bool nvm_ctrl_v2 (uint8_t nvmcmd) {
    nvm_wait();
     bd2:	20 2f       	mov	r18, r16
     bd4:	40 ea       	ldi	r20, 0xA0	; 160
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:83
    return nvm_ctrl_change(nvmcmd);
     bd6:	58 e3       	ldi	r21, 0x38	; 56
     bd8:	c7 01       	movw	r24, r14
     bda:	b6 01       	movw	r22, r12
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:137
    if (byte_count > 2) {
      /* If the limit is exceeded, it will fall back and force a Single-byte write */
      set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
      return true;
    }
    if (!nvm_ctrl_v2(NVM_V2_CMD_EEERWR)) return false;
     bdc:	54 db       	rcall	.-2392   	; 0x286 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)>
     bde:	b3 cf       	rjmp	.-154    	; 0xb46 <__DATA_REGION_LENGTH__+0x346>
write_memory():
     be0:	ee 9b       	sbis	0x1d, 6	; 29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:139

    if (byte_count == 1) UPDI::st8(start_addr, *data);
     be2:	15 c0       	rjmp	.+42     	; 0xc0e <__DATA_REGION_LENGTH__+0x40e>
write_eeprom_v2():
     be4:	03 30       	cpi	r16, 0x03	; 3
     be6:	11 05       	cpc	r17, r1
     be8:	08 f0       	brcs	.+2      	; 0xbec <__DATA_REGION_LENGTH__+0x3ec>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:140
    else UPDI::sts8(start_addr, data, byte_count);
     bea:	8e cf       	rjmp	.-228    	; 0xb08 <__DATA_REGION_LENGTH__+0x308>
nvm_ctrl_v2():
     bec:	bd dd       	rcall	.-1158   	; 0x768 <NVM::nvm_wait()>
     bee:	83 e1       	ldi	r24, 0x13	; 19
     bf0:	f0 db       	rcall	.-2080   	; 0x3d2 <NVM::nvm_ctrl_change(unsigned char)>
write_eeprom_v2():
     bf2:	88 23       	and	r24, r24
     bf4:	09 f4       	brne	.+2      	; 0xbf8 <__DATA_REGION_LENGTH__+0x3f8>
     bf6:	98 ce       	rjmp	.-720    	; 0x928 <__DATA_REGION_LENGTH__+0x128>
     bf8:	01 30       	cpi	r16, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:148
  }

  bool write_eeprom_v0 (uint32_t start_addr, uint8_t *data, size_t byte_count) {
    /* NVMCTRL version 0 */
    /* This version allows fast bulk writes of 32 or 64 bytes */
    if (byte_count > 64) {
     bfa:	11 05       	cpc	r17, r1
     bfc:	09 f4       	brne	.+2      	; 0xc00 <__DATA_REGION_LENGTH__+0x400>
     bfe:	11 cf       	rjmp	.-478    	; 0xa22 <__DATA_REGION_LENGTH__+0x222>
     c00:	22 e0       	ldi	r18, 0x02	; 2
     c02:	40 ea       	ldi	r20, 0xA0	; 160
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:156
      return true;
    }
    nvm_wait();

    if (byte_count == 1) UPDI::st8(start_addr, *data);
    else UPDI::sts8rsd(start_addr, data, byte_count);
     c04:	58 e3       	ldi	r21, 0x38	; 56
     c06:	c7 01       	movw	r24, r14
     c08:	b6 01       	movw	r22, r12
     c0a:	3d db       	rcall	.-2438   	; 0x286 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)>
     c0c:	59 cf       	rjmp	.-334    	; 0xac0 <__DATA_REGION_LENGTH__+0x2c0>
write_eeprom_v0():
     c0e:	01 34       	cpi	r16, 0x41	; 65
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:731
      case UPDI_CMD_WRITE_MEMORY : {
        _result = NVM::write_memory();
        break;
      }
      case UPDI_CMD_ERASE : {
        if (JTAG2::packet.body[JTAG2::MEM_TYPE] == JTAG2::XMEGA_ERASE_CHIP) {
     c10:	11 05       	cpc	r17, r1
     c12:	08 f4       	brcc	.+2      	; 0xc16 <__DATA_REGION_LENGTH__+0x416>
     c14:	5f cf       	rjmp	.-322    	; 0xad4 <__DATA_REGION_LENGTH__+0x2d4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:524
 ****************************/

// __attribute__((optimize("O0")))
bool UPDI::chip_erase (void) {
  /* If UPDI is prohibited, try HV control */
  if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) {
     c16:	78 cf       	rjmp	.-272    	; 0xb08 <__DATA_REGION_LENGTH__+0x308>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:396
  return loop_until_key_stat_is_set(UPDI_KEY_NVMPROG);
}

/* __attribute__((optimize("O0"))) */
bool UPDI::set_erase_key (void) {
  if (!send_bytes(erase_key, sizeof(erase_key))) return false;
     c18:	40 2f       	mov	r20, r16
     c1a:	c7 01       	movw	r24, r14
     c1c:	b6 01       	movw	r22, r12
     c1e:	b4 da       	rcall	.-2712   	; 0x188 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.17]>
     c20:	63 cf       	rjmp	.-314    	; 0xae8 <__DATA_REGION_LENGTH__+0x2e8>
_ZN4UPDI7runtimeEh():
     c22:	80 91 97 38 	lds	r24, 0x3897	; 0x803897 <JTAG2::packet+0x9>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:397
  return loop_until_key_stat_is_set(UPDI_KEY_CHIPERASE);
     c26:	81 11       	cpse	r24, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:529
  if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) {
    HV_Pulse();
  }

  /* Transition to CHIPERASE mode by system reset */
  if (!set_erase_key()) return false;
     c28:	b5 ce       	rjmp	.-662    	; 0x994 <__DATA_REGION_LENGTH__+0x194>
chip_erase():
     c2a:	e0 9b       	sbis	0x1c, 0	; 28
     c2c:	41 c0       	rjmp	.+130    	; 0xcb0 <__DATA_REGION_LENGTH__+0x4b0>
set_erase_key():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:532

  /* Issue a system reset */
  if (!updi_reset(true) || !updi_reset(false)) return false;
     c2e:	6a e0       	ldi	r22, 0x0A	; 10
     c30:	8c e2       	ldi	r24, 0x2C	; 44
     c32:	98 e3       	ldi	r25, 0x38	; 56
     c34:	90 da       	rcall	.-2784   	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     c36:	88 23       	and	r24, r24
     c38:	09 f4       	brne	.+2      	; 0xc3c <__DATA_REGION_LENGTH__+0x43c>
     c3a:	29 ce       	rjmp	.-942    	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
     c3c:	88 e0       	ldi	r24, 0x08	; 8
     c3e:	58 dc       	rcall	.-1872   	; 0x4f0 <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.20]>
chip_erase():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:535

  /* If LOCKSTATUS is clear, the chip is unlocked */
  loop_until_sys_stat_is_clear(UPDI_SYS_LOCKSTATUS);
     c40:	88 23       	and	r24, r24
     c42:	09 f4       	brne	.+2      	; 0xc46 <__DATA_REGION_LENGTH__+0x446>
     c44:	24 ce       	rjmp	.-952    	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	5f db       	rcall	.-2370   	; 0x308 <UPDI::updi_reset(bool)>
     c4a:	88 23       	and	r24, r24
     c4c:	09 f4       	brne	.+2      	; 0xc50 <__DATA_REGION_LENGTH__+0x450>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:294
  send_bytes(set_ptr, sizeof(set_ptr));
  return RECV();
}

bool UPDI::is_cs_stat (uint8_t code, uint8_t check) {
  return check == (get_cs_stat(code) & check);
     c4e:	1f ce       	rjmp	.-962    	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
     c50:	80 e0       	ldi	r24, 0x00	; 0
     c52:	5a db       	rcall	.-2380   	; 0x308 <UPDI::updi_reset(bool)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:364
bool UPDI::loop_until_key_stat_is_clear (uint8_t bitmap, uint16_t limit) {
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  uint16_t _back = _send_ptr;
  #endif
  do {
    if (!is_key_stat(bitmap)) return true;
     c54:	88 23       	and	r24, r24
     c56:	09 f4       	brne	.+2      	; 0xc5a <__DATA_REGION_LENGTH__+0x45a>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.8/cores/megaAVR/api/delay_busywait.h:31
     c58:	1a ce       	rjmp	.-972    	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
     c5a:	70 e0       	ldi	r23, 0x00	; 0
     c5c:	60 e0       	ldi	r22, 0x00	; 0
     c5e:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:369
    #ifdef ENABLE_DEBUG_UPDI_SENDER
    _send_ptr = _back;
    #endif
    TIM::delay_50us();
  } while (--limit);
     c60:	81 dc       	rcall	.-1790   	; 0x564 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
     c62:	10 e0       	ldi	r17, 0x00	; 0
     c64:	00 e0       	ldi	r16, 0x00	; 0
is_cs_stat():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:545
  /* Chip erasure was successful */
  bit_set(UPDI_CONTROL, UPDI_ERFM_bp);

  /* Once the HV control and device is successfully unlocked, */
  /* you should be able to enter program mode. */
  if (!set_nvmprog_key()) return false;
     c66:	87 e0       	ldi	r24, 0x07	; 7
     c68:	c9 da       	rcall	.-2670   	; 0x1fc <UPDI::get_cs_stat(unsigned char)>
loop_until_key_stat_is_clear():
     c6a:	83 ff       	sbrs	r24, 3
     c6c:	07 c0       	rjmp	.+14     	; 0xc7c <__DATA_REGION_LENGTH__+0x47c>
delay_micros():
     c6e:	f6 ea       	ldi	r31, 0xA6	; 166
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:546
  if (!updi_reset(true) || !updi_reset(false)) return false;
     c70:	fa 95       	dec	r31
     c72:	f1 f7       	brne	.-4      	; 0xc70 <__DATA_REGION_LENGTH__+0x470>
     c74:	00 c0       	rjmp	.+0      	; 0xc76 <__DATA_REGION_LENGTH__+0x476>
loop_until_key_stat_is_clear():
     c76:	01 50       	subi	r16, 0x01	; 1
     c78:	11 09       	sbc	r17, r1
     c7a:	a9 f7       	brne	.-22     	; 0xc66 <__DATA_REGION_LENGTH__+0x466>
chip_erase():
     c7c:	e2 9a       	sbi	0x1c, 2	; 28
     c7e:	50 dc       	rcall	.-1888   	; 0x520 <UPDI::set_nvmprog_key()>
     c80:	88 23       	and	r24, r24
     c82:	09 f4       	brne	.+2      	; 0xc86 <__DATA_REGION_LENGTH__+0x486>
     c84:	04 ce       	rjmp	.-1016   	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
     c86:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:547
  loop_until_sys_stat_is_clear(UPDI_SYS_LOCKSTATUS);
     c88:	3f db       	rcall	.-2434   	; 0x308 <UPDI::updi_reset(bool)>
     c8a:	88 23       	and	r24, r24
     c8c:	09 f4       	brne	.+2      	; 0xc90 <__DATA_REGION_LENGTH__+0x490>
     c8e:	ff cd       	rjmp	.-1026   	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
     c90:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:548
  loop_until_sys_stat_is_set(UPDI_SYS_NVMPROG);
     c92:	3a db       	rcall	.-2444   	; 0x308 <UPDI::updi_reset(bool)>
     c94:	88 23       	and	r24, r24
     c96:	09 f4       	brne	.+2      	; 0xc9a <__DATA_REGION_LENGTH__+0x49a>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:551

  /* After performing HV control, it is necessary to obtain SIB */
  bit_clear(UPDI_CONTROL, UPDI_INFO_bp);
     c98:	fa cd       	rjmp	.-1036   	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:552
  bit_set(UPDI_CONTROL, UPDI_PROG_bp);
     c9a:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:553
  return enter_updi(true);
     c9c:	60 e0       	ldi	r22, 0x00	; 0
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	61 dc       	rcall	.-1854   	; 0x564 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:525

// __attribute__((optimize("O0")))
bool UPDI::chip_erase (void) {
  /* If UPDI is prohibited, try HV control */
  if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) {
    HV_Pulse();
     ca2:	88 e0       	ldi	r24, 0x08	; 8
     ca4:	47 dc       	rcall	.-1906   	; 0x534 <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.23]>
     ca6:	e0 98       	cbi	0x1c, 0	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:737
          _result = chip_erase();
        }
        break;
      }
      case UPDI_CMD_GO : {
        _result = Target_Reset(true) && Target_Reset(false);
     ca8:	e1 9a       	sbi	0x1c, 1	; 28
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	b1 dc       	rcall	.-1694   	; 0x610 <UPDI::enter_updi(bool)>
     cae:	bb cd       	rjmp	.-1162   	; 0x826 <__DATA_REGION_LENGTH__+0x26>
     cb0:	70 dc       	rcall	.-1824   	; 0x592 <UPDI::HV_Pulse()>
     cb2:	bd cf       	rjmp	.-134    	; 0xc2e <__DATA_REGION_LENGTH__+0x42e>
_ZN4UPDI7runtimeEh():
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	2d db       	rcall	.-2470   	; 0x312 <UPDI::Target_Reset(bool)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:311
      }

      /* Page boundaries require special handling */
      const bool is_bound = bit_is_clear(UPDI_CONTROL, UPDI::UPDI_ERFM_bp)
        && before_address != start_addr
        && ((JTAG2::updi_desc.flash_page_size - 1) & (uint16_t)start_addr) == 0;
     cb8:	88 23       	and	r24, r24
     cba:	09 f4       	brne	.+2      	; 0xcbe <__DATA_REGION_LENGTH__+0x4be>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:310
        return true;
      }

      /* Page boundaries require special handling */
      const bool is_bound = bit_is_clear(UPDI_CONTROL, UPDI::UPDI_ERFM_bp)
        && before_address != start_addr
     cbc:	b4 cd       	rjmp	.-1176   	; 0x826 <__DATA_REGION_LENGTH__+0x26>
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	28 db       	rcall	.-2480   	; 0x312 <UPDI::Target_Reset(bool)>
     cc2:	b1 cd       	rjmp	.-1182   	; 0x826 <__DATA_REGION_LENGTH__+0x26>
write_memory():
     cc4:	e2 99       	sbic	0x1c, 2	; 28
     cc6:	14 c0       	rjmp	.+40     	; 0xcf0 <__DATA_REGION_LENGTH__+0x4f0>
     cc8:	40 91 5d 38 	lds	r20, 0x385D	; 0x80385d <NVM::before_address>
     ccc:	50 91 5e 38 	lds	r21, 0x385E	; 0x80385e <NVM::before_address+0x1>
     cd0:	60 91 5f 38 	lds	r22, 0x385F	; 0x80385f <NVM::before_address+0x2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:311
        && ((JTAG2::updi_desc.flash_page_size - 1) & (uint16_t)start_addr) == 0;
     cd4:	70 91 60 38 	lds	r23, 0x3860	; 0x803860 <NVM::before_address+0x3>
     cd8:	c4 16       	cp	r12, r20
     cda:	d5 06       	cpc	r13, r21
     cdc:	e6 06       	cpc	r14, r22
     cde:	f7 06       	cpc	r15, r23
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:312
      before_address = start_addr;
     ce0:	39 f0       	breq	.+14     	; 0xcf0 <__DATA_REGION_LENGTH__+0x4f0>
     ce2:	01 97       	sbiw	r24, 0x01	; 1
     ce4:	9c 01       	movw	r18, r24
     ce6:	2c 21       	and	r18, r12
     ce8:	3d 21       	and	r19, r13
     cea:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:314

      if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp))
     cec:	23 2b       	or	r18, r19
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:171

  bool write_flash_v3 (uint32_t start_addr, uint8_t *data, size_t byte_count, bool is_bound) {
    /* NVMCTRL version 3 or 5 */
    /* If the chip is not erased, erase the page. */
    /* However, only when the beginning of the page boundary is addressed */
    if (is_bound) {
     cee:	09 f0       	breq	.+2      	; 0xcf2 <__DATA_REGION_LENGTH__+0x4f2>
_ZN4UPDI7runtimeEh():
     cf0:	80 e0       	ldi	r24, 0x00	; 0
write_memory():
     cf2:	c0 92 5d 38 	sts	0x385D, r12	; 0x80385d <NVM::before_address>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:172
      nvm_wait_v3();
     cf6:	d0 92 5e 38 	sts	0x385E, r13	; 0x80385e <NVM::before_address+0x1>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:173
      if (!UPDI::st8(start_addr, 0xFF)) return false;
     cfa:	e0 92 5f 38 	sts	0x385F, r14	; 0x80385f <NVM::before_address+0x2>
     cfe:	f0 92 60 38 	sts	0x3860, r15	; 0x803860 <NVM::before_address+0x3>
     d02:	ed 9b       	sbis	0x1d, 5	; 29
     d04:	81 ce       	rjmp	.-766    	; 0xa08 <__DATA_REGION_LENGTH__+0x208>
write_flash_v3():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:88
    return nvm_ctrl_change(nvmcmd);
  }

  /* NVMCTRL version 3,5 */
  bool nvm_ctrl_v3 (uint8_t nvmcmd) {
    nvm_wait_v3();
     d06:	88 23       	and	r24, r24
     d08:	09 f4       	brne	.+2      	; 0xd0c <__DATA_REGION_LENGTH__+0x50c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:89
    return nvm_ctrl_change(nvmcmd);
     d0a:	76 ce       	rjmp	.-788    	; 0x9f8 <__DATA_REGION_LENGTH__+0x1f8>
     d0c:	1f dd       	rcall	.-1474   	; 0x74c <NVM::nvm_wait_v3()>
     d0e:	4f ef       	ldi	r20, 0xFF	; 255
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:176
    if (is_bound) {
      nvm_wait_v3();
      if (!UPDI::st8(start_addr, 0xFF)) return false;
      if (!nvm_ctrl_v3(NVM_V3_CMD_FLPER)) return false;
    }
    else if (!nvm_ctrl_v3(NVM_V3_CMD_FLPBCLR)) return false;
     d10:	c7 01       	movw	r24, r14
     d12:	b6 01       	movw	r22, r12
     d14:	7b da       	rcall	.-2826   	; 0x20c <UPDI::st8(unsigned long, unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:177
    nvm_wait_v3();
     d16:	88 23       	and	r24, r24
     d18:	09 f4       	brne	.+2      	; 0xd1c <__DATA_REGION_LENGTH__+0x51c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:179

    if (byte_count == 1) UPDI::st8(start_addr, *data);
     d1a:	06 ce       	rjmp	.-1012   	; 0x928 <__DATA_REGION_LENGTH__+0x128>
nvm_ctrl_v3():
     d1c:	17 dd       	rcall	.-1490   	; 0x74c <NVM::nvm_wait_v3()>
     d1e:	88 e0       	ldi	r24, 0x08	; 8
     d20:	58 db       	rcall	.-2384   	; 0x3d2 <NVM::nvm_ctrl_change(unsigned char)>
write_flash_v3():
     d22:	88 23       	and	r24, r24
     d24:	09 f4       	brne	.+2      	; 0xd28 <__DATA_REGION_LENGTH__+0x528>
     d26:	00 ce       	rjmp	.-1024   	; 0x928 <__DATA_REGION_LENGTH__+0x128>
     d28:	11 dd       	rcall	.-1502   	; 0x74c <NVM::nvm_wait_v3()>
     d2a:	01 30       	cpi	r16, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:88
    return nvm_ctrl_change(nvmcmd);
  }

  /* NVMCTRL version 3,5 */
  bool nvm_ctrl_v3 (uint8_t nvmcmd) {
    nvm_wait_v3();
     d2c:	11 05       	cpc	r17, r1
     d2e:	09 f0       	breq	.+2      	; 0xd32 <__DATA_REGION_LENGTH__+0x532>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:89
    return nvm_ctrl_change(nvmcmd);
     d30:	66 ce       	rjmp	.-820    	; 0x9fe <__DATA_REGION_LENGTH__+0x1fe>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:83
  }

  /* NVMCTRL version 2,4 */
  bool nvm_ctrl_v2 (uint8_t nvmcmd) {
    nvm_wait();
    return nvm_ctrl_change(nvmcmd);
     d32:	40 91 a0 38 	lds	r20, 0x38A0	; 0x8038a0 <JTAG2::packet+0x12>
     d36:	c7 01       	movw	r24, r14
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:695

/**********************
 * UPDI authorization *
 **********************/

bool UPDI::updi_activate (void) {
     d38:	b6 01       	movw	r22, r12
     d3a:	68 da       	rcall	.-2864   	; 0x20c <UPDI::st8(unsigned long, unsigned char)>
nvm_ctrl_v3():
     d3c:	07 dd       	rcall	.-1522   	; 0x74c <NVM::nvm_wait_v3()>
     d3e:	84 e0       	ldi	r24, 0x04	; 4
nvm_ctrl_v2():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:696
  volatile uint8_t count = 4;
     d40:	48 db       	rcall	.-2416   	; 0x3d2 <NVM::nvm_ctrl_change(unsigned char)>
     d42:	11 cf       	rjmp	.-478    	; 0xb66 <__DATA_REGION_LENGTH__+0x366>

00000d44 <UPDI::updi_activate()>:
_ZN4UPDI13updi_activateEv():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:697
  while (--count && bit_is_clear(UPDI_CONTROL, UPDI_PROG_bp)) {
     d44:	cf 93       	push	r28
     d46:	df 93       	push	r29
     d48:	1f 92       	push	r1
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
     d4e:	84 e0       	ldi	r24, 0x04	; 4
     d50:	89 83       	std	Y+1, r24	; 0x01
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:708

    /* After the 2nd lap, forced HV control is allowed for JP short. */
    if (count < 2 && JTAG2::updi_desc.hvupdi_variant != '1' && !digitalRead(JP_SENSE_PIN))
      bit_set(UPDI_CONTROL, UPDI_FCHV_bp);
  }
  return bit_is_set(UPDI_CONTROL, UPDI_PROG_bp);
     d52:	89 81       	ldd	r24, Y+1	; 0x01
     d54:	81 50       	subi	r24, 0x01	; 1
     d56:	89 83       	std	Y+1, r24	; 0x01
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:709
}
     d58:	88 23       	and	r24, r24
     d5a:	11 f0       	breq	.+4      	; 0xd60 <UPDI::updi_activate()+0x1c>
     d5c:	e1 9b       	sbis	0x1c, 1	; 28
     d5e:	07 c0       	rjmp	.+14     	; 0xd6e <UPDI::updi_activate()+0x2a>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:698
 **********************/

bool UPDI::updi_activate (void) {
  volatile uint8_t count = 4;
  while (--count && bit_is_clear(UPDI_CONTROL, UPDI_PROG_bp)) {
    if (setjmp(TIM::CONTEXT) == 0) {
     d60:	8c b3       	in	r24, 0x1c	; 28
     d62:	86 95       	lsr	r24
     d64:	81 70       	andi	r24, 0x01	; 1
     d66:	0f 90       	pop	r0
     d68:	df 91       	pop	r29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:106
/*
 * Timeout control
 */

void TIM::Timeout_Start (uint16_t _ms) {
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     d6a:	cf 91       	pop	r28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:107
    TCB0_CNT = 0;
     d6c:	08 95       	ret
     d6e:	86 e4       	ldi	r24, 0x46	; 70
     d70:	98 e3       	ldi	r25, 0x38	; 56
     d72:	ff d3       	rcall	.+2046   	; 0x1572 <setjmp>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:108
    TCB0_CCMP = _ms >> 2;
     d74:	89 2b       	or	r24, r25
     d76:	31 f5       	brne	.+76     	; 0xdc4 <UPDI::updi_activate()+0x80>
Timeout_Start():
     d78:	8f b7       	in	r24, 0x3f	; 63
__iCliRetVal():
     d7a:	f8 94       	cli
Timeout_Start():
     d7c:	ea e8       	ldi	r30, 0x8A	; 138
     d7e:	fa e0       	ldi	r31, 0x0A	; 10
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:109
    TCB0_INTCTRL = TCB_CAPT_bm;
     d80:	10 82       	st	Z, r1
     d82:	11 82       	std	Z+1, r1	; 0x01
     d84:	2f e1       	ldi	r18, 0x1F	; 31
     d86:	30 e0       	ldi	r19, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:110
    TCB0_INTFLAGS = TCB_CAPT_bm;
     d88:	ec e8       	ldi	r30, 0x8C	; 140
     d8a:	fa e0       	ldi	r31, 0x0A	; 10
     d8c:	20 83       	st	Z, r18
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:111
    TCB0_CTRLA = TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
     d8e:	31 83       	std	Z+1, r19	; 0x01
     d90:	21 e0       	ldi	r18, 0x01	; 1
     d92:	e5 e8       	ldi	r30, 0x85	; 133
     d94:	fa e0       	ldi	r31, 0x0A	; 10
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:70
     d96:	20 83       	st	Z, r18
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:700
      TIM::Timeout_Start(125);
      enter_updi(false) && enter_prog();
     d98:	e6 e8       	ldi	r30, 0x86	; 134
     d9a:	fa e0       	ldi	r31, 0x0A	; 10
     d9c:	20 83       	st	Z, r18
     d9e:	2f e0       	ldi	r18, 0x0F	; 15
     da0:	e0 e8       	ldi	r30, 0x80	; 128
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:674
/******************************
 * Programming control starts *
 ******************************/

bool UPDI::enter_prog (void) {
  if (bit_is_clear(UPDI_CONTROL, UPDI_PROG_bp)) {
     da2:	fa e0       	ldi	r31, 0x0A	; 10
     da4:	20 83       	st	Z, r18
__iRestore():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:675
    loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
     da6:	8f bf       	out	0x3f, r24	; 63
_ZN4UPDI13updi_activateEv():
     da8:	80 e0       	ldi	r24, 0x00	; 0
     daa:	32 dc       	rcall	.-1948   	; 0x610 <UPDI::enter_updi(bool)>
     dac:	88 23       	and	r24, r24
     dae:	51 f0       	breq	.+20     	; 0xdc4 <UPDI::updi_activate()+0x80>
enter_prog():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:676
    if (!(UPDI_LASTL & UPDI_SYS_NVMPROG)) {
     db0:	e1 99       	sbic	0x1c, 1	; 28
     db2:	08 c0       	rjmp	.+16     	; 0xdc4 <UPDI::updi_activate()+0x80>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:685
      }
      if (!updi_reset(true) || !updi_reset(false)) return false;
      loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
      loop_until_sys_stat_is_set(UPDI_SYS_NVMPROG);
    }
    bit_set(UPDI_CONTROL, UPDI_INFO_bp);
     db4:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:686
    bit_set(UPDI_CONTROL, UPDI_PROG_bp);
     db6:	60 e0       	ldi	r22, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:702
  while (--count && bit_is_clear(UPDI_CONTROL, UPDI_PROG_bp)) {
    if (setjmp(TIM::CONTEXT) == 0) {
      TIM::Timeout_Start(125);
      enter_updi(false) && enter_prog();
    }
    TIM::Timeout_Stop();
     db8:	80 e2       	ldi	r24, 0x20	; 32
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:705

    /* After the 2nd lap, forced HV control is allowed for JP short. */
    if (count < 2 && JTAG2::updi_desc.hvupdi_variant != '1' && !digitalRead(JP_SENSE_PIN))
     dba:	d4 db       	rcall	.-2136   	; 0x564 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
     dbc:	f3 9b       	sbis	0x1e, 3	; 30
     dbe:	10 c0       	rjmp	.+32     	; 0xde0 <UPDI::updi_activate()+0x9c>
     dc0:	e0 9a       	sbi	0x1c, 0	; 28
     dc2:	e1 9a       	sbi	0x1c, 1	; 28
_ZN4UPDI13updi_activateEv():
     dc4:	cb da       	rcall	.-2666   	; 0x35c <TIM::Timeout_Stop()>
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	82 30       	cpi	r24, 0x02	; 2
     dca:	08 f0       	brcs	.+2      	; 0xdce <UPDI::updi_activate()+0x8a>
     dcc:	c2 cf       	rjmp	.-124    	; 0xd52 <UPDI::updi_activate()+0xe>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:706
      bit_set(UPDI_CONTROL, UPDI_FCHV_bp);
     dce:	80 91 64 38 	lds	r24, 0x3864	; 0x803864 <JTAG2::updi_desc+0x2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:677

bool UPDI::enter_prog (void) {
  if (bit_is_clear(UPDI_CONTROL, UPDI_PROG_bp)) {
    loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
    if (!(UPDI_LASTL & UPDI_SYS_NVMPROG)) {
      if (UPDI_LASTL & UPDI_SYS_LOCKSTATUS) return false;
     dd2:	81 33       	cpi	r24, 0x31	; 49
     dd4:	09 f4       	brne	.+2      	; 0xdd8 <UPDI::updi_activate()+0x94>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:294
  send_bytes(set_ptr, sizeof(set_ptr));
  return RECV();
}

bool UPDI::is_cs_stat (uint8_t code, uint8_t check) {
  return check == (get_cs_stat(code) & check);
     dd6:	bd cf       	rjmp	.-134    	; 0xd52 <UPDI::updi_activate()+0xe>
     dd8:	53 99       	sbic	0x0a, 3	; 10
     dda:	bb cf       	rjmp	.-138    	; 0xd52 <UPDI::updi_activate()+0xe>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:678
bool UPDI::enter_prog (void) {
  if (bit_is_clear(UPDI_CONTROL, UPDI_PROG_bp)) {
    loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
    if (!(UPDI_LASTL & UPDI_SYS_NVMPROG)) {
      if (UPDI_LASTL & UPDI_SYS_LOCKSTATUS) return false;
      if (!is_key_stat(UPDI_KEY_NVMPROG)) {
     ddc:	e4 9a       	sbi	0x1c, 4	; 28
     dde:	b9 cf       	rjmp	.-142    	; 0xd52 <UPDI::updi_activate()+0xe>
enter_prog():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:681
        if (!set_nvmprog_key()) return false;
      }
      if (!updi_reset(true) || !updi_reset(false)) return false;
     de0:	f0 99       	sbic	0x1e, 0	; 30
     de2:	f0 cf       	rjmp	.-32     	; 0xdc4 <UPDI::updi_activate()+0x80>
is_cs_stat():
     de4:	87 e0       	ldi	r24, 0x07	; 7
     de6:	0a da       	rcall	.-3052   	; 0x1fc <UPDI::get_cs_stat(unsigned char)>
enter_prog():
     de8:	84 ff       	sbrs	r24, 4
     dea:	0f c0       	rjmp	.+30     	; 0xe0a <UPDI::updi_activate()+0xc6>
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	8c da       	rcall	.-2792   	; 0x308 <UPDI::updi_reset(bool)>
     df0:	88 23       	and	r24, r24
     df2:	41 f3       	breq	.-48     	; 0xdc4 <UPDI::updi_activate()+0x80>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:682
      loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
     df4:	80 e0       	ldi	r24, 0x00	; 0
     df6:	88 da       	rcall	.-2800   	; 0x308 <UPDI::updi_reset(bool)>
     df8:	88 23       	and	r24, r24
     dfa:	21 f3       	breq	.-56     	; 0xdc4 <UPDI::updi_activate()+0x80>
     dfc:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:683
      loop_until_sys_stat_is_set(UPDI_SYS_NVMPROG);
     dfe:	60 e0       	ldi	r22, 0x00	; 0
     e00:	80 e2       	ldi	r24, 0x20	; 32
     e02:	b0 db       	rcall	.-2208   	; 0x564 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
     e04:	88 e0       	ldi	r24, 0x08	; 8
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:679
  if (bit_is_clear(UPDI_CONTROL, UPDI_PROG_bp)) {
    loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
    if (!(UPDI_LASTL & UPDI_SYS_NVMPROG)) {
      if (UPDI_LASTL & UPDI_SYS_LOCKSTATUS) return false;
      if (!is_key_stat(UPDI_KEY_NVMPROG)) {
        if (!set_nvmprog_key()) return false;
     e06:	96 db       	rcall	.-2260   	; 0x534 <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.23]>
     e08:	db cf       	rjmp	.-74     	; 0xdc0 <UPDI::updi_activate()+0x7c>
     e0a:	8a db       	rcall	.-2284   	; 0x520 <UPDI::set_nvmprog_key()>
     e0c:	81 11       	cpse	r24, r1
     e0e:	ee cf       	rjmp	.-36     	; 0xdec <UPDI::updi_activate()+0xa8>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:261
ISR(TCB0_INT_vect, ISR_NAKED) {
  /***
    This interrupt is a global escape due to timeout.
    There is no return to the source of the interrupt.
  ***/
  __asm__ __volatile__ ("EOR R1,R1");
     e10:	d9 cf       	rjmp	.-78     	; 0xdc4 <UPDI::updi_activate()+0x80>

00000e12 <__vector_13>:
__vector_13():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:262
  TCB0_CTRLA = 0;
     e12:	11 24       	eor	r1, r1
     e14:	10 92 80 0a 	sts	0x0A80, r1	; 0x800a80 <__RODATA_PM_OFFSET__+0x7f8a80>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:263
  TCB0_INTFLAGS = TCB_CAPT_bm;
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__RODATA_PM_OFFSET__+0x7f8a86>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:264
  longjmp(TIM::CONTEXT, 2);
     e1e:	62 e0       	ldi	r22, 0x02	; 2
     e20:	70 e0       	ldi	r23, 0x00	; 0
     e22:	86 e4       	ldi	r24, 0x46	; 70
     e24:	98 e3       	ldi	r25, 0x38	; 56
     e26:	c5 d3       	rcall	.+1930   	; 0x15b2 <longjmp>

00000e28 <__vector_6>:
__vector_6():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:232

/*
 * RTS monitoring upper and lower end interrupts
 */

ISR(portIntrruptVector(RTS_SENSE_PIN)) {
     e28:	1f 92       	push	r1
     e2a:	0f 92       	push	r0
     e2c:	0f b6       	in	r0, 0x3f	; 63
     e2e:	0f 92       	push	r0
     e30:	11 24       	eor	r1, r1
     e32:	2f 93       	push	r18
     e34:	3f 93       	push	r19
     e36:	4f 93       	push	r20
     e38:	5f 93       	push	r21
     e3a:	6f 93       	push	r22
     e3c:	7f 93       	push	r23
     e3e:	8f 93       	push	r24
     e40:	9f 93       	push	r25
     e42:	af 93       	push	r26
     e44:	bf 93       	push	r27
     e46:	ef 93       	push	r30
     e48:	ff 93       	push	r31
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:241
    the timeout limit, the system will be reset. Typically this is the
    signal that starts the Arduino bootloader. Therefore, the time limit
    is set to approximately 250ms.
  ***/

  wdt_reset();
     e4a:	a8 95       	wdr
WDT_Short():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:168

void SYS::WDT_OFF (void) { WDT_SET(WDT_PERIOD_OFF_gc); }

void SYS::WDT_ON (void) { WDT_SET(WDT_PERIOD_8KCLK_gc); }

void SYS::WDT_Short (void) { WDT_SET(WDT_PERIOD_256CLK_gc); }
     e4c:	86 e0       	ldi	r24, 0x06	; 6
     e4e:	90 da       	rcall	.-2784   	; 0x370 <SYS::WDT_SET(unsigned char)>
RTS_Disable():
     e50:	88 e0       	ldi	r24, 0x08	; 8
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:108
void SYS::RTS_Enable (void) {
  pinControlRegister(RTS_SENSE_PIN) = RTS_SENSE_CONFIG;
}

void SYS::RTS_Disable (void) {
  pinControlRegister(RTS_SENSE_PIN) = RTS_SENSE_DISABLE;
     e52:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <__RODATA_PM_OFFSET__+0x7f8412>
__vector_6():
     e56:	e0 e0       	ldi	r30, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:245
  SYS::WDT_Short();
  SYS::RTS_Disable();
  portRegister(RTS_SENSE_PIN).INTFLAGS =
  portRegister(RTS_SENSE_PIN).INTFLAGS;
     e58:	f4 e0       	ldi	r31, 0x04	; 4
     e5a:	81 85       	ldd	r24, Z+9	; 0x09
     e5c:	81 87       	std	Z+9, r24	; 0x09
PG_Enable():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:244
  ***/

  wdt_reset();
  SYS::WDT_Short();
  SYS::RTS_Disable();
  portRegister(RTS_SENSE_PIN).INTFLAGS =
     e5e:	48 9a       	sbi	0x09, 0	; 9
__vector_6():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:96
/******************
 * Various ON/OFF *
 ******************/

void SYS::PG_Enable (void) {
  digitalWrite(PGEN_PIN, HIGH);
     e60:	65 da       	rcall	.-2870   	; 0x32c <TIM::LED_Flash()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:247
  portRegister(RTS_SENSE_PIN).INTFLAGS;
  SYS::PG_Enable();
  TIM::LED_Flash();
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	56 da       	rcall	.-2900   	; 0x312 <UPDI::Target_Reset(bool)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:248
  UPDI::Target_Reset(true);
     e66:	21 9a       	sbi	0x04, 1	; 4
     e68:	ff 91       	pop	r31
     e6a:	ef 91       	pop	r30
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:249
  openDrainWrite(TRST_PIN, LOW);
     e6c:	bf 91       	pop	r27
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:250
}
     e6e:	af 91       	pop	r26
     e70:	9f 91       	pop	r25
     e72:	8f 91       	pop	r24
     e74:	7f 91       	pop	r23
     e76:	6f 91       	pop	r22
     e78:	5f 91       	pop	r21
     e7a:	4f 91       	pop	r20
     e7c:	3f 91       	pop	r19
     e7e:	2f 91       	pop	r18
     e80:	0f 90       	pop	r0
     e82:	0f be       	out	0x3f, r0	; 63
     e84:	0f 90       	pop	r0
     e86:	1f 90       	pop	r1
     e88:	18 95       	reti

00000e8a <__vector_7>:
__vector_7():
     e8a:	a8 95       	wdr
WDT_Short():
     e8c:	86 e0       	ldi	r24, 0x06	; 6
     e8e:	70 da       	rcall	.-2848   	; 0x370 <SYS::WDT_SET(unsigned char)>
__vector_7():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:213
    This interrupt keeps the target device in reset as long as
    the low level signal continues. Since the interrupt exits
    with a system reset, it does not return to main operation.
  ***/

  wdt_reset();
     e90:	4d da       	rcall	.-2918   	; 0x32c <TIM::LED_Flash()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:168

void SYS::WDT_OFF (void) { WDT_SET(WDT_PERIOD_OFF_gc); }

void SYS::WDT_ON (void) { WDT_SET(WDT_PERIOD_8KCLK_gc); }

void SYS::WDT_Short (void) { WDT_SET(WDT_PERIOD_256CLK_gc); }
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	3e da       	rcall	.-2948   	; 0x312 <UPDI::Target_Reset(bool)>
     e96:	88 e0       	ldi	r24, 0x08	; 8
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:215
  SYS::WDT_Short();
  TIM::LED_Flash();
     e98:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__RODATA_PM_OFFSET__+0x7f8806>
delay_micros():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:216
  UPDI::Target_Reset(true);
     e9c:	8f ec       	ldi	r24, 0xCF	; 207
     e9e:	97 e0       	ldi	r25, 0x07	; 7
     ea0:	01 97       	sbiw	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:217
  UPDI_USART.CTRLB = UPDI_USART_OFF;
     ea2:	f1 f7       	brne	.-4      	; 0xea0 <__vector_7+0x16>
     ea4:	00 c0       	rjmp	.+0      	; 0xea6 <__vector_7+0x1c>
     ea6:	00 00       	nop
__vector_7():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.8/cores/megaAVR/api/delay_busywait.h:31
     ea8:	01 9a       	sbi	0x00, 1	; 0
     eaa:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <__RODATA_PM_OFFSET__+0x7f8411>
     eae:	09 98       	cbi	0x01, 1	; 1
     eb0:	21 9a       	sbi	0x04, 1	; 4
LED_TCB1():
     eb2:	80 91 61 38 	lds	r24, 0x3861	; 0x803861 <TIM::mode>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:219
  delay_micros(800);
  pinMode(UPDI_TDAT_PIN, OUTPUT);
     eb6:	83 30       	cpi	r24, 0x03	; 3
     eb8:	99 f0       	breq	.+38     	; 0xee0 <__vector_7+0x56>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:220
  digitalWrite(UPDI_TDAT_PIN, LOW);
     eba:	83 e0       	ldi	r24, 0x03	; 3
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:221
  openDrainWrite(TRST_PIN, LOW);
     ebc:	80 93 61 38 	sts	0x3861, r24	; 0x803861 <TIM::mode>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:139
    LEDG_EVOUT = EVSYS_USER_CHANNEL2_gc;
  }
}

void LED_TCB1 (uint8_t mode, uint16_t ccmp) {
  if (TIM::mode != mode) {
     ec0:	89 ea       	ldi	r24, 0xA9	; 169
     ec2:	95 e5       	ldi	r25, 0x55	; 85
     ec4:	80 93 9c 0a 	sts	0x0A9C, r24	; 0x800a9c <__RODATA_PM_OFFSET__+0x7f8a9c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:140
    TIM::mode = mode;
     ec8:	90 93 9d 0a 	sts	0x0A9D, r25	; 0x800a9d <__RODATA_PM_OFFSET__+0x7f8a9d>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:141
    TCB1_CCMP = ccmp;
     ecc:	10 92 9a 0a 	sts	0x0A9A, r1	; 0x800a9a <__RODATA_PM_OFFSET__+0x7f8a9a>
     ed0:	10 92 9b 0a 	sts	0x0A9B, r1	; 0x800a9b <__RODATA_PM_OFFSET__+0x7f8a9b>
     ed4:	8f e4       	ldi	r24, 0x4F	; 79
     ed6:	80 93 90 0a 	sts	0x0A90, r24	; 0x800a90 <__RODATA_PM_OFFSET__+0x7f8a90>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:142
    TCB1_CNT = 0;
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <__RODATA_PM_OFFSET__+0x7f81a9>
WDT_OFF():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:143
    TCB1_CTRLA = TCB_RUNSTDBY_bm | TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	46 da       	rcall	.-2932   	; 0x370 <SYS::WDT_SET(unsigned char)>
__vector_7():
     ee4:	30 9b       	sbis	0x06, 0	; 6
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:144
    LEDG_EVOUT = EVSYS_USER_CHANNEL0_gc;
     ee6:	fe cf       	rjmp	.-4      	; 0xee4 <__vector_7+0x5a>
WDT_REBOOT():
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	42 da       	rcall	.-2940   	; 0x370 <SYS::WDT_SET(unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:164
void SYS::WDT_SET (uint8_t _wdt_period) {
  loop_until_bit_is_clear(WDT_STATUS, WDT_SYNCBUSY_bp);
  _PROTECTED_WRITE(WDT_CTRLA, _wdt_period);
}

void SYS::WDT_OFF (void) { WDT_SET(WDT_PERIOD_OFF_gc); }
     eec:	ff cf       	rjmp	.-2      	; 0xeec <__vector_7+0x62>

00000eee <main>:
main():
     eee:	cf 93       	push	r28
     ef0:	df 93       	push	r29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:224
  pinMode(UPDI_TDAT_PIN, OUTPUT);
  digitalWrite(UPDI_TDAT_PIN, LOW);
  openDrainWrite(TRST_PIN, LOW);
  TIM::LED_Blink();
  SYS::WDT_OFF();
  while (!digitalRead(SW_SENSE_PIN));
     ef2:	00 d0       	rcall	.+0      	; 0xef4 <main+0x6>
     ef4:	cd b7       	in	r28, 0x3d	; 61
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:173
void SYS::WDT_Short (void) { WDT_SET(WDT_PERIOD_256CLK_gc); }

void SYS::WDT_Long (void) { WDT_SET(WDT_PERIOD_512CLK_gc); }

void SYS::WDT_REBOOT (void) {
  WDT_SET(WDT_PERIOD_8CLK_gc);
     ef6:	de b7       	in	r29, 0x3e	; 62
     ef8:	f8 94       	cli
initVariant():
     efa:	24 e0       	ldi	r18, 0x04	; 4
     efc:	e0 e1       	ldi	r30, 0x10	; 16
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.8/variants/tinyAVR2_20/variant.h:281
    "   DEC  R24     \n"
    "   BRNE 2b        " /* 3 loop PORTA to PORTC */
    : : "z" ((register8_t*)&PORTA_PIN0CTRL),
        "r" ((uint8_t)PORT_ISC_INPUT_DISABLE_gc)
      : "r24", "r25"
  );
     efe:	f4 e0       	ldi	r31, 0x04	; 4
     f00:	83 e0       	ldi	r24, 0x03	; 3
     f02:	98 e0       	ldi	r25, 0x08	; 8
     f04:	21 93       	st	Z+, r18
     f06:	9a 95       	dec	r25
     f08:	e9 f7       	brne	.-6      	; 0xf04 <main+0x16>
     f0a:	78 96       	adiw	r30, 0x18	; 24
     f0c:	8a 95       	dec	r24
     f0e:	c9 f7       	brne	.-14     	; 0xf02 <main+0x14>
_CLKCTRL_SETUP():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.8/cores/megaAVR/api/CLKCTRL_megaAVR.h:127
  // _PROTECTED_WRITE(CLKCTRL.MCLKCTRLA, CLKCTRL_CLKSEL_OSC20M_gc);

#else

  #if defined(_CLKCTRL_PDIV_)
  _PROTECTED_WRITE(CLKCTRL_MCLKCTRLB, _CLKCTRL_PDIV_ | CLKCTRL_PEN_bm);
     f10:	88 ed       	ldi	r24, 0xD8	; 216
     f12:	41 e0       	ldi	r20, 0x01	; 1
     f14:	50 e0       	ldi	r21, 0x00	; 0
     f16:	84 bf       	out	0x34, r24	; 52
     f18:	40 93 61 00 	sts	0x0061, r20	; 0x800061 <__RODATA_PM_OFFSET__+0x7f8061>
setup():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:17
#include <avr/io.h>

void SYS::setup (void) {

  /* Target reset release */
  pinControlRegister(TRST_PIN) = TRST_PIN_CONFIG;
     f1c:	8c e0       	ldi	r24, 0x0C	; 12
     f1e:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <__RODATA_PM_OFFSET__+0x7f8431>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:20

  /* Outgoing port */
  PORTA_DIRSET = _BV(pinPosition(HVP1_PIN))
     f22:	88 ef       	ldi	r24, 0xF8	; 248
     f24:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <__RODATA_PM_OFFSET__+0x7f8401>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:25
               | _BV(pinPosition(HVP2_PIN))
               | _BV(pinPosition(HV12_PIN))
               | _BV(pinPosition(LEDG_PIN))
               | _BV(pinPosition(LEDY_PIN));
  PORTB_DIRSET = _BV(pinPosition(HV8_PIN));
     f28:	80 e2       	ldi	r24, 0x20	; 32
     f2a:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__RODATA_PM_OFFSET__+0x7f8421>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:28

  /* USART switching LOW=Target opening (PG_Disable) */
  PORTC_DIRSET = _BV(pinPosition(PGEN_PIN));
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <__RODATA_PM_OFFSET__+0x7f8441>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:31

  /* LED output */
  LEDG_EVOUT_MUX = LEDG_EVOUT_ALT;          /* OUT:PA7 */
     f34:	80 93 e0 05 	sts	0x05E0, r24	; 0x8005e0 <__RODATA_PM_OFFSET__+0x7f85e0>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:32
  PORTMUX_CCLROUTEA = PORTMUX_LUT3_ALT1_gc; /* OUT:PA5 IN:PC0,PC1,PC2 */
     f38:	98 e0       	ldi	r25, 0x08	; 8
     f3a:	90 93 e1 05 	sts	0x05E1, r25	; 0x8005e1 <__RODATA_PM_OFFSET__+0x7f85e1>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:33
  PORTA_OUTSET = _BV(pinPosition(LEDG_PIN))
     f3e:	30 ea       	ldi	r19, 0xA0	; 160
     f40:	30 93 05 04 	sts	0x0405, r19	; 0x800405 <__RODATA_PM_OFFSET__+0x7f8405>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:37
               | _BV(pinPosition(LEDY_PIN));

  /* USART Alternative Selection */
  PORTMUX_USARTROUTEA = JTAG_PMUX_ALT | UPDI_PMUX_ALT;
     f44:	45 e0       	ldi	r20, 0x05	; 5
     f46:	40 93 e2 05 	sts	0x05E2, r20	; 0x8005e2 <__RODATA_PM_OFFSET__+0x7f85e2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:40

  /* JTAG port */
  pinControlRegister(JTAG_TXD_PIN) = JTAG_TXD_CONFIG;
     f4a:	90 93 52 04 	sts	0x0452, r25	; 0x800452 <__RODATA_PM_OFFSET__+0x7f8452>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:41
  pinControlRegister(JTAG_RXD_PIN) = JTAG_RXD_CONFIG;
     f4e:	90 93 51 04 	sts	0x0451, r25	; 0x800451 <__RODATA_PM_OFFSET__+0x7f8451>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:44

  /* UPDI port */
  pinControlRegister(UPDI_TDAT_PIN) = UPDI_TDAT_CONFIG;
     f52:	90 93 11 04 	sts	0x0411, r25	; 0x800411 <__RODATA_PM_OFFSET__+0x7f8411>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:47

  /* HV generator */
  pinControlRegister(HVP1_PIN) = HVP1_PIN_CONFIG;
     f56:	20 93 13 04 	sts	0x0413, r18	; 0x800413 <__RODATA_PM_OFFSET__+0x7f8413>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:48
  pinControlRegister(HVP2_PIN) = HVP2_PIN_CONFIG;
     f5a:	34 e8       	ldi	r19, 0x84	; 132
     f5c:	30 93 14 04 	sts	0x0414, r19	; 0x800414 <__RODATA_PM_OFFSET__+0x7f8414>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:51

  /* SW1 Interrupt permission */
  pinControlRegister(SW_SENSE_PIN) = SW_SENSE_CONFIG;
     f60:	3d e0       	ldi	r19, 0x0D	; 13
     f62:	30 93 30 04 	sts	0x0430, r19	; 0x800430 <__RODATA_PM_OFFSET__+0x7f8430>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:54

  /* RTS monitor */
  pinControlRegister(RTS_SENSE_PIN) = RTS_SENSE_CONFIG;
     f66:	39 e0       	ldi	r19, 0x09	; 9
     f68:	30 93 12 04 	sts	0x0412, r19	; 0x800412 <__RODATA_PM_OFFSET__+0x7f8412>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:57

  /* JP1 monitor */
  pinControlRegister(JP_SENSE_PIN) = JP_SENSE_CONFIG;
     f6c:	90 93 53 04 	sts	0x0453, r25	; 0x800453 <__RODATA_PM_OFFSET__+0x7f8453>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:60

  /* Initialize state variables */
  UPDI_CONTROL = 0;
     f70:	1c ba       	out	0x1c, r1	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:61
  UPDI_NVMCTRL = 0;
     f72:	1d ba       	out	0x1d, r1	; 29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:46

void TIM::setup (void) {

  /* EVSYS signal distribution */

  EVSYS_CHANNEL0 = EVSYS_CHANNEL0_CCL_LUT0_gc;
     f74:	90 e1       	ldi	r25, 0x10	; 16
     f76:	90 93 90 01 	sts	0x0190, r25	; 0x800190 <__RODATA_PM_OFFSET__+0x7f8190>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:47
  EVSYS_CHANNEL1 = EVSYS_CHANNEL1_RTC_PIT_DIV128_gc;
     f7a:	3a e0       	ldi	r19, 0x0A	; 10
     f7c:	30 93 91 01 	sts	0x0191, r19	; 0x800191 <__RODATA_PM_OFFSET__+0x7f8191>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:48
  EVSYS_CHANNEL2 = EVSYS_CHANNEL2_CCL_LUT1_gc;
     f80:	91 e1       	ldi	r25, 0x11	; 17
     f82:	90 93 92 01 	sts	0x0192, r25	; 0x800192 <__RODATA_PM_OFFSET__+0x7f8192>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:49
  EVSYS_CHANNEL3 = EVSYS_CHANNEL3_PORTA_PIN5_gc;  /* <- PA5:LEDY */
     f86:	9d e4       	ldi	r25, 0x4D	; 77
     f88:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <__RODATA_PM_OFFSET__+0x7f8193>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:50
  EVSYS_USERTCB0COUNT = EVSYS_USER_CHANNEL1_gc;
     f8c:	92 e0       	ldi	r25, 0x02	; 2
     f8e:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <__RODATA_PM_OFFSET__+0x7f81b1>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:51
  EVSYS_USERTCB1COUNT = EVSYS_USER_CHANNEL1_gc;
     f92:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <__RODATA_PM_OFFSET__+0x7f81b3>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:52
  EVSYS_USERCCLLUT0A  = EVSYS_USER_CHANNEL3_gc;   /* <- PA5:LEDY */
     f96:	20 93 a0 01 	sts	0x01A0, r18	; 0x8001a0 <__RODATA_PM_OFFSET__+0x7f81a0>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:53
  EVSYS_USERCCLLUT1A  = EVSYS_USER_CHANNEL3_gc;   /* <- PA5:LEDY */
     f9a:	20 93 a2 01 	sts	0x01A2, r18	; 0x8001a2 <__RODATA_PM_OFFSET__+0x7f81a2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:60
  /* When PA5:LEDY of CCL3 is used, the signal output of CCL0 and CCL1 is stopped. */

  /* CCL/LUT construction */

  /* TRUTH0: 010 is ON */
  CCL_TRUTH0    = CCL_TRUTH_2_bm;
     f9e:	20 93 cb 01 	sts	0x01CB, r18	; 0x8001cb <__RODATA_PM_OFFSET__+0x7f81cb>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:61
  CCL_LUT0CTRLC = CCL_INSEL2_EVENTA_gc;           /* <- IN2:PA5 */
     fa2:	93 e0       	ldi	r25, 0x03	; 3
     fa4:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <__RODATA_PM_OFFSET__+0x7f81ca>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:62
  CCL_LUT0CTRLB = CCL_INSEL1_TCB1_gc;             /* <- IN1:POS */
     fa8:	20 ec       	ldi	r18, 0xC0	; 192
     faa:	20 93 c9 01 	sts	0x01C9, r18	; 0x8001c9 <__RODATA_PM_OFFSET__+0x7f81c9>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:63
  CCL_LUT0CTRLA = CCL_ENABLE_bm;
     fae:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <__RODATA_PM_OFFSET__+0x7f81c8>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:66

  /* TRUTH1: 001 010 is ON */
  CCL_TRUTH1    = CCL_TRUTH_1_bm | CCL_TRUTH_2_bm;
     fb2:	26 e0       	ldi	r18, 0x06	; 6
     fb4:	20 93 cf 01 	sts	0x01CF, r18	; 0x8001cf <__RODATA_PM_OFFSET__+0x7f81cf>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:67
  CCL_LUT1CTRLC = CCL_INSEL2_EVENTA_gc;           /* <- IN2:PA5 */
     fb8:	90 93 ce 01 	sts	0x01CE, r25	; 0x8001ce <__RODATA_PM_OFFSET__+0x7f81ce>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:68
  CCL_LUT1CTRLB = CCL_INSEL0_TCA0_gc | CCL_INSEL1_TCB1_gc;  /* <- IN0:POS IN1:POS */
     fbc:	2a ec       	ldi	r18, 0xCA	; 202
     fbe:	20 93 cd 01 	sts	0x01CD, r18	; 0x8001cd <__RODATA_PM_OFFSET__+0x7f81cd>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:69
  CCL_LUT1CTRLA = CCL_ENABLE_bm;
     fc2:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <__RODATA_PM_OFFSET__+0x7f81cc>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:75

  /* TRUTH3: 001 010 is ON */
  /* CCL_INSEL0_USART0_gc : USART0TX normal HIGH */
  /* CCL_INSEL1_IO_gc     : USART1RX normal HIGH */
  /* CCL_INSEL2_IO_gc     : USART1TX normal HIGH */
  CCL_TRUTH3    = (uint8_t) ~CCL_TRUTH_7_bm;
     fc6:	2f e7       	ldi	r18, 0x7F	; 127
     fc8:	20 93 d7 01 	sts	0x01D7, r18	; 0x8001d7 <__RODATA_PM_OFFSET__+0x7f81d7>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:76
  CCL_LUT3CTRLC = CCL_INSEL2_IO_gc;
     fcc:	40 93 d6 01 	sts	0x01D6, r20	; 0x8001d6 <__RODATA_PM_OFFSET__+0x7f81d6>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:77
  CCL_LUT3CTRLB = CCL_INSEL0_USART0_gc | CCL_INSEL1_IO_gc;
     fd0:	28 e5       	ldi	r18, 0x58	; 88
     fd2:	20 93 d5 01 	sts	0x01D5, r18	; 0x8001d5 <__RODATA_PM_OFFSET__+0x7f81d5>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:78
  CCL_LUT3CTRLA = CCL_ENABLE_bm | CCL_OUTEN_bm;
     fd6:	21 e4       	ldi	r18, 0x41	; 65
     fd8:	20 93 d4 01 	sts	0x01D4, r18	; 0x8001d4 <__RODATA_PM_OFFSET__+0x7f81d4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:81

  /* CCL enable */
  CCL_CTRLA = CCL_RUNSTDBY_bm | CCL_ENABLE_bm;
     fdc:	20 93 c0 01 	sts	0x01C0, r18	; 0x8001c0 <__RODATA_PM_OFFSET__+0x7f81c0>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:84

  /* RTC_PIT enable */
  RTC_PITCTRLA = RTC_PITEN_bm;
     fe0:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__RODATA_PM_OFFSET__+0x7f8150>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:89

  /* Timer */

  /* TCA0 */
  TCA0_SPLIT_CTRLD = TCA_SPLIT_SPLITM_bm;
     fe4:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <__RODATA_PM_OFFSET__+0x7f8a03>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:90
  TCA0_SPLIT_LPER  = TCA0_STEP - 2;
     fe8:	29 e8       	ldi	r18, 0x89	; 137
     fea:	20 93 26 0a 	sts	0x0A26, r18	; 0x800a26 <__RODATA_PM_OFFSET__+0x7f8a26>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:91
  TCA0_SPLIT_LCMP0 = TCA0_STEP / 2;
     fee:	25 e4       	ldi	r18, 0x45	; 69
     ff0:	20 93 28 0a 	sts	0x0A28, r18	; 0x800a28 <__RODATA_PM_OFFSET__+0x7f8a28>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:92
  TCA0_SPLIT_HPER  = 1;
     ff4:	80 93 27 0a 	sts	0x0A27, r24	; 0x800a27 <__RODATA_PM_OFFSET__+0x7f8a27>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:93
  TCA0_SPLIT_HCMP0 = 1;     /* WOA3=PA3 */
     ff8:	80 93 29 0a 	sts	0x0A29, r24	; 0x800a29 <__RODATA_PM_OFFSET__+0x7f8a29>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:94
  TCA0_SPLIT_HCMP1 = 1;     /* WOA4=PA4 */
     ffc:	80 93 2b 0a 	sts	0x0A2B, r24	; 0x800a2b <__RODATA_PM_OFFSET__+0x7f8a2b>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:95
  TCA0_SPLIT_CTRLA = TCA_SPLIT_RUNSTDBY_bm | TCA_SPLIT_ENABLE_bm | TCA_SPLIT_CLKSEL_DIV1024_gc;
    1000:	8f e8       	ldi	r24, 0x8F	; 143
    1002:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__RODATA_PM_OFFSET__+0x7f8a00>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:98

  /* TCB1 */
  TCB1_CTRLB = TCB_CNTMODE_PWM8_gc;
    1006:	87 e0       	ldi	r24, 0x07	; 7
    1008:	80 93 91 0a 	sts	0x0A91, r24	; 0x800a91 <__RODATA_PM_OFFSET__+0x7f8a91>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:459
/******************
 * Initialization *
 ******************/

void JTAG2::setup (void) {
  JTAG_USART.BAUD = pgm_read_word( &BAUD_TABLE[BAUD_19200] );
    100c:	ed e9       	ldi	r30, 0x9D	; 157
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	45 91       	lpm	r20, Z+
    1012:	54 91       	lpm	r21, Z
    1014:	40 93 28 08 	sts	0x0828, r20	; 0x800828 <__RODATA_PM_OFFSET__+0x7f8828>
    1018:	50 93 29 08 	sts	0x0829, r21	; 0x800829 <__RODATA_PM_OFFSET__+0x7f8829>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:460
  JTAG_USART.CTRLA = JTAG_USART_CTRLA;
    101c:	10 92 25 08 	sts	0x0825, r1	; 0x800825 <__RODATA_PM_OFFSET__+0x7f8825>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:461
  JTAG_USART.CTRLC = JTAG_USART_CTRLC;
    1020:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__RODATA_PM_OFFSET__+0x7f8827>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:462
  JTAG_USART.CTRLB = JTAG_USART_OFF;
    1024:	88 e8       	ldi	r24, 0x88	; 136
    1026:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__RODATA_PM_OFFSET__+0x7f8826>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:70
  }
  #endif
}

void UPDI::setup (void) {
  UPDI_USART.BAUD  = UPDI_BAUD_CALC;
    102a:	80 eb       	ldi	r24, 0xB0	; 176
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__RODATA_PM_OFFSET__+0x7f8808>
    1032:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__RODATA_PM_OFFSET__+0x7f8809>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:71
  UPDI_USART.CTRLA = UPDI_USART_CTRLA;
    1036:	30 93 05 08 	sts	0x0805, r19	; 0x800805 <__RODATA_PM_OFFSET__+0x7f8805>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:72
  UPDI_USART.CTRLC = UPDI_USART_CTRLC;
    103a:	8b e2       	ldi	r24, 0x2B	; 43
    103c:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <__RODATA_PM_OFFSET__+0x7f8807>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:73
  UPDI_USART.CTRLB = UPDI_USART_ON;
    1040:	88 ec       	ldi	r24, 0xC8	; 200
    1042:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__RODATA_PM_OFFSET__+0x7f8806>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:74
  bit_clear(UPDI_CONTROL, UPDI_CLKU_bp);
    1046:	e6 98       	cbi	0x1c, 6	; 28
ready():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:121
 * Run at the end of the boot sequence *
 ***************************************/

void SYS::ready (void) {
  /* Release target from reset state after resetting WDT timeout */
  if (bit_is_set(RSTCTRL_RSTFR, RSTCTRL_WDRF_bp))
    1048:	80 91 40 00 	lds	r24, 0x0040	; 0x800040 <__RODATA_PM_OFFSET__+0x7f8040>
    104c:	83 ff       	sbrs	r24, 3
    104e:	02 c0       	rjmp	.+4      	; 0x1054 <main+0x166>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:122
    UPDI::Target_Reset(false);
    1050:	80 e0       	ldi	r24, 0x00	; 0
    1052:	5f d9       	rcall	.-3394   	; 0x312 <UPDI::Target_Reset(bool)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:125

  /* Clears the reset state flag. */
  RSTCTRL_RSTFR = RSTCTRL_RSTFR;
    1054:	80 91 40 00 	lds	r24, 0x0040	; 0x800040 <__RODATA_PM_OFFSET__+0x7f8040>
    1058:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__RODATA_PM_OFFSET__+0x7f8040>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:128

  /*** Hibernation mode ***/
  set_sleep_mode(SLEEP_MODE_STANDBY);
    105c:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <__RODATA_PM_OFFSET__+0x7f8050>
    1060:	89 7f       	andi	r24, 0xF9	; 249
    1062:	82 60       	ori	r24, 0x02	; 2
    1064:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__RODATA_PM_OFFSET__+0x7f8050>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:131

  /* Clear asynchronous interrupts detected during initialization */
  while (portRegister(RTS_SENSE_PIN).INTFLAGS) {
    1068:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__RODATA_PM_OFFSET__+0x7f8409>
    106c:	88 23       	and	r24, r24
    106e:	29 f0       	breq	.+10     	; 0x107a <main+0x18c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:133
    portRegister(RTS_SENSE_PIN).INTFLAGS =
    portRegister(RTS_SENSE_PIN).INTFLAGS;
    1070:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__RODATA_PM_OFFSET__+0x7f8409>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:132
  /*** Hibernation mode ***/
  set_sleep_mode(SLEEP_MODE_STANDBY);

  /* Clear asynchronous interrupts detected during initialization */
  while (portRegister(RTS_SENSE_PIN).INTFLAGS) {
    portRegister(RTS_SENSE_PIN).INTFLAGS =
    1074:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <__RODATA_PM_OFFSET__+0x7f8409>
    1078:	f7 cf       	rjmp	.-18     	; 0x1068 <main+0x17a>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:137
    portRegister(RTS_SENSE_PIN).INTFLAGS;
  }

  /* Interrupt permission */
  sei();
    107a:	78 94       	sei
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:142

  /* Keeps the LED flashing while the RTS maintains a low signal level. */
  /* This usually indicates that the serial console is still open.      */
  /* After completion, the system will be reset. */
  if (!digitalRead(RTS_SENSE_PIN)) {
    107c:	12 99       	sbic	0x02, 2	; 2
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:143
    TIM::LED_Flash();
    107e:	0c c0       	rjmp	.+24     	; 0x1098 <main+0x1aa>
    1080:	55 d9       	rcall	.-3414   	; 0x32c <TIM::LED_Flash()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:144
    while (!digitalRead(RTS_SENSE_PIN)) {
    1082:	12 99       	sbic	0x02, 2	; 2
    1084:	06 c0       	rjmp	.+12     	; 0x1092 <main+0x1a4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:145
      sleep_enable();
    1086:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <__RODATA_PM_OFFSET__+0x7f8050>
    108a:	81 60       	ori	r24, 0x01	; 1
    108c:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__RODATA_PM_OFFSET__+0x7f8050>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:173
void SYS::WDT_Short (void) { WDT_SET(WDT_PERIOD_256CLK_gc); }

void SYS::WDT_Long (void) { WDT_SET(WDT_PERIOD_512CLK_gc); }

void SYS::WDT_REBOOT (void) {
  WDT_SET(WDT_PERIOD_8CLK_gc);
    1090:	f8 cf       	rjmp	.-16     	; 0x1082 <main+0x194>
WDT_REBOOT():
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	6d d9       	rcall	.-3366   	; 0x370 <SYS::WDT_SET(unsigned char)>
    1096:	ff cf       	rjmp	.-2      	; 0x1096 <main+0x1a8>
LED_HeartBeat():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:129
 * LED operation switching
 */

/* Heartbeat (waiting) */
void TIM::LED_HeartBeat (void) {
  if (TIM::mode != 1) {
    1098:	80 91 61 38 	lds	r24, 0x3861	; 0x803861 <TIM::mode>
    109c:	81 30       	cpi	r24, 0x01	; 1
    109e:	99 f0       	breq	.+38     	; 0x10c6 <main+0x1d8>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:130
    TIM::mode = 1;
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	80 93 61 38 	sts	0x3861, r24	; 0x803861 <TIM::mode>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:131
    TCB1_CCMP = TCB1_HBEAT;
    10a6:	8a e8       	ldi	r24, 0x8A	; 138
    10a8:	95 e4       	ldi	r25, 0x45	; 69
    10aa:	80 93 9c 0a 	sts	0x0A9C, r24	; 0x800a9c <__RODATA_PM_OFFSET__+0x7f8a9c>
    10ae:	90 93 9d 0a 	sts	0x0A9D, r25	; 0x800a9d <__RODATA_PM_OFFSET__+0x7f8a9d>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:132
    TCB1_CNT = 0;
    10b2:	10 92 9a 0a 	sts	0x0A9A, r1	; 0x800a9a <__RODATA_PM_OFFSET__+0x7f8a9a>
    10b6:	10 92 9b 0a 	sts	0x0A9B, r1	; 0x800a9b <__RODATA_PM_OFFSET__+0x7f8a9b>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:133
    TCB1_CTRLA = TCB_RUNSTDBY_bm | TCB_ENABLE_bm | TCB_CLKSEL_TCA0_gc;
    10ba:	85 e4       	ldi	r24, 0x45	; 69
    10bc:	80 93 90 0a 	sts	0x0A90, r24	; 0x800a90 <__RODATA_PM_OFFSET__+0x7f8a90>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:134
    LEDG_EVOUT = EVSYS_USER_CHANNEL2_gc;
    10c0:	83 e0       	ldi	r24, 0x03	; 3
    10c2:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <__RODATA_PM_OFFSET__+0x7f81a9>
ready():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:152
    SYS::WDT_REBOOT();
  }
  TIM::LED_HeartBeat();

  /* It stays in a low power state until the first interrupt occurs. */
  sleep_enable();
    10c6:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <__RODATA_PM_OFFSET__+0x7f8050>
    10ca:	81 60       	ori	r24, 0x01	; 1
    10cc:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__RODATA_PM_OFFSET__+0x7f8050>
get_parameter():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:264
        packet.size_word[0] = 2;
        break;
      }
      case PAR_VTARGET : {
        _CAPS16(packet.body[1])->word = SYS::get_vcc();
        packet.size_word[0] = 3;
    10d0:	43 e0       	ldi	r20, 0x03	; 3
    10d2:	24 2e       	mov	r2, r20
    10d4:	31 2c       	mov	r3, r1
sign_on_response():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:168
  /********************
   * SIGN_ON Response *
   ********************/

  void sign_on_response (void) {
    NVM::before_address = -1;
    10d6:	44 24       	eor	r4, r4
    10d8:	4a 94       	dec	r4
    10da:	54 2c       	mov	r5, r4
    10dc:	32 01       	movw	r6, r4
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:169
    packet.size = sizeof(sign_on_resp);
    10de:	6d e1       	ldi	r22, 0x1D	; 29
    10e0:	86 2e       	mov	r8, r22
    10e2:	91 2c       	mov	r9, r1
    10e4:	a1 2c       	mov	r10, r1
    10e6:	b1 2c       	mov	r11, r1
get():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:86
  /*******************
   * Local functions *
   *******************/

  uint8_t get (void) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_RXCIF_bp);
    10e8:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
    10ec:	87 ff       	sbrs	r24, 7
    10ee:	fc cf       	rjmp	.-8      	; 0x10e8 <main+0x1fa>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:87
    return JTAG_USART.RXDATAL;
    10f0:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__RODATA_PM_OFFSET__+0x7f8820>
packet_receive():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:126
    uint16_t _crc = ~0;
    uint8_t *p = (uint8_t*) &packet.soh;
    uint8_t *q = (uint8_t*) &packet.soh;

    /* Waiting for reception (infinite loop) */
    while (get() != MESSAGE_START);
    10f4:	8b 31       	cpi	r24, 0x1B	; 27
    10f6:	c1 f7       	brne	.-16     	; 0x10e8 <main+0x1fa>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:127
    (*p++) = MESSAGE_START;
    10f8:	80 93 8e 38 	sts	0x388E, r24	; 0x80388e <JTAG2::packet>
    10fc:	ef e8       	ldi	r30, 0x8F	; 143
    10fe:	f8 e3       	ldi	r31, 0x38	; 56
get():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:86
  /*******************
   * Local functions *
   *******************/

  uint8_t get (void) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_RXCIF_bp);
    1100:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
    1104:	87 ff       	sbrs	r24, 7
    1106:	fc cf       	rjmp	.-8      	; 0x1100 <main+0x212>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:87
    return JTAG_USART.RXDATAL;
    1108:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__RODATA_PM_OFFSET__+0x7f8820>
packet_receive():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:130
    /* Waiting for reception (infinite loop) */
    while (get() != MESSAGE_START);
    (*p++) = MESSAGE_START;

    /* First 7bytes */
    for (int8_t i = 0; i < 7; i++) *p++ = get();
    110c:	81 93       	st	Z+, r24
    110e:	28 e3       	ldi	r18, 0x38	; 56
    1110:	e6 39       	cpi	r30, 0x96	; 150
    1112:	f2 07       	cpc	r31, r18
    1114:	a9 f7       	brne	.-22     	; 0x1100 <main+0x212>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:133

    /* STX confirmation */
    if (packet.stx != TOKEN) return false;
    1116:	80 91 95 38 	lds	r24, 0x3895	; 0x803895 <JTAG2::packet+0x7>
    111a:	8e 30       	cpi	r24, 0x0E	; 14
    111c:	29 f7       	brne	.-54     	; 0x10e8 <main+0x1fa>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:136

    /* Check packet length */
    if (packet.size > sizeof(packet.body)) return false;
    111e:	80 91 91 38 	lds	r24, 0x3891	; 0x803891 <JTAG2::packet+0x3>
    1122:	90 91 92 38 	lds	r25, 0x3892	; 0x803892 <JTAG2::packet+0x4>
    1126:	a0 91 93 38 	lds	r26, 0x3893	; 0x803893 <JTAG2::packet+0x5>
    112a:	b0 91 94 38 	lds	r27, 0x3894	; 0x803894 <JTAG2::packet+0x6>
    112e:	85 31       	cpi	r24, 0x15	; 21
    1130:	92 40       	sbci	r25, 0x02	; 2
    1132:	a1 05       	cpc	r26, r1
    1134:	b1 05       	cpc	r27, r1
    1136:	c0 f6       	brcc	.-80     	; 0x10e8 <main+0x1fa>
    1138:	06 e9       	ldi	r16, 0x96	; 150
    113a:	18 e3       	ldi	r17, 0x38	; 56
    113c:	68 01       	movw	r12, r16
main():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:139

    /* receive the rest */
    for (int16_t j = -2; j < packet.size_word[0]; j++) *p++ = get();
    113e:	8e ef       	ldi	r24, 0xFE	; 254
    1140:	9f ef       	ldi	r25, 0xFF	; 255
packet_receive():
    1142:	20 91 91 38 	lds	r18, 0x3891	; 0x803891 <JTAG2::packet+0x3>
    1146:	30 91 92 38 	lds	r19, 0x3892	; 0x803892 <JTAG2::packet+0x4>
    114a:	82 17       	cp	r24, r18
    114c:	93 07       	cpc	r25, r19
    114e:	5c f4       	brge	.+22     	; 0x1166 <main+0x278>
get():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:86
  /*******************
   * Local functions *
   *******************/

  uint8_t get (void) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_RXCIF_bp);
    1150:	20 91 24 08 	lds	r18, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
    1154:	27 ff       	sbrs	r18, 7
    1156:	fc cf       	rjmp	.-8      	; 0x1150 <main+0x262>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:87
    return JTAG_USART.RXDATAL;
    1158:	20 91 20 08 	lds	r18, 0x0820	; 0x800820 <__RODATA_PM_OFFSET__+0x7f8820>
packet_receive():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:139

    /* Check packet length */
    if (packet.size > sizeof(packet.body)) return false;

    /* receive the rest */
    for (int16_t j = -2; j < packet.size_word[0]; j++) *p++ = get();
    115c:	d6 01       	movw	r26, r12
    115e:	2d 93       	st	X+, r18
    1160:	6d 01       	movw	r12, r26
    1162:	01 96       	adiw	r24, 0x01	; 1
    1164:	ee cf       	rjmp	.-36     	; 0x1142 <main+0x254>
    1166:	3e e8       	ldi	r19, 0x8E	; 142
    1168:	e3 2e       	mov	r14, r19
    116a:	38 e3       	ldi	r19, 0x38	; 56
    116c:	f3 2e       	mov	r15, r19
main():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:121
  /****************
   * JTAG Receive *
   ****************/

  bool packet_receive (void) {
    uint16_t _crc = ~0;
    116e:	8f ef       	ldi	r24, 0xFF	; 255
    1170:	9f ef       	ldi	r25, 0xFF	; 255
packet_receive():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:142

    /* receive the rest */
    for (int16_t j = -2; j < packet.size_word[0]; j++) *p++ = get();

    /* CRC check when receive buffer is filled */
    while (p != q) _crc = crc16_update(_crc, *q++);
    1172:	ec 14       	cp	r14, r12
    1174:	fd 04       	cpc	r15, r13
    1176:	29 f0       	breq	.+10     	; 0x1182 <main+0x294>
    1178:	f7 01       	movw	r30, r14
    117a:	61 91       	ld	r22, Z+
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:101
  void flush (void) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_TXCIF_bp);
  }

  uint16_t crc16_update(uint16_t _crc, uint8_t _data) {
    return _crc_ccitt_update(_crc, _data);
    117c:	7f 01       	movw	r14, r30
crc16_update():
    117e:	50 d9       	rcall	.-3424   	; 0x420 <_crc_ccitt_update(unsigned int, unsigned char)>
    1180:	f8 cf       	rjmp	.-16     	; 0x1172 <main+0x284>
wakeup_jtag():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:485
 * Main loop *
 *************/

void JTAG2::wakeup_jtag (void) {
  for (;;) {
    if (packet_receive()) process_command();
    1182:	89 2b       	or	r24, r25
    1184:	09 f0       	breq	.+2      	; 0x1188 <main+0x29a>
    1186:	b0 cf       	rjmp	.-160    	; 0x10e8 <main+0x1fa>
process_command():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:331
  /****************
   * JTAG Process *
   ****************/

  inline void process_command (void) {
    wdt_reset();
    1188:	a8 95       	wdr
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:335
    #ifdef ENABLE_DEBUG_UPDI_SENDER
    UPDI::_send_buf_clear();
    #endif
    uint8_t message_id = packet.body[MESSAGE_ID];
    118a:	80 91 96 38 	lds	r24, 0x3896	; 0x803896 <JTAG2::packet+0x8>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:336
    packet.size = 1;
    118e:	21 e0       	ldi	r18, 0x01	; 1
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	40 e0       	ldi	r20, 0x00	; 0
    1194:	50 e0       	ldi	r21, 0x00	; 0
    1196:	20 93 91 38 	sts	0x3891, r18	; 0x803891 <JTAG2::packet+0x3>
    119a:	30 93 92 38 	sts	0x3892, r19	; 0x803892 <JTAG2::packet+0x4>
    119e:	40 93 93 38 	sts	0x3893, r20	; 0x803893 <JTAG2::packet+0x5>
    11a2:	50 93 94 38 	sts	0x3894, r21	; 0x803894 <JTAG2::packet+0x6>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:337
    packet.body[MESSAGE_ID] = RSP_OK;
    11a6:	90 e8       	ldi	r25, 0x80	; 128
    11a8:	90 93 96 38 	sts	0x3896, r25	; 0x803896 <JTAG2::packet+0x8>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:338
    switch (message_id) {
    11ac:	8b 30       	cpi	r24, 0x0B	; 11
    11ae:	09 f4       	brne	.+2      	; 0x11b2 <main+0x2c4>
    11b0:	34 c1       	rjmp	.+616    	; 0x141a <main+0x52c>
    11b2:	08 f0       	brcs	.+2      	; 0x11b6 <main+0x2c8>
    11b4:	4c c0       	rjmp	.+152    	; 0x124e <main+0x360>
    11b6:	83 30       	cpi	r24, 0x03	; 3
    11b8:	09 f4       	brne	.+2      	; 0x11bc <main+0x2ce>
    11ba:	cd c0       	rjmp	.+410    	; 0x1356 <main+0x468>
    11bc:	08 f0       	brcs	.+2      	; 0x11c0 <main+0x2d2>
    11be:	3d c0       	rjmp	.+122    	; 0x123a <main+0x34c>
    11c0:	81 30       	cpi	r24, 0x01	; 1
    11c2:	09 f4       	brne	.+2      	; 0x11c6 <main+0x2d8>
    11c4:	68 c0       	rjmp	.+208    	; 0x1296 <main+0x3a8>
    11c6:	08 f4       	brcc	.+2      	; 0x11ca <main+0x2dc>
    11c8:	c4 c1       	rjmp	.+904    	; 0x1552 <main+0x664>
set_parameter():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:191
   * CMND_SET_PARAMETER *
   **********************/

  bool set_parameter (void) {
    uint8_t param_val = packet.body[RSP_DATA + 1];
    switch ( packet.body[RSP_DATA] ) {
    11ca:	80 91 97 38 	lds	r24, 0x3897	; 0x803897 <JTAG2::packet+0x9>
    11ce:	85 30       	cpi	r24, 0x05	; 5
    11d0:	09 f0       	breq	.+2      	; 0x11d4 <main+0x2e6>
    11d2:	46 c0       	rjmp	.+140    	; 0x1260 <main+0x372>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:190
  /**********************
   * CMND_SET_PARAMETER *
   **********************/

  bool set_parameter (void) {
    uint8_t param_val = packet.body[RSP_DATA + 1];
    11d4:	d0 90 98 38 	lds	r13, 0x3898	; 0x803898 <JTAG2::packet+0xa>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:195
    switch ( packet.body[RSP_DATA] ) {
      /* JTAG interface speed */
      case PAR_BAUD_RATE : {
        /* Compatible range confirmation */
        if ((param_val >= BAUD_LOWER) && (param_val <= BAUD_UPPER)) {
    11d8:	8e ef       	ldi	r24, 0xFE	; 254
    11da:	8d 0d       	add	r24, r13
    11dc:	88 31       	cpi	r24, 0x18	; 24
    11de:	08 f0       	brcs	.+2      	; 0x11e2 <main+0x2f4>
    11e0:	b6 c0       	rjmp	.+364    	; 0x134e <main+0x460>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:196
          uint16_t baud = pgm_read_word( &BAUD_TABLE[param_val] );
    11e2:	8d 2d       	mov	r24, r13
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	fc 01       	movw	r30, r24
    11e8:	ee 0f       	add	r30, r30
    11ea:	ff 1f       	adc	r31, r31
    11ec:	eb 56       	subi	r30, 0x6B	; 107
    11ee:	ff 4f       	sbci	r31, 0xFF	; 255
    11f0:	05 91       	lpm	r16, Z+
    11f2:	14 91       	lpm	r17, Z
    11f4:	78 01       	movw	r14, r16
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:197
          if (baud) {
    11f6:	01 15       	cp	r16, r1
    11f8:	11 05       	cpc	r17, r1
    11fa:	09 f4       	brne	.+2      	; 0x11fe <main+0x310>
    11fc:	a8 c0       	rjmp	.+336    	; 0x134e <main+0x460>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:199
            /* If normal, respond and then change speed */
            param_baud_rate_val = (jtag_baud_rate_e) param_val;
    11fe:	80 93 36 38 	sts	0x3836, r24	; 0x803836 <JTAG2::param_baud_rate_val>
    1202:	90 93 37 38 	sts	0x3837, r25	; 0x803837 <JTAG2::param_baud_rate_val+0x1>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:200
            answer_transfer();
    1206:	1e d9       	rcall	.-3524   	; 0x444 <JTAG2::answer_transfer()>
flush():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:97
    JTAG_USART.STATUS = USART_TXCIF_bm;
    return JTAG_USART.TXDATAL = _data;
  }

  void flush (void) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_TXCIF_bp);
    1208:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
    120c:	86 ff       	sbrs	r24, 6
    120e:	fc cf       	rjmp	.-8      	; 0x1208 <main+0x31a>
set_parameter():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:203
            /* If normal, respond and then change speed */
            param_baud_rate_val = (jtag_baud_rate_e) param_val;
            answer_transfer();
            flush();
            /* If the division ratio is too small, change to double speed mode */
            if (baud < 64) {
    1210:	00 34       	cpi	r16, 0x40	; 64
    1212:	11 05       	cpc	r17, r1
    1214:	30 f4       	brcc	.+12     	; 0x1222 <main+0x334>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:204
              JTAG_USART.CTRLB = JTAG_USART_DBLON;
    1216:	8a ec       	ldi	r24, 0xCA	; 202
    1218:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__RODATA_PM_OFFSET__+0x7f8826>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:205
              baud <<= 1;
    121c:	78 01       	movw	r14, r16
    121e:	ee 0c       	add	r14, r14
    1220:	ff 1c       	adc	r15, r15
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:207
            }
            JTAG_USART.BAUD = baud;
    1222:	e0 92 28 08 	sts	0x0828, r14	; 0x800828 <__RODATA_PM_OFFSET__+0x7f8828>
    1226:	f0 92 29 08 	sts	0x0829, r15	; 0x800829 <__RODATA_PM_OFFSET__+0x7f8829>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:209
            /* Speed to allow terminal mode */
            if (param_val == BAUD_38400 || param_val == BAUD_666666)
    122a:	35 e0       	ldi	r19, 0x05	; 5
    122c:	d3 16       	cp	r13, r19
    122e:	19 f0       	breq	.+6      	; 0x1236 <main+0x348>
    1230:	48 e1       	ldi	r20, 0x18	; 24
    1232:	d4 12       	cpse	r13, r20
    1234:	59 cf       	rjmp	.-334    	; 0x10e8 <main+0x1fa>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:210
              bit_set(UPDI_CONTROL, UPDI::UPDI_TERM_bp);
    1236:	e5 9a       	sbi	0x1c, 5	; 28
    1238:	57 cf       	rjmp	.-338    	; 0x10e8 <main+0x1fa>
process_command():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:338
    UPDI::_send_buf_clear();
    #endif
    uint8_t message_id = packet.body[MESSAGE_ID];
    packet.size = 1;
    packet.body[MESSAGE_ID] = RSP_OK;
    switch (message_id) {
    123a:	85 30       	cpi	r24, 0x05	; 5
    123c:	09 f4       	brne	.+2      	; 0x1240 <main+0x352>
    123e:	2f c1       	rjmp	.+606    	; 0x149e <main+0x5b0>
    1240:	08 f4       	brcc	.+2      	; 0x1244 <main+0x356>
    1242:	34 c1       	rjmp	.+616    	; 0x14ac <main+0x5be>
    1244:	88 30       	cpi	r24, 0x08	; 8
    1246:	61 f0       	breq	.+24     	; 0x1260 <main+0x372>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:447
        // SYS::WDT_REBOOT();
        SYS::System_Reset();
      }
      /* Returns negation for unknown commands */
      default : {
        set_response(RSP_FAILED);
    1248:	80 ea       	ldi	r24, 0xA0	; 160
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	82 c0       	rjmp	.+260    	; 0x1352 <main+0x464>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:338
    UPDI::_send_buf_clear();
    #endif
    uint8_t message_id = packet.body[MESSAGE_ID];
    packet.size = 1;
    packet.body[MESSAGE_ID] = RSP_OK;
    switch (message_id) {
    124e:	86 31       	cpi	r24, 0x16	; 22
    1250:	48 f4       	brcc	.+18     	; 0x1264 <main+0x376>
    1252:	84 31       	cpi	r24, 0x14	; 20
    1254:	28 f4       	brcc	.+10     	; 0x1260 <main+0x372>
    1256:	8c 30       	cpi	r24, 0x0C	; 12
    1258:	09 f4       	brne	.+2      	; 0x125c <main+0x36e>
    125a:	44 c1       	rjmp	.+648    	; 0x14e4 <main+0x5f6>
    125c:	8f 30       	cpi	r24, 0x0F	; 15
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:450
      /* Returns negation for unknown commands */
      default : {
        set_response(RSP_FAILED);
      }
    }
    answer_transfer();
    125e:	a1 f7       	brne	.-24     	; 0x1248 <main+0x35a>
    1260:	f1 d8       	rcall	.-3614   	; 0x444 <JTAG2::answer_transfer()>
    1262:	42 cf       	rjmp	.-380    	; 0x10e8 <main+0x1fa>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:338
    UPDI::_send_buf_clear();
    #endif
    uint8_t message_id = packet.body[MESSAGE_ID];
    packet.size = 1;
    packet.body[MESSAGE_ID] = RSP_OK;
    switch (message_id) {
    1264:	86 33       	cpi	r24, 0x36	; 54
    1266:	e1 f3       	breq	.-8      	; 0x1260 <main+0x372>
    1268:	85 35       	cpi	r24, 0x55	; 85
    126a:	09 f4       	brne	.+2      	; 0x126e <main+0x380>
    126c:	58 c1       	rjmp	.+688    	; 0x151e <main+0x630>
    126e:	84 33       	cpi	r24, 0x34	; 52
    1270:	59 f7       	brne	.-42     	; 0x1248 <main+0x35a>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:411
        #endif
        break;
      }
      case CMND_XMEGA_ERASE : {
        /* Received packet error retransmission exception */
        if (before_seqnum == packet.number) break;
    1272:	20 91 8f 38 	lds	r18, 0x388F	; 0x80388f <JTAG2::packet+0x1>
    1276:	30 91 90 38 	lds	r19, 0x3890	; 0x803890 <JTAG2::packet+0x2>
    127a:	80 91 38 38 	lds	r24, 0x3838	; 0x803838 <JTAG2::before_seqnum>
    127e:	90 91 39 38 	lds	r25, 0x3839	; 0x803839 <JTAG2::before_seqnum+0x1>
    1282:	28 17       	cp	r18, r24
    1284:	39 07       	cpc	r19, r25
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:412
        if (UPDI::runtime(UPDI::UPDI_CMD_ERASE)) {
    1286:	61 f3       	breq	.-40     	; 0x1260 <main+0x372>
    1288:	83 e0       	ldi	r24, 0x03	; 3
    128a:	7c da       	rcall	.-2824   	; 0x784 <UPDI::runtime(unsigned char)>
    128c:	81 11       	cpse	r24, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:417
          /* Keep the sequence number if completed successfully */
          before_seqnum = packet.number;
        }
        else {
          set_response(RSP_ILLEGAL_POWER_STATE);
    128e:	1e c1       	rjmp	.+572    	; 0x14cc <main+0x5de>
    1290:	8d ea       	ldi	r24, 0xAD	; 173
    1292:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:166
  _PROTECTED_WRITE(WDT_CTRLA, _wdt_period);
}

void SYS::WDT_OFF (void) { WDT_SET(WDT_PERIOD_OFF_gc); }

void SYS::WDT_ON (void) { WDT_SET(WDT_PERIOD_8KCLK_gc); }
    1294:	5e c0       	rjmp	.+188    	; 0x1352 <main+0x464>
WDT_ON():
    1296:	8b e0       	ldi	r24, 0x0B	; 11
    1298:	6b d8       	rcall	.-3882   	; 0x370 <SYS::WDT_SET(unsigned char)>
RTS_Disable():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:108
void SYS::RTS_Enable (void) {
  pinControlRegister(RTS_SENSE_PIN) = RTS_SENSE_CONFIG;
}

void SYS::RTS_Disable (void) {
  pinControlRegister(RTS_SENSE_PIN) = RTS_SENSE_DISABLE;
    129a:	88 e0       	ldi	r24, 0x08	; 8
    129c:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <__RODATA_PM_OFFSET__+0x7f8412>
LED_Stop():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:166
}

/* Suspension (before UPDI approval) */
/* TCA0 changed to charge pump drive speed */
void TIM::LED_Stop (void) {
  if (TIM::mode != 0) {
    12a0:	80 91 61 38 	lds	r24, 0x3861	; 0x803861 <TIM::mode>
    12a4:	88 23       	and	r24, r24
    12a6:	41 f0       	breq	.+16     	; 0x12b8 <main+0x3ca>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:167
    TIM::mode = 0;
    12a8:	10 92 61 38 	sts	0x3861, r1	; 0x803861 <TIM::mode>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:168
    TCA0_SPLIT_CTRLA = TCA_SPLIT_RUNSTDBY_bm | TCA_SPLIT_ENABLE_bm | TCA_SPLIT_CLKSEL_DIV1_gc;
    12ac:	81 e8       	ldi	r24, 0x81	; 129
    12ae:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__RODATA_PM_OFFSET__+0x7f8a00>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:169
    LEDG_EVOUT = EVSYS_USER_OFF_gc;
    12b2:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <__RODATA_PM_OFFSET__+0x7f81a9>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:343
    switch (message_id) {
      case CMND_GET_SIGN_ON : {
        SYS::WDT_ON();
        SYS::RTS_Disable();
        TIM::LED_Stop();
        UPDI::Target_Reset(true);
    12b6:	0f 98       	cbi	0x01, 7	; 1
process_command():
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	2b d8       	rcall	.-4010   	; 0x312 <UPDI::Target_Reset(bool)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:344
        openDrainWrite(TRST_PIN, LOW);
    12bc:	21 9a       	sbi	0x04, 1	; 4
PG_Enable():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:96
/******************
 * Various ON/OFF *
 ******************/

void SYS::PG_Enable (void) {
  digitalWrite(PGEN_PIN, HIGH);
    12be:	48 9a       	sbi	0x09, 0	; 9
transfer_enable():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:106
    return _crc_ccitt_update(_crc, _data);
  }

  void transfer_enable (void) {
    SYS::PG_Enable();
    pinMode(JTAG_TXD_PIN, OUTPUT);
    12c0:	42 9a       	sbi	0x08, 2	; 8
    12c2:	10 92 52 04 	sts	0x0452, r1	; 0x800452 <__RODATA_PM_OFFSET__+0x7f8452>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:107
    JTAG_USART.CTRLB = JTAG_USART_ON;
    12c6:	88 ec       	ldi	r24, 0xC8	; 200
    12c8:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__RODATA_PM_OFFSET__+0x7f8826>
sign_on_response():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:168
  /********************
   * SIGN_ON Response *
   ********************/

  void sign_on_response (void) {
    NVM::before_address = -1;
    12cc:	40 92 5d 38 	sts	0x385D, r4	; 0x80385d <NVM::before_address>
    12d0:	50 92 5e 38 	sts	0x385E, r5	; 0x80385e <NVM::before_address+0x1>
    12d4:	60 92 5f 38 	sts	0x385F, r6	; 0x80385f <NVM::before_address+0x2>
    12d8:	70 92 60 38 	sts	0x3860, r7	; 0x803860 <NVM::before_address+0x3>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:169
    packet.size = sizeof(sign_on_resp);
    12dc:	80 92 91 38 	sts	0x3891, r8	; 0x803891 <JTAG2::packet+0x3>
    12e0:	90 92 92 38 	sts	0x3892, r9	; 0x803892 <JTAG2::packet+0x4>
    12e4:	a0 92 93 38 	sts	0x3893, r10	; 0x803893 <JTAG2::packet+0x5>
    12e8:	b0 92 94 38 	sts	0x3894, r11	; 0x803894 <JTAG2::packet+0x6>
    12ec:	e8 e7       	ldi	r30, 0x78	; 120
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:171
    for (uint8_t i = 0; i < sizeof(sign_on_resp); i++)
      packet.body[i] = pgm_read_byte( &sign_on_resp[i] );
    12f0:	84 91       	lpm	r24, Z
    12f2:	d8 01       	movw	r26, r16
    12f4:	8d 93       	st	X+, r24
    12f6:	8d 01       	movw	r16, r26
    12f8:	31 96       	adiw	r30, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:170
   ********************/

  void sign_on_response (void) {
    NVM::before_address = -1;
    packet.size = sizeof(sign_on_resp);
    for (uint8_t i = 0; i < sizeof(sign_on_resp); i++)
    12fa:	23 eb       	ldi	r18, 0xB3	; 179
    12fc:	38 e3       	ldi	r19, 0x38	; 56
    12fe:	2a 17       	cp	r18, r26
    1300:	3b 07       	cpc	r19, r27
    1302:	b1 f7       	brne	.-20     	; 0x12f0 <main+0x402>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:176
      packet.body[i] = pgm_read_byte( &sign_on_resp[i] );
    /* Generate version information from SERNUM */
    uint8_t* p = (uint8_t*) &SIGROW_SERNUM0;
    uint8_t* q = (uint8_t*) &SIGROW_SERNUM4;
    uint8_t* r = (uint8_t*) &packet.body[10];
      *r++ = *q++ ^ *p++ ^ *p++;
    1304:	80 91 07 11 	lds	r24, 0x1107	; 0x801107 <__RODATA_PM_OFFSET__+0x7f9107>
    1308:	90 91 03 11 	lds	r25, 0x1103	; 0x801103 <__RODATA_PM_OFFSET__+0x7f9103>
    130c:	89 27       	eor	r24, r25
    130e:	90 91 04 11 	lds	r25, 0x1104	; 0x801104 <__RODATA_PM_OFFSET__+0x7f9104>
    1312:	89 27       	eor	r24, r25
    1314:	80 93 a0 38 	sts	0x38A0, r24	; 0x8038a0 <JTAG2::packet+0x12>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:177
      *r++ = *q++ ^ *p++ ^ *p++;
    1318:	80 91 08 11 	lds	r24, 0x1108	; 0x801108 <__RODATA_PM_OFFSET__+0x7f9108>
    131c:	90 91 05 11 	lds	r25, 0x1105	; 0x801105 <__RODATA_PM_OFFSET__+0x7f9105>
    1320:	89 27       	eor	r24, r25
    1322:	90 91 06 11 	lds	r25, 0x1106	; 0x801106 <__RODATA_PM_OFFSET__+0x7f9106>
    1326:	89 27       	eor	r24, r25
    1328:	80 93 a1 38 	sts	0x38A1, r24	; 0x8038a1 <JTAG2::packet+0x13>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:178
      *r++ = *q++;
    132c:	80 91 09 11 	lds	r24, 0x1109	; 0x801109 <__RODATA_PM_OFFSET__+0x7f9109>
    1330:	80 93 a2 38 	sts	0x38A2, r24	; 0x8038a2 <JTAG2::packet+0x14>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:179
      *r++ = *q++;
    1334:	80 91 0a 11 	lds	r24, 0x110A	; 0x80110a <__RODATA_PM_OFFSET__+0x7f910a>
    1338:	80 93 a3 38 	sts	0x38A3, r24	; 0x8038a3 <JTAG2::packet+0x15>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:180
      *r++ = *q++;
    133c:	80 91 0b 11 	lds	r24, 0x110B	; 0x80110b <__RODATA_PM_OFFSET__+0x7f910b>
    1340:	80 93 a4 38 	sts	0x38A4, r24	; 0x8038a4 <JTAG2::packet+0x16>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:181
      *r++ = *q++;
    1344:	80 91 0c 11 	lds	r24, 0x110C	; 0x80110c <__RODATA_PM_OFFSET__+0x7f910c>
    1348:	80 93 a5 38 	sts	0x38A5, r24	; 0x8038a5 <JTAG2::packet+0x17>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:215
              bit_set(UPDI_CONTROL, UPDI::UPDI_TERM_bp);
            return false;
          }
        }
        /* Range violation results in failure response */
        set_response(RSP_ILLEGAL_VALUE);
    134c:	89 cf       	rjmp	.-238    	; 0x1260 <main+0x372>
set_parameter():
    134e:	86 ea       	ldi	r24, 0xA6	; 166
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:447
        // SYS::WDT_REBOOT();
        SYS::System_Reset();
      }
      /* Returns negation for unknown commands */
      default : {
        set_response(RSP_FAILED);
    1350:	90 e0       	ldi	r25, 0x00	; 0
process_command():
    1352:	54 d8       	rcall	.-3928   	; 0x3fc <JTAG2::set_response(JTAG2::jtag_response_e)>
    1354:	85 cf       	rjmp	.-246    	; 0x1260 <main+0x372>
get_parameter():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:235
  /**********************
   * CMND_GET_PARAMETER *
   **********************/

  void get_parameter (void) {
    switch ( packet.body[RSP_DATA] ) {
    1356:	80 91 97 38 	lds	r24, 0x3897	; 0x803897 <JTAG2::packet+0x9>
    135a:	83 30       	cpi	r24, 0x03	; 3
    135c:	c9 f1       	breq	.+114    	; 0x13d0 <main+0x4e2>
    135e:	38 f4       	brcc	.+14     	; 0x136e <main+0x480>
    1360:	81 30       	cpi	r24, 0x01	; 1
    1362:	b1 f0       	breq	.+44     	; 0x1390 <main+0x4a2>
    1364:	82 30       	cpi	r24, 0x02	; 2
    1366:	f1 f0       	breq	.+60     	; 0x13a4 <main+0x4b6>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:282
          packet.size_word[0] = 1 + sizeof(updi_desc.sib);
          break;
        }
      }
      default : {
        set_response(RSP_ILLEGAL_PARAMETER);
    1368:	81 ea       	ldi	r24, 0xA1	; 161
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	f2 cf       	rjmp	.-28     	; 0x1352 <main+0x464>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:235
  /**********************
   * CMND_GET_PARAMETER *
   **********************/

  void get_parameter (void) {
    switch ( packet.body[RSP_DATA] ) {
    136e:	86 30       	cpi	r24, 0x06	; 6
    1370:	c9 f1       	breq	.+114    	; 0x13e4 <main+0x4f6>
    1372:	8d 31       	cpi	r24, 0x1D	; 29
    1374:	f1 f1       	breq	.+124    	; 0x13f2 <main+0x504>
    1376:	85 30       	cpi	r24, 0x05	; 5
    1378:	b9 f7       	brne	.-18     	; 0x1368 <main+0x47a>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:258
        packet.body[1] = 0x55;
        packet.size_word[0] = 2;
        break;
      }
      case PAR_BAUD_RATE : {
        packet.body[1] = param_baud_rate_val;
    137a:	80 91 36 38 	lds	r24, 0x3836	; 0x803836 <JTAG2::param_baud_rate_val>
    137e:	80 93 97 38 	sts	0x3897, r24	; 0x803897 <JTAG2::packet+0x9>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:259
        packet.size_word[0] = 2;
    1382:	e2 e0       	ldi	r30, 0x02	; 2
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	e0 93 91 38 	sts	0x3891, r30	; 0x803891 <JTAG2::packet+0x3>
    138a:	f0 93 92 38 	sts	0x3892, r31	; 0x803892 <JTAG2::packet+0x4>
    138e:	1c c0       	rjmp	.+56     	; 0x13c8 <main+0x4da>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:237
   **********************/

  void get_parameter (void) {
    switch ( packet.body[RSP_DATA] ) {
      case PAR_HW_VER : {
        packet.body[1] = sign_on_resp[5];
    1390:	82 e0       	ldi	r24, 0x02	; 2
    1392:	80 93 97 38 	sts	0x3897, r24	; 0x803897 <JTAG2::packet+0x9>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:238
        packet.body[2] = sign_on_resp[9];
    1396:	80 93 98 38 	sts	0x3898, r24	; 0x803898 <JTAG2::packet+0xa>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:264
        packet.size_word[0] = 2;
        break;
      }
      case PAR_VTARGET : {
        _CAPS16(packet.body[1])->word = SYS::get_vcc();
        packet.size_word[0] = 3;
    139a:	20 92 91 38 	sts	0x3891, r2	; 0x803891 <JTAG2::packet+0x3>
    139e:	30 92 92 38 	sts	0x3892, r3	; 0x803892 <JTAG2::packet+0x4>
    13a2:	12 c0       	rjmp	.+36     	; 0x13c8 <main+0x4da>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:243
        packet.body[2] = sign_on_resp[9];
        packet.size_word[0] = 3;
        break;
      }
      case PAR_FW_VER : {
        packet.body[1] = sign_on_resp[3];
    13a4:	85 e3       	ldi	r24, 0x35	; 53
    13a6:	80 93 97 38 	sts	0x3897, r24	; 0x803897 <JTAG2::packet+0x9>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:244
        packet.body[2] = sign_on_resp[4];
    13aa:	87 e0       	ldi	r24, 0x07	; 7
    13ac:	80 93 98 38 	sts	0x3898, r24	; 0x803898 <JTAG2::packet+0xa>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:245
        packet.body[3] = sign_on_resp[7];
    13b0:	82 e2       	ldi	r24, 0x22	; 34
    13b2:	80 93 99 38 	sts	0x3899, r24	; 0x803899 <JTAG2::packet+0xb>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:246
        packet.body[4] = sign_on_resp[8];
    13b6:	86 e0       	ldi	r24, 0x06	; 6
    13b8:	80 93 9a 38 	sts	0x389A, r24	; 0x80389a <JTAG2::packet+0xc>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:247
        packet.size_word[0] = 5;
    13bc:	85 e0       	ldi	r24, 0x05	; 5
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	80 93 91 38 	sts	0x3891, r24	; 0x803891 <JTAG2::packet+0x3>
    13c4:	90 93 92 38 	sts	0x3892, r25	; 0x803892 <JTAG2::packet+0x4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:286
      default : {
        set_response(RSP_ILLEGAL_PARAMETER);
        return;
      }
    }
    packet.body[MESSAGE_ID] = RSP_PARAMETER;
    13c8:	81 e8       	ldi	r24, 0x81	; 129
    13ca:	80 93 96 38 	sts	0x3896, r24	; 0x803896 <JTAG2::packet+0x8>
    13ce:	48 cf       	rjmp	.-368    	; 0x1260 <main+0x372>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:253
        break;
      }
      case PAR_EMU_MODE : {
        /* This response code indicates an UPDI-only implementation */
        /* In normal JTAGICEmkII this is never queried */
        packet.body[1] = 0x55;
    13d0:	85 e5       	ldi	r24, 0x55	; 85
    13d2:	80 93 97 38 	sts	0x3897, r24	; 0x803897 <JTAG2::packet+0x9>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:254
        packet.size_word[0] = 2;
    13d6:	a2 e0       	ldi	r26, 0x02	; 2
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	a0 93 91 38 	sts	0x3891, r26	; 0x803891 <JTAG2::packet+0x3>
    13de:	b0 93 92 38 	sts	0x3892, r27	; 0x803892 <JTAG2::packet+0x4>
    13e2:	f2 cf       	rjmp	.-28     	; 0x13c8 <main+0x4da>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:263
        packet.body[1] = param_baud_rate_val;
        packet.size_word[0] = 2;
        break;
      }
      case PAR_VTARGET : {
        _CAPS16(packet.body[1])->word = SYS::get_vcc();
    13e4:	0e 94 c1 01 	call	0x382	; 0x382 <SYS::get_vcc()>
    13e8:	80 93 97 38 	sts	0x3897, r24	; 0x803897 <JTAG2::packet+0x9>
    13ec:	90 93 98 38 	sts	0x3898, r25	; 0x803898 <JTAG2::packet+0xa>
    13f0:	d4 cf       	rjmp	.-88     	; 0x139a <main+0x4ac>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:273
      case PAR_TARGET_SIGNATURE : {
        /* SIB information can be returned as an extended signature. */
        /* Responds correctly only during programming mode.          */
        /* otherwise an error will be returned.                      */
        /* Silicon revision (REVID) can be read as normal IO memory. */
        if (bit_is_set(UPDI_CONTROL, UPDI::UPDI_INFO_bp)) {
    13f2:	e0 9b       	sbis	0x1c, 0	; 28
    13f4:	b9 cf       	rjmp	.-142    	; 0x1368 <main+0x47a>
    13f6:	ee e6       	ldi	r30, 0x6E	; 110
    13f8:	f8 e3       	ldi	r31, 0x38	; 56
    13fa:	a7 e9       	ldi	r26, 0x97	; 151
    13fc:	b8 e3       	ldi	r27, 0x38	; 56
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:276
          uint8_t *q = &packet.body[RSP_DATA];
          uint8_t *p = &updi_desc.sib[0];
          for (uint8_t i = 0; i < sizeof(updi_desc.sib); i++) *q++ = *p++;
    13fe:	81 91       	ld	r24, Z+
    1400:	8d 93       	st	X+, r24
    1402:	2e e8       	ldi	r18, 0x8E	; 142
    1404:	38 e3       	ldi	r19, 0x38	; 56
    1406:	2e 17       	cp	r18, r30
    1408:	3f 07       	cpc	r19, r31
    140a:	c9 f7       	brne	.-14     	; 0x13fe <main+0x510>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:277
          packet.size_word[0] = 1 + sizeof(updi_desc.sib);
    140c:	41 e2       	ldi	r20, 0x21	; 33
    140e:	50 e0       	ldi	r21, 0x00	; 0
    1410:	40 93 91 38 	sts	0x3891, r20	; 0x803891 <JTAG2::packet+0x3>
    1414:	50 93 92 38 	sts	0x3892, r21	; 0x803892 <JTAG2::packet+0x4>
    1418:	d7 cf       	rjmp	.-82     	; 0x13c8 <main+0x4da>
process_command():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:360
        get_parameter();
        break;
      }
      case CMND_RESET : {
        /* Run only the first time */
        if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_INIT_bp)) {
    141a:	e7 99       	sbic	0x1c, 7	; 28
    141c:	21 cf       	rjmp	.-446    	; 0x1260 <main+0x372>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:361
          uint8_t hv_control = packet.body[RSP_DATA];
    141e:	80 91 97 38 	lds	r24, 0x3897	; 0x803897 <JTAG2::packet+0x9>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:362
          if ((hv_control & '0') == '0') {
    1422:	98 2f       	mov	r25, r24
    1424:	90 73       	andi	r25, 0x30	; 48
    1426:	90 33       	cpi	r25, 0x30	; 48
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:366
            /* If the general reset setting is neither 0 nor 1. */
            /* Accepts special extension settings.              */
            /* This forces HV control.                          */
            updi_desc.hvupdi_variant = hv_control;
    1428:	29 f4       	brne	.+10     	; 0x1434 <main+0x546>
    142a:	80 93 64 38 	sts	0x3864, r24	; 0x803864 <JTAG2::updi_desc+0x2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:368
            /* '1' must be passed for automatic HV control to be inhibited */
            if (hv_control != '1') bit_set(UPDI_CONTROL, UPDI::UPDI_FCHV_bp);
    142e:	81 33       	cpi	r24, 0x31	; 49
    1430:	09 f0       	breq	.+2      	; 0x1434 <main+0x546>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:371
          }
          /* Here UPDI control is tried */
          UPDI::updi_activate();
    1432:	e4 9a       	sbi	0x1c, 4	; 28
    1434:	87 dc       	rcall	.-1778   	; 0xd44 <UPDI::updi_activate()>
    1436:	80 91 61 38 	lds	r24, 0x3861	; 0x803861 <TIM::mode>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:372
          if (bit_is_set(UPDI_CONTROL, UPDI::UPDI_TERM_bp)) {
    143a:	e5 9b       	sbis	0x1c, 5	; 28
    143c:	1a c0       	rjmp	.+52     	; 0x1472 <main+0x584>
LED_TCB1():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:139
    LEDG_EVOUT = EVSYS_USER_CHANNEL2_gc;
  }
}

void LED_TCB1 (uint8_t mode, uint16_t ccmp) {
  if (TIM::mode != mode) {
    143e:	83 30       	cpi	r24, 0x03	; 3
    1440:	99 f0       	breq	.+38     	; 0x1468 <main+0x57a>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:140
    TIM::mode = mode;
    1442:	83 e0       	ldi	r24, 0x03	; 3
    1444:	80 93 61 38 	sts	0x3861, r24	; 0x803861 <TIM::mode>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:141
    TCB1_CCMP = ccmp;
    1448:	89 ea       	ldi	r24, 0xA9	; 169
    144a:	95 e5       	ldi	r25, 0x55	; 85
    144c:	80 93 9c 0a 	sts	0x0A9C, r24	; 0x800a9c <__RODATA_PM_OFFSET__+0x7f8a9c>
    1450:	90 93 9d 0a 	sts	0x0A9D, r25	; 0x800a9d <__RODATA_PM_OFFSET__+0x7f8a9d>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:142
    TCB1_CNT = 0;
    1454:	10 92 9a 0a 	sts	0x0A9A, r1	; 0x800a9a <__RODATA_PM_OFFSET__+0x7f8a9a>
    1458:	10 92 9b 0a 	sts	0x0A9B, r1	; 0x800a9b <__RODATA_PM_OFFSET__+0x7f8a9b>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:143
    TCB1_CTRLA = TCB_RUNSTDBY_bm | TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
    145c:	8f e4       	ldi	r24, 0x4F	; 79
    145e:	80 93 90 0a 	sts	0x0A90, r24	; 0x800a90 <__RODATA_PM_OFFSET__+0x7f8a90>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:144
    LEDG_EVOUT = EVSYS_USER_CHANNEL0_gc;
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <__RODATA_PM_OFFSET__+0x7f81a9>
WDT_OFF():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:164
void SYS::WDT_SET (uint8_t _wdt_period) {
  loop_until_bit_is_clear(WDT_STATUS, WDT_SYNCBUSY_bp);
  _PROTECTED_WRITE(WDT_CTRLA, _wdt_period);
}

void SYS::WDT_OFF (void) { WDT_SET(WDT_PERIOD_OFF_gc); }
    1468:	80 e0       	ldi	r24, 0x00	; 0
    146a:	0e 94 b8 01 	call	0x370	; 0x370 <SYS::WDT_SET(unsigned char)>
process_command():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:381
          }
          else {
            /* If not set to interactive mode, the LED will flash rapidly */
            TIM::LED_Fast();
          }
          bit_set(UPDI_CONTROL, UPDI::UPDI_INIT_bp);
    146e:	e7 9a       	sbi	0x1c, 7	; 28
    1470:	f7 ce       	rjmp	.-530    	; 0x1260 <main+0x372>
LED_TCB1():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:139
    LEDG_EVOUT = EVSYS_USER_CHANNEL2_gc;
  }
}

void LED_TCB1 (uint8_t mode, uint16_t ccmp) {
  if (TIM::mode != mode) {
    1472:	84 30       	cpi	r24, 0x04	; 4
    1474:	e1 f3       	breq	.-8      	; 0x146e <main+0x580>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:140
    TIM::mode = mode;
    1476:	84 e0       	ldi	r24, 0x04	; 4
    1478:	80 93 61 38 	sts	0x3861, r24	; 0x803861 <TIM::mode>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:141
    TCB1_CCMP = ccmp;
    147c:	a5 e1       	ldi	r26, 0x15	; 21
    147e:	b4 e0       	ldi	r27, 0x04	; 4
    1480:	a0 93 9c 0a 	sts	0x0A9C, r26	; 0x800a9c <__RODATA_PM_OFFSET__+0x7f8a9c>
    1484:	b0 93 9d 0a 	sts	0x0A9D, r27	; 0x800a9d <__RODATA_PM_OFFSET__+0x7f8a9d>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:142
    TCB1_CNT = 0;
    1488:	10 92 9a 0a 	sts	0x0A9A, r1	; 0x800a9a <__RODATA_PM_OFFSET__+0x7f8a9a>
    148c:	10 92 9b 0a 	sts	0x0A9B, r1	; 0x800a9b <__RODATA_PM_OFFSET__+0x7f8a9b>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:143
    TCB1_CTRLA = TCB_RUNSTDBY_bm | TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
    1490:	8f e4       	ldi	r24, 0x4F	; 79
    1492:	80 93 90 0a 	sts	0x0A90, r24	; 0x800a90 <__RODATA_PM_OFFSET__+0x7f8a90>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:144
    LEDG_EVOUT = EVSYS_USER_CHANNEL0_gc;
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <__RODATA_PM_OFFSET__+0x7f81a9>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:389
        UPDI::_send_buf_copy();
        #endif
        break;
      }
      case CMND_READ_MEMORY : {
        if (!UPDI::runtime(UPDI::UPDI_CMD_READ_MEMORY)) {
    149c:	e8 cf       	rjmp	.-48     	; 0x146e <main+0x580>
process_command():
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	71 d9       	rcall	.-3358   	; 0x784 <UPDI::runtime(unsigned char)>
    14a2:	81 11       	cpse	r24, r1
    14a4:	dd ce       	rjmp	.-582    	; 0x1260 <main+0x372>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:390
          set_response(RSP_NO_TARGET_POWER);
    14a6:	8b ea       	ldi	r24, 0xAB	; 171
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	53 cf       	rjmp	.-346    	; 0x1352 <main+0x464>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:396
        }
        break;
      }
      case CMND_WRITE_MEMORY : {
        /* Received packet error retransmission exception */
        if (before_seqnum == packet.number) break;
    14ac:	20 91 8f 38 	lds	r18, 0x388F	; 0x80388f <JTAG2::packet+0x1>
    14b0:	30 91 90 38 	lds	r19, 0x3890	; 0x803890 <JTAG2::packet+0x2>
    14b4:	80 91 38 38 	lds	r24, 0x3838	; 0x803838 <JTAG2::before_seqnum>
    14b8:	90 91 39 38 	lds	r25, 0x3839	; 0x803839 <JTAG2::before_seqnum+0x1>
    14bc:	28 17       	cp	r18, r24
    14be:	39 07       	cpc	r19, r25
    14c0:	09 f4       	brne	.+2      	; 0x14c4 <main+0x5d6>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:397
        if (UPDI::runtime(UPDI::UPDI_CMD_WRITE_MEMORY)) {
    14c2:	ce ce       	rjmp	.-612    	; 0x1260 <main+0x372>
    14c4:	82 e0       	ldi	r24, 0x02	; 2
    14c6:	5e d9       	rcall	.-3396   	; 0x784 <UPDI::runtime(unsigned char)>
    14c8:	88 23       	and	r24, r24
    14ca:	49 f0       	breq	.+18     	; 0x14de <main+0x5f0>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:414
      case CMND_XMEGA_ERASE : {
        /* Received packet error retransmission exception */
        if (before_seqnum == packet.number) break;
        if (UPDI::runtime(UPDI::UPDI_CMD_ERASE)) {
          /* Keep the sequence number if completed successfully */
          before_seqnum = packet.number;
    14cc:	80 91 8f 38 	lds	r24, 0x388F	; 0x80388f <JTAG2::packet+0x1>
    14d0:	90 91 90 38 	lds	r25, 0x3890	; 0x803890 <JTAG2::packet+0x2>
    14d4:	80 93 38 38 	sts	0x3838, r24	; 0x803838 <JTAG2::before_seqnum>
    14d8:	90 93 39 38 	sts	0x3839, r25	; 0x803839 <JTAG2::before_seqnum+0x1>
    14dc:	c1 ce       	rjmp	.-638    	; 0x1260 <main+0x372>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:402
        if (UPDI::runtime(UPDI::UPDI_CMD_WRITE_MEMORY)) {
          /* Keep the sequence number if completed successfully */
          before_seqnum = packet.number;
        }
        else {
          set_response(RSP_ILLEGAL_MCU_STATE);
    14de:	85 ea       	ldi	r24, 0xA5	; 165
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	37 cf       	rjmp	.-402    	; 0x1352 <main+0x464>
set_descripter():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:297

  void set_descripter (uint8_t type) {
    if (type == CMND_SET_DEVICE_DESC) {
      const struct jtag_device_descriptor *desc =
           (struct jtag_device_descriptor*)&packet.body[RSP_DATA];
      updi_desc.flash_page_size = *(uint16_t*)(&desc->uiFlashPageSize[0]);
    14e4:	80 91 8a 39 	lds	r24, 0x398A	; 0x80398a <JTAG2::packet+0xfc>
    14e8:	90 91 8b 39 	lds	r25, 0x398B	; 0x80398b <JTAG2::packet+0xfd>
    14ec:	80 93 66 38 	sts	0x3866, r24	; 0x803866 <JTAG2::updi_desc+0x4>
    14f0:	90 93 67 38 	sts	0x3867, r25	; 0x803867 <JTAG2::updi_desc+0x5>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:298
      updi_desc.eeprom_page_size = desc->ucEepromPageSize;
    14f4:	80 91 8c 39 	lds	r24, 0x398C	; 0x80398c <JTAG2::packet+0xfe>
    14f8:	80 93 68 38 	sts	0x3868, r24	; 0x803868 <JTAG2::updi_desc+0x6>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:299
      if ((desc->ucIDRAddress & '0') == '0') {
    14fc:	90 91 87 39 	lds	r25, 0x3987	; 0x803987 <JTAG2::packet+0xf9>
    1500:	29 2f       	mov	r18, r25
    1502:	20 73       	andi	r18, 0x30	; 48
    1504:	20 33       	cpi	r18, 0x30	; 48
    1506:	19 f4       	brne	.+6      	; 0x150e <main+0x620>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:303
        /* Accepts special extension settings. */
        /* 0x31 must be passed for automatic HV control to be inhibited. */
        /* This parameter can be specified in the `idr` descriptor in the `part` section. */
        updi_desc.hvupdi_variant = desc->ucIDRAddress;  // Valid value 0x30,0x31 or 0x32
    1508:	90 93 64 38 	sts	0x3864, r25	; 0x803864 <JTAG2::updi_desc+0x2>
    150c:	a9 ce       	rjmp	.-686    	; 0x1260 <main+0x372>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:308
      }
      else {
        /* If the EEPROM page size is 32 or more, it is considered a HV=12V system. */
        /* This setting will be referenced when automatic HV control is requested.  */
        updi_desc.hvupdi_variant = updi_desc.eeprom_page_size >= 32 ? '0' : '2';
    150e:	80 32       	cpi	r24, 0x20	; 32
    1510:	20 f4       	brcc	.+8      	; 0x151a <main+0x62c>
main():
    1512:	82 e3       	ldi	r24, 0x32	; 50
set_descripter():
    1514:	80 93 64 38 	sts	0x3864, r24	; 0x803864 <JTAG2::updi_desc+0x2>
    1518:	a3 ce       	rjmp	.-698    	; 0x1260 <main+0x372>
main():
    151a:	80 e3       	ldi	r24, 0x30	; 48
    151c:	fb cf       	rjmp	.-10     	; 0x1514 <main+0x626>
set_descripter():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:316
    else if (type == CMND_SET_UPDI_PARAMS) {
      /* This structure is used instead of CMND_SET_DEVICE_DESC after */
      /* answering 0x55 ('U') to PAR_EMU_MODE of CMND_GET_PARAMETER.  */
      /* Once you have confirmed the magic number and data length,    */
      /* you can simply clone it into your internal structure.        */
      const struct updi_device_descriptor *desc =
    151e:	e7 e9       	ldi	r30, 0x97	; 151
    1520:	f8 e3       	ldi	r31, 0x38	; 56
    1522:	e9 83       	std	Y+1, r30	; 0x01
    1524:	fa 83       	std	Y+2, r31	; 0x02
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:318
           (struct updi_device_descriptor*)&packet.body[RSP_DATA];
      if (desc->magicnumber == 'U' && desc->length <= sizeof(updi_desc) - 2) {
    1526:	80 91 97 38 	lds	r24, 0x3897	; 0x803897 <JTAG2::packet+0x9>
    152a:	85 35       	cpi	r24, 0x55	; 85
    152c:	09 f0       	breq	.+2      	; 0x1530 <main+0x642>
    152e:	98 ce       	rjmp	.-720    	; 0x1260 <main+0x372>
    1530:	90 91 98 38 	lds	r25, 0x3898	; 0x803898 <JTAG2::packet+0xa>
    1534:	9b 32       	cpi	r25, 0x2B	; 43
    1536:	08 f0       	brcs	.+2      	; 0x153a <main+0x64c>
    1538:	93 ce       	rjmp	.-730    	; 0x1260 <main+0x372>
    153a:	de 01       	movw	r26, r28
    153c:	13 96       	adiw	r26, 0x03	; 3
    153e:	e4 e6       	ldi	r30, 0x64	; 100
    1540:	f8 e3       	ldi	r31, 0x38	; 56
main():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:321
        uint8_t *q = 2 + (uint8_t*)&updi_desc;
        uint8_t *p = 2 + (uint8_t*)&desc;
        for (int8_t i = 0; i < desc->length; i++) *q++ = *p++;
    1542:	80 e0       	ldi	r24, 0x00	; 0
set_descripter():
    1544:	98 17       	cp	r25, r24
    1546:	09 f4       	brne	.+2      	; 0x154a <main+0x65c>
    1548:	8b ce       	rjmp	.-746    	; 0x1260 <main+0x372>
    154a:	2d 91       	ld	r18, X+
    154c:	21 93       	st	Z+, r18
    154e:	8f 5f       	subi	r24, 0xFF	; 255
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:437
      case CMND_GO :
      case CMND_GET_SYNC : {
        break;
      }
      case CMND_SIGN_OFF : {
        answer_transfer();
    1550:	f9 cf       	rjmp	.-14     	; 0x1544 <main+0x656>
process_command():
    1552:	0e 94 22 02 	call	0x444	; 0x444 <JTAG2::answer_transfer()>
flush():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:97
    JTAG_USART.STATUS = USART_TXCIF_bm;
    return JTAG_USART.TXDATAL = _data;
  }

  void flush (void) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_TXCIF_bp);
    1556:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
    155a:	86 ff       	sbrs	r24, 6
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:439
        break;
      }
      case CMND_SIGN_OFF : {
        answer_transfer();
        flush();
        if (bit_is_set(UPDI_CONTROL, UPDI::UPDI_PROG_bp))
    155c:	fc cf       	rjmp	.-8      	; 0x1556 <main+0x668>
process_command():
    155e:	e1 9b       	sbis	0x1c, 1	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:440
          UPDI::runtime(UPDI::UPDI_CMD_GO);
    1560:	02 c0       	rjmp	.+4      	; 0x1566 <main+0x678>
    1562:	84 e0       	ldi	r24, 0x04	; 4
    1564:	0f d9       	rcall	.-3554   	; 0x784 <UPDI::runtime(unsigned char)>
System_Reset():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:88
/*************
 * Self reset *
 *************/

void SYS::System_Reset (void) {
  _PROTECTED_WRITE(RSTCTRL_SWRR, RSTCTRL_SWRE_bm);
    1566:	88 ed       	ldi	r24, 0xD8	; 216
    1568:	91 e0       	ldi	r25, 0x01	; 1
    156a:	84 bf       	out	0x34, r24	; 52
    156c:	90 93 41 00 	sts	0x0041, r25	; 0x800041 <__RODATA_PM_OFFSET__+0x7f8041>
    1570:	6b ce       	rjmp	.-810    	; 0x1248 <main+0x35a>

00001572 <setjmp>:
setjmp():
    1572:	dc 01       	movw	r26, r24
    1574:	2d 92       	st	X+, r2
    1576:	3d 92       	st	X+, r3
    1578:	4d 92       	st	X+, r4
    157a:	5d 92       	st	X+, r5
    157c:	6d 92       	st	X+, r6
    157e:	7d 92       	st	X+, r7
    1580:	8d 92       	st	X+, r8
    1582:	9d 92       	st	X+, r9
    1584:	ad 92       	st	X+, r10
    1586:	bd 92       	st	X+, r11
    1588:	cd 92       	st	X+, r12
    158a:	dd 92       	st	X+, r13
    158c:	ed 92       	st	X+, r14
    158e:	fd 92       	st	X+, r15
    1590:	0d 93       	st	X+, r16
    1592:	1d 93       	st	X+, r17
    1594:	cd 93       	st	X+, r28
    1596:	dd 93       	st	X+, r29
    1598:	ff 91       	pop	r31
    159a:	ef 91       	pop	r30
    159c:	8d b7       	in	r24, 0x3d	; 61
    159e:	8d 93       	st	X+, r24
    15a0:	8e b7       	in	r24, 0x3e	; 62
    15a2:	8d 93       	st	X+, r24
    15a4:	8f b7       	in	r24, 0x3f	; 63
    15a6:	8d 93       	st	X+, r24
    15a8:	ed 93       	st	X+, r30
    15aa:	fd 93       	st	X+, r31
    15ac:	88 27       	eor	r24, r24
    15ae:	99 27       	eor	r25, r25
    15b0:	09 94       	ijmp

000015b2 <longjmp>:
longjmp():
    15b2:	dc 01       	movw	r26, r24
    15b4:	cb 01       	movw	r24, r22
    15b6:	81 30       	cpi	r24, 0x01	; 1
    15b8:	91 05       	cpc	r25, r1
    15ba:	81 1d       	adc	r24, r1
    15bc:	2d 90       	ld	r2, X+
    15be:	3d 90       	ld	r3, X+
    15c0:	4d 90       	ld	r4, X+
    15c2:	5d 90       	ld	r5, X+
    15c4:	6d 90       	ld	r6, X+
    15c6:	7d 90       	ld	r7, X+
    15c8:	8d 90       	ld	r8, X+
    15ca:	9d 90       	ld	r9, X+
    15cc:	ad 90       	ld	r10, X+
    15ce:	bd 90       	ld	r11, X+
    15d0:	cd 90       	ld	r12, X+
    15d2:	dd 90       	ld	r13, X+
    15d4:	ed 90       	ld	r14, X+
    15d6:	fd 90       	ld	r15, X+
    15d8:	0d 91       	ld	r16, X+
    15da:	1d 91       	ld	r17, X+
    15dc:	cd 91       	ld	r28, X+
    15de:	dd 91       	ld	r29, X+
    15e0:	ed 91       	ld	r30, X+
    15e2:	fd 91       	ld	r31, X+
    15e4:	0d 90       	ld	r0, X+
    15e6:	0f be       	out	0x3f, r0	; 63
    15e8:	ed bf       	out	0x3d, r30	; 61
    15ea:	fe bf       	out	0x3e, r31	; 62
    15ec:	ed 91       	ld	r30, X+
    15ee:	fd 91       	ld	r31, X+
    15f0:	09 94       	ijmp

000015f2 <_exit>:
exit():
    15f2:	f8 94       	cli

000015f4 <__stop_program>:
__stop_program():
    15f4:	ff cf       	rjmp	.-2      	; 0x15f4 <__stop_program>

Disassembly of section .nvmem:

0000163c <.nvmem>:
    163c:	00 00       	nop
	...
