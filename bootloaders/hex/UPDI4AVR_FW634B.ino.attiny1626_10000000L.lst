
/var/folders/mz/_z9vt_y13rdf9tt_4qkvv0k40000gn/T/arduino_build_15386/UPDI4AVR_FW634B.ino.elf:     file format elf32-avr


Disassembly of section .data:

00803800 <__data_start>:
__data_start():
  803800:	55 c8       	rjmp	.-3926   	; 0x8028ac <__RODATA_PM_OFFSET__+0x7fa8ac>
  803802:	00 c3       	rjmp	.+1536   	; 0x803e04 <__bss_end+0x35c>
  803804:	04 55       	subi	r16, 0x54	; 84

00803805 <UPDI::st8(unsigned long, unsigned char)::set_ptr>:
  803805:	55 48 00 00 00 00                                   UH....

0080380b <UPDI::ld8(unsigned long)::set_ptr>:
  80380b:	55 08 00 00 00 00                                   U.....

00803811 <UPDI::get_cs_stat(unsigned char)::set_ptr>:
  803811:	55 00                                               U.

00803813 <UPDI::set_cs_stat(unsigned char, unsigned char)::set_ptr>:
  803813:	55 00 00                                            U..

00803816 <UPDI::nvmprog_key>:
  803816:	55 e0 20 67 6f 72 50 4d 56 4e                       U. gorPMVN

00803820 <UPDI::read_sib(unsigned char*)::set_ptr>:
  803820:	55 e6                                               U.

00803822 <UPDI::urowwrite_key>:
  803822:	55 e0 65 74 26 73 55 4d 56 4e                       U.et&sUMVN

0080382c <UPDI::erase_key>:
  80382c:	55 e0 65 73 61 72 45 4d 56 4e                       U.esarEMVN

00803836 <JTAG2::param_baud_rate_val>:
  803836:	04 00                                               ..

00803838 <JTAG2::before_seqnum>:
  803838:	ff ff                                               ..

0080383a <UPDI::_set_repeat>:
  80383a:	55 a0 00 55 04                                      U..U.

0080383f <UPDI::_set_ptr_l>:
  80383f:	55 6a 00 00 00 00 00                                Uj.....

Disassembly of section .text:

00000000 <__vectors>:
__vectors():
../../../../crt1/gcrt1.S:61
       0:	67 c0       	rjmp	.+206    	; 0xd0 <__ctors_end>
       2:	00 00       	nop
../../../../crt1/gcrt1.S:67
       4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
       6:	00 00       	nop
../../../../crt1/gcrt1.S:68
       8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
       a:	00 00       	nop
../../../../crt1/gcrt1.S:69
       c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
       e:	00 00       	nop
../../../../crt1/gcrt1.S:70
      10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
      12:	00 00       	nop
../../../../crt1/gcrt1.S:71
      14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
      16:	00 00       	nop
../../../../crt1/gcrt1.S:72
      18:	02 c7       	rjmp	.+3588   	; 0xe1e <__vector_6>
      1a:	00 00       	nop
../../../../crt1/gcrt1.S:73
      1c:	42 c7       	rjmp	.+3716   	; 0xea2 <__vector_7>
      1e:	00 00       	nop
../../../../crt1/gcrt1.S:74
      20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
      22:	00 00       	nop
../../../../crt1/gcrt1.S:75
      24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
      26:	00 00       	nop
../../../../crt1/gcrt1.S:76
      28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
      2a:	00 00       	nop
../../../../crt1/gcrt1.S:77
      2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
      2e:	00 00       	nop
../../../../crt1/gcrt1.S:78
      30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
      32:	00 00       	nop
../../../../crt1/gcrt1.S:79
      34:	e9 c6       	rjmp	.+3538   	; 0xe08 <__vector_13>
      36:	00 00       	nop
../../../../crt1/gcrt1.S:80
      38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
      3a:	00 00       	nop
../../../../crt1/gcrt1.S:81
      3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
      3e:	00 00       	nop
../../../../crt1/gcrt1.S:82
      40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
      42:	00 00       	nop
../../../../crt1/gcrt1.S:83
      44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
      46:	00 00       	nop
../../../../crt1/gcrt1.S:84
      48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
      4a:	00 00       	nop
../../../../crt1/gcrt1.S:85
      4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
      4e:	00 00       	nop
../../../../crt1/gcrt1.S:86
      50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
      52:	00 00       	nop
../../../../crt1/gcrt1.S:87
      54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
      56:	00 00       	nop
../../../../crt1/gcrt1.S:88
      58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
      5a:	00 00       	nop
../../../../crt1/gcrt1.S:89
      5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
      5e:	00 00       	nop
../../../../crt1/gcrt1.S:90
      60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
      62:	00 00       	nop
../../../../crt1/gcrt1.S:91
      64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
      66:	00 00       	nop
../../../../crt1/gcrt1.S:92
      68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
      6a:	00 00       	nop
../../../../crt1/gcrt1.S:93
      6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
      6e:	00 00       	nop
../../../../crt1/gcrt1.S:94
      70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
      72:	00 00       	nop
../../../../crt1/gcrt1.S:95
      74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
	...

00000078 <__trampolines_end>:
__trampolines_start():
      78:	86 01       	movw	r16, r12
      7a:	02 35       	cpi	r16, 0x52	; 82
      7c:	07 02       	muls	r16, r23
      7e:	02 22       	and	r0, r18
      80:	06 02       	muls	r16, r22
      82:	00 00       	nop
      84:	00 00       	nop
      86:	00 00       	nop
      88:	55 50       	subi	r21, 0x05	; 5
      8a:	44 49       	sbci	r20, 0x94	; 148
      8c:	34 41       	sbci	r19, 0x14	; 20
      8e:	56 52       	subi	r21, 0x26	; 38
      90:	00 00       	nop
      92:	00 00       	nop
	...

00000095 <JTAG2::BAUD_TABLE>:
      95:	00 00 1b 41 8d 20 47 10 23 08 12 04 b6 02 5b 01     ...A. G.#.....[.
      a5:	da 0a 04 01 ae 00 57 00 2b 00 39 01 9c 00 00 00     ......W.+.9.....
      b5:	00 00 0b 01 c8 00 a0 00 85 00 64 00 50 00 43 00     ..........d.P.C.
      c5:	3c 00 28 00 1b 00 14 00 0d 00 00                    <.(........

000000d0 <__ctors_end>:
__dtors_end():
../../../../crt1/gcrt1.S:230
      d0:	11 24       	eor	r1, r1
../../../../crt1/gcrt1.S:231
      d2:	1f be       	out	0x3f, r1	; 63
../../../../crt1/gcrt1.S:232
      d4:	cf ef       	ldi	r28, 0xFF	; 255
../../../../crt1/gcrt1.S:234
      d6:	cd bf       	out	0x3d, r28	; 61
../../../../crt1/gcrt1.S:236
      d8:	df e3       	ldi	r29, 0x3F	; 63
../../../../crt1/gcrt1.S:237
      da:	de bf       	out	0x3e, r29	; 62

000000dc <__do_copy_data>:
__do_copy_data():
      dc:	18 e3       	ldi	r17, 0x38	; 56
      de:	a0 e0       	ldi	r26, 0x00	; 0
      e0:	b8 e3       	ldi	r27, 0x38	; 56
      e2:	e4 ea       	ldi	r30, 0xA4	; 164
      e4:	f5 e1       	ldi	r31, 0x15	; 21
      e6:	02 c0       	rjmp	.+4      	; 0xec <__do_copy_data+0x10>
      e8:	05 90       	lpm	r0, Z+
      ea:	0d 92       	st	X+, r0
      ec:	a6 34       	cpi	r26, 0x46	; 70
      ee:	b1 07       	cpc	r27, r17
      f0:	d9 f7       	brne	.-10     	; 0xe8 <__do_copy_data+0xc>

000000f2 <__do_clear_bss>:
__do_clear_bss():
      f2:	2a e3       	ldi	r18, 0x3A	; 58
      f4:	a6 e4       	ldi	r26, 0x46	; 70
      f6:	b8 e3       	ldi	r27, 0x38	; 56
      f8:	01 c0       	rjmp	.+2      	; 0xfc <.do_clear_bss_start>

000000fa <.do_clear_bss_loop>:
      fa:	1d 92       	st	X+, r1

000000fc <.do_clear_bss_start>:
      fc:	a8 3a       	cpi	r26, 0xA8	; 168
      fe:	b2 07       	cpc	r27, r18
     100:	e1 f7       	brne	.-8      	; 0xfa <.do_clear_bss_loop>
.do_clear_bss_start():
../../../../crt1/gcrt1.S:314
     102:	01 d7       	rcall	.+3586   	; 0xf06 <main>
../../../../crt1/gcrt1.S:315
     104:	0c 94 d0 0a 	jmp	0x15a0	; 0x15a0 <_exit>

00000108 <__bad_interrupt>:
__vector_22():
../../../../crt1/gcrt1.S:209
     108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <UPDI::RECV()>:
_ZN4UPDI4RECVEv():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:106
/*
 * UPDI reception
 */

uint8_t UPDI::RECV (void) {
  loop_until_bit_is_set(UPDI_USART.STATUS, USART_RXCIF_bp);
     10a:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
     10e:	87 ff       	sbrs	r24, 7
     110:	fc cf       	rjmp	.-8      	; 0x10a <UPDI::RECV()>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:107
  UPDI_LASTH = UPDI_USART.RXDATAH ^ 0x80;
     112:	80 91 01 08 	lds	r24, 0x0801	; 0x800801 <__RODATA_PM_OFFSET__+0x7f8801>
     116:	80 58       	subi	r24, 0x80	; 128
     118:	8f bb       	out	0x1f, r24	; 31
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:113
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  UPDI_LASTL = UPDI_USART.RXDATAL;
  _send_buf_push(UPDI_LASTL);
  return UPDI_LASTL;
  #else
  return UPDI_LASTL = UPDI_USART.RXDATAL;
     11a:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__RODATA_PM_OFFSET__+0x7f8800>
     11e:	8e bb       	out	0x1e, r24	; 30
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:115
  #endif
}
     120:	08 95       	ret

00000122 <UPDI::SEND(unsigned char)>:
_ZN4UPDI4SENDEh():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:121

/*
 * UPDI transmission : Verify transmitted value with loopback reception
 */

bool UPDI::SEND (uint8_t _data) {
     122:	cf 93       	push	r28
     124:	c8 2f       	mov	r28, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:126
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  _send_buf_push(_data);
  #endif
  bool _r;
  loop_until_bit_is_set(UPDI_USART.STATUS, USART_DREIF_bp);
     126:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
     12a:	85 ff       	sbrs	r24, 5
     12c:	fc cf       	rjmp	.-8      	; 0x126 <UPDI::SEND(unsigned char)+0x4>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:127
  UPDI_USART.STATUS = USART_TXCIF_bm;
     12e:	80 e4       	ldi	r24, 0x40	; 64
     130:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:128
  UPDI_USART.TXDATAL = _data;
     134:	c0 93 02 08 	sts	0x0802, r28	; 0x800802 <__RODATA_PM_OFFSET__+0x7f8802>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:129
  loop_until_bit_is_set(UPDI_USART.STATUS, USART_TXCIF_bp);
     138:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
     13c:	86 ff       	sbrs	r24, 6
     13e:	fc cf       	rjmp	.-8      	; 0x138 <UPDI::SEND(unsigned char)+0x16>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:130
  _r = _data == RECV();
     140:	e4 df       	rcall	.-56     	; 0x10a <UPDI::RECV()>
     142:	98 2f       	mov	r25, r24
     144:	81 e0       	ldi	r24, 0x01	; 1
     146:	9c 13       	cpse	r25, r28
     148:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:131
  if (!_r) bit_set(UPDI_LASTH, 0x20);
     14a:	9c 17       	cp	r25, r28
     14c:	11 f0       	breq	.+4      	; 0x152 <UPDI::SEND(unsigned char)+0x30>
     14e:	9f b3       	in	r25, 0x1f	; 31
     150:	9f bb       	out	0x1f, r25	; 31
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:133
  return _r;
}
     152:	cf 91       	pop	r28
     154:	08 95       	ret

00000156 <UPDI::send_bytes(unsigned char*, unsigned char)>:
_ZN4UPDI10send_bytesEPhh():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:157
/*
 * Send byte chunks
 */

/* __attribute__((optimize("O0"))) */
bool UPDI::send_bytes (uint8_t *data, uint8_t len) {
     156:	0f 93       	push	r16
     158:	1f 93       	push	r17
     15a:	cf 93       	push	r28
     15c:	c6 2f       	mov	r28, r22
     15e:	8c 01       	movw	r16, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:159
  do {
    if (!SEND(*data++)) return false;
     160:	f8 01       	movw	r30, r16
     162:	81 91       	ld	r24, Z+
     164:	8f 01       	movw	r16, r30
     166:	dd df       	rcall	.-70     	; 0x122 <UPDI::SEND(unsigned char)>
     168:	88 23       	and	r24, r24
     16a:	11 f0       	breq	.+4      	; 0x170 <UPDI::send_bytes(unsigned char*, unsigned char)+0x1a>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:160
  } while (--len);
     16c:	c1 50       	subi	r28, 0x01	; 1
     16e:	c1 f7       	brne	.-16     	; 0x160 <UPDI::send_bytes(unsigned char*, unsigned char)+0xa>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:162
  return true;
}
     170:	cf 91       	pop	r28
     172:	1f 91       	pop	r17
     174:	0f 91       	pop	r16
     176:	08 95       	ret

00000178 <UPDI::set_cs_stat(unsigned char, unsigned char)>:
_ZN4UPDI11set_cs_statEhh():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:314
 * Control status transmission
 */

bool UPDI::set_cs_stat (uint8_t code, uint8_t data) {
  static uint8_t set_ptr[] = { UPDI_SYNCH, 0, 0 };
  set_ptr[1] = UPDI_STCS | code;
     178:	e3 e1       	ldi	r30, 0x13	; 19
     17a:	f8 e3       	ldi	r31, 0x38	; 56
     17c:	80 6c       	ori	r24, 0xC0	; 192
     17e:	81 83       	std	Z+1, r24	; 0x01
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:315
  set_ptr[2] = data;
     180:	62 83       	std	Z+2, r22	; 0x02
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:316
  return send_bytes(set_ptr, sizeof(set_ptr));
     182:	63 e0       	ldi	r22, 0x03	; 3
     184:	cf 01       	movw	r24, r30
     186:	e7 cf       	rjmp	.-50     	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>

00000188 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.17]>:
_ZN4UPDI7sts8rsdEmPhh.constprop.17():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:222
    } while (--repeat);
  }
  return len == 0;
}

bool UPDI::sts8rsd (uint32_t addr, uint8_t *data, uint8_t len) {
     188:	0f 93       	push	r16
     18a:	1f 93       	push	r17
     18c:	cf 93       	push	r28
     18e:	c4 2f       	mov	r28, r20
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:223
  _CAPS32(_set_ptr_l[2])->dword = addr;
     190:	60 93 41 38 	sts	0x3841, r22	; 0x803841 <UPDI::_set_ptr_l+0x2>
     194:	70 93 42 38 	sts	0x3842, r23	; 0x803842 <UPDI::_set_ptr_l+0x3>
     198:	80 93 43 38 	sts	0x3843, r24	; 0x803843 <UPDI::_set_ptr_l+0x4>
     19c:	90 93 44 38 	sts	0x3844, r25	; 0x803844 <UPDI::_set_ptr_l+0x5>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:224
  _set_repeat[2] = len - 1;
     1a0:	8f ef       	ldi	r24, 0xFF	; 255
     1a2:	84 0f       	add	r24, r20
     1a4:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <UPDI::_set_repeat+0x2>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:225
  _set_repeat[4] = UPDI_PTR_INC|UPDI_ST|UPDI_DATA1;
     1a8:	84 e6       	ldi	r24, 0x64	; 100
     1aa:	80 93 3e 38 	sts	0x383E, r24	; 0x80383e <UPDI::_set_repeat+0x4>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:226
  if (!send_bytes(_set_ptr_l, sizeof(_set_ptr_l) - 1)) return false;
     1ae:	65 e0       	ldi	r22, 0x05	; 5
     1b0:	8f e3       	ldi	r24, 0x3F	; 63
     1b2:	98 e3       	ldi	r25, 0x38	; 56
     1b4:	d0 df       	rcall	.-96     	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     1b6:	88 23       	and	r24, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:227
  if (UPDI_ACK != RECV()) return false;
     1b8:	e1 f0       	breq	.+56     	; 0x1f2 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.17]+0x6a>
     1ba:	a7 df       	rcall	.-178    	; 0x10a <UPDI::RECV()>
     1bc:	80 34       	cpi	r24, 0x40	; 64
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:320
  set_ptr[2] = data;
  return send_bytes(set_ptr, sizeof(set_ptr));
}

bool UPDI::set_cs_ctra (uint8_t data) {
  return set_cs_stat(UPDI_CS_CTRLA, data);
     1be:	c9 f4       	brne	.+50     	; 0x1f2 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.17]+0x6a>
set_cs_ctra():
     1c0:	6e e0       	ldi	r22, 0x0E	; 14
     1c2:	82 e0       	ldi	r24, 0x02	; 2
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:228
  _CAPS32(_set_ptr_l[2])->dword = addr;
  _set_repeat[2] = len - 1;
  _set_repeat[4] = UPDI_PTR_INC|UPDI_ST|UPDI_DATA1;
  if (!send_bytes(_set_ptr_l, sizeof(_set_ptr_l) - 1)) return false;
  if (UPDI_ACK != RECV()) return false;
  if (!set_cs_ctra(UPDI_SET_RSD|UPDI_GTVAL_RSD)) return false;
     1c4:	d9 df       	rcall	.-78     	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>
_ZN4UPDI7sts8rsdEmPhh.constprop.17():
     1c6:	88 23       	and	r24, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:229
  if (!send_bytes(_set_repeat, sizeof(_set_repeat))) return false;
     1c8:	a1 f0       	breq	.+40     	; 0x1f2 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.17]+0x6a>
     1ca:	65 e0       	ldi	r22, 0x05	; 5
     1cc:	8a e3       	ldi	r24, 0x3A	; 58
     1ce:	98 e3       	ldi	r25, 0x38	; 56
     1d0:	c2 df       	rcall	.-124    	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     1d2:	88 23       	and	r24, r24
     1d4:	71 f0       	breq	.+28     	; 0x1f2 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.17]+0x6a>
     1d6:	0c e9       	ldi	r16, 0x9C	; 156
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:231
  do {              /* Repeat byte send */
    SEND(*data++);  /* Submission errors must be ignored */
     1d8:	18 e3       	ldi	r17, 0x38	; 56
     1da:	f8 01       	movw	r30, r16
     1dc:	81 91       	ld	r24, Z+
     1de:	8f 01       	movw	r16, r30
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:232
  } while (--len);
     1e0:	a0 df       	rcall	.-192    	; 0x122 <UPDI::SEND(unsigned char)>
     1e2:	c1 50       	subi	r28, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:320
  set_ptr[2] = data;
  return send_bytes(set_ptr, sizeof(set_ptr));
}

bool UPDI::set_cs_ctra (uint8_t data) {
  return set_cs_stat(UPDI_CS_CTRLA, data);
     1e4:	d1 f7       	brne	.-12     	; 0x1da <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.17]+0x52>
set_cs_ctra():
     1e6:	66 e0       	ldi	r22, 0x06	; 6
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:235
  do {              /* Repeat byte send */
    SEND(*data++);  /* Submission errors must be ignored */
  } while (--len);
  if (!set_cs_ctra(UPDI_GTVAL)) return false;
  return true;
}
     1e8:	82 e0       	ldi	r24, 0x02	; 2
_ZN4UPDI7sts8rsdEmPhh.constprop.17():
     1ea:	cf 91       	pop	r28
     1ec:	1f 91       	pop	r17
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:320
  set_ptr[2] = data;
  return send_bytes(set_ptr, sizeof(set_ptr));
}

bool UPDI::set_cs_ctra (uint8_t data) {
  return set_cs_stat(UPDI_CS_CTRLA, data);
     1ee:	0f 91       	pop	r16
set_cs_ctra():
     1f0:	c3 cf       	rjmp	.-122    	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>
_ZN4UPDI7sts8rsdEmPhh.constprop.17():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:235
  do {              /* Repeat byte send */
    SEND(*data++);  /* Submission errors must be ignored */
  } while (--len);
  if (!set_cs_ctra(UPDI_GTVAL)) return false;
  return true;
}
     1f2:	80 e0       	ldi	r24, 0x00	; 0
     1f4:	cf 91       	pop	r28
     1f6:	1f 91       	pop	r17
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:291
 * Control status reception
 */

uint8_t UPDI::get_cs_stat (uint8_t code) {
  static uint8_t set_ptr[] = { UPDI_SYNCH, 0 };
  set_ptr[1] = UPDI_LDCS | code;
     1f8:	0f 91       	pop	r16
     1fa:	08 95       	ret

000001fc <UPDI::get_cs_stat(unsigned char)>:
_ZN4UPDI11get_cs_statEh():
     1fc:	80 68       	ori	r24, 0x80	; 128
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:292
  send_bytes(set_ptr, sizeof(set_ptr));
     1fe:	80 93 12 38 	sts	0x3812, r24	; 0x803812 <UPDI::get_cs_stat(unsigned char)::set_ptr+0x1>
     202:	62 e0       	ldi	r22, 0x02	; 2
     204:	81 e1       	ldi	r24, 0x11	; 17
     206:	98 e3       	ldi	r25, 0x38	; 56
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:293
  return RECV();
     208:	a6 df       	rcall	.-180    	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     20a:	7f cf       	rjmp	.-258    	; 0x10a <UPDI::RECV()>

0000020c <UPDI::st8(unsigned long, unsigned char)>:
_ZN4UPDI3st8Emh():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:182

/*
 * Single byte transmission
 */

bool UPDI::st8 (uint32_t addr, uint8_t data) {
     20c:	cf 93       	push	r28
     20e:	c4 2f       	mov	r28, r20
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:188
  static uint8_t set_ptr[] = {
      UPDI_SYNCH
    , UPDI_STS | UPDI_ADDR3 | UPDI_DATA1
    , 0, 0, 0, 0    // 24bit address
  };
  _CAPS32(set_ptr[2])->dword = addr;
     210:	60 93 07 38 	sts	0x3807, r22	; 0x803807 <UPDI::st8(unsigned long, unsigned char)::set_ptr+0x2>
     214:	70 93 08 38 	sts	0x3808, r23	; 0x803808 <UPDI::st8(unsigned long, unsigned char)::set_ptr+0x3>
     218:	80 93 09 38 	sts	0x3809, r24	; 0x803809 <UPDI::st8(unsigned long, unsigned char)::set_ptr+0x4>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:189
  if (!send_bytes(set_ptr, sizeof(set_ptr) - 1)) return false;
     21c:	90 93 0a 38 	sts	0x380A, r25	; 0x80380a <UPDI::st8(unsigned long, unsigned char)::set_ptr+0x5>
     220:	65 e0       	ldi	r22, 0x05	; 5
     222:	85 e0       	ldi	r24, 0x05	; 5
     224:	98 e3       	ldi	r25, 0x38	; 56
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:192
  if (UPDI_ACK != RECV()) return false;
  if (!SEND(data)) return false;
  return UPDI_ACK == RECV();
     226:	97 df       	rcall	.-210    	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     228:	81 11       	cpse	r24, r1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:190
    , UPDI_STS | UPDI_ADDR3 | UPDI_DATA1
    , 0, 0, 0, 0    // 24bit address
  };
  _CAPS32(set_ptr[2])->dword = addr;
  if (!send_bytes(set_ptr, sizeof(set_ptr) - 1)) return false;
  if (UPDI_ACK != RECV()) return false;
     22a:	02 c0       	rjmp	.+4      	; 0x230 <UPDI::st8(unsigned long, unsigned char)+0x24>
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	0b c0       	rjmp	.+22     	; 0x246 <UPDI::st8(unsigned long, unsigned char)+0x3a>
     230:	6c df       	rcall	.-296    	; 0x10a <UPDI::RECV()>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:191
  if (!SEND(data)) return false;
     232:	80 34       	cpi	r24, 0x40	; 64
     234:	d9 f7       	brne	.-10     	; 0x22c <UPDI::st8(unsigned long, unsigned char)+0x20>
     236:	8c 2f       	mov	r24, r28
     238:	74 df       	rcall	.-280    	; 0x122 <UPDI::SEND(unsigned char)>
     23a:	88 23       	and	r24, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:192
  return UPDI_ACK == RECV();
     23c:	b9 f3       	breq	.-18     	; 0x22c <UPDI::st8(unsigned long, unsigned char)+0x20>
     23e:	65 df       	rcall	.-310    	; 0x10a <UPDI::RECV()>
     240:	91 e0       	ldi	r25, 0x01	; 1
     242:	80 34       	cpi	r24, 0x40	; 64
     244:	99 f7       	brne	.-26     	; 0x22c <UPDI::st8(unsigned long, unsigned char)+0x20>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:193
}
     246:	89 2f       	mov	r24, r25
     248:	cf 91       	pop	r28
     24a:	08 95       	ret

0000024c <UPDI::send_repeat_header(unsigned long, unsigned char, unsigned char)>:
_ZN4UPDI18send_repeat_headerEmhh():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:170
 * Repeat header transmission
 */

/* __attribute__((optimize("O0"))) */
bool UPDI::send_repeat_header (uint32_t addr, uint8_t cmd, uint8_t len) {
  _CAPS32(_set_ptr_l[2])->dword = addr;
     24c:	60 93 41 38 	sts	0x3841, r22	; 0x803841 <UPDI::_set_ptr_l+0x2>
     250:	70 93 42 38 	sts	0x3842, r23	; 0x803842 <UPDI::_set_ptr_l+0x3>
     254:	80 93 43 38 	sts	0x3843, r24	; 0x803843 <UPDI::_set_ptr_l+0x4>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:171
  _set_repeat[2] = len - 1;
     258:	90 93 44 38 	sts	0x3844, r25	; 0x803844 <UPDI::_set_ptr_l+0x5>
     25c:	21 50       	subi	r18, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:172
  _set_repeat[4] = UPDI_PTR_INC | cmd;  // ST,LD + DATA1,DATA2
     25e:	20 93 3c 38 	sts	0x383C, r18	; 0x80383c <UPDI::_set_repeat+0x2>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:173
  if (!send_bytes(_set_ptr_l, sizeof(_set_ptr_l) - 1)) return false;
     262:	44 60       	ori	r20, 0x04	; 4
     264:	40 93 3e 38 	sts	0x383E, r20	; 0x80383e <UPDI::_set_repeat+0x4>
     268:	65 e0       	ldi	r22, 0x05	; 5
     26a:	8f e3       	ldi	r24, 0x3F	; 63
     26c:	98 e3       	ldi	r25, 0x38	; 56
     26e:	73 df       	rcall	.-282    	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:174
  if (UPDI_ACK != RECV()) return false;
     270:	88 23       	and	r24, r24
     272:	39 f0       	breq	.+14     	; 0x282 <UPDI::send_repeat_header(unsigned long, unsigned char, unsigned char)+0x36>
     274:	4a df       	rcall	.-364    	; 0x10a <UPDI::RECV()>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:175
  return send_bytes(_set_repeat, sizeof(_set_repeat));
     276:	80 34       	cpi	r24, 0x40	; 64
     278:	21 f4       	brne	.+8      	; 0x282 <UPDI::send_repeat_header(unsigned long, unsigned char, unsigned char)+0x36>
     27a:	65 e0       	ldi	r22, 0x05	; 5
     27c:	8a e3       	ldi	r24, 0x3A	; 58
     27e:	98 e3       	ldi	r25, 0x38	; 56
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:176
}
     280:	6a cf       	rjmp	.-300    	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:199

/*
 * Transmission
 */

bool UPDI::sts8 (uint32_t addr, uint8_t *data, uint8_t len) {
     282:	80 e0       	ldi	r24, 0x00	; 0
     284:	08 95       	ret

00000286 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)>:
_ZN4UPDI4sts8EmPhh():
     286:	ff 92       	push	r15
     288:	0f 93       	push	r16
     28a:	1f 93       	push	r17
     28c:	cf 93       	push	r28
     28e:	df 93       	push	r29
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:200
  if (send_repeat_header(addr, UPDI_ST|UPDI_DATA1, len)) {
     290:	f4 2e       	mov	r15, r20
     292:	d5 2f       	mov	r29, r21
     294:	c2 2f       	mov	r28, r18
     296:	40 e6       	ldi	r20, 0x60	; 96
     298:	d9 df       	rcall	.-78     	; 0x24c <UPDI::send_repeat_header(unsigned long, unsigned char, unsigned char)>
     29a:	88 23       	and	r24, r24
     29c:	69 f0       	breq	.+26     	; 0x2b8 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)+0x32>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:202
    do {
      if (!SEND(*data++)) break;
     29e:	0f 2d       	mov	r16, r15
     2a0:	1d 2f       	mov	r17, r29
     2a2:	f8 01       	movw	r30, r16
     2a4:	81 91       	ld	r24, Z+
     2a6:	8f 01       	movw	r16, r30
     2a8:	3c df       	rcall	.-392    	; 0x122 <UPDI::SEND(unsigned char)>
     2aa:	88 23       	and	r24, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:203
      if (UPDI_ACK != RECV()) break;
     2ac:	29 f0       	breq	.+10     	; 0x2b8 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)+0x32>
     2ae:	2d df       	rcall	.-422    	; 0x10a <UPDI::RECV()>
     2b0:	80 34       	cpi	r24, 0x40	; 64
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:204
    } while (--len);
     2b2:	11 f4       	brne	.+4      	; 0x2b8 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)+0x32>
     2b4:	c1 50       	subi	r28, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:206
  }
  return len == 0;
     2b6:	a9 f7       	brne	.-22     	; 0x2a2 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)+0x1c>
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	c1 11       	cpse	r28, r1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:207
}
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	df 91       	pop	r29
     2c0:	cf 91       	pop	r28
     2c2:	1f 91       	pop	r17
     2c4:	0f 91       	pop	r16
     2c6:	ff 90       	pop	r15
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:136
  if (!_r) bit_set(UPDI_LASTH, 0x20);
  return _r;
}

/* BREAK character : Generated by slowing down the sending speed */
void UPDI::BREAK (void) {
     2c8:	08 95       	ret

000002ca <UPDI::BREAK()>:
_ZN4UPDI5BREAKEv():
     2ca:	cf 93       	push	r28
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:137
  UPDI_USART.BAUD = UPDI_BAUD_BREAK;
     2cc:	df 93       	push	r29
     2ce:	c0 e0       	ldi	r28, 0x00	; 0
     2d0:	d8 e0       	ldi	r29, 0x08	; 8
     2d2:	80 ec       	ldi	r24, 0xC0	; 192
     2d4:	94 e4       	ldi	r25, 0x44	; 68
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:139
  /* Maintains low level signal at least 768bit long */
  SEND(UPDI_NOP);
     2d6:	88 87       	std	Y+8, r24	; 0x08
     2d8:	99 87       	std	Y+9, r25	; 0x09
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:140
  UPDI_USART.BAUD = UPDI_BAUD_CALC;
     2da:	80 e0       	ldi	r24, 0x00	; 0
     2dc:	22 df       	rcall	.-444    	; 0x122 <UPDI::SEND(unsigned char)>
     2de:	80 eb       	ldi	r24, 0xB0	; 176
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:141
  bit_clear(UPDI_CONTROL, UPDI_CLKU_bp);
     2e0:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:142
}
     2e2:	88 87       	std	Y+8, r24	; 0x08
     2e4:	99 87       	std	Y+9, r25	; 0x09
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:264
  static uint8_t set_ptr[] = {
      UPDI_SYNCH
    , UPDI_LDS|UPDI_ADDR3|UPDI_DATA1
    , 0, 0, 0, 0  // 24bit address
  };
  _CAPS16(set_ptr[2])->word = (uint16_t)addr;
     2e6:	e6 98       	cbi	0x1c, 6	; 28
     2e8:	df 91       	pop	r29
     2ea:	cf 91       	pop	r28
     2ec:	08 95       	ret

000002ee <UPDI::ld8(unsigned long)>:
_ZN4UPDI3ld8Em():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:265
  while (!send_bytes(set_ptr, sizeof(set_ptr) - 1)) BREAK();
     2ee:	60 93 0d 38 	sts	0x380D, r22	; 0x80380d <UPDI::ld8(unsigned long)::set_ptr+0x2>
     2f2:	70 93 0e 38 	sts	0x380E, r23	; 0x80380e <UPDI::ld8(unsigned long)::set_ptr+0x3>
     2f6:	65 e0       	ldi	r22, 0x05	; 5
     2f8:	8b e0       	ldi	r24, 0x0B	; 11
     2fa:	98 e3       	ldi	r25, 0x38	; 56
     2fc:	2c df       	rcall	.-424    	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     2fe:	81 11       	cpse	r24, r1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:266
  return RECV();
     300:	02 c0       	rjmp	.+4      	; 0x306 <UPDI::ld8(unsigned long)+0x18>
     302:	e3 df       	rcall	.-58     	; 0x2ca <UPDI::BREAK()>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:96
  return send_bytes(set_ptr, sizeof(set_ptr));
}

/* This only does a system reset */
bool UPDI::updi_reset (bool logic) {
  return set_cs_stat(
     304:	f8 cf       	rjmp	.-16     	; 0x2f6 <UPDI::ld8(unsigned long)+0x8>
     306:	01 cf       	rjmp	.-510    	; 0x10a <UPDI::RECV()>

00000308 <UPDI::updi_reset(bool)>:
_ZN4UPDI10updi_resetEb():
     308:	60 e0       	ldi	r22, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:98
    UPDI_CS_ASI_RESET_REQ,
    (logic ? UPDI_RSTREQ : UPDI_NOP));
     30a:	81 11       	cpse	r24, r1
     30c:	69 e5       	ldi	r22, 0x59	; 89
     30e:	88 e0       	ldi	r24, 0x08	; 8
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:81
  /* Release target from reset state after resetting WDT timeout */
  if ( bit_is_set(RSTCTRL_RSTFR, RSTCTRL_WDRF_bp) ) Target_Reset(false);
}

/* This special system reset will log you out of UPDI */
bool UPDI::Target_Reset (bool _enable) {
     310:	33 cf       	rjmp	.-410    	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>

00000312 <UPDI::Target_Reset(bool)>:
_ZN4UPDI12Target_ResetEb():
     312:	cf 93       	push	r28
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:89
    , UPDI_STCS | UPDI_CS_ASI_RESET_REQ
    , 0
    , UPDI_STCS | UPDI_CS_CTRLB
    , UPDI_SET_UPDIDIS
  };
  BREAK();
     314:	c8 2f       	mov	r28, r24
     316:	d9 df       	rcall	.-78     	; 0x2ca <UPDI::BREAK()>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:90
  set_ptr[2] = _enable ? UPDI_RSTREQ : UPDI_NOP;
     318:	80 e0       	ldi	r24, 0x00	; 0
     31a:	c1 11       	cpse	r28, r1
     31c:	89 e5       	ldi	r24, 0x59	; 89
     31e:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <__DATA_REGION_ORIGIN__+0x2>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:91
  return send_bytes(set_ptr, sizeof(set_ptr));
     322:	65 e0       	ldi	r22, 0x05	; 5
     324:	80 e0       	ldi	r24, 0x00	; 0
     326:	98 e3       	ldi	r25, 0x38	; 56
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:92
}
     328:	cf 91       	pop	r28
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:91
    , UPDI_STCS | UPDI_CS_CTRLB
    , UPDI_SET_UPDIDIS
  };
  BREAK();
  set_ptr[2] = _enable ? UPDI_RSTREQ : UPDI_NOP;
  return send_bytes(set_ptr, sizeof(set_ptr));
     32a:	15 cf       	rjmp	.-470    	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>

0000032c <TIM::LED_Flash()>:
_ZN3TIM9LED_FlashEv():
     32c:	80 91 5d 38 	lds	r24, 0x385D	; 0x80385d <TIM::mode>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:151
    LEDG_EVOUT = EVSYS_USER_CHANNEL2_gc;
  }
}

void LED_TCB1 (uint8_t mode, uint16_t ccmp) {
  if (TIM::mode != mode) {
     330:	82 30       	cpi	r24, 0x02	; 2
     332:	99 f0       	breq	.+38     	; 0x35a <TIM::LED_Flash()+0x2e>
     334:	82 e0       	ldi	r24, 0x02	; 2
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:152
    TIM::mode = mode;
     336:	80 93 5d 38 	sts	0x385D, r24	; 0x80385d <TIM::mode>
     33a:	89 ea       	ldi	r24, 0xA9	; 169
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:153
    TCB1_CCMP = ccmp;
     33c:	98 e0       	ldi	r25, 0x08	; 8
     33e:	80 93 9c 0a 	sts	0x0A9C, r24	; 0x800a9c <__RODATA_PM_OFFSET__+0x7f8a9c>
     342:	90 93 9d 0a 	sts	0x0A9D, r25	; 0x800a9d <__RODATA_PM_OFFSET__+0x7f8a9d>
     346:	10 92 9a 0a 	sts	0x0A9A, r1	; 0x800a9a <__RODATA_PM_OFFSET__+0x7f8a9a>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:154
    TCB1_CNT = 0;
     34a:	10 92 9b 0a 	sts	0x0A9B, r1	; 0x800a9b <__RODATA_PM_OFFSET__+0x7f8a9b>
     34e:	8f e4       	ldi	r24, 0x4F	; 79
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:155
    TCB1_CTRLA = TCB_RUNSTDBY_bm | TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
     350:	80 93 90 0a 	sts	0x0A90, r24	; 0x800a90 <__RODATA_PM_OFFSET__+0x7f8a90>
     354:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:156
    LEDG_EVOUT = EVSYS_USER_CHANNEL0_gc;
     356:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <__RODATA_PM_OFFSET__+0x7f81a9>
     35a:	08 95       	ret

0000035c <TIM::LED_HeartBeat()>:
_ZN3TIM13LED_HeartBeatEv():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:163
}

/* Flash (after RTS assert/UPDI authorization) */
void TIM::LED_Flash (void) {
  LED_TCB1(2, TCB1_FLASH);
}
     35c:	80 91 5d 38 	lds	r24, 0x385D	; 0x80385d <TIM::mode>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:141
 * LED operation switching
 */

/* Heartbeat (waiting) */
void TIM::LED_HeartBeat (void) {
  if (TIM::mode != 1) {
     360:	81 30       	cpi	r24, 0x01	; 1
     362:	99 f0       	breq	.+38     	; 0x38a <TIM::LED_HeartBeat()+0x2e>
     364:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:142
    TIM::mode = 1;
     366:	80 93 5d 38 	sts	0x385D, r24	; 0x80385d <TIM::mode>
     36a:	8a e8       	ldi	r24, 0x8A	; 138
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:143
    TCB1_CCMP = TCB1_HBEAT;
     36c:	95 e4       	ldi	r25, 0x45	; 69
     36e:	80 93 9c 0a 	sts	0x0A9C, r24	; 0x800a9c <__RODATA_PM_OFFSET__+0x7f8a9c>
     372:	90 93 9d 0a 	sts	0x0A9D, r25	; 0x800a9d <__RODATA_PM_OFFSET__+0x7f8a9d>
     376:	10 92 9a 0a 	sts	0x0A9A, r1	; 0x800a9a <__RODATA_PM_OFFSET__+0x7f8a9a>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:144
    TCB1_CNT = 0;
     37a:	10 92 9b 0a 	sts	0x0A9B, r1	; 0x800a9b <__RODATA_PM_OFFSET__+0x7f8a9b>
     37e:	85 e4       	ldi	r24, 0x45	; 69
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:145
    TCB1_CTRLA = TCB_RUNSTDBY_bm | TCB_ENABLE_bm | TCB_CLKSEL_TCA0_gc;
     380:	80 93 90 0a 	sts	0x0A90, r24	; 0x800a90 <__RODATA_PM_OFFSET__+0x7f8a90>
     384:	83 e0       	ldi	r24, 0x03	; 3
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:146
    LEDG_EVOUT = EVSYS_USER_CHANNEL2_gc;
     386:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <__RODATA_PM_OFFSET__+0x7f81a9>
     38a:	08 95       	ret

0000038c <TIM::Timeout_Stop()>:
_ZN3TIM12Timeout_StopEv():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:148
  }
}
     38c:	8f b7       	in	r24, 0x3f	; 63
__iCliRetVal():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:128
    TCB0_CTRLA = TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
  }
}

void TIM::Timeout_Stop (void) {
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     38e:	f8 94       	cli
_ZN3TIM12Timeout_StopEv():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     390:	10 92 80 0a 	sts	0x0A80, r1	; 0x800a80 <__RODATA_PM_OFFSET__+0x7f8a80>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:129
    TCB0_CTRLA = 0;
     394:	91 e0       	ldi	r25, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:130
    TCB0_INTFLAGS = TCB_CAPT_bm;
     396:	90 93 86 0a 	sts	0x0A86, r25	; 0x800a86 <__RODATA_PM_OFFSET__+0x7f8a86>
__iRestore():
     39a:	8f bf       	out	0x3f, r24	; 63
_ZN3TIM12Timeout_StopEv():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     39c:	18 95       	reti
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:132
  }
  reti();
     39e:	08 95       	ret

000003a0 <SYS::WDT_SET(unsigned char)>:
_ZN3SYS7WDT_SETEh():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:133
}
     3a0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__RODATA_PM_OFFSET__+0x7f8101>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:142
/*****************
 * WDT operation *
 *****************/

void SYS::WDT_SET (uint8_t _wdt_period) {
  loop_until_bit_is_clear(WDT_STATUS, WDT_SYNCBUSY_bp);
     3a4:	90 fd       	sbrc	r25, 0
     3a6:	fc cf       	rjmp	.-8      	; 0x3a0 <SYS::WDT_SET(unsigned char)>
     3a8:	98 ed       	ldi	r25, 0xD8	; 216
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:143
  _PROTECTED_WRITE(WDT_CTRLA, _wdt_period);
     3aa:	94 bf       	out	0x34, r25	; 52
     3ac:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__RODATA_PM_OFFSET__+0x7f8100>
     3b0:	08 95       	ret

000003b2 <SYS::get_vcc()>:
_ZN3SYS7get_vccEv():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:144
}
     3b2:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:70
 * Self VCC measurement *
 ************************/

/*** This routine is exclusive to the tinyAVR-2 series. ***/
uint16_t SYS::get_vcc (void) {
  ADC0_CTRLA = ADC_ENABLE_bm;
     3b4:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__RODATA_PM_OFFSET__+0x7f8600>
     3b8:	10 92 01 06 	sts	0x0601, r1	; 0x800601 <__RODATA_PM_OFFSET__+0x7f8601>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:71
  ADC0_CTRLB = ADC_PRESC_DIV2_gc;
     3bc:	84 e5       	ldi	r24, 0x54	; 84
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:72
  ADC0_CTRLC = ADC_REFSEL_1024MV_gc | ((F_CPU / 1000000UL) << ADC_TIMEBASE_gp);
     3be:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__RODATA_PM_OFFSET__+0x7f8602>
     3c2:	81 e1       	ldi	r24, 0x11	; 17
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:73
  ADC0_CTRLE = 17; /* (SAMPDUR + 0.5) * fCLK_ADC = 10.5 µs sample duration */
     3c4:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__RODATA_PM_OFFSET__+0x7f8608>
     3c8:	91 e3       	ldi	r25, 0x31	; 49
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:74
  ADC0_MUXPOS = ADC_MUXPOS_VDDDIV10_gc; /* ADC channel VDD/10 */
     3ca:	90 93 0c 06 	sts	0x060C, r25	; 0x80060c <__RODATA_PM_OFFSET__+0x7f860c>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:75
  ADC0_COMMAND = ADC_MODE_SINGLE_12BIT_gc | ADC_START_IMMEDIATE_gc;
     3ce:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <__RODATA_PM_OFFSET__+0x7f860a>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:76
  loop_until_bit_is_set(ADC0_INTFLAGS, ADC_SAMPRDY_bp);
     3d2:	80 91 05 06 	lds	r24, 0x0605	; 0x800605 <__RODATA_PM_OFFSET__+0x7f8605>
     3d6:	81 ff       	sbrs	r24, 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:77
  uint16_t adc_reading = ADC0_SAMPLE;
     3d8:	fc cf       	rjmp	.-8      	; 0x3d2 <SYS::get_vcc()+0x20>
     3da:	20 91 14 06 	lds	r18, 0x0614	; 0x800614 <__RODATA_PM_OFFSET__+0x7f8614>
     3de:	30 91 15 06 	lds	r19, 0x0615	; 0x800615 <__RODATA_PM_OFFSET__+0x7f8615>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:78
  adc_reading += adc_reading + (adc_reading >> 1);  /* x2.5 */
     3e2:	c9 01       	movw	r24, r18
     3e4:	96 95       	lsr	r25
     3e6:	87 95       	ror	r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:79
  ADC0_CTRLA = 0;
     3e8:	22 0f       	add	r18, r18
     3ea:	33 1f       	adc	r19, r19
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:81
  return adc_reading;
}
     3ec:	10 92 00 06 	sts	0x0600, r1	; 0x800600 <__RODATA_PM_OFFSET__+0x7f8600>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:60
    return UPDI_LASTL;
  }

  /* NVMCTRL version 0 (,2,3,5) */
  bool nvm_ctrl (uint8_t nvmcmd) {
    return UPDI::st8(NVMCTRL_REG_CTRLA, nvmcmd);
     3f0:	82 0f       	add	r24, r18
     3f2:	93 1f       	adc	r25, r19
     3f4:	08 95       	ret

000003f6 <NVM::nvm_ctrl(unsigned char)>:
_ZN3NVM8nvm_ctrlEh():
     3f6:	48 2f       	mov	r20, r24
     3f8:	60 e0       	ldi	r22, 0x00	; 0
     3fa:	70 e1       	ldi	r23, 0x10	; 16
     3fc:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:64
  }

  /* NVMCTRL version 2,3,5 */
  bool nvm_ctrl_change (uint8_t nvmcmd) {
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	05 cf       	rjmp	.-502    	; 0x20c <UPDI::st8(unsigned long, unsigned char)>

00000402 <NVM::nvm_ctrl_change(unsigned char)>:
_ZN3NVM15nvm_ctrl_changeEh():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:65
    if (UPDI::ld8(NVMCTRL_REG_CTRLA) == nvmcmd) return true;
     402:	cf 93       	push	r28
     404:	c8 2f       	mov	r28, r24
     406:	60 e0       	ldi	r22, 0x00	; 0
     408:	70 e1       	ldi	r23, 0x10	; 16
     40a:	80 e0       	ldi	r24, 0x00	; 0
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	6f df       	rcall	.-290    	; 0x2ee <UPDI::ld8(unsigned long)>
     410:	8c 13       	cpse	r24, r28
     412:	03 c0       	rjmp	.+6      	; 0x41a <NVM::nvm_ctrl_change(unsigned char)+0x18>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:69
    if (!nvm_ctrl(NVM_CMD_NOCMD)) return false;
    if (NVM_CMD_NOCMD != nvmcmd) return nvm_ctrl(nvmcmd);
    return true;
  }
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	cf 91       	pop	r28
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:66
  }

  /* NVMCTRL version 2,3,5 */
  bool nvm_ctrl_change (uint8_t nvmcmd) {
    if (UPDI::ld8(NVMCTRL_REG_CTRLA) == nvmcmd) return true;
    if (!nvm_ctrl(NVM_CMD_NOCMD)) return false;
     418:	08 95       	ret
     41a:	80 e0       	ldi	r24, 0x00	; 0
     41c:	ec df       	rcall	.-40     	; 0x3f6 <NVM::nvm_ctrl(unsigned char)>
     41e:	88 23       	and	r24, r24
     420:	d1 f3       	breq	.-12     	; 0x416 <NVM::nvm_ctrl_change(unsigned char)+0x14>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:67
    if (NVM_CMD_NOCMD != nvmcmd) return nvm_ctrl(nvmcmd);
     422:	cc 23       	and	r28, r28
     424:	b9 f3       	breq	.-18     	; 0x414 <NVM::nvm_ctrl_change(unsigned char)+0x12>
     426:	8c 2f       	mov	r24, r28
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:69
    return true;
  }
     428:	cf 91       	pop	r28
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:67

  /* NVMCTRL version 2,3,5 */
  bool nvm_ctrl_change (uint8_t nvmcmd) {
    if (UPDI::ld8(NVMCTRL_REG_CTRLA) == nvmcmd) return true;
    if (!nvm_ctrl(NVM_CMD_NOCMD)) return false;
    if (NVM_CMD_NOCMD != nvmcmd) return nvm_ctrl(nvmcmd);
     42a:	e5 cf       	rjmp	.-54     	; 0x3f6 <NVM::nvm_ctrl(unsigned char)>

0000042c <JTAG2::set_response(JTAG2::jtag_response_e)>:
_ZN5JTAG212set_responseENS_15jtag_response_eE():
     42c:	ea e8       	ldi	r30, 0x8A	; 138
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:470
/*****************
 * JTAG Response *
 *****************/

void JTAG2::set_response (jtag_response_e response_code) {
  packet.size = 4;
     42e:	f8 e3       	ldi	r31, 0x38	; 56
     430:	44 e0       	ldi	r20, 0x04	; 4
     432:	50 e0       	ldi	r21, 0x00	; 0
     434:	60 e0       	ldi	r22, 0x00	; 0
     436:	70 e0       	ldi	r23, 0x00	; 0
     438:	43 83       	std	Z+3, r20	; 0x03
     43a:	54 83       	std	Z+4, r21	; 0x04
     43c:	65 83       	std	Z+5, r22	; 0x05
     43e:	76 83       	std	Z+6, r23	; 0x06
     440:	80 87       	std	Z+8, r24	; 0x08
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:472
  /* response number */
  packet.body[MESSAGE_ID] = response_code;
     442:	8c b3       	in	r24, 0x1c	; 28
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:474
  /* Internal status flag */
  packet.body[RSP_DATA    ] = UPDI_CONTROL;
     444:	81 87       	std	Z+9, r24	; 0x09
     446:	8d b3       	in	r24, 0x1d	; 29
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:475
  packet.body[RSP_DATA + 1] = UPDI_NVMCTRL;
     448:	82 87       	std	Z+10, r24	; 0x0a
     44a:	8e b3       	in	r24, 0x1e	; 30
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:476
  packet.body[RSP_DATA + 2] = UPDI_LASTL;
     44c:	83 87       	std	Z+11, r24	; 0x0b
     44e:	08 95       	ret

00000450 <_crc_ccitt_update(unsigned int, unsigned char)>:
_ZL17_crc_ccitt_updatejh():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:477
}
     450:	86 27       	eor	r24, r22
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/crc16.h:285
        "eor    %A0,__tmp_reg__"

        : "=d" (__ret)
        : "r" (__data), "0" (__crc)
        : "r0"
    );
     452:	08 2e       	mov	r0, r24
     454:	82 95       	swap	r24
     456:	80 7f       	andi	r24, 0xF0	; 240
     458:	80 25       	eor	r24, r0
     45a:	09 2e       	mov	r0, r25
     45c:	98 2f       	mov	r25, r24
     45e:	82 95       	swap	r24
     460:	8f 70       	andi	r24, 0x0F	; 15
     462:	08 26       	eor	r0, r24
     464:	86 95       	lsr	r24
     466:	98 27       	eor	r25, r24
     468:	89 27       	eor	r24, r25
     46a:	88 0f       	add	r24, r24
     46c:	88 0f       	add	r24, r24
     46e:	88 0f       	add	r24, r24
     470:	80 25       	eor	r24, r0
     472:	08 95       	ret

00000474 <JTAG2::answer_transfer()>:
_ZN5JTAG215answer_transferEv():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/crc16.h:287
    return __ret;
}
     474:	af 92       	push	r10
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:150

  /***************
   * JTAG Answer *
   ***************/

  void answer_transfer (void) {
     476:	bf 92       	push	r11
     478:	cf 92       	push	r12
     47a:	df 92       	push	r13
     47c:	ef 92       	push	r14
     47e:	ff 92       	push	r15
     480:	0f 93       	push	r16
     482:	1f 93       	push	r17
     484:	cf 93       	push	r28
     486:	df 93       	push	r29
     488:	00 d0       	rcall	.+0      	; 0x48a <JTAG2::answer_transfer()+0x16>
     48a:	cd b7       	in	r28, 0x3d	; 61
     48c:	de b7       	in	r29, 0x3e	; 62
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:151
    uint16_t _crc = ~0;
     48e:	8f ef       	ldi	r24, 0xFF	; 255
     490:	9f ef       	ldi	r25, 0xFF	; 255
     492:	89 83       	std	Y+1, r24	; 0x01
     494:	9a 83       	std	Y+2, r25	; 0x02
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:152
    int16_t _len = packet.size_word[0] + 8;
     496:	e0 90 8d 38 	lds	r14, 0x388D	; 0x80388d <JTAG2::packet+0x3>
     49a:	f0 90 8e 38 	lds	r15, 0x388E	; 0x80388e <JTAG2::packet+0x4>
     49e:	87 01       	movw	r16, r14
     4a0:	08 5f       	subi	r16, 0xF8	; 248
     4a2:	1f 4f       	sbci	r17, 0xFF	; 255
     4a4:	8a e8       	ldi	r24, 0x8A	; 138
     4a6:	c8 2e       	mov	r12, r24
     4a8:	88 e3       	ldi	r24, 0x38	; 56
     4aa:	d8 2e       	mov	r13, r24
     4ac:	56 01       	movw	r10, r12
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	e8 1a       	sub	r14, r24
     4b2:	f1 08       	sbc	r15, r1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:155
    uint8_t *_p = (uint8_t*) &packet.soh;
    uint8_t *_q = (uint8_t*) &packet.soh;
    while (_len--) _crc = crc16_update(_crc, *_q++);
     4b4:	a7 ef       	ldi	r26, 0xF7	; 247
     4b6:	ea 16       	cp	r14, r26
     4b8:	af ef       	ldi	r26, 0xFF	; 255
     4ba:	fa 06       	cpc	r15, r26
     4bc:	49 f0       	breq	.+18     	; 0x4d0 <JTAG2::answer_transfer()+0x5c>
     4be:	f5 01       	movw	r30, r10
     4c0:	61 91       	ld	r22, Z+
     4c2:	5f 01       	movw	r10, r30
crc16_update():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:101
  void flush (void) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_TXCIF_bp);
  }

  uint16_t crc16_update(uint16_t _crc, uint8_t _data) {
    return _crc_ccitt_update(_crc, _data);
     4c4:	89 81       	ldd	r24, Y+1	; 0x01
     4c6:	9a 81       	ldd	r25, Y+2	; 0x02
     4c8:	c3 df       	rcall	.-122    	; 0x450 <_crc_ccitt_update(unsigned int, unsigned char)>
_ZN5JTAG215answer_transferEv():
     4ca:	89 83       	std	Y+1, r24	; 0x01
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:155
  void answer_transfer (void) {
    uint16_t _crc = ~0;
    int16_t _len = packet.size_word[0] + 8;
    uint8_t *_p = (uint8_t*) &packet.soh;
    uint8_t *_q = (uint8_t*) &packet.soh;
    while (_len--) _crc = crc16_update(_crc, *_q++);
     4cc:	9a 83       	std	Y+2, r25	; 0x02
     4ce:	ef cf       	rjmp	.-34     	; 0x4ae <JTAG2::answer_transfer()+0x3a>
     4d0:	f8 01       	movw	r30, r16
     4d2:	e6 57       	subi	r30, 0x76	; 118
     4d4:	f7 4c       	sbci	r31, 0xC7	; 199
     4d6:	89 81       	ldd	r24, Y+1	; 0x01
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:156
    (*_q++) = _CAPS16(_crc)->bytes[0];
     4d8:	80 83       	st	Z, r24
     4da:	8a 81       	ldd	r24, Y+2	; 0x02
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:157
    (*_q++) = _CAPS16(_crc)->bytes[1];
     4dc:	81 83       	std	Z+1, r24	; 0x01
     4de:	2f b7       	in	r18, 0x3f	; 63
__iCliRetVal():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:158
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     4e0:	f8 94       	cli
_ZN5JTAG215answer_transferEv():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     4e2:	32 96       	adiw	r30, 0x02	; 2
put():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:157
    int16_t _len = packet.size_word[0] + 8;
    uint8_t *_p = (uint8_t*) &packet.soh;
    uint8_t *_q = (uint8_t*) &packet.soh;
    while (_len--) _crc = crc16_update(_crc, *_q++);
    (*_q++) = _CAPS16(_crc)->bytes[0];
    (*_q++) = _CAPS16(_crc)->bytes[1];
     4e4:	90 e4       	ldi	r25, 0x40	; 64
_ZN5JTAG215answer_transferEv():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:92
    return JTAG_USART.RXDATAL;
  }

  uint8_t put (uint8_t _data) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_DREIF_bp);
    JTAG_USART.STATUS = USART_TXCIF_bm;
     4e6:	ce 16       	cp	r12, r30
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:159
    uint8_t *_q = (uint8_t*) &packet.soh;
    while (_len--) _crc = crc16_update(_crc, *_q++);
    (*_q++) = _CAPS16(_crc)->bytes[0];
    (*_q++) = _CAPS16(_crc)->bytes[1];
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
      while (_p != _q) put(*_p++);
     4e8:	df 06       	cpc	r13, r31
     4ea:	71 f4       	brne	.+28     	; 0x508 <JTAG2::answer_transfer()+0x94>
__iRestore():
     4ec:	2f bf       	out	0x3f, r18	; 63
_ZN5JTAG215answer_transferEv():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:161
    }
  }
     4ee:	0f 90       	pop	r0
     4f0:	0f 90       	pop	r0
     4f2:	df 91       	pop	r29
     4f4:	cf 91       	pop	r28
     4f6:	1f 91       	pop	r17
     4f8:	0f 91       	pop	r16
     4fa:	ff 90       	pop	r15
     4fc:	ef 90       	pop	r14
     4fe:	df 90       	pop	r13
     500:	cf 90       	pop	r12
     502:	bf 90       	pop	r11
     504:	af 90       	pop	r10
     506:	08 95       	ret
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:159
    uint8_t *_q = (uint8_t*) &packet.soh;
    while (_len--) _crc = crc16_update(_crc, *_q++);
    (*_q++) = _CAPS16(_crc)->bytes[0];
    (*_q++) = _CAPS16(_crc)->bytes[1];
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
      while (_p != _q) put(*_p++);
     508:	d6 01       	movw	r26, r12
     50a:	8d 91       	ld	r24, X+
     50c:	6d 01       	movw	r12, r26
put():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:91
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_RXCIF_bp);
    return JTAG_USART.RXDATAL;
  }

  uint8_t put (uint8_t _data) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_DREIF_bp);
     50e:	30 91 24 08 	lds	r19, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
     512:	35 ff       	sbrs	r19, 5
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:92
    JTAG_USART.STATUS = USART_TXCIF_bm;
     514:	fc cf       	rjmp	.-8      	; 0x50e <JTAG2::answer_transfer()+0x9a>
     516:	90 93 24 08 	sts	0x0824, r25	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:93
    return JTAG_USART.TXDATAL = _data;
     51a:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <__RODATA_PM_OFFSET__+0x7f8822>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:377
  } while (--limit);
  return false;
}

/* __attribute__((optimize("O0"))) */
bool UPDI::loop_until_key_stat_is_set (uint8_t bitmap, uint16_t limit) {
     51e:	e3 cf       	rjmp	.-58     	; 0x4e6 <JTAG2::answer_transfer()+0x72>

00000520 <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.20]>:
_ZN4UPDI26loop_until_key_stat_is_setEhj.constprop.20():
     520:	1f 93       	push	r17
     522:	cf 93       	push	r28
     524:	df 93       	push	r29
     526:	18 2f       	mov	r17, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:297
  send_bytes(set_ptr, sizeof(set_ptr));
  return RECV();
}

bool UPDI::is_cs_stat (uint8_t code, uint8_t check) {
  return check == (get_cs_stat(code) & check);
     528:	d0 e0       	ldi	r29, 0x00	; 0
     52a:	c0 e0       	ldi	r28, 0x00	; 0
is_cs_stat():
     52c:	87 e0       	ldi	r24, 0x07	; 7
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:382
bool UPDI::loop_until_key_stat_is_set (uint8_t bitmap, uint16_t limit) {
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  uint16_t _back = _send_ptr;
  #endif
  do {
    if (is_key_stat(bitmap)) return true;
     52e:	66 de       	rcall	.-820    	; 0x1fc <UPDI::get_cs_stat(unsigned char)>
     530:	81 23       	and	r24, r17
_ZN4UPDI26loop_until_key_stat_is_setEhj.constprop.20():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.8/cores/megaAVR/api/delay_busywait.h:31
static __inline__ __attribute__((__always_inline__)) void delay_micros (uint32_t _us);
static __inline__ __attribute__((__always_inline__)) void delay_millis (uint32_t _ms);

void delay_micros (uint32_t _us) {
  if (F_CPU >= 1000000L) {
    __builtin_avr_delay_cycles((F_CPU / 1000000L) * _us);
     532:	18 17       	cp	r17, r24
     534:	59 f0       	breq	.+22     	; 0x54c <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.20]+0x2c>
delay_micros():
     536:	86 ea       	ldi	r24, 0xA6	; 166
     538:	8a 95       	dec	r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:387
    #ifdef ENABLE_DEBUG_UPDI_SENDER
    _send_ptr = _back;
    #endif
    TIM::delay_50us();
  } while (--limit);
     53a:	f1 f7       	brne	.-4      	; 0x538 <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.20]+0x18>
     53c:	00 c0       	rjmp	.+0      	; 0x53e <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.20]+0x1e>
_ZN4UPDI26loop_until_key_stat_is_setEhj.constprop.20():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:388
  return false;
     53e:	21 97       	sbiw	r28, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:389
}
     540:	a9 f7       	brne	.-22     	; 0x52c <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.20]+0xc>
     542:	80 e0       	ldi	r24, 0x00	; 0
     544:	df 91       	pop	r29
     546:	cf 91       	pop	r28
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:382
bool UPDI::loop_until_key_stat_is_set (uint8_t bitmap, uint16_t limit) {
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  uint16_t _back = _send_ptr;
  #endif
  do {
    if (is_key_stat(bitmap)) return true;
     548:	1f 91       	pop	r17
     54a:	08 95       	ret
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:393
  return false;
}

/* __attribute__((optimize("O0"))) */
bool UPDI::set_nvmprog_key (void) {
  if (!send_bytes(nvmprog_key, sizeof(nvmprog_key))) return false;
     54c:	81 e0       	ldi	r24, 0x01	; 1
     54e:	fa cf       	rjmp	.-12     	; 0x544 <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.20]+0x24>

00000550 <UPDI::set_nvmprog_key()>:
_ZN4UPDI15set_nvmprog_keyEv():
     550:	6a e0       	ldi	r22, 0x0A	; 10
     552:	86 e1       	ldi	r24, 0x16	; 22
     554:	98 e3       	ldi	r25, 0x38	; 56
     556:	ff dd       	rcall	.-1026   	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:394
  return loop_until_key_stat_is_set(UPDI_KEY_NVMPROG);
     558:	88 23       	and	r24, r24
     55a:	11 f0       	breq	.+4      	; 0x560 <UPDI::set_nvmprog_key()+0x10>
     55c:	80 e1       	ldi	r24, 0x10	; 16
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:395
}
     55e:	e0 cf       	rjmp	.-64     	; 0x520 <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.20]>
     560:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:347
  } while (--limit);
  return false;
}

/* __attribute__((optimize("O0"))) */
bool UPDI::loop_until_sys_stat_is_set (uint8_t bitmap, uint16_t limit) {
     562:	08 95       	ret

00000564 <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.23]>:
_ZN4UPDI26loop_until_sys_stat_is_setEhj.constprop.23():
     564:	1f 93       	push	r17
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
     56a:	18 2f       	mov	r17, r24
     56c:	d0 e0       	ldi	r29, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:297
  send_bytes(set_ptr, sizeof(set_ptr));
  return RECV();
}

bool UPDI::is_cs_stat (uint8_t code, uint8_t check) {
  return check == (get_cs_stat(code) & check);
     56e:	c0 e0       	ldi	r28, 0x00	; 0
is_cs_stat():
     570:	8b e0       	ldi	r24, 0x0B	; 11
     572:	44 de       	rcall	.-888    	; 0x1fc <UPDI::get_cs_stat(unsigned char)>
     574:	81 23       	and	r24, r17
_ZN4UPDI26loop_until_sys_stat_is_setEhj.constprop.23():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:352
bool UPDI::loop_until_sys_stat_is_set (uint8_t bitmap, uint16_t limit) {
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  uint16_t _back = _send_ptr;
  #endif
  do {
    if (is_sys_stat(bitmap)) return true;
     576:	18 17       	cp	r17, r24
     578:	59 f0       	breq	.+22     	; 0x590 <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.23]+0x2c>
delay_micros():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.8/cores/megaAVR/api/delay_busywait.h:31
     57a:	86 ea       	ldi	r24, 0xA6	; 166
     57c:	8a 95       	dec	r24
     57e:	f1 f7       	brne	.-4      	; 0x57c <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.23]+0x18>
     580:	00 c0       	rjmp	.+0      	; 0x582 <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.23]+0x1e>
_ZN4UPDI26loop_until_sys_stat_is_setEhj.constprop.23():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:357
    #ifdef ENABLE_DEBUG_UPDI_SENDER
    _send_ptr = _back;
    #endif
    TIM::delay_50us();
  } while (--limit);
     582:	21 97       	sbiw	r28, 0x01	; 1
     584:	a9 f7       	brne	.-22     	; 0x570 <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.23]+0xc>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:358
  return false;
     586:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:359
}
     588:	df 91       	pop	r29
     58a:	cf 91       	pop	r28
     58c:	1f 91       	pop	r17
     58e:	08 95       	ret
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:352
bool UPDI::loop_until_sys_stat_is_set (uint8_t bitmap, uint16_t limit) {
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  uint16_t _back = _send_ptr;
  #endif
  do {
    if (is_sys_stat(bitmap)) return true;
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	fa cf       	rjmp	.-12     	; 0x588 <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.23]+0x24>

00000594 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>:
_ZN4UPDI28loop_until_sys_stat_is_clearEhj():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:332
uint8_t UPDI::get_cs_asi_ctra (void) {
  return get_cs_stat(UPDI_CS_ASI_CTRLA);
}

/* __attribute__((optimize("O0"))) */
bool UPDI::loop_until_sys_stat_is_clear (uint8_t bitmap, uint16_t limit) {
     594:	1f 93       	push	r17
     596:	cf 93       	push	r28
     598:	df 93       	push	r29
     59a:	18 2f       	mov	r17, r24
     59c:	eb 01       	movw	r28, r22
is_cs_stat():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:297
  send_bytes(set_ptr, sizeof(set_ptr));
  return RECV();
}

bool UPDI::is_cs_stat (uint8_t code, uint8_t check) {
  return check == (get_cs_stat(code) & check);
     59e:	8b e0       	ldi	r24, 0x0B	; 11
     5a0:	2d de       	rcall	.-934    	; 0x1fc <UPDI::get_cs_stat(unsigned char)>
     5a2:	81 23       	and	r24, r17
_ZN4UPDI28loop_until_sys_stat_is_clearEhj():
     5a4:	18 13       	cpse	r17, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:337
bool UPDI::loop_until_sys_stat_is_clear (uint8_t bitmap, uint16_t limit) {
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  uint16_t _back = _send_ptr;
  #endif
  do {
    if (!is_sys_stat(bitmap)) return true;
     5a6:	0b c0       	rjmp	.+22     	; 0x5be <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)+0x2a>
delay_micros():
     5a8:	86 ea       	ldi	r24, 0xA6	; 166
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.8/cores/megaAVR/api/delay_busywait.h:31
     5aa:	8a 95       	dec	r24
     5ac:	f1 f7       	brne	.-4      	; 0x5aa <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)+0x16>
     5ae:	00 c0       	rjmp	.+0      	; 0x5b0 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)+0x1c>
_ZN4UPDI28loop_until_sys_stat_is_clearEhj():
     5b0:	21 97       	sbiw	r28, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:342
    #ifdef ENABLE_DEBUG_UPDI_SENDER
    _send_ptr = _back;
    #endif
    TIM::delay_50us();
  } while (--limit);
     5b2:	a9 f7       	brne	.-22     	; 0x59e <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)+0xa>
     5b4:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:343
  return false;
     5b6:	df 91       	pop	r29
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:344
}
     5b8:	cf 91       	pop	r28
     5ba:	1f 91       	pop	r17
     5bc:	08 95       	ret
     5be:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:337
bool UPDI::loop_until_sys_stat_is_clear (uint8_t bitmap, uint16_t limit) {
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  uint16_t _back = _send_ptr;
  #endif
  do {
    if (!is_sys_stat(bitmap)) return true;
     5c0:	fa cf       	rjmp	.-12     	; 0x5b6 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)+0x22>

000005c2 <UPDI::HV_Pulse()>:
_ZN4UPDI8HV_PulseEv():
     5c2:	80 91 60 38 	lds	r24, 0x3860	; 0x803860 <JTAG2::updi_desc+0x2>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:425

void UPDI::HV_Pulse (void) {
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  UPDI::_send_buf_push(JTAG2::updi_desc.hvupdi_variant);
  #endif
  if (JTAG2::updi_desc.hvupdi_variant != '0'
     5c6:	8d 7f       	andi	r24, 0xFD	; 253
     5c8:	80 33       	cpi	r24, 0x30	; 48
     5ca:	09 f0       	breq	.+2      	; 0x5ce <UPDI::HV_Pulse()+0xc>
     5cc:	38 c0       	rjmp	.+112    	; 0x63e <UPDI::HV_Pulse()+0x7c>
HV_Pulse_ON():
     5ce:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__RODATA_PM_OFFSET__+0x7f8a01>
_ZN4UPDI8HV_PulseEv():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:432

  /* Run high voltage generator */
  TIM::HV_Pulse_ON();

  /* Perform a hardware reset (if wired) */
  openDrainWrite(TRST_PIN, LOW);
     5d2:	21 9a       	sbi	0x04, 1	; 4
delay_micros():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.8/cores/megaAVR/api/delay_busywait.h:31
     5d4:	86 ea       	ldi	r24, 0xA6	; 166
     5d6:	8a 95       	dec	r24
     5d8:	f1 f7       	brne	.-4      	; 0x5d6 <UPDI::HV_Pulse()+0x14>
     5da:	00 c0       	rjmp	.+0      	; 0x5dc <UPDI::HV_Pulse()+0x1a>
_ZN4UPDI8HV_PulseEv():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:434
  TIM::delay_50us();
  openDrainWrite(TRST_PIN, HIGH);
     5dc:	21 98       	cbi	0x04, 1	; 4
delay_micros():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.8/cores/megaAVR/api/delay_busywait.h:31
     5de:	8f ec       	ldi	r24, 0xCF	; 207
     5e0:	97 e0       	ldi	r25, 0x07	; 7
     5e2:	01 97       	sbiw	r24, 0x01	; 1
     5e4:	f1 f7       	brne	.-4      	; 0x5e2 <UPDI::HV_Pulse()+0x20>
     5e6:	00 c0       	rjmp	.+0      	; 0x5e8 <UPDI::HV_Pulse()+0x26>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:438
  TIM::delay_800us();
  /* During this time, raise the circuit to sufficient voltage */

  if (JTAG2::updi_desc.hvupdi_variant == '0')
     5e8:	00 00       	nop
_ZN4UPDI8HV_PulseEv():
     5ea:	80 91 60 38 	lds	r24, 0x3860	; 0x803860 <JTAG2::updi_desc+0x2>
     5ee:	80 33       	cpi	r24, 0x30	; 48
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:439
    digitalWrite(HV12_PIN, HIGH);
     5f0:	11 f5       	brne	.+68     	; 0x636 <UPDI::HV_Pulse()+0x74>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.8/cores/megaAVR/api/delay_busywait.h:31
     5f2:	0e 9a       	sbi	0x01, 6	; 1
delay_micros():
     5f4:	8f ec       	ldi	r24, 0xCF	; 207
     5f6:	97 e0       	ldi	r25, 0x07	; 7
     5f8:	01 97       	sbiw	r24, 0x01	; 1
     5fa:	f1 f7       	brne	.-4      	; 0x5f8 <UPDI::HV_Pulse()+0x36>
     5fc:	00 c0       	rjmp	.+0      	; 0x5fe <UPDI::HV_Pulse()+0x3c>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:446
    digitalWrite(HV8_PIN, HIGH);

  /* Apply high voltage only for the required time */
  TIM::delay_800us();

  if (JTAG2::updi_desc.hvupdi_variant == '0')
     5fe:	00 00       	nop
_ZN4UPDI8HV_PulseEv():
     600:	80 91 60 38 	lds	r24, 0x3860	; 0x803860 <JTAG2::updi_desc+0x2>
     604:	80 33       	cpi	r24, 0x30	; 48
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:447
    digitalWrite(HV12_PIN, LOW);
     606:	c9 f4       	brne	.+50     	; 0x63a <UPDI::HV_Pulse()+0x78>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:195
void TIM::HV_Pulse_ON (void) {
  TCA0_SPLIT_CTRLB = TCA_SPLIT_HCMP0EN_bm | TCA_SPLIT_HCMP1EN_bm;
}

void TIM::HV_Pulse_OFF (void) {
  TCA0_SPLIT_CTRLB = 0;
     608:	0e 98       	cbi	0x01, 6	; 1
HV_Pulse_OFF():
     60a:	10 92 01 0a 	sts	0x0A01, r1	; 0x800a01 <__RODATA_PM_OFFSET__+0x7f8a01>
_ZN4UPDI8HV_PulseEv():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:454
    digitalWrite(HV8_PIN, LOW);

  TIM::HV_Pulse_OFF();

  /* Keep the UPDI signal low for as long as necessary */
  UPDI_USART.BAUD = UPDI_BAUD_SHORT_BREAK;
     60e:	88 ee       	ldi	r24, 0xE8	; 232
     610:	93 e0       	ldi	r25, 0x03	; 3
     612:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__RODATA_PM_OFFSET__+0x7f8808>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:455
  SEND(UPDI_NOP);
     616:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__RODATA_PM_OFFSET__+0x7f8809>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:456
  UPDI_USART.BAUD = UPDI_BAUD_CALC;
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	82 dd       	rcall	.-1276   	; 0x122 <UPDI::SEND(unsigned char)>
     61e:	80 eb       	ldi	r24, 0xB0	; 176
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__RODATA_PM_OFFSET__+0x7f8808>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:459

  bit_clear(UPDI_CONTROL, UPDI_CLKU_bp);
  bit_set(UPDI_CONTROL, UPDI_ERHV_bp);
     626:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__RODATA_PM_OFFSET__+0x7f8809>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:462

  /* Wait for system reset to finish */
  loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
     62a:	e6 98       	cbi	0x1c, 6	; 28
     62c:	e3 9a       	sbi	0x1c, 3	; 28
     62e:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:441
  /* During this time, raise the circuit to sufficient voltage */

  if (JTAG2::updi_desc.hvupdi_variant == '0')
    digitalWrite(HV12_PIN, HIGH);
  else
    digitalWrite(HV8_PIN, HIGH);
     630:	60 e0       	ldi	r22, 0x00	; 0
     632:	80 e2       	ldi	r24, 0x20	; 32
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:449
  TIM::delay_800us();

  if (JTAG2::updi_desc.hvupdi_variant == '0')
    digitalWrite(HV12_PIN, LOW);
  else
    digitalWrite(HV8_PIN, LOW);
     634:	af cf       	rjmp	.-162    	; 0x594 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:463
  bit_clear(UPDI_CONTROL, UPDI_CLKU_bp);
  bit_set(UPDI_CONTROL, UPDI_ERHV_bp);

  /* Wait for system reset to finish */
  loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
}
     636:	2d 9a       	sbi	0x05, 5	; 5
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:563

/**********************
 * UPDI control start *
 **********************/

bool UPDI::enter_updi (bool skip) {
     638:	dd cf       	rjmp	.-70     	; 0x5f4 <UPDI::HV_Pulse()+0x32>
     63a:	2d 98       	cbi	0x05, 5	; 5
     63c:	e6 cf       	rjmp	.-52     	; 0x60a <UPDI::HV_Pulse()+0x48>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:565
  /* Release the physical reset */
  openDrainWrite(TRST_PIN, HIGH);
     63e:	08 95       	ret

00000640 <UPDI::enter_updi(bool)>:
_ZN4UPDI10enter_updiEb():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:566
  JTAG2::updi_desc.signature[0] = 0;
     640:	0f 93       	push	r16
     642:	1f 93       	push	r17
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:567
  JTAG2::updi_desc.signature[1] = 0;
     644:	cf 93       	push	r28
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:568
  JTAG2::updi_desc.signature[2] = 0;
     646:	df 93       	push	r29
     648:	21 98       	cbi	0x04, 1	; 4
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:571

  /* target reset deactive */
  if (!skip) {
     64a:	10 92 65 38 	sts	0x3865, r1	; 0x803865 <JTAG2::updi_desc+0x7>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:573
    /* HV control forced permission */
    if (bit_is_set(UPDI_CONTROL, UPDI_FCHV_bp)) {
     64e:	10 92 66 38 	sts	0x3866, r1	; 0x803866 <JTAG2::updi_desc+0x8>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:574
      HV_Pulse();
     652:	10 92 67 38 	sts	0x3867, r1	; 0x803867 <JTAG2::updi_desc+0x9>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:575
      loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS, 500);
     656:	81 11       	cpse	r24, r1
     658:	1f c0       	rjmp	.+62     	; 0x698 <UPDI::enter_updi(bool)+0x58>
     65a:	e4 9b       	sbis	0x1c, 4	; 28
     65c:	59 c0       	rjmp	.+178    	; 0x710 <UPDI::enter_updi(bool)+0xd0>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:576
      JTAG2::updi_desc.signature[0] = 0xff;
     65e:	b1 df       	rcall	.-158    	; 0x5c2 <UPDI::HV_Pulse()>
     660:	64 ef       	ldi	r22, 0xF4	; 244
     662:	71 e0       	ldi	r23, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:577
      JTAG2::updi_desc.signature[1] = 0xff;
     664:	80 e2       	ldi	r24, 0x20	; 32
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:578
      JTAG2::updi_desc.signature[2] = 0xff;
     666:	96 df       	rcall	.-212    	; 0x594 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
     668:	8f ef       	ldi	r24, 0xFF	; 255
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:581

      /* send nvmprog_key */
      if (!set_nvmprog_key()) return false;
     66a:	80 93 65 38 	sts	0x3865, r24	; 0x803865 <JTAG2::updi_desc+0x7>
     66e:	80 93 66 38 	sts	0x3866, r24	; 0x803866 <JTAG2::updi_desc+0x8>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:645
        /* Version 4 is now considered the same as 2. */
        bit_set(UPDI_NVMCTRL, UPDI_GEN2_bp);
        break;
      }
      default : {
        return false;
     672:	80 93 67 38 	sts	0x3867, r24	; 0x803867 <JTAG2::updi_desc+0x9>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:584

      /* send nvmprog_key */
      if (!set_nvmprog_key()) return false;

      /* restart target : change mode */
      if (!updi_reset(true) || !updi_reset(false)) return false;
     676:	6c df       	rcall	.-296    	; 0x550 <UPDI::set_nvmprog_key()>
     678:	81 11       	cpse	r24, r1
     67a:	02 c0       	rjmp	.+4      	; 0x680 <UPDI::enter_updi(bool)+0x40>
     67c:	80 e0       	ldi	r24, 0x00	; 0
     67e:	6b c0       	rjmp	.+214    	; 0x756 <UPDI::enter_updi(bool)+0x116>
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	42 de       	rcall	.-892    	; 0x308 <UPDI::updi_reset(bool)>
     684:	88 23       	and	r24, r24
     686:	d1 f3       	breq	.-12     	; 0x67c <UPDI::enter_updi(bool)+0x3c>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:585
      loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
     688:	80 e0       	ldi	r24, 0x00	; 0
     68a:	3e de       	rcall	.-900    	; 0x308 <UPDI::updi_reset(bool)>
     68c:	88 23       	and	r24, r24
     68e:	b1 f3       	breq	.-20     	; 0x67c <UPDI::enter_updi(bool)+0x3c>
     690:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:590
    }
    else
      BREAK();
  }
  if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) {
     692:	60 e0       	ldi	r22, 0x00	; 0
     694:	80 e2       	ldi	r24, 0x20	; 32
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:320
  set_ptr[2] = data;
  return send_bytes(set_ptr, sizeof(set_ptr));
}

bool UPDI::set_cs_ctra (uint8_t data) {
  return set_cs_stat(UPDI_CS_CTRLA, data);
     696:	7e df       	rcall	.-260    	; 0x594 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
     698:	e0 99       	sbic	0x1c, 0	; 28
     69a:	50 c0       	rjmp	.+160    	; 0x73c <UPDI::enter_updi(bool)+0xfc>
set_cs_ctra():
     69c:	66 e0       	ldi	r22, 0x06	; 6
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:592
    else
      BREAK();
  }
  if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) {
    /* Minimize guard time */
    if (!set_cs_ctra(UPDI_GTVAL)) return false;
     69e:	82 e0       	ldi	r24, 0x02	; 2
     6a0:	6b dd       	rcall	.-1322   	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>
_ZN4UPDI10enter_updiEb():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:594

    JTAG2::updi_desc.signature[0] = 0xff;
     6a2:	88 23       	and	r24, r24
     6a4:	59 f3       	breq	.-42     	; 0x67c <UPDI::enter_updi(bool)+0x3c>
     6a6:	8f ef       	ldi	r24, 0xFF	; 255
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:595
    JTAG2::updi_desc.signature[1] = 0xff;
     6a8:	80 93 65 38 	sts	0x3865, r24	; 0x803865 <JTAG2::updi_desc+0x7>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:596
    JTAG2::updi_desc.signature[2] = 0xff;
     6ac:	80 93 66 38 	sts	0x3866, r24	; 0x803866 <JTAG2::updi_desc+0x8>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:297
  send_bytes(set_ptr, sizeof(set_ptr));
  return RECV();
}

bool UPDI::is_cs_stat (uint8_t code, uint8_t check) {
  return check == (get_cs_stat(code) & check);
     6b0:	80 93 67 38 	sts	0x3867, r24	; 0x803867 <JTAG2::updi_desc+0x9>
is_cs_stat():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:598

    JTAG2::updi_desc.signature[0] = 0xff;
    JTAG2::updi_desc.signature[1] = 0xff;
    JTAG2::updi_desc.signature[2] = 0xff;

    if (is_sys_stat(UPDI_SYS_RSTSYS)) {
     6b4:	8b e0       	ldi	r24, 0x0B	; 11
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:412
}

bool UPDI::read_sib (uint8_t *s_ptr) {
  static uint8_t set_ptr[] = { UPDI_SYNCH, UPDI_SIB_256 };
  uint8_t _len = 32;
  if (!send_bytes(set_ptr, sizeof(set_ptr))) return false;
     6b6:	a2 dd       	rcall	.-1212   	; 0x1fc <UPDI::get_cs_stat(unsigned char)>
_ZN4UPDI10enter_updiEb():
     6b8:	85 fd       	sbrc	r24, 5
     6ba:	2c c0       	rjmp	.+88     	; 0x714 <UPDI::enter_updi(bool)+0xd4>
read_sib():
     6bc:	62 e0       	ldi	r22, 0x02	; 2
     6be:	80 e2       	ldi	r24, 0x20	; 32
     6c0:	98 e3       	ldi	r25, 0x38	; 56
     6c2:	49 dd       	rcall	.-1390   	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     6c4:	ca e6       	ldi	r28, 0x6A	; 106
     6c6:	d8 e3       	ldi	r29, 0x38	; 56
     6c8:	0a e8       	ldi	r16, 0x8A	; 138
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:413
  do { *s_ptr++ = RECV(); } while (--_len);
     6ca:	18 e3       	ldi	r17, 0x38	; 56
     6cc:	88 23       	and	r24, r24
     6ce:	b1 f2       	breq	.-84     	; 0x67c <UPDI::enter_updi(bool)+0x3c>
     6d0:	1c dd       	rcall	.-1480   	; 0x10a <UPDI::RECV()>
     6d2:	89 93       	st	Y+, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:607

    /*** Get System Information Block ***/
    /* Determine system requirements not announced by host control here */
    uint8_t* _p = &JTAG2::updi_desc.sib[0];
    if (!read_sib(_p)) return false;
    JTAG2::updi_desc.nvmctrl_version = _p[10];
     6d4:	0c 17       	cp	r16, r28
     6d6:	1d 07       	cpc	r17, r29
     6d8:	d9 f7       	brne	.-10     	; 0x6d0 <UPDI::enter_updi(bool)+0x90>
_ZN4UPDI10enter_updiEb():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:608
    JTAG2::updi_desc.signature[0] = 0x1e;
     6da:	90 91 74 38 	lds	r25, 0x3874	; 0x803874 <JTAG2::updi_desc+0x16>
     6de:	90 93 61 38 	sts	0x3861, r25	; 0x803861 <JTAG2::updi_desc+0x3>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:609
    JTAG2::updi_desc.signature[1] = _p[0];
     6e2:	8e e1       	ldi	r24, 0x1E	; 30
     6e4:	80 93 65 38 	sts	0x3865, r24	; 0x803865 <JTAG2::updi_desc+0x7>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:610
    JTAG2::updi_desc.signature[2] = _p[10];
     6e8:	80 91 6a 38 	lds	r24, 0x386A	; 0x80386a <JTAG2::updi_desc+0xc>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:611
    switch (_p[0]) {
     6ec:	80 93 66 38 	sts	0x3866, r24	; 0x803866 <JTAG2::updi_desc+0x8>
     6f0:	90 93 67 38 	sts	0x3867, r25	; 0x803867 <JTAG2::updi_desc+0x9>
     6f4:	81 34       	cpi	r24, 0x41	; 65
     6f6:	21 f0       	breq	.+8      	; 0x700 <UPDI::enter_updi(bool)+0xc0>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:630
        /* AVR Dx SIB = 'AVR     P:2D:1-3' */
        /* AVR DA SIB = '    AVR P:2D:1-3' (Regacy) */
        /* AVR EA SIB = 'AVR     P:3D:1-3' */
        /* AVR DU SIB = 'AVR     P:4D:1-3' */
        /* AVR EB SIB = 'AVR     P:5D:1-3' */
        JTAG2::updi_desc.signature[1] = 'A';
     6f8:	b0 f4       	brcc	.+44     	; 0x726 <UPDI::enter_updi(bool)+0xe6>
     6fa:	80 32       	cpi	r24, 0x20	; 32
     6fc:	09 f0       	breq	.+2      	; 0x700 <UPDI::enter_updi(bool)+0xc0>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:631
        if (JTAG2::updi_desc.nvmctrl_version == '3') {
     6fe:	be cf       	rjmp	.-132    	; 0x67c <UPDI::enter_updi(bool)+0x3c>
     700:	81 e4       	ldi	r24, 0x41	; 65
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:638
          bit_set(UPDI_NVMCTRL, UPDI_GEN3_bp);
        }
        else if (JTAG2::updi_desc.nvmctrl_version == '5') {
          // 'AVR_EB' series
          bit_set(UPDI_NVMCTRL, UPDI_GEN5_bp);
          bit_set(UPDI_NVMCTRL, UPDI_GEN3_bp);
     702:	80 93 66 38 	sts	0x3866, r24	; 0x803866 <JTAG2::updi_desc+0x8>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:641
        }
        /* Version 4 is now considered the same as 2. */
        bit_set(UPDI_NVMCTRL, UPDI_GEN2_bp);
     706:	93 33       	cpi	r25, 0x33	; 51
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:588
      /* restart target : change mode */
      if (!updi_reset(true) || !updi_reset(false)) return false;
      loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
    }
    else
      BREAK();
     708:	69 f5       	brne	.+90     	; 0x764 <UPDI::enter_updi(bool)+0x124>
     70a:	ed 9a       	sbi	0x1d, 5	; 29
     70c:	ee 9a       	sbi	0x1d, 6	; 29
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:599
    JTAG2::updi_desc.signature[0] = 0xff;
    JTAG2::updi_desc.signature[1] = 0xff;
    JTAG2::updi_desc.signature[2] = 0xff;

    if (is_sys_stat(UPDI_SYS_RSTSYS)) {
      UPDI::Target_Reset(false);
     70e:	10 c0       	rjmp	.+32     	; 0x730 <UPDI::enter_updi(bool)+0xf0>
     710:	dc dd       	rcall	.-1096   	; 0x2ca <UPDI::BREAK()>
     712:	c2 cf       	rjmp	.-124    	; 0x698 <UPDI::enter_updi(bool)+0x58>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:600
      if (!loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS, 500)) return false;
     714:	80 e0       	ldi	r24, 0x00	; 0
     716:	fd dd       	rcall	.-1030   	; 0x312 <UPDI::Target_Reset(bool)>
     718:	64 ef       	ldi	r22, 0xF4	; 244
     71a:	71 e0       	ldi	r23, 0x01	; 1
     71c:	80 e2       	ldi	r24, 0x20	; 32
     71e:	3a df       	rcall	.-396    	; 0x594 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
     720:	81 11       	cpse	r24, r1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:611
    if (!read_sib(_p)) return false;
    JTAG2::updi_desc.nvmctrl_version = _p[10];
    JTAG2::updi_desc.signature[0] = 0x1e;
    JTAG2::updi_desc.signature[1] = _p[0];
    JTAG2::updi_desc.signature[2] = _p[10];
    switch (_p[0]) {
     722:	cc cf       	rjmp	.-104    	; 0x6bc <UPDI::enter_updi(bool)+0x7c>
     724:	ab cf       	rjmp	.-170    	; 0x67c <UPDI::enter_updi(bool)+0x3c>
     726:	8d 36       	cpi	r24, 0x6D	; 109
     728:	d9 f0       	breq	.+54     	; 0x760 <UPDI::enter_updi(bool)+0x120>
     72a:	84 37       	cpi	r24, 0x74	; 116
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:648
      }
      default : {
        return false;
      }
    }
    bit_set(UPDI_CONTROL, UPDI_INFO_bp);
     72c:	09 f0       	breq	.+2      	; 0x730 <UPDI::enter_updi(bool)+0xf0>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:651

    /* Measure the power supply voltage */
    bool hvol = SYS::get_vcc() >= 4250
     72e:	a6 cf       	rjmp	.-180    	; 0x67c <UPDI::enter_updi(bool)+0x3c>
     730:	e0 9a       	sbi	0x1c, 0	; 28
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:653
              // && JTAG2::updi_desc.nvmctrl_version == '2'
              && bit_is_clear(UPDI_CONTROL, UPDI_ERHV_bp);
     732:	3f de       	rcall	.-898    	; 0x3b2 <SYS::get_vcc()>
     734:	8a 39       	cpi	r24, 0x9A	; 154
     736:	90 41       	sbci	r25, 0x10	; 16
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:328
bool UPDI::set_cs_asi_ctra (uint8_t data) {
  return set_cs_stat(UPDI_CS_ASI_CTRLA, data);
}

uint8_t UPDI::get_cs_asi_ctra (void) {
  return get_cs_stat(UPDI_CS_ASI_CTRLA);
     738:	08 f0       	brcs	.+2      	; 0x73c <UPDI::enter_updi(bool)+0xfc>
     73a:	8c b3       	in	r24, 0x1c	; 28
get_cs_asi_ctra():
     73c:	89 e0       	ldi	r24, 0x09	; 9
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:660
    /* Instructs double speed mode if there is sufficient voltage and not after HV control */
    // if (hvol && !set_cs_asi_ctra(UPDI_SET_UPDICLKSEL_8M)) return false;
  }

  /* If the double speed mode change is successful, change the speed */
  if ((get_cs_asi_ctra() & UPDI_SET_UPDICLKSEL_bm)
     73e:	5e dd       	rcall	.-1348   	; 0x1fc <UPDI::get_cs_stat(unsigned char)>
_ZN4UPDI10enter_updiEb():
     740:	83 70       	andi	r24, 0x03	; 3
     742:	82 30       	cpi	r24, 0x02	; 2
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:662
                        == UPDI_SET_UPDICLKSEL_8M) {
    UPDI_USART.BAUD = UPDI_BAUD_CALC >> 1;
     744:	99 f4       	brne	.+38     	; 0x76c <UPDI::enter_updi(bool)+0x12c>
     746:	88 e5       	ldi	r24, 0x58	; 88
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__RODATA_PM_OFFSET__+0x7f8808>
     74e:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__RODATA_PM_OFFSET__+0x7f8809>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:669
  }
  else {
    UPDI_USART.BAUD = UPDI_BAUD_CALC;
    bit_clear(UPDI_CONTROL, UPDI_CLKU_bp);
  }
  return true;
     752:	e6 9a       	sbi	0x1c, 6	; 28
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:670
}
     754:	81 e0       	ldi	r24, 0x01	; 1
     756:	df 91       	pop	r29
     758:	cf 91       	pop	r28
     75a:	1f 91       	pop	r17
     75c:	0f 91       	pop	r16
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:615
    JTAG2::updi_desc.signature[2] = _p[10];
    switch (_p[0]) {
      case 'm' : {              // 'megaAVR' series
        /* megaAVR SIB = 'megaAVR P:0D:1-3' */
        /* always vesrion 0 */
        bit_set(UPDI_NVMCTRL, UPDI_LOWF_bp);
     75e:	08 95       	ret
     760:	ef 9a       	sbi	0x1d, 7	; 29
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:635
        JTAG2::updi_desc.signature[1] = 'A';
        if (JTAG2::updi_desc.nvmctrl_version == '3') {
          // 'AVR_Ex' series
          bit_set(UPDI_NVMCTRL, UPDI_GEN3_bp);
        }
        else if (JTAG2::updi_desc.nvmctrl_version == '5') {
     762:	e6 cf       	rjmp	.-52     	; 0x730 <UPDI::enter_updi(bool)+0xf0>
     764:	95 33       	cpi	r25, 0x35	; 53
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:637
          // 'AVR_EB' series
          bit_set(UPDI_NVMCTRL, UPDI_GEN5_bp);
     766:	91 f6       	brne	.-92     	; 0x70c <UPDI::enter_updi(bool)+0xcc>
     768:	eb 9a       	sbi	0x1d, 3	; 29
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:666
                        == UPDI_SET_UPDICLKSEL_8M) {
    UPDI_USART.BAUD = UPDI_BAUD_CALC >> 1;
    bit_set(UPDI_CONTROL, UPDI_CLKU_bp);
  }
  else {
    UPDI_USART.BAUD = UPDI_BAUD_CALC;
     76a:	cf cf       	rjmp	.-98     	; 0x70a <UPDI::enter_updi(bool)+0xca>
     76c:	80 eb       	ldi	r24, 0xB0	; 176
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__RODATA_PM_OFFSET__+0x7f8808>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:667
    bit_clear(UPDI_CONTROL, UPDI_CLKU_bp);
     774:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__RODATA_PM_OFFSET__+0x7f8809>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:49
  /* NVMCTRL version 3,5 */
  uint8_t nvm_wait_v3 (void) {
    #ifdef ENABLE_DEBUG_UPDI_SENDER
    uint16_t _back = UPDI::_send_ptr;
    #endif
    while (UPDI::ld8(NVMCTRL_V3_REG_STATUS) & 3) {
     778:	e6 98       	cbi	0x1c, 6	; 28
     77a:	ec cf       	rjmp	.-40     	; 0x754 <UPDI::enter_updi(bool)+0x114>

0000077c <NVM::nvm_wait_v3()>:
_ZN3NVM11nvm_wait_v3Ev():
     77c:	66 e0       	ldi	r22, 0x06	; 6
     77e:	70 e1       	ldi	r23, 0x10	; 16
     780:	80 e0       	ldi	r24, 0x00	; 0
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	b4 dd       	rcall	.-1176   	; 0x2ee <UPDI::ld8(unsigned long)>
     786:	83 70       	andi	r24, 0x03	; 3
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.8/cores/megaAVR/api/delay_busywait.h:31
     788:	29 f0       	breq	.+10     	; 0x794 <NVM::nvm_wait_v3()+0x18>
delay_micros():
     78a:	86 ea       	ldi	r24, 0xA6	; 166
     78c:	8a 95       	dec	r24
     78e:	f1 f7       	brne	.-4      	; 0x78c <NVM::nvm_wait_v3()+0x10>
     790:	00 c0       	rjmp	.+0      	; 0x792 <NVM::nvm_wait_v3()+0x16>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:55
      #ifdef ENABLE_DEBUG_UPDI_SENDER
      UPDI::_send_ptr = _back;
      #endif
      TIM::delay_50us();
    }
    return UPDI_LASTL;
     792:	f4 cf       	rjmp	.-24     	; 0x77c <NVM::nvm_wait_v3()>
_ZN3NVM11nvm_wait_v3Ev():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:56
  }
     794:	8e b3       	in	r24, 0x1e	; 30
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:35
  /* NVMCTRL version 0,2,4 */
  uint8_t nvm_wait (void) {
    #ifdef ENABLE_DEBUG_UPDI_SENDER
    uint16_t _back = UPDI::_send_ptr;
    #endif
    while (UPDI::ld8(NVMCTRL_REG_STATUS) & 3) {
     796:	08 95       	ret

00000798 <NVM::nvm_wait()>:
_ZN3NVM8nvm_waitEv():
     798:	62 e0       	ldi	r22, 0x02	; 2
     79a:	70 e1       	ldi	r23, 0x10	; 16
     79c:	80 e0       	ldi	r24, 0x00	; 0
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	a6 dd       	rcall	.-1204   	; 0x2ee <UPDI::ld8(unsigned long)>
     7a2:	83 70       	andi	r24, 0x03	; 3
     7a4:	29 f0       	breq	.+10     	; 0x7b0 <NVM::nvm_wait()+0x18>
delay_micros():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.8/cores/megaAVR/api/delay_busywait.h:31
     7a6:	86 ea       	ldi	r24, 0xA6	; 166
     7a8:	8a 95       	dec	r24
     7aa:	f1 f7       	brne	.-4      	; 0x7a8 <NVM::nvm_wait()+0x10>
     7ac:	00 c0       	rjmp	.+0      	; 0x7ae <NVM::nvm_wait()+0x16>
     7ae:	f4 cf       	rjmp	.-24     	; 0x798 <NVM::nvm_wait()>
_ZN3NVM8nvm_waitEv():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:41
      #ifdef ENABLE_DEBUG_UPDI_SENDER
      UPDI::_send_ptr = _back;
      #endif
      TIM::delay_50us();
    }
    return UPDI_LASTL;
     7b0:	8e b3       	in	r24, 0x1e	; 30
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:42
  }
     7b2:	08 95       	ret

000007b4 <UPDI::runtime(unsigned char)>:
_ZN4UPDI7runtimeEh():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:718

/************************
 * UPDI control process *
 ************************/

bool UPDI::runtime (uint8_t updi_cmd) {
     7b4:	af 92       	push	r10
     7b6:	bf 92       	push	r11
     7b8:	cf 92       	push	r12
     7ba:	df 92       	push	r13
     7bc:	ef 92       	push	r14
     7be:	ff 92       	push	r15
     7c0:	0f 93       	push	r16
     7c2:	1f 93       	push	r17
     7c4:	cf 93       	push	r28
     7c6:	df 93       	push	r29
     7c8:	cd b7       	in	r28, 0x3d	; 61
     7ca:	de b7       	in	r29, 0x3e	; 62
     7cc:	26 97       	sbiw	r28, 0x06	; 6
     7ce:	cd bf       	out	0x3d, r28	; 61
     7d0:	de bf       	out	0x3e, r29	; 62
     7d2:	8e 83       	std	Y+6, r24	; 0x06
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:719
  volatile bool _result = false;
     7d4:	1d 82       	std	Y+5, r1	; 0x05
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:720
  if (setjmp(TIM::CONTEXT) == 0) {
     7d6:	86 e4       	ldi	r24, 0x46	; 70
     7d8:	98 e3       	ldi	r25, 0x38	; 56
     7da:	a2 d6       	rcall	.+3396   	; 0x1520 <setjmp>
     7dc:	89 2b       	or	r24, r25
     7de:	09 f0       	breq	.+2      	; 0x7e2 <UPDI::runtime(unsigned char)+0x2e>
     7e0:	55 c0       	rjmp	.+170    	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
Timeout_Start():
     7e2:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:118
/*
 * Timeout control
 */

void TIM::Timeout_Start (uint16_t _ms) {
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     7e4:	f8 94       	cli
Timeout_Start():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:50
     7e6:	10 92 8a 0a 	sts	0x0A8A, r1	; 0x800a8a <__RODATA_PM_OFFSET__+0x7f8a8a>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:119
    TCB0_CNT = 0;
     7ea:	10 92 8b 0a 	sts	0x0A8B, r1	; 0x800a8b <__RODATA_PM_OFFSET__+0x7f8a8b>
     7ee:	28 ec       	ldi	r18, 0xC8	; 200
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:120
    TCB0_CCMP = _ms >> 2;
     7f0:	30 e0       	ldi	r19, 0x00	; 0
     7f2:	20 93 8c 0a 	sts	0x0A8C, r18	; 0x800a8c <__RODATA_PM_OFFSET__+0x7f8a8c>
     7f6:	30 93 8d 0a 	sts	0x0A8D, r19	; 0x800a8d <__RODATA_PM_OFFSET__+0x7f8a8d>
     7fa:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:121
    TCB0_INTCTRL = TCB_CAPT_bm;
     7fc:	80 93 85 0a 	sts	0x0A85, r24	; 0x800a85 <__RODATA_PM_OFFSET__+0x7f8a85>
     800:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__RODATA_PM_OFFSET__+0x7f8a86>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:122
    TCB0_INTFLAGS = TCB_CAPT_bm;
     804:	8f e0       	ldi	r24, 0x0F	; 15
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:123
    TCB0_CTRLA = TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
     806:	80 93 80 0a 	sts	0x0A80, r24	; 0x800a80 <__RODATA_PM_OFFSET__+0x7f8a80>
__iRestore():
     80a:	9f bf       	out	0x3f, r25	; 63
_ZN4UPDI7runtimeEh():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     80c:	2e 81       	ldd	r18, Y+6	; 0x06
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:722
    TIM::Timeout_Start(800);
    switch (updi_cmd) {
     80e:	23 30       	cpi	r18, 0x03	; 3
     810:	09 f4       	brne	.+2      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
     812:	42 c2       	rjmp	.+1156   	; 0xc98 <__DATA_REGION_LENGTH__+0x498>
     814:	24 30       	cpi	r18, 0x04	; 4
     816:	09 f4       	brne	.+2      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
     818:	88 c2       	rjmp	.+1296   	; 0xd2a <__DATA_REGION_LENGTH__+0x52a>
write_memory():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:266
/******************
 * NVM write core *
 ******************/

bool NVM::write_memory (void) {
  uint8_t mem_type = JTAG2::packet.body[JTAG2::MEM_TYPE];
     81a:	ea e8       	ldi	r30, 0x8A	; 138
     81c:	f8 e3       	ldi	r31, 0x38	; 56
_ZN4UPDI7runtimeEh():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:722
     81e:	22 30       	cpi	r18, 0x02	; 2
     820:	09 f4       	brne	.+2      	; 0x824 <__DATA_REGION_LENGTH__+0x24>
     822:	82 c0       	rjmp	.+260    	; 0x928 <__DATA_REGION_LENGTH__+0x128>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:724
      case UPDI_CMD_READ_MEMORY : {
        size_t byte_count = _CAPS16(JTAG2::packet.body[JTAG2::DATA_LENGTH])->word;
     824:	22 85       	ldd	r18, Z+10	; 0x0a
     826:	33 85       	ldd	r19, Z+11	; 0x0b
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:725
        uint32_t start_addr = _CAPS32(JTAG2::packet.body[JTAG2::DATA_ADDRESS])->dword;
     828:	66 85       	ldd	r22, Z+14	; 0x0e
     82a:	77 85       	ldd	r23, Z+15	; 0x0f
     82c:	80 89       	ldd	r24, Z+16	; 0x10
     82e:	91 89       	ldd	r25, Z+17	; 0x11
read_memory():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:218
/***********************
 * Memory reading core *
 ***********************/

bool NVM::read_memory (uint32_t start_addr, size_t byte_count) {
  JTAG2::packet.body[JTAG2::MESSAGE_ID] = JTAG2::RSP_MEMORY;
     830:	42 e8       	ldi	r20, 0x82	; 130
     832:	40 87       	std	Z+8, r20	; 0x08
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:222
  uint8_t *data = &JTAG2::packet.body[JTAG2::RSP_DATA];

  /* Reads from 1 to 256 bytes and even bytes 258 to 512 are allowed */
  if (byte_count == 0 || byte_count > 512 || (byte_count > 256 && byte_count & 1)) {
     834:	a9 01       	movw	r20, r18
     836:	41 50       	subi	r20, 0x01	; 1
     838:	51 09       	sbc	r21, r1
     83a:	41 15       	cp	r20, r1
     83c:	e2 e0       	ldi	r30, 0x02	; 2
     83e:	5e 07       	cpc	r21, r30
     840:	30 f4       	brcc	.+12     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
     842:	21 30       	cpi	r18, 0x01	; 1
     844:	f1 e0       	ldi	r31, 0x01	; 1
     846:	3f 07       	cpc	r19, r31
     848:	28 f0       	brcs	.+10     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
     84a:	20 ff       	sbrs	r18, 0
     84c:	03 c0       	rjmp	.+6      	; 0x854 <__DATA_REGION_LENGTH__+0x54>
write_memory():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:314
    }
  }

  /* Other writes are allowed from 1 to 256 bytes */
  if (byte_count == 0 || byte_count > 256) {
    set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
     84e:	83 ea       	ldi	r24, 0xA3	; 163
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	e6 c0       	rjmp	.+460    	; 0xa20 <__DATA_REGION_LENGTH__+0x220>
read_memory():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:226
  /* Reads from 1 to 256 bytes and even bytes 258 to 512 are allowed */
  if (byte_count == 0 || byte_count > 512 || (byte_count > 256 && byte_count & 1)) {
    set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
    return true;
  }
  JTAG2::packet.size_word[0] = byte_count + 1;
     854:	aa e8       	ldi	r26, 0x8A	; 138
     856:	b8 e3       	ldi	r27, 0x38	; 56
     858:	f9 01       	movw	r30, r18
     85a:	31 96       	adiw	r30, 0x01	; 1
     85c:	13 96       	adiw	r26, 0x03	; 3
     85e:	ed 93       	st	X+, r30
     860:	fc 93       	st	X, r31
     862:	14 97       	sbiw	r26, 0x04	; 4
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:229

  /* Reading only 1 byte may be special */
  if (byte_count == 1) {
     864:	21 30       	cpi	r18, 0x01	; 1
     866:	31 05       	cpc	r19, r1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:232
    #ifdef ENABLE_ADDFEATS_LOCK_SIG
    if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_PROG_bp)
      && JTAG2::packet.body[JTAG2::MEM_TYPE] == JTAG2::MTYPE_SIGN_JTAG) {
     868:	29 f5       	brne	.+74     	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
     86a:	e1 99       	sbic	0x1c, 1	; 28
     86c:	23 c0       	rjmp	.+70     	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
     86e:	19 96       	adiw	r26, 0x09	; 9
     870:	ec 91       	ld	r30, X
     872:	19 97       	sbiw	r26, 0x09	; 9
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:234
      /* Signature reading branches to special processing */
      JTAG2::packet.body[JTAG2::RSP_DATA] = JTAG2::updi_desc.signature[(uint8_t)start_addr & 3];
     874:	e4 3b       	cpi	r30, 0xB4	; 180
     876:	f1 f4       	brne	.+60     	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
     878:	63 70       	andi	r22, 0x03	; 3
     87a:	e6 2f       	mov	r30, r22
     87c:	f0 e0       	ldi	r31, 0x00	; 0
     87e:	e2 5a       	subi	r30, 0xA2	; 162
     880:	f7 4c       	sbci	r31, 0xC7	; 199
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:235
      return true;
     882:	87 81       	ldd	r24, Z+7	; 0x07
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:740
          _result = chip_erase();
        }
        break;
      }
      case UPDI_CMD_GO : {
        _result = Target_Reset(true) && Target_Reset(false);
     884:	19 96       	adiw	r26, 0x09	; 9
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:745
        break;
      }
    }
  }
  TIM::Timeout_Stop();
     886:	8c 93       	st	X, r24
_ZN4UPDI7runtimeEh():
     888:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:746
  UPDI_USART.CTRLB = UPDI_USART_ON;
     88a:	8d 83       	std	Y+5, r24	; 0x05
     88c:	7f dd       	rcall	.-1282   	; 0x38c <TIM::Timeout_Stop()>
     88e:	88 ec       	ldi	r24, 0xC8	; 200
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:747
  wdt_reset();
     890:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__RODATA_PM_OFFSET__+0x7f8806>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:749
  return _result;
}
     894:	a8 95       	wdr
     896:	8d 81       	ldd	r24, Y+5	; 0x05
     898:	26 96       	adiw	r28, 0x06	; 6
     89a:	cd bf       	out	0x3d, r28	; 61
     89c:	de bf       	out	0x3e, r29	; 62
     89e:	df 91       	pop	r29
     8a0:	cf 91       	pop	r28
     8a2:	1f 91       	pop	r17
     8a4:	0f 91       	pop	r16
     8a6:	ff 90       	pop	r15
     8a8:	ef 90       	pop	r14
     8aa:	df 90       	pop	r13
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:249
      return true;
    }
    #endif
  }

  if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_PROG_bp)) {
     8ac:	cf 90       	pop	r12
     8ae:	bf 90       	pop	r11
     8b0:	af 90       	pop	r10
     8b2:	08 95       	ret
read_memory():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:251
    /* A normal read when the device is locked returns a dummy. */
    do { *data++ = 0xFF; } while (--byte_count);
     8b4:	e1 99       	sbic	0x1c, 1	; 28
     8b6:	08 c0       	rjmp	.+16     	; 0x8c8 <__DATA_REGION_LENGTH__+0xc8>
     8b8:	e3 e9       	ldi	r30, 0x93	; 147
     8ba:	f8 e3       	ldi	r31, 0x38	; 56
     8bc:	8f ef       	ldi	r24, 0xFF	; 255
     8be:	81 93       	st	Z+, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:255
    return true;
  }

  if ((byte_count - 1) >> 8)
     8c0:	21 50       	subi	r18, 0x01	; 1
     8c2:	31 09       	sbc	r19, r1
     8c4:	e1 f7       	brne	.-8      	; 0x8be <__DATA_REGION_LENGTH__+0xbe>
     8c6:	e0 cf       	rjmp	.-64     	; 0x888 <__DATA_REGION_LENGTH__+0x88>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:276
  do { *data++ = RECV(); } while (--len);
  return UPDI_LASTH == 0;
}

bool UPDI::lds16 (uint32_t addr, uint8_t *data, size_t len) {
  uint8_t repeat = (uint16_t)len >> 1;
     8c8:	45 2f       	mov	r20, r21
     8ca:	55 27       	eor	r21, r21
     8cc:	45 2b       	or	r20, r21
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:277
  if (!send_repeat_header(addr, UPDI_LD|UPDI_DATA2, repeat)) return false;
     8ce:	e1 f0       	breq	.+56     	; 0x908 <__DATA_REGION_LENGTH__+0x108>
lds16():
     8d0:	36 95       	lsr	r19
     8d2:	27 95       	ror	r18
     8d4:	f2 2e       	mov	r15, r18
     8d6:	41 e2       	ldi	r20, 0x21	; 33
     8d8:	b9 dc       	rcall	.-1678   	; 0x24c <UPDI::send_repeat_header(unsigned long, unsigned char, unsigned char)>
     8da:	0a e8       	ldi	r16, 0x8A	; 138
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:532
  if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) {
    HV_Pulse();
  }

  /* Transition to CHIPERASE mode by system reset */
  if (!set_erase_key()) return false;
     8dc:	18 e3       	ldi	r17, 0x38	; 56
     8de:	81 11       	cpse	r24, r1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:279

bool UPDI::lds16 (uint32_t addr, uint8_t *data, size_t len) {
  uint8_t repeat = (uint16_t)len >> 1;
  if (!send_repeat_header(addr, UPDI_LD|UPDI_DATA2, repeat)) return false;
  do {
    *data++ = RECV();
     8e0:	02 c0       	rjmp	.+4      	; 0x8e6 <__DATA_REGION_LENGTH__+0xe6>
_ZN4UPDI7runtimeEh():
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	d2 cf       	rjmp	.-92     	; 0x88a <__DATA_REGION_LENGTH__+0x8a>
lds16():
     8e6:	11 dc       	rcall	.-2014   	; 0x10a <UPDI::RECV()>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:280
    *data++ = RECV();
     8e8:	f8 01       	movw	r30, r16
     8ea:	81 87       	std	Z+9, r24	; 0x09
     8ec:	0e dc       	rcall	.-2020   	; 0x10a <UPDI::RECV()>
     8ee:	f8 01       	movw	r30, r16
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:281
  } while (--repeat);
     8f0:	82 87       	std	Z+10, r24	; 0x0a
     8f2:	fa 94       	dec	r15
     8f4:	0e 5f       	subi	r16, 0xFE	; 254
     8f6:	1f 4f       	sbci	r17, 0xFF	; 255
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:272
}

bool UPDI::lds8 (uint32_t addr, uint8_t *data, uint8_t len) {
  if (!send_repeat_header(addr, UPDI_LD|UPDI_DATA1, len)) return false;
  do { *data++ = RECV(); } while (--len);
  return UPDI_LASTH == 0;
     8f8:	f1 10       	cpse	r15, r1
     8fa:	f5 cf       	rjmp	.-22     	; 0x8e6 <__DATA_REGION_LENGTH__+0xe6>
lds8():
     8fc:	9f b3       	in	r25, 0x1f	; 31
     8fe:	81 e0       	ldi	r24, 0x01	; 1
     900:	99 23       	and	r25, r25
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:258
    return UPDI::lds16(start_addr, data, byte_count);
  else
    return UPDI::lds8(start_addr, data, byte_count);
     902:	09 f4       	brne	.+2      	; 0x906 <__DATA_REGION_LENGTH__+0x106>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:270
  while (!send_bytes(set_ptr, sizeof(set_ptr) - 1)) BREAK();
  return RECV();
}

bool UPDI::lds8 (uint32_t addr, uint8_t *data, uint8_t len) {
  if (!send_repeat_header(addr, UPDI_LD|UPDI_DATA1, len)) return false;
     904:	c2 cf       	rjmp	.-124    	; 0x88a <__DATA_REGION_LENGTH__+0x8a>
     906:	ed cf       	rjmp	.-38     	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
read_memory():
     908:	12 2f       	mov	r17, r18
lds8():
     90a:	40 e2       	ldi	r20, 0x20	; 32
     90c:	9f dc       	rcall	.-1730   	; 0x24c <UPDI::send_repeat_header(unsigned long, unsigned char, unsigned char)>
     90e:	88 23       	and	r24, r24
     910:	41 f3       	breq	.-48     	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:271
  do { *data++ = RECV(); } while (--len);
     912:	43 e9       	ldi	r20, 0x93	; 147
     914:	e4 2e       	mov	r14, r20
     916:	48 e3       	ldi	r20, 0x38	; 56
     918:	f4 2e       	mov	r15, r20
     91a:	f7 db       	rcall	.-2066   	; 0x10a <UPDI::RECV()>
     91c:	f7 01       	movw	r30, r14
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:266
/******************
 * NVM write core *
 ******************/

bool NVM::write_memory (void) {
  uint8_t mem_type = JTAG2::packet.body[JTAG2::MEM_TYPE];
     91e:	81 93       	st	Z+, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:268
  uint8_t *data = &JTAG2::packet.body[JTAG2::DATA_START];
  size_t byte_count = _CAPS16(JTAG2::packet.body[JTAG2::DATA_LENGTH])->word;
     920:	7f 01       	movw	r14, r30
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:269
  uint32_t start_addr = _CAPS32(JTAG2::packet.body[JTAG2::DATA_ADDRESS])->dword;
     922:	11 50       	subi	r17, 0x01	; 1
     924:	d1 f7       	brne	.-12     	; 0x91a <__DATA_REGION_LENGTH__+0x11a>
     926:	ea cf       	rjmp	.-44     	; 0x8fc <__DATA_REGION_LENGTH__+0xfc>
write_memory():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:272

  /* Address specification outside the processing range is considered an IO area operation */
  if (start_addr >> 24) {
     928:	81 85       	ldd	r24, Z+9	; 0x09
     92a:	02 85       	ldd	r16, Z+10	; 0x0a
     92c:	13 85       	ldd	r17, Z+11	; 0x0b
     92e:	c6 84       	ldd	r12, Z+14	; 0x0e
     930:	d7 84       	ldd	r13, Z+15	; 0x0f
     932:	e0 88       	ldd	r14, Z+16	; 0x10
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:273
    start_addr &= 0xFFFF;
     934:	f1 88       	ldd	r15, Z+17	; 0x11
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:274
    mem_type = JTAG2::MTYPE_SRAM;
     936:	4f 2d       	mov	r20, r15
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:280
  }

  /* Can only be written to USERROW on locked devices */
  /* This write is only allowed in multiples of 32 bytes */
  if (bit_is_set(UPDI_CONTROL, UPDI::UPDI_INFO_bp)
   && mem_type == JTAG2::MTYPE_XMEGA_USERSIG) // 0xC5
     938:	55 27       	eor	r21, r21
     93a:	66 27       	eor	r22, r22
     93c:	77 27       	eor	r23, r23
     93e:	45 2b       	or	r20, r21
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:471
 * USERROW region writing *
 *****************************************/

bool UPDI::write_userrow (const uint32_t start_addr, uint8_t *data, const size_t byte_count) {
  /* Only data lengths that are multiples of 32 bytes are allowed. */
  if (byte_count == 0 || byte_count & 0x1F) {
     940:	46 2b       	or	r20, r22
     942:	47 2b       	or	r20, r23
     944:	19 f0       	breq	.+6      	; 0x94c <__DATA_REGION_LENGTH__+0x14c>
     946:	ee 24       	eor	r14, r14
     948:	ff 24       	eor	r15, r15
_ZN4UPDI7runtimeEh():
     94a:	80 e2       	ldi	r24, 0x20	; 32
write_memory():
     94c:	e0 9b       	sbis	0x1c, 0	; 28
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:472
    JTAG2::packet.body[JTAG2::MESSAGE_ID] = JTAG2::RSP_ILLEGAL_MEMORY_RANGE;
     94e:	50 c0       	rjmp	.+160    	; 0x9f0 <__DATA_REGION_LENGTH__+0x1f0>
     950:	85 3c       	cpi	r24, 0xC5	; 197
     952:	09 f0       	breq	.+2      	; 0x956 <__DATA_REGION_LENGTH__+0x156>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:405
  return loop_until_key_stat_is_set(UPDI_KEY_CHIPERASE);
}

/* __attribute__((optimize("O0"))) */
bool UPDI::set_urowwrite_key (void) {
  if (!send_bytes(urowwrite_key, sizeof(urowwrite_key))) return false;
     954:	4d c0       	rjmp	.+154    	; 0x9f0 <__DATA_REGION_LENGTH__+0x1f0>
write_userrow():
     956:	01 15       	cp	r16, r1
     958:	11 05       	cpc	r17, r1
     95a:	29 f0       	breq	.+10     	; 0x966 <__DATA_REGION_LENGTH__+0x166>
     95c:	c8 01       	movw	r24, r16
     95e:	8f 71       	andi	r24, 0x1F	; 31
     960:	99 27       	eor	r25, r25
     962:	89 2b       	or	r24, r25
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:406
  return loop_until_key_stat_is_set(UPDI_KEY_UROWWRITE);
     964:	21 f0       	breq	.+8      	; 0x96e <__DATA_REGION_LENGTH__+0x16e>
     966:	83 ea       	ldi	r24, 0xA3	; 163
     968:	80 93 92 38 	sts	0x3892, r24	; 0x803892 <JTAG2::packet+0x8>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:477
    JTAG2::packet.body[JTAG2::MESSAGE_ID] = JTAG2::RSP_ILLEGAL_MEMORY_RANGE;
    return true;
  }

  /* Send the authentication key */
  if (!set_urowwrite_key()) return false;
     96c:	8d cf       	rjmp	.-230    	; 0x888 <__DATA_REGION_LENGTH__+0x88>
set_urowwrite_key():
     96e:	6a e0       	ldi	r22, 0x0A	; 10
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:480

  /* Transition to USERROW mode by system reset */
  if (!updi_reset(true) || !updi_reset(false)) return false;
     970:	82 e2       	ldi	r24, 0x22	; 34
     972:	98 e3       	ldi	r25, 0x38	; 56
     974:	f0 db       	rcall	.-2080   	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     976:	88 23       	and	r24, r24
     978:	09 f4       	brne	.+2      	; 0x97c <__DATA_REGION_LENGTH__+0x17c>
     97a:	b3 cf       	rjmp	.-154    	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
     97c:	80 e2       	ldi	r24, 0x20	; 32
     97e:	d0 dd       	rcall	.-1120   	; 0x520 <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.20]>
write_userrow():
     980:	88 23       	and	r24, r24
     982:	09 f4       	brne	.+2      	; 0x986 <__DATA_REGION_LENGTH__+0x186>
     984:	ae cf       	rjmp	.-164    	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:483

  /* Wait for system reset to finish */
  loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
     986:	81 e0       	ldi	r24, 0x01	; 1
     988:	bf dc       	rcall	.-1666   	; 0x308 <UPDI::updi_reset(bool)>
     98a:	88 23       	and	r24, r24
     98c:	09 f4       	brne	.+2      	; 0x990 <__DATA_REGION_LENGTH__+0x190>
     98e:	a9 cf       	rjmp	.-174    	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:486

  /* Make sure you are in USERROW mode */
  loop_until_sys_stat_is_set(UPDI_SYS_UROWPROG);
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	ba dc       	rcall	.-1676   	; 0x308 <UPDI::updi_reset(bool)>
     994:	88 23       	and	r24, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:489

  /* Write data to buffer memory */
  sts8rsd(start_addr, data, byte_count);
     996:	09 f4       	brne	.+2      	; 0x99a <__DATA_REGION_LENGTH__+0x19a>
     998:	a4 cf       	rjmp	.-184    	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
     99a:	70 e0       	ldi	r23, 0x00	; 0
     99c:	60 e0       	ldi	r22, 0x00	; 0
     99e:	80 e2       	ldi	r24, 0x20	; 32
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:493
  /* Ignore any errors here */

  /* After writing the memory, write the end flag */
  set_cs_stat(UPDI_CS_ASI_SYS_CTRLA, UPDI_SET_UROWDONE | UPDI_SET_CLKREQ);
     9a0:	f9 dd       	rcall	.-1038   	; 0x594 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
     9a2:	84 e0       	ldi	r24, 0x04	; 4
     9a4:	df dd       	rcall	.-1090   	; 0x564 <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.23]>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:498

  /* Wait for data to be transferred to USERROW */
  /* AVR_Dx requires at least 100 * 50us wait loops */
  /* AVR_Ex may not end forever, so give up midway */
  loop_until_sys_stat_is_clear(UPDI_SYS_UROWPROG, 200);
     9a6:	40 2f       	mov	r20, r16
     9a8:	c7 01       	movw	r24, r14
     9aa:	b6 01       	movw	r22, r12
     9ac:	ed db       	rcall	.-2086   	; 0x188 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.17]>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:502
  /* Ignore any errors here */

  /* Step completed */
  set_cs_stat(UPDI_CS_ASI_KEY_STATUS, UPDI_KEY_UROWWRITE);
     9ae:	63 e0       	ldi	r22, 0x03	; 3
     9b0:	8a e0       	ldi	r24, 0x0A	; 10
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:505

  /* If previously in program mode, send unlock key */
  if (bit_is_set(UPDI_CONTROL, UPDI_PROG_bp)) {
     9b2:	e2 db       	rcall	.-2108   	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>
     9b4:	68 ec       	ldi	r22, 0xC8	; 200
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:510
    set_nvmprog_key();
  }

  /* Exit USERROW mode */
  if (!updi_reset(true) || !updi_reset(false)) return false;
     9b6:	70 e0       	ldi	r23, 0x00	; 0
     9b8:	84 e0       	ldi	r24, 0x04	; 4
     9ba:	ec dd       	rcall	.-1064   	; 0x594 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
     9bc:	60 e2       	ldi	r22, 0x20	; 32
     9be:	87 e0       	ldi	r24, 0x07	; 7
     9c0:	db db       	rcall	.-2122   	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>
     9c2:	e1 99       	sbic	0x1c, 1	; 28
     9c4:	13 c0       	rjmp	.+38     	; 0x9ec <__DATA_REGION_LENGTH__+0x1ec>
     9c6:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:511
  loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
     9c8:	9f dc       	rcall	.-1730   	; 0x308 <UPDI::updi_reset(bool)>
     9ca:	88 23       	and	r24, r24
     9cc:	09 f4       	brne	.+2      	; 0x9d0 <__DATA_REGION_LENGTH__+0x1d0>
     9ce:	89 cf       	rjmp	.-238    	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:514

  /* Make sure you are in program mode if necessary */
  if (bit_is_set(UPDI_CONTROL, UPDI_PROG_bp)) {
     9d0:	80 e0       	ldi	r24, 0x00	; 0
     9d2:	9a dc       	rcall	.-1740   	; 0x308 <UPDI::updi_reset(bool)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:515
    loop_until_sys_stat_is_set(UPDI_SYS_NVMPROG);
     9d4:	88 23       	and	r24, r24
     9d6:	09 f4       	brne	.+2      	; 0x9da <__DATA_REGION_LENGTH__+0x1da>
     9d8:	84 cf       	rjmp	.-248    	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:506
  /* Step completed */
  set_cs_stat(UPDI_CS_ASI_KEY_STATUS, UPDI_KEY_UROWWRITE);

  /* If previously in program mode, send unlock key */
  if (bit_is_set(UPDI_CONTROL, UPDI_PROG_bp)) {
    set_nvmprog_key();
     9da:	70 e0       	ldi	r23, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:284
    return UPDI::write_userrow(start_addr, data, byte_count);

  /* From this point on, only program mode is allowed. */
  if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_PROG_bp)) return false;
     9de:	80 e2       	ldi	r24, 0x20	; 32
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:287

  /* About flash regions */
  switch (mem_type) {
     9e0:	d9 dd       	rcall	.-1102   	; 0x594 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
     9e2:	e1 9b       	sbis	0x1c, 1	; 28
     9e4:	51 cf       	rjmp	.-350    	; 0x888 <__DATA_REGION_LENGTH__+0x88>
     9e6:	88 e0       	ldi	r24, 0x08	; 8
     9e8:	bd dd       	rcall	.-1158   	; 0x564 <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.23]>
     9ea:	4e cf       	rjmp	.-356    	; 0x888 <__DATA_REGION_LENGTH__+0x88>
     9ec:	b1 dd       	rcall	.-1182   	; 0x550 <UPDI::set_nvmprog_key()>
     9ee:	eb cf       	rjmp	.-42     	; 0x9c6 <__DATA_REGION_LENGTH__+0x1c6>
write_memory():
     9f0:	e1 9b       	sbis	0x1c, 1	; 28
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:293
    case JTAG2::MTYPE_FLASH_PAGE :            // 0xB0
    case JTAG2::MTYPE_XMEGA_APP_FLASH :       // 0xC0
    case JTAG2::MTYPE_XMEGA_BOOT_FLASH : {    // 0xC1

      /* Instructions with mismatched page sizes are rejected */
      if (JTAG2::updi_desc.flash_page_size != byte_count && 256 != byte_count) {
     9f2:	77 cf       	rjmp	.-274    	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
     9f4:	80 3b       	cpi	r24, 0xB0	; 176
     9f6:	39 f0       	breq	.+14     	; 0xa06 <__DATA_REGION_LENGTH__+0x206>
     9f8:	08 f4       	brcc	.+2      	; 0x9fc <__DATA_REGION_LENGTH__+0x1fc>
     9fa:	bd c0       	rjmp	.+378    	; 0xb76 <__DATA_REGION_LENGTH__+0x376>
     9fc:	90 e4       	ldi	r25, 0x40	; 64
     9fe:	98 0f       	add	r25, r24
     a00:	92 30       	cpi	r25, 0x02	; 2
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:295
        /* Kill the process with a strong error */
        set_response(JTAG2::RSP_NO_TARGET_POWER);
     a02:	08 f0       	brcs	.+2      	; 0xa06 <__DATA_REGION_LENGTH__+0x206>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:314
    }
  }

  /* Other writes are allowed from 1 to 256 bytes */
  if (byte_count == 0 || byte_count > 256) {
    set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
     a04:	b8 c0       	rjmp	.+368    	; 0xb76 <__DATA_REGION_LENGTH__+0x376>
     a06:	80 91 62 38 	lds	r24, 0x3862	; 0x803862 <JTAG2::updi_desc+0x4>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:301
        return true;
      }

      /* Page boundaries require special handling */
      bool is_bound = bit_is_clear(UPDI_CONTROL, UPDI::UPDI_ERFM_bp)
        && ((JTAG2::updi_desc.flash_page_size - 1) & (uint16_t)start_addr) == 0;
     a0a:	90 91 63 38 	lds	r25, 0x3863	; 0x803863 <JTAG2::updi_desc+0x5>
     a0e:	08 17       	cp	r16, r24
     a10:	19 07       	cpc	r17, r25
     a12:	41 f0       	breq	.+16     	; 0xa24 <__DATA_REGION_LENGTH__+0x224>
     a14:	01 15       	cp	r16, r1
     a16:	f1 e0       	ldi	r31, 0x01	; 1
     a18:	1f 07       	cpc	r17, r31
     a1a:	21 f0       	breq	.+8      	; 0xa24 <__DATA_REGION_LENGTH__+0x224>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:303

      if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp))
     a1c:	8b ea       	ldi	r24, 0xAB	; 171
     a1e:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:162

  bool write_flash_v3 (uint32_t start_addr, uint8_t *data, size_t byte_count, bool is_bound) {
    /* NVMCTRL version 3 or 5 */
    /* If the chip is not erased, erase the page. */
    /* However, only when the beginning of the page boundary is addressed */
    if (is_bound) {
     a20:	05 dd       	rcall	.-1526   	; 0x42c <JTAG2::set_response(JTAG2::jtag_response_e)>
     a22:	32 cf       	rjmp	.-412    	; 0x888 <__DATA_REGION_LENGTH__+0x88>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:163
      nvm_wait_v3();
     a24:	e2 99       	sbic	0x1c, 2	; 28
     a26:	06 c0       	rjmp	.+12     	; 0xa34 <__DATA_REGION_LENGTH__+0x234>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:164
      if (!UPDI::st8(start_addr, 0xFF)) return false;
     a28:	01 97       	sbiw	r24, 0x01	; 1
     a2a:	8c 21       	and	r24, r12
     a2c:	9d 21       	and	r25, r13
     a2e:	21 e0       	ldi	r18, 0x01	; 1
     a30:	89 2b       	or	r24, r25
     a32:	09 f0       	breq	.+2      	; 0xa36 <__DATA_REGION_LENGTH__+0x236>
_ZN4UPDI7runtimeEh():
     a34:	20 e0       	ldi	r18, 0x00	; 0
write_memory():
     a36:	ed 9b       	sbis	0x1d, 5	; 29
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:79
    return nvm_ctrl_change(nvmcmd);
  }

  /* NVMCTRL version 3,5 */
  bool nvm_ctrl_v3 (uint8_t nvmcmd) {
    nvm_wait_v3();
     a38:	25 c0       	rjmp	.+74     	; 0xa84 <__DATA_REGION_LENGTH__+0x284>
write_flash_v3():
     a3a:	22 23       	and	r18, r18
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:80
    return nvm_ctrl_change(nvmcmd);
     a3c:	d9 f0       	breq	.+54     	; 0xa74 <__DATA_REGION_LENGTH__+0x274>
     a3e:	9e de       	rcall	.-708    	; 0x77c <NVM::nvm_wait_v3()>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:167
    if (is_bound) {
      nvm_wait_v3();
      if (!UPDI::st8(start_addr, 0xFF)) return false;
      if (!nvm_ctrl_v3(NVM_V3_CMD_FLPER)) return false;
    }
    else if (!nvm_ctrl_v3(NVM_V3_CMD_FLPBCLR)) return false;
     a40:	4f ef       	ldi	r20, 0xFF	; 255
     a42:	c7 01       	movw	r24, r14
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:168
    nvm_wait_v3();
     a44:	b6 01       	movw	r22, r12
     a46:	e2 db       	rcall	.-2108   	; 0x20c <UPDI::st8(unsigned long, unsigned char)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:170

    if (byte_count == 1) UPDI::st8(start_addr, *data);
     a48:	88 23       	and	r24, r24
     a4a:	09 f4       	brne	.+2      	; 0xa4e <__DATA_REGION_LENGTH__+0x24e>
     a4c:	4a cf       	rjmp	.-364    	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
nvm_ctrl_v3():
     a4e:	96 de       	rcall	.-724    	; 0x77c <NVM::nvm_wait_v3()>
     a50:	88 e0       	ldi	r24, 0x08	; 8
     a52:	d7 dc       	rcall	.-1618   	; 0x402 <NVM::nvm_ctrl_change(unsigned char)>
write_flash_v3():
     a54:	88 23       	and	r24, r24
     a56:	09 f4       	brne	.+2      	; 0xa5a <__DATA_REGION_LENGTH__+0x25a>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:79
    return nvm_ctrl_change(nvmcmd);
  }

  /* NVMCTRL version 3,5 */
  bool nvm_ctrl_v3 (uint8_t nvmcmd) {
    nvm_wait_v3();
     a58:	44 cf       	rjmp	.-376    	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
     a5a:	90 de       	rcall	.-736    	; 0x77c <NVM::nvm_wait_v3()>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:80
    return nvm_ctrl_change(nvmcmd);
     a5c:	01 30       	cpi	r16, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:74
  }

  /* NVMCTRL version 2,4 */
  bool nvm_ctrl_v2 (uint8_t nvmcmd) {
    nvm_wait();
    return nvm_ctrl_change(nvmcmd);
     a5e:	11 05       	cpc	r17, r1
     a60:	61 f4       	brne	.+24     	; 0xa7a <__DATA_REGION_LENGTH__+0x27a>
     a62:	40 91 9c 38 	lds	r20, 0x389C	; 0x80389c <JTAG2::packet+0x12>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:80
  }

  /* NVMCTRL version 3,5 */
  bool nvm_ctrl_v3 (uint8_t nvmcmd) {
    nvm_wait_v3();
    return nvm_ctrl_change(nvmcmd);
     a66:	c7 01       	movw	r24, r14
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:171
    }
    else if (!nvm_ctrl_v3(NVM_V3_CMD_FLPBCLR)) return false;
    nvm_wait_v3();

    if (byte_count == 1) UPDI::st8(start_addr, *data);
    else UPDI::sts8rsd(start_addr, data, byte_count);
     a68:	b6 01       	movw	r22, r12
     a6a:	d0 db       	rcall	.-2144   	; 0x20c <UPDI::st8(unsigned long, unsigned char)>
nvm_ctrl_v3():
     a6c:	87 de       	rcall	.-754    	; 0x77c <NVM::nvm_wait_v3()>
     a6e:	84 e0       	ldi	r24, 0x04	; 4
nvm_ctrl_v2():
     a70:	c8 dc       	rcall	.-1648   	; 0x402 <NVM::nvm_ctrl_change(unsigned char)>
     a72:	0b cf       	rjmp	.-490    	; 0x88a <__DATA_REGION_LENGTH__+0x8a>
nvm_ctrl_v3():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:305
      bool is_bound = bit_is_clear(UPDI_CONTROL, UPDI::UPDI_ERFM_bp)
        && ((JTAG2::updi_desc.flash_page_size - 1) & (uint16_t)start_addr) == 0;

      if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp))
        return write_flash_v3(start_addr, data, byte_count, is_bound);
      else if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN2_bp))
     a74:	83 de       	rcall	.-762    	; 0x77c <NVM::nvm_wait_v3()>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:180

  bool write_flash_v2 (uint32_t start_addr, uint8_t *data, size_t byte_count, bool is_bound) {
    /* NVMCTRL version 2 or 4 */
    /* If the chip is not erased, erase the page. */
    /* However, only when the beginning of the page boundary is addressed */
    if (is_bound) {
     a76:	8f e0       	ldi	r24, 0x0F	; 15
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:73
    return true;
  }

  /* NVMCTRL version 2,4 */
  bool nvm_ctrl_v2 (uint8_t nvmcmd) {
    nvm_wait();
     a78:	ec cf       	rjmp	.-40     	; 0xa52 <__DATA_REGION_LENGTH__+0x252>
write_flash_v3():
     a7a:	40 2f       	mov	r20, r16
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:74
    return nvm_ctrl_change(nvmcmd);
     a7c:	c7 01       	movw	r24, r14
     a7e:	b6 01       	movw	r22, r12
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:184
    /* However, only when the beginning of the page boundary is addressed */
    if (is_bound) {
      if (!nvm_ctrl_v2(NVM_V2_CMD_FLPER)) return false;
      if (!UPDI::st8(start_addr, 0xFF)) return false;
    }
    if (!nvm_ctrl_v2(NVM_V2_CMD_FLWR)) return false;
     a80:	83 db       	rcall	.-2298   	; 0x188 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.17]>
     a82:	f4 cf       	rjmp	.-24     	; 0xa6c <__DATA_REGION_LENGTH__+0x26c>
write_memory():
     a84:	ee 9b       	sbis	0x1d, 6	; 29
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:187

    /* This version allows bulk writes of 512 bytes */
    if (byte_count == 1) UPDI::st8(start_addr, *data);
     a86:	62 c0       	rjmp	.+196    	; 0xb4c <__DATA_REGION_LENGTH__+0x34c>
write_flash_v2():
     a88:	21 11       	cpse	r18, r1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:130
      set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
      return true;
    }
    if (!nvm_ctrl_v2(NVM_V2_CMD_EEERWR)) return false;

    if (byte_count == 1) UPDI::st8(start_addr, *data);
     a8a:	0f c0       	rjmp	.+30     	; 0xaaa <__DATA_REGION_LENGTH__+0x2aa>
nvm_ctrl_v2():
     a8c:	85 de       	rcall	.-758    	; 0x798 <NVM::nvm_wait()>
     a8e:	82 e0       	ldi	r24, 0x02	; 2
     a90:	b8 dc       	rcall	.-1680   	; 0x402 <NVM::nvm_ctrl_change(unsigned char)>
write_flash_v2():
     a92:	88 23       	and	r24, r24
     a94:	09 f4       	brne	.+2      	; 0xa98 <__DATA_REGION_LENGTH__+0x298>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:73
    return true;
  }

  /* NVMCTRL version 2,4 */
  bool nvm_ctrl_v2 (uint8_t nvmcmd) {
    nvm_wait();
     a96:	25 cf       	rjmp	.-438    	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:74
    return nvm_ctrl_change(nvmcmd);
     a98:	01 30       	cpi	r16, 0x01	; 1
     a9a:	11 05       	cpc	r17, r1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:181
  bool write_flash_v2 (uint32_t start_addr, uint8_t *data, size_t byte_count, bool is_bound) {
    /* NVMCTRL version 2 or 4 */
    /* If the chip is not erased, erase the page. */
    /* However, only when the beginning of the page boundary is addressed */
    if (is_bound) {
      if (!nvm_ctrl_v2(NVM_V2_CMD_FLPER)) return false;
     a9c:	99 f4       	brne	.+38     	; 0xac4 <__DATA_REGION_LENGTH__+0x2c4>
write_eeprom_v2():
     a9e:	40 91 9c 38 	lds	r20, 0x389C	; 0x80389c <JTAG2::packet+0x12>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:182
      if (!UPDI::st8(start_addr, 0xFF)) return false;
     aa2:	c7 01       	movw	r24, r14
     aa4:	b6 01       	movw	r22, r12
     aa6:	b2 db       	rcall	.-2204   	; 0x20c <UPDI::st8(unsigned long, unsigned char)>
     aa8:	49 c0       	rjmp	.+146    	; 0xb3c <__DATA_REGION_LENGTH__+0x33c>
nvm_ctrl_v2():
     aaa:	76 de       	rcall	.-788    	; 0x798 <NVM::nvm_wait()>
     aac:	88 e0       	ldi	r24, 0x08	; 8
     aae:	a9 dc       	rcall	.-1710   	; 0x402 <NVM::nvm_ctrl_change(unsigned char)>
write_flash_v2():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:188
    }
    if (!nvm_ctrl_v2(NVM_V2_CMD_FLWR)) return false;

    /* This version allows bulk writes of 512 bytes */
    if (byte_count == 1) UPDI::st8(start_addr, *data);
    else if ((byte_count - 1) >> 8) UPDI::sts16rsd(start_addr, data, byte_count);
     ab0:	88 23       	and	r24, r24
     ab2:	09 f4       	brne	.+2      	; 0xab6 <__DATA_REGION_LENGTH__+0x2b6>
     ab4:	16 cf       	rjmp	.-468    	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
     ab6:	4f ef       	ldi	r20, 0xFF	; 255
     ab8:	c7 01       	movw	r24, r14
     aba:	b6 01       	movw	r22, r12
     abc:	a7 db       	rcall	.-2226   	; 0x20c <UPDI::st8(unsigned long, unsigned char)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:238
  if (!set_cs_ctra(UPDI_GTVAL)) return false;
  return true;
}

bool UPDI::sts16rsd (uint32_t addr, uint8_t *data, size_t len) {
  _CAPS32(_set_ptr_l[2])->dword = addr;
     abe:	81 11       	cpse	r24, r1
     ac0:	e5 cf       	rjmp	.-54     	; 0xa8c <__DATA_REGION_LENGTH__+0x28c>
     ac2:	0f cf       	rjmp	.-482    	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
     ac4:	c8 01       	movw	r24, r16
     ac6:	01 97       	sbiw	r24, 0x01	; 1
     ac8:	89 2f       	mov	r24, r25
     aca:	99 27       	eor	r25, r25
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:239
  uint8_t repeat = len >> 1;
     acc:	89 2b       	or	r24, r25
     ace:	09 f4       	brne	.+2      	; 0xad2 <__DATA_REGION_LENGTH__+0x2d2>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:240
  _set_repeat[2] = repeat - 1;
     ad0:	38 c0       	rjmp	.+112    	; 0xb42 <__DATA_REGION_LENGTH__+0x342>
sts16rsd():
     ad2:	c0 92 41 38 	sts	0x3841, r12	; 0x803841 <UPDI::_set_ptr_l+0x2>
     ad6:	d0 92 42 38 	sts	0x3842, r13	; 0x803842 <UPDI::_set_ptr_l+0x3>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:241
  _set_repeat[4] = UPDI_PTR_INC|UPDI_ST|UPDI_DATA2;
     ada:	e0 92 43 38 	sts	0x3843, r14	; 0x803843 <UPDI::_set_ptr_l+0x4>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:242
  if (!send_bytes(_set_ptr_l, sizeof(_set_ptr_l) - 1)) return false;
     ade:	f0 92 44 38 	sts	0x3844, r15	; 0x803844 <UPDI::_set_ptr_l+0x5>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:243
  if (UPDI_ACK != RECV()) return false;
     ae6:	f0 2e       	mov	r15, r16
     ae8:	ea e3       	ldi	r30, 0x3A	; 58
     aea:	f8 e3       	ldi	r31, 0x38	; 56
     aec:	01 50       	subi	r16, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:320
  set_ptr[2] = data;
  return send_bytes(set_ptr, sizeof(set_ptr));
}

bool UPDI::set_cs_ctra (uint8_t data) {
  return set_cs_stat(UPDI_CS_CTRLA, data);
     aee:	02 83       	std	Z+2, r16	; 0x02
     af0:	85 e6       	ldi	r24, 0x65	; 101
     af2:	84 83       	std	Z+4, r24	; 0x04
     af4:	65 e0       	ldi	r22, 0x05	; 5
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:244
  uint8_t repeat = len >> 1;
  _set_repeat[2] = repeat - 1;
  _set_repeat[4] = UPDI_PTR_INC|UPDI_ST|UPDI_DATA2;
  if (!send_bytes(_set_ptr_l, sizeof(_set_ptr_l) - 1)) return false;
  if (UPDI_ACK != RECV()) return false;
  if (!set_cs_ctra(UPDI_SET_RSD|UPDI_GTVAL_RSD)) return false;
     af6:	8f e3       	ldi	r24, 0x3F	; 63
     af8:	98 e3       	ldi	r25, 0x38	; 56
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:245
  if (!send_bytes(_set_repeat, sizeof(_set_repeat))) return false;
     afa:	2d db       	rcall	.-2470   	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     afc:	88 23       	and	r24, r24
     afe:	f1 f0       	breq	.+60     	; 0xb3c <__DATA_REGION_LENGTH__+0x33c>
     b00:	04 db       	rcall	.-2552   	; 0x10a <UPDI::RECV()>
     b02:	80 34       	cpi	r24, 0x40	; 64
     b04:	d9 f4       	brne	.+54     	; 0xb3c <__DATA_REGION_LENGTH__+0x33c>
set_cs_ctra():
     b06:	6e e0       	ldi	r22, 0x0E	; 14
     b08:	82 e0       	ldi	r24, 0x02	; 2
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:247
  do {              /* Repeat word send */
    SEND(*data++);  /* Submission errors must be ignored */
     b0a:	36 db       	rcall	.-2452   	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>
sts16rsd():
     b0c:	88 23       	and	r24, r24
     b0e:	b1 f0       	breq	.+44     	; 0xb3c <__DATA_REGION_LENGTH__+0x33c>
     b10:	65 e0       	ldi	r22, 0x05	; 5
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:248
    SEND(*data++);  /* Submission errors must be ignored */
     b12:	8a e3       	ldi	r24, 0x3A	; 58
     b14:	98 e3       	ldi	r25, 0x38	; 56
     b16:	1f db       	rcall	.-2498   	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     b18:	88 23       	and	r24, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:249
  } while (--repeat);
     b1a:	81 f0       	breq	.+32     	; 0xb3c <__DATA_REGION_LENGTH__+0x33c>
     b1c:	0a e8       	ldi	r16, 0x8A	; 138
     b1e:	18 e3       	ldi	r17, 0x38	; 56
     b20:	f8 01       	movw	r30, r16
     b22:	82 89       	ldd	r24, Z+18	; 0x12
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:320
  set_ptr[2] = data;
  return send_bytes(set_ptr, sizeof(set_ptr));
}

bool UPDI::set_cs_ctra (uint8_t data) {
  return set_cs_stat(UPDI_CS_CTRLA, data);
     b24:	fe da       	rcall	.-2564   	; 0x122 <UPDI::SEND(unsigned char)>
     b26:	f8 01       	movw	r30, r16
     b28:	83 89       	ldd	r24, Z+19	; 0x13
     b2a:	fb da       	rcall	.-2570   	; 0x122 <UPDI::SEND(unsigned char)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:73
    return true;
  }

  /* NVMCTRL version 2,4 */
  bool nvm_ctrl_v2 (uint8_t nvmcmd) {
    nvm_wait();
     b2c:	fa 94       	dec	r15
     b2e:	0e 5f       	subi	r16, 0xFE	; 254
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:74
    return nvm_ctrl_change(nvmcmd);
     b30:	1f 4f       	sbci	r17, 0xFF	; 255
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:189
    if (!nvm_ctrl_v2(NVM_V2_CMD_FLWR)) return false;

    /* This version allows bulk writes of 512 bytes */
    if (byte_count == 1) UPDI::st8(start_addr, *data);
    else if ((byte_count - 1) >> 8) UPDI::sts16rsd(start_addr, data, byte_count);
    else UPDI::sts8rsd(start_addr, data, byte_count);
     b32:	f1 10       	cpse	r15, r1
     b34:	f5 cf       	rjmp	.-22     	; 0xb20 <__DATA_REGION_LENGTH__+0x320>
set_cs_ctra():
     b36:	66 e0       	ldi	r22, 0x06	; 6
     b38:	82 e0       	ldi	r24, 0x02	; 2
     b3a:	1e db       	rcall	.-2500   	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>
nvm_ctrl_v2():
     b3c:	2d de       	rcall	.-934    	; 0x798 <NVM::nvm_wait()>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:198

  bool write_flash_v0 (uint32_t start_addr, uint8_t *data, size_t byte_count, bool is_bound) {
    /* NVMCTRL version 0 */
    /* This version does not require page erasure. */
    /* Just clearing the buffer buffer is sufficient. */
    if (is_bound) {
     b3e:	80 e0       	ldi	r24, 0x00	; 0
     b40:	97 cf       	rjmp	.-210    	; 0xa70 <__DATA_REGION_LENGTH__+0x270>
write_flash_v2():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:144
    if (byte_count > 64) {
      /* If the limit is exceeded, it will fall back and force a Single-byte write */
      set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
      return true;
    }
    nvm_wait();
     b42:	40 2f       	mov	r20, r16
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:146

    if (byte_count == 1) UPDI::st8(start_addr, *data);
     b44:	c7 01       	movw	r24, r14
     b46:	b6 01       	movw	r22, r12
     b48:	1f db       	rcall	.-2498   	; 0x188 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.17]>
     b4a:	f8 cf       	rjmp	.-16     	; 0xb3c <__DATA_REGION_LENGTH__+0x33c>
write_flash_v0():
     b4c:	21 11       	cpse	r18, r1
     b4e:	0d c0       	rjmp	.+26     	; 0xb6a <__DATA_REGION_LENGTH__+0x36a>
write_eeprom_v0():
     b50:	23 de       	rcall	.-954    	; 0x798 <NVM::nvm_wait()>
     b52:	01 30       	cpi	r16, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:149
    else UPDI::sts8rsd(start_addr, data, byte_count);

    return nvm_ctrl(NVM_CMD_ERWP);
     b54:	11 05       	cpc	r17, r1
     b56:	09 f0       	breq	.+2      	; 0xb5a <__DATA_REGION_LENGTH__+0x35a>
     b58:	9a c0       	rjmp	.+308    	; 0xc8e <__DATA_REGION_LENGTH__+0x48e>
     b5a:	40 91 9c 38 	lds	r20, 0x389C	; 0x80389c <JTAG2::packet+0x12>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:199
  bool write_flash_v0 (uint32_t start_addr, uint8_t *data, size_t byte_count, bool is_bound) {
    /* NVMCTRL version 0 */
    /* This version does not require page erasure. */
    /* Just clearing the buffer buffer is sufficient. */
    if (is_bound) {
      nvm_wait();
     b5e:	c7 01       	movw	r24, r14
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:200
      if (!nvm_ctrl(NVM_CMD_PBC)) return false;
     b60:	b6 01       	movw	r22, r12
     b62:	54 db       	rcall	.-2392   	; 0x20c <UPDI::st8(unsigned long, unsigned char)>
     b64:	83 e0       	ldi	r24, 0x03	; 3
     b66:	47 dc       	rcall	.-1906   	; 0x3f6 <NVM::nvm_ctrl(unsigned char)>
     b68:	90 ce       	rjmp	.-736    	; 0x88a <__DATA_REGION_LENGTH__+0x8a>
write_flash_v0():
     b6a:	16 de       	rcall	.-980    	; 0x798 <NVM::nvm_wait()>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:313
        return write_flash_v0(start_addr, data, byte_count, is_bound);
    }
  }

  /* Other writes are allowed from 1 to 256 bytes */
  if (byte_count == 0 || byte_count > 256) {
     b6c:	84 e0       	ldi	r24, 0x04	; 4
     b6e:	43 dc       	rcall	.-1914   	; 0x3f6 <NVM::nvm_ctrl(unsigned char)>
     b70:	81 11       	cpse	r24, r1
     b72:	ee cf       	rjmp	.-36     	; 0xb50 <__DATA_REGION_LENGTH__+0x350>
     b74:	b6 ce       	rjmp	.-660    	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
write_memory():
     b76:	98 01       	movw	r18, r16
     b78:	21 50       	subi	r18, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:318
    set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
    return true;
  }

  switch (mem_type) {
     b7a:	31 09       	sbc	r19, r1
     b7c:	2f 3f       	cpi	r18, 0xFF	; 255
     b7e:	31 05       	cpc	r19, r1
     b80:	11 f0       	breq	.+4      	; 0xb86 <__DATA_REGION_LENGTH__+0x386>
     b82:	08 f0       	brcs	.+2      	; 0xb86 <__DATA_REGION_LENGTH__+0x386>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:339
      /* FUSES in other implementations is equivalent to EEPROM */
    }
    case JTAG2::MTYPE_XMEGA_EEPROM :          // 0xC4
    case JTAG2::MTYPE_EEPROM_PAGE :           // 0xB1
    case JTAG2::MTYPE_EEPROM : {              // 0x22
      if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp))
     b84:	64 ce       	rjmp	.-824    	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
     b86:	81 3b       	cpi	r24, 0xB1	; 177
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:106
   ***********************************/

  bool write_eeprom_v3 (uint32_t start_addr, uint8_t *data, size_t byte_count) {
    /* NVMCTRL version 3 or 5 */
    /* This version can write 8 bytes in bulk */
    if (byte_count > 8) {
     b88:	29 f0       	breq	.+10     	; 0xb94 <__DATA_REGION_LENGTH__+0x394>
     b8a:	e0 f4       	brcc	.+56     	; 0xbc4 <__DATA_REGION_LENGTH__+0x3c4>
     b8c:	80 32       	cpi	r24, 0x20	; 32
     b8e:	09 f1       	breq	.+66     	; 0xbd2 <__DATA_REGION_LENGTH__+0x3d2>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:79
    return nvm_ctrl_change(nvmcmd);
  }

  /* NVMCTRL version 3,5 */
  bool nvm_ctrl_v3 (uint8_t nvmcmd) {
    nvm_wait_v3();
     b90:	82 32       	cpi	r24, 0x22	; 34
     b92:	e1 f4       	brne	.+56     	; 0xbcc <__DATA_REGION_LENGTH__+0x3cc>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:80
    return nvm_ctrl_change(nvmcmd);
     b94:	ed 9b       	sbis	0x1d, 5	; 29
     b96:	5f c0       	rjmp	.+190    	; 0xc56 <__DATA_REGION_LENGTH__+0x456>
write_eeprom_v3():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:111
    if (byte_count > 8) {
      /* If the limit is exceeded, it will fall back and force a Single-byte write */
      set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
      return true;
    }
    if (!nvm_ctrl_v3(NVM_V3_CMD_EEPBCLR)) return false;
     b98:	09 30       	cpi	r16, 0x09	; 9
     b9a:	11 05       	cpc	r17, r1
     b9c:	08 f0       	brcs	.+2      	; 0xba0 <__DATA_REGION_LENGTH__+0x3a0>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:113

    if (byte_count == 1) UPDI::st8(start_addr, *data);
     b9e:	57 ce       	rjmp	.-850    	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
nvm_ctrl_v3():
     ba0:	ed dd       	rcall	.-1062   	; 0x77c <NVM::nvm_wait_v3()>
     ba2:	8f e1       	ldi	r24, 0x1F	; 31
     ba4:	2e dc       	rcall	.-1956   	; 0x402 <NVM::nvm_ctrl_change(unsigned char)>
write_eeprom_v3():
     ba6:	88 23       	and	r24, r24
     ba8:	09 f4       	brne	.+2      	; 0xbac <__DATA_REGION_LENGTH__+0x3ac>
     baa:	9b ce       	rjmp	.-714    	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
     bac:	01 30       	cpi	r16, 0x01	; 1
     bae:	11 05       	cpc	r17, r1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:79
    return nvm_ctrl_change(nvmcmd);
  }

  /* NVMCTRL version 3,5 */
  bool nvm_ctrl_v3 (uint8_t nvmcmd) {
    nvm_wait_v3();
     bb0:	09 f0       	breq	.+2      	; 0xbb4 <__DATA_REGION_LENGTH__+0x3b4>
     bb2:	4a c0       	rjmp	.+148    	; 0xc48 <__DATA_REGION_LENGTH__+0x448>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:80
    return nvm_ctrl_change(nvmcmd);
     bb4:	40 91 9c 38 	lds	r20, 0x389C	; 0x80389c <JTAG2::packet+0x12>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:318
  if (byte_count == 0 || byte_count > 256) {
    set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
    return true;
  }

  switch (mem_type) {
     bb8:	c7 01       	movw	r24, r14
     bba:	b6 01       	movw	r22, r12
     bbc:	27 db       	rcall	.-2482   	; 0x20c <UPDI::st8(unsigned long, unsigned char)>
nvm_ctrl_v3():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:348
      else
        return write_eeprom_v0(start_addr, data, byte_count);
    }
    default :
      /* Other memory types are rejected */
      set_response(JTAG2::RSP_ILLEGAL_MEMORY_TYPE);
     bbe:	de dd       	rcall	.-1092   	; 0x77c <NVM::nvm_wait_v3()>
     bc0:	85 e1       	ldi	r24, 0x15	; 21
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:321
  }

  switch (mem_type) {
    /* Can write to the IO region as is */
    case JTAG2::MTYPE_SRAM : {                // 0x20
      return UPDI::sts8(start_addr, data, byte_count);
     bc2:	56 cf       	rjmp	.-340    	; 0xa70 <__DATA_REGION_LENGTH__+0x270>
write_memory():
     bc4:	84 3b       	cpi	r24, 0xB4	; 180
     bc6:	60 f0       	brcs	.+24     	; 0xbe0 <__DATA_REGION_LENGTH__+0x3e0>
     bc8:	84 3c       	cpi	r24, 0xC4	; 196
     bca:	21 f3       	breq	.-56     	; 0xb94 <__DATA_REGION_LENGTH__+0x394>
     bcc:	82 ea       	ldi	r24, 0xA2	; 162
     bce:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:328
    /* EEPROM region */
    case JTAG2::MTYPE_LOCK_BITS :             // 0xB3
    case JTAG2::MTYPE_FUSE_BITS : {           // 0xB2
      /* The NVMCTRL version 0 implementation is special. */
      if (bit_is_clear(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp)
      && bit_is_clear(UPDI_NVMCTRL, UPDI::UPDI_GEN2_bp)) {
     bd0:	27 cf       	rjmp	.-434    	; 0xa20 <__DATA_REGION_LENGTH__+0x220>
     bd2:	20 2f       	mov	r18, r16
     bd4:	4c e9       	ldi	r20, 0x9C	; 156
     bd6:	58 e3       	ldi	r21, 0x38	; 56
     bd8:	c7 01       	movw	r24, r14
     bda:	b6 01       	movw	r22, r12
     bdc:	54 db       	rcall	.-2392   	; 0x286 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)>
     bde:	55 ce       	rjmp	.-854    	; 0x88a <__DATA_REGION_LENGTH__+0x8a>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:91

  bool write_fuse (uint16_t addr, uint8_t data) {
    /* Version 0 of FUSE can write one byte at a time in a special way */
    struct fuse_packet_t { uint16_t data; uint16_t addr; } fuse_packet;
    fuse_packet.data = data;
    fuse_packet.addr = addr;
     be0:	ed 99       	sbic	0x1d, 5	; 29
     be2:	d8 cf       	rjmp	.-80     	; 0xb94 <__DATA_REGION_LENGTH__+0x394>
     be4:	ee 99       	sbic	0x1d, 6	; 29
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:90
   **********************************************/

  bool write_fuse (uint16_t addr, uint8_t data) {
    /* Version 0 of FUSE can write one byte at a time in a special way */
    struct fuse_packet_t { uint16_t data; uint16_t addr; } fuse_packet;
    fuse_packet.data = data;
     be6:	d6 cf       	rjmp	.-84     	; 0xb94 <__DATA_REGION_LENGTH__+0x394>
     be8:	c8 01       	movw	r24, r16
     bea:	86 57       	subi	r24, 0x76	; 118
     bec:	97 4c       	sbci	r25, 0xC7	; 199
     bee:	5c 01       	movw	r10, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:91
    fuse_packet.addr = addr;
     bf0:	0a e8       	ldi	r16, 0x8A	; 138
     bf2:	18 e3       	ldi	r17, 0x38	; 56
write_fuse():
     bf4:	f6 01       	movw	r30, r12
     bf6:	ea 58       	subi	r30, 0x8A	; 138
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:92
    nvm_wait();
     bf8:	f8 43       	sbci	r31, 0x38	; 56
     bfa:	6f 01       	movw	r12, r30
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:93
    if (!UPDI::sts8(NVMCTRL_REG_DATA,
     bfc:	f8 01       	movw	r30, r16
     bfe:	82 89       	ldd	r24, Z+18	; 0x12
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	89 83       	std	Y+1, r24	; 0x01
     c04:	9a 83       	std	Y+2, r25	; 0x02
     c06:	c6 01       	movw	r24, r12
     c08:	80 0f       	add	r24, r16
     c0a:	91 1f       	adc	r25, r17
     c0c:	8b 83       	std	Y+3, r24	; 0x03
     c0e:	9c 83       	std	Y+4, r25	; 0x04
     c10:	c3 dd       	rcall	.-1146   	; 0x798 <NVM::nvm_wait()>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:95
      (uint8_t*)&fuse_packet, sizeof(fuse_packet))) return false;
    if (!nvm_ctrl(NVM_CMD_WFU)) return false;
     c12:	24 e0       	ldi	r18, 0x04	; 4
     c14:	ae 01       	movw	r20, r28
     c16:	4f 5f       	subi	r20, 0xFF	; 255
     c18:	5f 4f       	sbci	r21, 0xFF	; 255
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:96
    return ((nvm_wait() & 7) == 0);
     c1a:	66 e0       	ldi	r22, 0x06	; 6
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:330
    case JTAG2::MTYPE_FUSE_BITS : {           // 0xB2
      /* The NVMCTRL version 0 implementation is special. */
      if (bit_is_clear(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp)
      && bit_is_clear(UPDI_NVMCTRL, UPDI::UPDI_GEN2_bp)) {
        do {
          if (!write_fuse(start_addr++, *data++)) return false;
     c1c:	70 e1       	ldi	r23, 0x10	; 16
     c1e:	80 e0       	ldi	r24, 0x00	; 0
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	31 db       	rcall	.-2462   	; 0x286 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:331
        } while (--byte_count);
     c24:	88 23       	and	r24, r24
     c26:	09 f4       	brne	.+2      	; 0xc2a <__DATA_REGION_LENGTH__+0x42a>
     c28:	5c ce       	rjmp	.-840    	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
     c2a:	87 e0       	ldi	r24, 0x07	; 7
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:114
      return true;
    }
    if (!nvm_ctrl_v3(NVM_V3_CMD_EEPBCLR)) return false;

    if (byte_count == 1) UPDI::st8(start_addr, *data);
    else UPDI::sts8(start_addr, data, byte_count);
     c2c:	e4 db       	rcall	.-2104   	; 0x3f6 <NVM::nvm_ctrl(unsigned char)>
     c2e:	88 23       	and	r24, r24
     c30:	09 f4       	brne	.+2      	; 0xc34 <__DATA_REGION_LENGTH__+0x434>
     c32:	57 ce       	rjmp	.-850    	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
     c34:	b1 dd       	rcall	.-1182   	; 0x798 <NVM::nvm_wait()>
write_memory():
     c36:	87 70       	andi	r24, 0x07	; 7
     c38:	09 f0       	breq	.+2      	; 0xc3c <__DATA_REGION_LENGTH__+0x43c>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:341
    case JTAG2::MTYPE_XMEGA_EEPROM :          // 0xC4
    case JTAG2::MTYPE_EEPROM_PAGE :           // 0xB1
    case JTAG2::MTYPE_EEPROM : {              // 0x22
      if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp))
        return write_eeprom_v3(start_addr, data, byte_count);
      else if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN2_bp))
     c3a:	53 ce       	rjmp	.-858    	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
     c3c:	0f 5f       	subi	r16, 0xFF	; 255
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:123

  bool write_eeprom_v2 (uint32_t start_addr, uint8_t *data, size_t byte_count) {
    /* NVMCTRL version 2 or 4 */
    /* This version cannot be written in bulk transfer */
    /* Only 2 bytes (1 word) can be written at a time */
    if (byte_count > 2) {
     c3e:	1f 4f       	sbci	r17, 0xFF	; 255
     c40:	0a 15       	cp	r16, r10
     c42:	1b 05       	cpc	r17, r11
     c44:	d9 f6       	brne	.-74     	; 0xbfc <__DATA_REGION_LENGTH__+0x3fc>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:73
    return true;
  }

  /* NVMCTRL version 2,4 */
  bool nvm_ctrl_v2 (uint8_t nvmcmd) {
    nvm_wait();
     c46:	20 ce       	rjmp	.-960    	; 0x888 <__DATA_REGION_LENGTH__+0x88>
write_eeprom_v3():
     c48:	20 2f       	mov	r18, r16
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:74
    return nvm_ctrl_change(nvmcmd);
     c4a:	4c e9       	ldi	r20, 0x9C	; 156
     c4c:	58 e3       	ldi	r21, 0x38	; 56
     c4e:	c7 01       	movw	r24, r14
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:128
    if (byte_count > 2) {
      /* If the limit is exceeded, it will fall back and force a Single-byte write */
      set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
      return true;
    }
    if (!nvm_ctrl_v2(NVM_V2_CMD_EEERWR)) return false;
     c50:	b6 01       	movw	r22, r12
     c52:	19 db       	rcall	.-2510   	; 0x286 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)>
     c54:	b4 cf       	rjmp	.-152    	; 0xbbe <__DATA_REGION_LENGTH__+0x3be>
write_memory():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:130

    if (byte_count == 1) UPDI::st8(start_addr, *data);
     c56:	ee 9b       	sbis	0x1d, 6	; 29
     c58:	15 c0       	rjmp	.+42     	; 0xc84 <__DATA_REGION_LENGTH__+0x484>
write_eeprom_v2():
     c5a:	03 30       	cpi	r16, 0x03	; 3
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:131
    else UPDI::sts8(start_addr, data, byte_count);
     c5c:	11 05       	cpc	r17, r1
     c5e:	08 f0       	brcs	.+2      	; 0xc62 <__DATA_REGION_LENGTH__+0x462>
     c60:	f6 cd       	rjmp	.-1044   	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
nvm_ctrl_v2():
     c62:	9a dd       	rcall	.-1228   	; 0x798 <NVM::nvm_wait()>
     c64:	83 e1       	ldi	r24, 0x13	; 19
     c66:	cd db       	rcall	.-2150   	; 0x402 <NVM::nvm_ctrl_change(unsigned char)>
write_eeprom_v2():
     c68:	88 23       	and	r24, r24
     c6a:	09 f4       	brne	.+2      	; 0xc6e <__DATA_REGION_LENGTH__+0x46e>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:139
  }

  bool write_eeprom_v0 (uint32_t start_addr, uint8_t *data, size_t byte_count) {
    /* NVMCTRL version 0 */
    /* This version allows fast bulk writes of 32 or 64 bytes */
    if (byte_count > 64) {
     c6c:	3a ce       	rjmp	.-908    	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
     c6e:	01 30       	cpi	r16, 0x01	; 1
     c70:	11 05       	cpc	r17, r1
     c72:	09 f4       	brne	.+2      	; 0xc76 <__DATA_REGION_LENGTH__+0x476>
     c74:	14 cf       	rjmp	.-472    	; 0xa9e <__DATA_REGION_LENGTH__+0x29e>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/NVM.cpp:147
      return true;
    }
    nvm_wait();

    if (byte_count == 1) UPDI::st8(start_addr, *data);
    else UPDI::sts8rsd(start_addr, data, byte_count);
     c76:	22 e0       	ldi	r18, 0x02	; 2
     c78:	4c e9       	ldi	r20, 0x9C	; 156
     c7a:	58 e3       	ldi	r21, 0x38	; 56
     c7c:	c7 01       	movw	r24, r14
     c7e:	b6 01       	movw	r22, r12
     c80:	02 db       	rcall	.-2556   	; 0x286 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:734
      case UPDI_CMD_WRITE_MEMORY : {
        _result = NVM::write_memory();
        break;
      }
      case UPDI_CMD_ERASE : {
        if (JTAG2::packet.body[JTAG2::MEM_TYPE] == JTAG2::XMEGA_ERASE_CHIP) {
     c82:	5c cf       	rjmp	.-328    	; 0xb3c <__DATA_REGION_LENGTH__+0x33c>
write_eeprom_v0():
     c84:	01 34       	cpi	r16, 0x41	; 65
     c86:	11 05       	cpc	r17, r1
     c88:	08 f4       	brcc	.+2      	; 0xc8c <__DATA_REGION_LENGTH__+0x48c>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:527
 ****************************/

// __attribute__((optimize("O0")))
bool UPDI::chip_erase (void) {
  /* If UPDI is prohibited, try HV control */
  if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) {
     c8a:	62 cf       	rjmp	.-316    	; 0xb50 <__DATA_REGION_LENGTH__+0x350>
     c8c:	e0 cd       	rjmp	.-1088   	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:399
  return loop_until_key_stat_is_set(UPDI_KEY_NVMPROG);
}

/* __attribute__((optimize("O0"))) */
bool UPDI::set_erase_key (void) {
  if (!send_bytes(erase_key, sizeof(erase_key))) return false;
     c8e:	40 2f       	mov	r20, r16
     c90:	c7 01       	movw	r24, r14
     c92:	b6 01       	movw	r22, r12
     c94:	79 da       	rcall	.-2830   	; 0x188 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.17]>
     c96:	66 cf       	rjmp	.-308    	; 0xb64 <__DATA_REGION_LENGTH__+0x364>
_ZN4UPDI7runtimeEh():
     c98:	80 91 93 38 	lds	r24, 0x3893	; 0x803893 <JTAG2::packet+0x9>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:400
  return loop_until_key_stat_is_set(UPDI_KEY_CHIPERASE);
     c9c:	81 11       	cpse	r24, r1
     c9e:	f6 cd       	rjmp	.-1044   	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
chip_erase():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:532
  if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) {
    HV_Pulse();
  }

  /* Transition to CHIPERASE mode by system reset */
  if (!set_erase_key()) return false;
     ca0:	e0 9b       	sbis	0x1c, 0	; 28
     ca2:	41 c0       	rjmp	.+130    	; 0xd26 <__DATA_REGION_LENGTH__+0x526>
set_erase_key():
     ca4:	6a e0       	ldi	r22, 0x0A	; 10
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:535

  /* Issue a system reset */
  if (!updi_reset(true) || !updi_reset(false)) return false;
     ca6:	8c e2       	ldi	r24, 0x2C	; 44
     ca8:	98 e3       	ldi	r25, 0x38	; 56
     caa:	55 da       	rcall	.-2902   	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     cac:	88 23       	and	r24, r24
     cae:	09 f4       	brne	.+2      	; 0xcb2 <__DATA_REGION_LENGTH__+0x4b2>
     cb0:	18 ce       	rjmp	.-976    	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
     cb2:	88 e0       	ldi	r24, 0x08	; 8
     cb4:	35 dc       	rcall	.-1942   	; 0x520 <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.20]>
chip_erase():
     cb6:	88 23       	and	r24, r24
     cb8:	09 f4       	brne	.+2      	; 0xcbc <__DATA_REGION_LENGTH__+0x4bc>
     cba:	13 ce       	rjmp	.-986    	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:538

  /* If LOCKSTATUS is clear, the chip is unlocked */
  loop_until_sys_stat_is_clear(UPDI_SYS_LOCKSTATUS);
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	24 db       	rcall	.-2488   	; 0x308 <UPDI::updi_reset(bool)>
     cc0:	88 23       	and	r24, r24
     cc2:	09 f4       	brne	.+2      	; 0xcc6 <__DATA_REGION_LENGTH__+0x4c6>
     cc4:	0e ce       	rjmp	.-996    	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
     cc6:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:297
  send_bytes(set_ptr, sizeof(set_ptr));
  return RECV();
}

bool UPDI::is_cs_stat (uint8_t code, uint8_t check) {
  return check == (get_cs_stat(code) & check);
     cc8:	1f db       	rcall	.-2498   	; 0x308 <UPDI::updi_reset(bool)>
     cca:	88 23       	and	r24, r24
     ccc:	09 f4       	brne	.+2      	; 0xcd0 <__DATA_REGION_LENGTH__+0x4d0>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:367
bool UPDI::loop_until_key_stat_is_clear (uint8_t bitmap, uint16_t limit) {
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  uint16_t _back = _send_ptr;
  #endif
  do {
    if (!is_key_stat(bitmap)) return true;
     cce:	09 ce       	rjmp	.-1006   	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.8/cores/megaAVR/api/delay_busywait.h:31
     cd0:	70 e0       	ldi	r23, 0x00	; 0
     cd2:	60 e0       	ldi	r22, 0x00	; 0
     cd4:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:372
    #ifdef ENABLE_DEBUG_UPDI_SENDER
    _send_ptr = _back;
    #endif
    TIM::delay_50us();
  } while (--limit);
     cd6:	5e dc       	rcall	.-1860   	; 0x594 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
     cd8:	10 e0       	ldi	r17, 0x00	; 0
     cda:	00 e0       	ldi	r16, 0x00	; 0
is_cs_stat():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:544

  /* Make sure the CHER bit is cleared before next reset */
  loop_until_key_stat_is_clear(UPDI_KEY_CHIPERASE);

  /* Chip erasure was successful */
  bit_set(UPDI_CONTROL, UPDI_ERFM_bp);
     cdc:	87 e0       	ldi	r24, 0x07	; 7
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:548

  /* Once the HV control and device is successfully unlocked, */
  /* you should be able to enter program mode. */
  if (!set_nvmprog_key()) return false;
     cde:	8e da       	rcall	.-2788   	; 0x1fc <UPDI::get_cs_stat(unsigned char)>
loop_until_key_stat_is_clear():
     ce0:	83 ff       	sbrs	r24, 3
     ce2:	07 c0       	rjmp	.+14     	; 0xcf2 <__DATA_REGION_LENGTH__+0x4f2>
delay_micros():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:549
  if (!updi_reset(true) || !updi_reset(false)) return false;
     ce4:	f6 ea       	ldi	r31, 0xA6	; 166
     ce6:	fa 95       	dec	r31
     ce8:	f1 f7       	brne	.-4      	; 0xce6 <__DATA_REGION_LENGTH__+0x4e6>
     cea:	00 c0       	rjmp	.+0      	; 0xcec <__DATA_REGION_LENGTH__+0x4ec>
loop_until_key_stat_is_clear():
     cec:	01 50       	subi	r16, 0x01	; 1
     cee:	11 09       	sbc	r17, r1
     cf0:	a9 f7       	brne	.-22     	; 0xcdc <__DATA_REGION_LENGTH__+0x4dc>
chip_erase():
     cf2:	e2 9a       	sbi	0x1c, 2	; 28
     cf4:	2d dc       	rcall	.-1958   	; 0x550 <UPDI::set_nvmprog_key()>
     cf6:	88 23       	and	r24, r24
     cf8:	09 f4       	brne	.+2      	; 0xcfc <__DATA_REGION_LENGTH__+0x4fc>
     cfa:	f3 cd       	rjmp	.-1050   	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:550
  loop_until_sys_stat_is_clear(UPDI_SYS_LOCKSTATUS);
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	04 db       	rcall	.-2552   	; 0x308 <UPDI::updi_reset(bool)>
     d00:	88 23       	and	r24, r24
     d02:	09 f4       	brne	.+2      	; 0xd06 <__DATA_REGION_LENGTH__+0x506>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:551
  loop_until_sys_stat_is_set(UPDI_SYS_NVMPROG);
     d04:	ee cd       	rjmp	.-1060   	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
     d06:	80 e0       	ldi	r24, 0x00	; 0
     d08:	ff da       	rcall	.-2562   	; 0x308 <UPDI::updi_reset(bool)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:554

  /* After performing HV control, it is necessary to obtain SIB */
  bit_clear(UPDI_CONTROL, UPDI_INFO_bp);
     d0a:	88 23       	and	r24, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:555
  bit_set(UPDI_CONTROL, UPDI_PROG_bp);
     d0c:	09 f4       	brne	.+2      	; 0xd10 <__DATA_REGION_LENGTH__+0x510>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:556
  return enter_updi(true);
     d0e:	e9 cd       	rjmp	.-1070   	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
     d10:	70 e0       	ldi	r23, 0x00	; 0
     d12:	60 e0       	ldi	r22, 0x00	; 0
     d14:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:528

// __attribute__((optimize("O0")))
bool UPDI::chip_erase (void) {
  /* If UPDI is prohibited, try HV control */
  if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) {
    HV_Pulse();
     d16:	3e dc       	rcall	.-1924   	; 0x594 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
     d18:	88 e0       	ldi	r24, 0x08	; 8
     d1a:	24 dc       	rcall	.-1976   	; 0x564 <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.23]>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:740
          _result = chip_erase();
        }
        break;
      }
      case UPDI_CMD_GO : {
        _result = Target_Reset(true) && Target_Reset(false);
     d1c:	e0 98       	cbi	0x1c, 0	; 28
     d1e:	e1 9a       	sbi	0x1c, 1	; 28
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	8e dc       	rcall	.-1764   	; 0x640 <UPDI::enter_updi(bool)>
     d24:	b2 cd       	rjmp	.-1180   	; 0x88a <__DATA_REGION_LENGTH__+0x8a>
     d26:	4d dc       	rcall	.-1894   	; 0x5c2 <UPDI::HV_Pulse()>
     d28:	bd cf       	rjmp	.-134    	; 0xca4 <__DATA_REGION_LENGTH__+0x4a4>
_ZN4UPDI7runtimeEh():
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	f2 da       	rcall	.-2588   	; 0x312 <UPDI::Target_Reset(bool)>
     d2e:	88 23       	and	r24, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:698

/**********************
 * UPDI authorization *
 **********************/

bool UPDI::updi_activate (void) {
     d30:	09 f4       	brne	.+2      	; 0xd34 <__DATA_REGION_LENGTH__+0x534>
     d32:	ab cd       	rjmp	.-1194   	; 0x88a <__DATA_REGION_LENGTH__+0x8a>
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	ed da       	rcall	.-2598   	; 0x312 <UPDI::Target_Reset(bool)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:699
  volatile uint8_t count = 4;
     d38:	a8 cd       	rjmp	.-1200   	; 0x88a <__DATA_REGION_LENGTH__+0x8a>

00000d3a <UPDI::updi_activate()>:
_ZN4UPDI13updi_activateEv():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:700
  while (--count && bit_is_clear(UPDI_CONTROL, UPDI_PROG_bp)) {
     d3a:	cf 93       	push	r28
     d3c:	df 93       	push	r29
     d3e:	1f 92       	push	r1
     d40:	cd b7       	in	r28, 0x3d	; 61
     d42:	de b7       	in	r29, 0x3e	; 62
     d44:	84 e0       	ldi	r24, 0x04	; 4
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:711

    /* After the 2nd lap, forced HV control is allowed for JP short. */
    if (count < 2 && JTAG2::updi_desc.hvupdi_variant != '1' && !digitalRead(JP_SENSE_PIN))
      bit_set(UPDI_CONTROL, UPDI_FCHV_bp);
  }
  return bit_is_set(UPDI_CONTROL, UPDI_PROG_bp);
     d46:	89 83       	std	Y+1, r24	; 0x01
     d48:	89 81       	ldd	r24, Y+1	; 0x01
     d4a:	81 50       	subi	r24, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:712
}
     d4c:	89 83       	std	Y+1, r24	; 0x01
     d4e:	88 23       	and	r24, r24
     d50:	11 f0       	breq	.+4      	; 0xd56 <UPDI::updi_activate()+0x1c>
     d52:	e1 9b       	sbis	0x1c, 1	; 28
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:701
 **********************/

bool UPDI::updi_activate (void) {
  volatile uint8_t count = 4;
  while (--count && bit_is_clear(UPDI_CONTROL, UPDI_PROG_bp)) {
    if (setjmp(TIM::CONTEXT) == 0) {
     d54:	07 c0       	rjmp	.+14     	; 0xd64 <UPDI::updi_activate()+0x2a>
     d56:	8c b3       	in	r24, 0x1c	; 28
     d58:	86 95       	lsr	r24
     d5a:	81 70       	andi	r24, 0x01	; 1
     d5c:	0f 90       	pop	r0
     d5e:	df 91       	pop	r29
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:118
/*
 * Timeout control
 */

void TIM::Timeout_Start (uint16_t _ms) {
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     d60:	cf 91       	pop	r28
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     d62:	08 95       	ret
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:119
    TCB0_CNT = 0;
     d64:	86 e4       	ldi	r24, 0x46	; 70
     d66:	98 e3       	ldi	r25, 0x38	; 56
     d68:	db d3       	rcall	.+1974   	; 0x1520 <setjmp>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:120
    TCB0_CCMP = _ms >> 2;
     d6a:	89 2b       	or	r24, r25
     d6c:	31 f5       	brne	.+76     	; 0xdba <UPDI::updi_activate()+0x80>
Timeout_Start():
     d6e:	8f b7       	in	r24, 0x3f	; 63
__iCliRetVal():
     d70:	f8 94       	cli
Timeout_Start():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:121
    TCB0_INTCTRL = TCB_CAPT_bm;
     d72:	ea e8       	ldi	r30, 0x8A	; 138
     d74:	fa e0       	ldi	r31, 0x0A	; 10
     d76:	10 82       	st	Z, r1
     d78:	11 82       	std	Z+1, r1	; 0x01
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:122
    TCB0_INTFLAGS = TCB_CAPT_bm;
     d7a:	2f e1       	ldi	r18, 0x1F	; 31
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:123
    TCB0_CTRLA = TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	ec e8       	ldi	r30, 0x8C	; 140
     d80:	fa e0       	ldi	r31, 0x0A	; 10
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     d82:	20 83       	st	Z, r18
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:703
      TIM::Timeout_Start(125);
      enter_updi(false) && enter_prog();
     d84:	31 83       	std	Z+1, r19	; 0x01
     d86:	21 e0       	ldi	r18, 0x01	; 1
     d88:	e5 e8       	ldi	r30, 0x85	; 133
     d8a:	fa e0       	ldi	r31, 0x0A	; 10
     d8c:	20 83       	st	Z, r18
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:677
/******************************
 * Programming control starts *
 ******************************/

bool UPDI::enter_prog (void) {
  if (bit_is_clear(UPDI_CONTROL, UPDI_PROG_bp)) {
     d8e:	e6 e8       	ldi	r30, 0x86	; 134
     d90:	fa e0       	ldi	r31, 0x0A	; 10
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:678
    loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
     d92:	20 83       	st	Z, r18
     d94:	2f e0       	ldi	r18, 0x0F	; 15
     d96:	e0 e8       	ldi	r30, 0x80	; 128
     d98:	fa e0       	ldi	r31, 0x0A	; 10
     d9a:	20 83       	st	Z, r18
__iRestore():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:679
    if (!(UPDI_LASTL & UPDI_SYS_NVMPROG)) {
     d9c:	8f bf       	out	0x3f, r24	; 63
_ZN4UPDI13updi_activateEv():
     d9e:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:688
      }
      if (!updi_reset(true) || !updi_reset(false)) return false;
      loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
      loop_until_sys_stat_is_set(UPDI_SYS_NVMPROG);
    }
    bit_set(UPDI_CONTROL, UPDI_INFO_bp);
     da0:	4f dc       	rcall	.-1890   	; 0x640 <UPDI::enter_updi(bool)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:689
    bit_set(UPDI_CONTROL, UPDI_PROG_bp);
     da2:	88 23       	and	r24, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:705
  while (--count && bit_is_clear(UPDI_CONTROL, UPDI_PROG_bp)) {
    if (setjmp(TIM::CONTEXT) == 0) {
      TIM::Timeout_Start(125);
      enter_updi(false) && enter_prog();
    }
    TIM::Timeout_Stop();
     da4:	51 f0       	breq	.+20     	; 0xdba <UPDI::updi_activate()+0x80>
enter_prog():
     da6:	e1 99       	sbic	0x1c, 1	; 28
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:708

    /* After the 2nd lap, forced HV control is allowed for JP short. */
    if (count < 2 && JTAG2::updi_desc.hvupdi_variant != '1' && !digitalRead(JP_SENSE_PIN))
     da8:	08 c0       	rjmp	.+16     	; 0xdba <UPDI::updi_activate()+0x80>
     daa:	70 e0       	ldi	r23, 0x00	; 0
     dac:	60 e0       	ldi	r22, 0x00	; 0
     dae:	80 e2       	ldi	r24, 0x20	; 32
     db0:	f1 db       	rcall	.-2078   	; 0x594 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
     db2:	f3 9b       	sbis	0x1e, 3	; 30
     db4:	10 c0       	rjmp	.+32     	; 0xdd6 <UPDI::updi_activate()+0x9c>
     db6:	e0 9a       	sbi	0x1c, 0	; 28
     db8:	e1 9a       	sbi	0x1c, 1	; 28
_ZN4UPDI13updi_activateEv():
     dba:	e8 da       	rcall	.-2608   	; 0x38c <TIM::Timeout_Stop()>
     dbc:	89 81       	ldd	r24, Y+1	; 0x01
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:709
      bit_set(UPDI_CONTROL, UPDI_FCHV_bp);
     dbe:	82 30       	cpi	r24, 0x02	; 2
     dc0:	08 f0       	brcs	.+2      	; 0xdc4 <UPDI::updi_activate()+0x8a>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:680

bool UPDI::enter_prog (void) {
  if (bit_is_clear(UPDI_CONTROL, UPDI_PROG_bp)) {
    loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
    if (!(UPDI_LASTL & UPDI_SYS_NVMPROG)) {
      if (UPDI_LASTL & UPDI_SYS_LOCKSTATUS) return false;
     dc2:	c2 cf       	rjmp	.-124    	; 0xd48 <UPDI::updi_activate()+0xe>
     dc4:	80 91 60 38 	lds	r24, 0x3860	; 0x803860 <JTAG2::updi_desc+0x2>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:297
  send_bytes(set_ptr, sizeof(set_ptr));
  return RECV();
}

bool UPDI::is_cs_stat (uint8_t code, uint8_t check) {
  return check == (get_cs_stat(code) & check);
     dc8:	81 33       	cpi	r24, 0x31	; 49
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:681
bool UPDI::enter_prog (void) {
  if (bit_is_clear(UPDI_CONTROL, UPDI_PROG_bp)) {
    loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
    if (!(UPDI_LASTL & UPDI_SYS_NVMPROG)) {
      if (UPDI_LASTL & UPDI_SYS_LOCKSTATUS) return false;
      if (!is_key_stat(UPDI_KEY_NVMPROG)) {
     dca:	09 f4       	brne	.+2      	; 0xdce <UPDI::updi_activate()+0x94>
     dcc:	bd cf       	rjmp	.-134    	; 0xd48 <UPDI::updi_activate()+0xe>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:684
        if (!set_nvmprog_key()) return false;
      }
      if (!updi_reset(true) || !updi_reset(false)) return false;
     dce:	53 99       	sbic	0x0a, 3	; 10
     dd0:	bb cf       	rjmp	.-138    	; 0xd48 <UPDI::updi_activate()+0xe>
     dd2:	e4 9a       	sbi	0x1c, 4	; 28
     dd4:	b9 cf       	rjmp	.-142    	; 0xd48 <UPDI::updi_activate()+0xe>
enter_prog():
     dd6:	f0 99       	sbic	0x1e, 0	; 30
     dd8:	f0 cf       	rjmp	.-32     	; 0xdba <UPDI::updi_activate()+0x80>
is_cs_stat():
     dda:	87 e0       	ldi	r24, 0x07	; 7
     ddc:	0f da       	rcall	.-3042   	; 0x1fc <UPDI::get_cs_stat(unsigned char)>
enter_prog():
     dde:	84 ff       	sbrs	r24, 4
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:685
      loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
     de0:	0f c0       	rjmp	.+30     	; 0xe00 <UPDI::updi_activate()+0xc6>
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	91 da       	rcall	.-2782   	; 0x308 <UPDI::updi_reset(bool)>
     de6:	88 23       	and	r24, r24
     de8:	41 f3       	breq	.-48     	; 0xdba <UPDI::updi_activate()+0x80>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:686
      loop_until_sys_stat_is_set(UPDI_SYS_NVMPROG);
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	8d da       	rcall	.-2790   	; 0x308 <UPDI::updi_reset(bool)>
     dee:	88 23       	and	r24, r24
     df0:	21 f3       	breq	.-56     	; 0xdba <UPDI::updi_activate()+0x80>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:682
  if (bit_is_clear(UPDI_CONTROL, UPDI_PROG_bp)) {
    loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
    if (!(UPDI_LASTL & UPDI_SYS_NVMPROG)) {
      if (UPDI_LASTL & UPDI_SYS_LOCKSTATUS) return false;
      if (!is_key_stat(UPDI_KEY_NVMPROG)) {
        if (!set_nvmprog_key()) return false;
     df2:	70 e0       	ldi	r23, 0x00	; 0
     df4:	60 e0       	ldi	r22, 0x00	; 0
     df6:	80 e2       	ldi	r24, 0x20	; 32
     df8:	cd db       	rcall	.-2150   	; 0x594 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
     dfa:	88 e0       	ldi	r24, 0x08	; 8
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:321
 *
 * There is no way to return to the interrupt source from here
 */

ISR(TCB0_INT_vect, ISR_NAKED) {
  __asm__ __volatile__ ("EOR R1,R1");
     dfc:	b3 db       	rcall	.-2202   	; 0x564 <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.23]>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:322
  TCB0_CTRLA = 0;
     dfe:	db cf       	rjmp	.-74     	; 0xdb6 <UPDI::updi_activate()+0x7c>
     e00:	a7 db       	rcall	.-2226   	; 0x550 <UPDI::set_nvmprog_key()>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:323
  TCB0_INTFLAGS = TCB_CAPT_bm;
     e02:	81 11       	cpse	r24, r1
     e04:	ee cf       	rjmp	.-36     	; 0xde2 <UPDI::updi_activate()+0xa8>
     e06:	d9 cf       	rjmp	.-78     	; 0xdba <UPDI::updi_activate()+0x80>

00000e08 <__vector_13>:
__vector_13():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:324
  longjmp(TIM::CONTEXT, 2);
     e08:	11 24       	eor	r1, r1
     e0a:	10 92 80 0a 	sts	0x0A80, r1	; 0x800a80 <__RODATA_PM_OFFSET__+0x7f8a80>
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__RODATA_PM_OFFSET__+0x7f8a86>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:260

/*
 * RTS monitoring upper and lower end interrupts
 */

ISR(portIntrruptVector(RTS_SENSE_PIN)) {
     e14:	62 e0       	ldi	r22, 0x02	; 2
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	86 e4       	ldi	r24, 0x46	; 70
     e1a:	98 e3       	ldi	r25, 0x38	; 56
     e1c:	a1 d3       	rcall	.+1858   	; 0x1560 <longjmp>

00000e1e <__vector_6>:
__vector_6():
     e1e:	1f 92       	push	r1
     e20:	0f 92       	push	r0
     e22:	0f b6       	in	r0, 0x3f	; 63
     e24:	0f 92       	push	r0
     e26:	11 24       	eor	r1, r1
     e28:	2f 93       	push	r18
     e2a:	3f 93       	push	r19
     e2c:	4f 93       	push	r20
     e2e:	5f 93       	push	r21
     e30:	6f 93       	push	r22
     e32:	7f 93       	push	r23
     e34:	8f 93       	push	r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:261
  wdt_reset();
     e36:	9f 93       	push	r25
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:263
  portRegister(RTS_SENSE_PIN).INTFLAGS =
  portRegister(RTS_SENSE_PIN).INTFLAGS;
     e38:	af 93       	push	r26
     e3a:	bf 93       	push	r27
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:262
 * RTS monitoring upper and lower end interrupts
 */

ISR(portIntrruptVector(RTS_SENSE_PIN)) {
  wdt_reset();
  portRegister(RTS_SENSE_PIN).INTFLAGS =
     e3c:	ef 93       	push	r30
     e3e:	ff 93       	push	r31
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:265
  portRegister(RTS_SENSE_PIN).INTFLAGS;

  if ( digitalRead(RTS_SENSE_PIN) ) {
     e40:	a8 95       	wdr
     e42:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__RODATA_PM_OFFSET__+0x7f8409>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:267
    /* Detection HIGH signal level */
    if (bit_is_clear(UPDI_NVMCTRL, 1)) {
     e46:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <__RODATA_PM_OFFSET__+0x7f8409>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:150

void SYS::WDT_OFF (void) { WDT_SET(WDT_PERIOD_OFF_gc); }

void SYS::WDT_ON (void) { WDT_SET(WDT_PERIOD_8KCLK_gc); }

void SYS::WDT_Short (void) { WDT_SET(WDT_PERIOD_128CLK_gc); }
     e4a:	12 9b       	sbis	0x02, 2	; 2
     e4c:	1c c0       	rjmp	.+56     	; 0xe86 <__vector_6+0x68>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:275
      /* Enable Short WDT */
      SYS::WDT_Short();

      /* Indicates that the console that was open at the time of POR was closed. */
      /* Reboot the system with the target in the reset state. */
      UPDI::Target_Reset(true);
     e4e:	e9 99       	sbic	0x1d, 1	; 29
     e50:	07 c0       	rjmp	.+14     	; 0xe60 <__vector_6+0x42>
WDT_Short():
     e52:	85 e0       	ldi	r24, 0x05	; 5
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:155

void SYS::WDT_Long (void) { WDT_SET(WDT_PERIOD_512CLK_gc); }

void SYS::WDT_REBOOT (void) {
  WDT_SET(WDT_PERIOD_8CLK_gc);
     e54:	a5 da       	rcall	.-2742   	; 0x3a0 <SYS::WDT_SET(unsigned char)>
__vector_6():
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	5c da       	rcall	.-2888   	; 0x312 <UPDI::Target_Reset(bool)>
WDT_REBOOT():
     e5a:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:279
      SYS::WDT_REBOOT();
    }
    /* Otherwise, heartbeat the LED and raise the flag. */
    bit_set(UPDI_NVMCTRL, 0);
     e5c:	a1 da       	rcall	.-2750   	; 0x3a0 <SYS::WDT_SET(unsigned char)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:280
    TIM::LED_HeartBeat();
     e5e:	ff cf       	rjmp	.-2      	; 0xe5e <__vector_6+0x40>
__vector_6():
     e60:	e8 9a       	sbi	0x1d, 0	; 29
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:312

    /* This WDT is released when JTAG communication starts. */
    /* Once the time is up, the target will be released */
    /* from the reset state after rebooting the system. */
  }
}
     e62:	7c da       	rcall	.-2824   	; 0x35c <TIM::LED_HeartBeat()>
     e64:	ff 91       	pop	r31
     e66:	ef 91       	pop	r30
     e68:	bf 91       	pop	r27
     e6a:	af 91       	pop	r26
     e6c:	9f 91       	pop	r25
     e6e:	8f 91       	pop	r24
     e70:	7f 91       	pop	r23
     e72:	6f 91       	pop	r22
     e74:	5f 91       	pop	r21
     e76:	4f 91       	pop	r20
     e78:	3f 91       	pop	r19
     e7a:	2f 91       	pop	r18
     e7c:	0f 90       	pop	r0
     e7e:	0f be       	out	0x3f, r0	; 63
     e80:	0f 90       	pop	r0
     e82:	1f 90       	pop	r1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:282
    }
    /* Otherwise, heartbeat the LED and raise the flag. */
    bit_set(UPDI_NVMCTRL, 0);
    TIM::LED_HeartBeat();
  }
  else if (bit_is_set(UPDI_NVMCTRL, 0)) {
     e84:	18 95       	reti
     e86:	e8 9b       	sbis	0x1d, 0	; 29
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:155
     e88:	03 c0       	rjmp	.+6      	; 0xe90 <__vector_6+0x72>
WDT_REBOOT():
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	89 da       	rcall	.-2798   	; 0x3a0 <SYS::WDT_SET(unsigned char)>
     e8e:	ff cf       	rjmp	.-2      	; 0xe8e <__vector_6+0x70>
WDT_Short():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:150

void SYS::WDT_OFF (void) { WDT_SET(WDT_PERIOD_OFF_gc); }

void SYS::WDT_ON (void) { WDT_SET(WDT_PERIOD_8KCLK_gc); }

void SYS::WDT_Short (void) { WDT_SET(WDT_PERIOD_128CLK_gc); }
     e90:	85 e0       	ldi	r24, 0x05	; 5
     e92:	86 da       	rcall	.-2804   	; 0x3a0 <SYS::WDT_SET(unsigned char)>
__vector_6():
     e94:	e9 9a       	sbi	0x1d, 1	; 29
PG_Enable():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:296
    /* Enable Short WDT */
    SYS::WDT_Short();

    /* The first low level signal keeps the target in reset state */
    /* and starts counting the time limit. */
    bit_set(UPDI_NVMCTRL, 1);
     e96:	48 9a       	sbi	0x09, 0	; 9
__vector_6():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:96
/******************
 * Various ON/OFF *
 ******************/

void SYS::PG_Enable (void) {
  digitalWrite(PGEN_PIN, HIGH);
     e98:	49 da       	rcall	.-2926   	; 0x32c <TIM::LED_Flash()>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:303
    /* Disable UART passthrough */
    /* Prioritizes reception of JTAG communication */
    SYS::PG_Enable();

    /* LED blinks alternately */
    TIM::LED_Flash();
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	3a da       	rcall	.-2956   	; 0x312 <UPDI::Target_Reset(bool)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:305

    UPDI::Target_Reset(true);
     e9e:	21 9a       	sbi	0x04, 1	; 4
     ea0:	e1 cf       	rjmp	.-62     	; 0xe64 <__vector_6+0x46>

00000ea2 <__vector_7>:
__vector_7():
     ea2:	a8 95       	wdr
WDT_Short():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:306
    openDrainWrite(TRST_PIN, LOW);
     ea4:	85 e0       	ldi	r24, 0x05	; 5
     ea6:	7c da       	rcall	.-2824   	; 0x3a0 <SYS::WDT_SET(unsigned char)>
__vector_7():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:224
 * This handler never returns to the main process
 */

ISR(portIntrruptVector(SW_SENSE_PIN), ISR_NAKED) {
  /* Enable Short WDT */
  wdt_reset();
     ea8:	41 da       	rcall	.-2942   	; 0x32c <TIM::LED_Flash()>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:150

void SYS::WDT_OFF (void) { WDT_SET(WDT_PERIOD_OFF_gc); }

void SYS::WDT_ON (void) { WDT_SET(WDT_PERIOD_8KCLK_gc); }

void SYS::WDT_Short (void) { WDT_SET(WDT_PERIOD_128CLK_gc); }
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	32 da       	rcall	.-2972   	; 0x312 <UPDI::Target_Reset(bool)>
     eae:	88 e0       	ldi	r24, 0x08	; 8
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:228
  SYS::WDT_Short();

  /* LED is blinking */
  TIM::LED_Flash();
     eb0:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__RODATA_PM_OFFSET__+0x7f8806>
delay_micros():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:231

  /* Target reset ON */
  UPDI::Target_Reset(true);
     eb4:	8f ec       	ldi	r24, 0xCF	; 207
     eb6:	97 e0       	ldi	r25, 0x07	; 7
     eb8:	01 97       	sbiw	r24, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:232
  UPDI_USART.CTRLB = UPDI_USART_OFF;
     eba:	f1 f7       	brne	.-4      	; 0xeb8 <__vector_7+0x16>
     ebc:	00 c0       	rjmp	.+0      	; 0xebe <__vector_7+0x1c>
     ebe:	00 00       	nop
__vector_7():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.8/cores/megaAVR/api/delay_busywait.h:31
     ec0:	01 9a       	sbi	0x00, 1	; 0
     ec2:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <__RODATA_PM_OFFSET__+0x7f8411>
     ec6:	09 98       	cbi	0x01, 1	; 1
     ec8:	21 9a       	sbi	0x04, 1	; 4
LED_TCB1():
     eca:	80 91 5d 38 	lds	r24, 0x385D	; 0x80385d <TIM::mode>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:238

  /* Chattering suppression */
  delay_micros(800);

  /* Keep target reset */
  pinMode(UPDI_TDAT_PIN, OUTPUT);
     ece:	83 30       	cpi	r24, 0x03	; 3
     ed0:	99 f0       	breq	.+38     	; 0xef8 <__vector_7+0x56>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:239
  digitalWrite(UPDI_TDAT_PIN, LOW);
     ed2:	83 e0       	ldi	r24, 0x03	; 3
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:240
  openDrainWrite(TRST_PIN, LOW);
     ed4:	80 93 5d 38 	sts	0x385D, r24	; 0x80385d <TIM::mode>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:151
    LEDG_EVOUT = EVSYS_USER_CHANNEL2_gc;
  }
}

void LED_TCB1 (uint8_t mode, uint16_t ccmp) {
  if (TIM::mode != mode) {
     ed8:	89 ea       	ldi	r24, 0xA9	; 169
     eda:	95 e5       	ldi	r25, 0x55	; 85
     edc:	80 93 9c 0a 	sts	0x0A9C, r24	; 0x800a9c <__RODATA_PM_OFFSET__+0x7f8a9c>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:152
    TIM::mode = mode;
     ee0:	90 93 9d 0a 	sts	0x0A9D, r25	; 0x800a9d <__RODATA_PM_OFFSET__+0x7f8a9d>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:153
    TCB1_CCMP = ccmp;
     ee4:	10 92 9a 0a 	sts	0x0A9A, r1	; 0x800a9a <__RODATA_PM_OFFSET__+0x7f8a9a>
     ee8:	10 92 9b 0a 	sts	0x0A9B, r1	; 0x800a9b <__RODATA_PM_OFFSET__+0x7f8a9b>
     eec:	8f e4       	ldi	r24, 0x4F	; 79
     eee:	80 93 90 0a 	sts	0x0A90, r24	; 0x800a90 <__RODATA_PM_OFFSET__+0x7f8a90>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:154
    TCB1_CNT = 0;
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <__RODATA_PM_OFFSET__+0x7f81a9>
WDT_OFF():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:155
    TCB1_CTRLA = TCB_RUNSTDBY_bm | TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
     ef8:	80 e0       	ldi	r24, 0x00	; 0
     efa:	52 da       	rcall	.-2908   	; 0x3a0 <SYS::WDT_SET(unsigned char)>
__vector_7():
     efc:	30 9b       	sbis	0x06, 0	; 6
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:156
    LEDG_EVOUT = EVSYS_USER_CHANNEL0_gc;
     efe:	fe cf       	rjmp	.-4      	; 0xefc <__vector_7+0x5a>
WDT_REBOOT():
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	4e da       	rcall	.-2916   	; 0x3a0 <SYS::WDT_SET(unsigned char)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:146
void SYS::WDT_SET (uint8_t _wdt_period) {
  loop_until_bit_is_clear(WDT_STATUS, WDT_SYNCBUSY_bp);
  _PROTECTED_WRITE(WDT_CTRLA, _wdt_period);
}

void SYS::WDT_OFF (void) { WDT_SET(WDT_PERIOD_OFF_gc); }
     f04:	ff cf       	rjmp	.-2      	; 0xf04 <__vector_7+0x62>

00000f06 <main>:
main():
     f06:	cf 93       	push	r28
     f08:	df 93       	push	r29
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:249

  /* Disable WDT */
  SYS::WDT_OFF();

  /* Waits while pressed */
  while (!digitalRead(SW_SENSE_PIN));
     f0a:	00 d0       	rcall	.+0      	; 0xf0c <main+0x6>
     f0c:	cd b7       	in	r28, 0x3d	; 61
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:155
void SYS::WDT_Short (void) { WDT_SET(WDT_PERIOD_128CLK_gc); }

void SYS::WDT_Long (void) { WDT_SET(WDT_PERIOD_512CLK_gc); }

void SYS::WDT_REBOOT (void) {
  WDT_SET(WDT_PERIOD_8CLK_gc);
     f0e:	de b7       	in	r29, 0x3e	; 62
     f10:	f8 94       	cli
initVariant():
     f12:	24 e0       	ldi	r18, 0x04	; 4
     f14:	e0 e1       	ldi	r30, 0x10	; 16
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.8/variants/tinyAVR2_20/variant.h:281
    "   DEC  R24     \n"
    "   BRNE 2b        " /* 3 loop PORTA to PORTC */
    : : "z" ((register8_t*)&PORTA_PIN0CTRL),
        "r" ((uint8_t)PORT_ISC_INPUT_DISABLE_gc)
      : "r24", "r25"
  );
     f16:	f4 e0       	ldi	r31, 0x04	; 4
     f18:	83 e0       	ldi	r24, 0x03	; 3
     f1a:	98 e0       	ldi	r25, 0x08	; 8
     f1c:	21 93       	st	Z+, r18
     f1e:	9a 95       	dec	r25
     f20:	e9 f7       	brne	.-6      	; 0xf1c <main+0x16>
     f22:	78 96       	adiw	r30, 0x18	; 24
     f24:	8a 95       	dec	r24
     f26:	c9 f7       	brne	.-14     	; 0xf1a <main+0x14>
_CLKCTRL_SETUP():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.8/cores/megaAVR/api/CLKCTRL_megaAVR.h:127
  // _PROTECTED_WRITE(CLKCTRL.MCLKCTRLA, CLKCTRL_CLKSEL_OSC20M_gc);

#else

  #if defined(_CLKCTRL_PDIV_)
  _PROTECTED_WRITE(CLKCTRL_MCLKCTRLB, _CLKCTRL_PDIV_ | CLKCTRL_PEN_bm);
     f28:	88 ed       	ldi	r24, 0xD8	; 216
     f2a:	41 e0       	ldi	r20, 0x01	; 1
     f2c:	50 e0       	ldi	r21, 0x00	; 0
     f2e:	84 bf       	out	0x34, r24	; 52
     f30:	40 93 61 00 	sts	0x0061, r20	; 0x800061 <__RODATA_PM_OFFSET__+0x7f8061>
setup():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:17
#include <avr/io.h>

void SYS::setup (void) {

  /* Target reset release */
  pinControlRegister(TRST_PIN) = TRST_PIN_CONFIG;
     f34:	8c e0       	ldi	r24, 0x0C	; 12
     f36:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <__RODATA_PM_OFFSET__+0x7f8431>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:20

  /* Outgoing port */
  PORTA_DIRSET = _BV(pinPosition(HVP1_PIN))
     f3a:	88 ef       	ldi	r24, 0xF8	; 248
     f3c:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <__RODATA_PM_OFFSET__+0x7f8401>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:25
               | _BV(pinPosition(HVP2_PIN))
               | _BV(pinPosition(HV12_PIN))
               | _BV(pinPosition(LEDG_PIN))
               | _BV(pinPosition(LEDY_PIN));
  PORTB_DIRSET = _BV(pinPosition(HV8_PIN));
     f40:	80 e2       	ldi	r24, 0x20	; 32
     f42:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__RODATA_PM_OFFSET__+0x7f8421>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:28

  /* USART switching LOW=Target opening (PG_Disable) */
  PORTC_DIRSET = _BV(pinPosition(PGEN_PIN));
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <__RODATA_PM_OFFSET__+0x7f8441>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:31

  /* LED output */
  LEDG_EVOUT_MUX = LEDG_EVOUT_ALT;          /* OUT:PA7 */
     f4c:	80 93 e0 05 	sts	0x05E0, r24	; 0x8005e0 <__RODATA_PM_OFFSET__+0x7f85e0>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:32
  PORTMUX_CCLROUTEA = PORTMUX_LUT3_ALT1_gc; /* OUT:PA5 IN:PC0,PC1,PC2 */
     f50:	98 e0       	ldi	r25, 0x08	; 8
     f52:	90 93 e1 05 	sts	0x05E1, r25	; 0x8005e1 <__RODATA_PM_OFFSET__+0x7f85e1>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:33
  PORTA_OUTSET = _BV(pinPosition(LEDG_PIN))
     f56:	30 ea       	ldi	r19, 0xA0	; 160
     f58:	30 93 05 04 	sts	0x0405, r19	; 0x800405 <__RODATA_PM_OFFSET__+0x7f8405>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:37
               | _BV(pinPosition(LEDY_PIN));

  /* USART Alternative Selection */
  PORTMUX_USARTROUTEA = JTAG_PMUX_ALT | UPDI_PMUX_ALT;
     f5c:	35 e0       	ldi	r19, 0x05	; 5
     f5e:	30 93 e2 05 	sts	0x05E2, r19	; 0x8005e2 <__RODATA_PM_OFFSET__+0x7f85e2>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:40

  /* JTAG port */
  pinControlRegister(JTAG_TXD_PIN) = JTAG_TXD_CONFIG;
     f62:	90 93 52 04 	sts	0x0452, r25	; 0x800452 <__RODATA_PM_OFFSET__+0x7f8452>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:41
  pinControlRegister(JTAG_RXD_PIN) = JTAG_RXD_CONFIG;
     f66:	90 93 51 04 	sts	0x0451, r25	; 0x800451 <__RODATA_PM_OFFSET__+0x7f8451>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:44

  /* UPDI port */
  pinControlRegister(UPDI_TDAT_PIN) = UPDI_TDAT_CONFIG;
     f6a:	90 93 11 04 	sts	0x0411, r25	; 0x800411 <__RODATA_PM_OFFSET__+0x7f8411>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:47

  /* HV generator */
  pinControlRegister(HVP1_PIN) = HVP1_PIN_CONFIG;
     f6e:	20 93 13 04 	sts	0x0413, r18	; 0x800413 <__RODATA_PM_OFFSET__+0x7f8413>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:48
  pinControlRegister(HVP2_PIN) = HVP2_PIN_CONFIG;
     f72:	44 e8       	ldi	r20, 0x84	; 132
     f74:	40 93 14 04 	sts	0x0414, r20	; 0x800414 <__RODATA_PM_OFFSET__+0x7f8414>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:51

  /* SW1 Interrupt permission */
  pinControlRegister(SW_SENSE_PIN) = SW_SENSE_CONFIG;
     f78:	4d e0       	ldi	r20, 0x0D	; 13
     f7a:	40 93 30 04 	sts	0x0430, r20	; 0x800430 <__RODATA_PM_OFFSET__+0x7f8430>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:54

  /* RTS monitor */
  pinControlRegister(RTS_SENSE_PIN) = RTS_SENSE_CONFIG;
     f7e:	49 e0       	ldi	r20, 0x09	; 9
     f80:	40 93 12 04 	sts	0x0412, r20	; 0x800412 <__RODATA_PM_OFFSET__+0x7f8412>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:57

  /* JP1 monitor */
  pinControlRegister(JP_SENSE_PIN) = JP_SENSE_CONFIG;
     f84:	90 93 53 04 	sts	0x0453, r25	; 0x800453 <__RODATA_PM_OFFSET__+0x7f8453>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:60

  /* Initialize state variables */
  UPDI_CONTROL = 0;
     f88:	1c ba       	out	0x1c, r1	; 28
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:61
  UPDI_NVMCTRL = 0;
     f8a:	1d ba       	out	0x1d, r1	; 29
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:46

void TIM::setup (void) {

  /* EVSYS signal distribution */

  EVSYS_CHANNEL0 = EVSYS_CHANNEL0_CCL_LUT0_gc;
     f8c:	90 e1       	ldi	r25, 0x10	; 16
     f8e:	90 93 90 01 	sts	0x0190, r25	; 0x800190 <__RODATA_PM_OFFSET__+0x7f8190>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:47
  EVSYS_CHANNEL1 = EVSYS_CHANNEL1_RTC_PIT_DIV128_gc;
     f92:	9a e0       	ldi	r25, 0x0A	; 10
     f94:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <__RODATA_PM_OFFSET__+0x7f8191>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:48
  EVSYS_CHANNEL2 = EVSYS_CHANNEL2_CCL_LUT1_gc;
     f98:	91 e1       	ldi	r25, 0x11	; 17
     f9a:	90 93 92 01 	sts	0x0192, r25	; 0x800192 <__RODATA_PM_OFFSET__+0x7f8192>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:49
  EVSYS_CHANNEL3 = EVSYS_CHANNEL3_PORTA_PIN5_gc;
     f9e:	9d e4       	ldi	r25, 0x4D	; 77
     fa0:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <__RODATA_PM_OFFSET__+0x7f8193>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:50
  EVSYS_USERTCB0COUNT = EVSYS_USER_CHANNEL1_gc;
     fa4:	92 e0       	ldi	r25, 0x02	; 2
     fa6:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <__RODATA_PM_OFFSET__+0x7f81b1>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:51
  EVSYS_USERTCB1COUNT = EVSYS_USER_CHANNEL1_gc;
     faa:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <__RODATA_PM_OFFSET__+0x7f81b3>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:52
  EVSYS_USERCCLLUT0A  = EVSYS_USER_CHANNEL3_gc;
     fae:	20 93 a0 01 	sts	0x01A0, r18	; 0x8001a0 <__RODATA_PM_OFFSET__+0x7f81a0>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:53
  EVSYS_USERCCLLUT1A  = EVSYS_USER_CHANNEL3_gc;
     fb2:	20 93 a2 01 	sts	0x01A2, r18	; 0x8001a2 <__RODATA_PM_OFFSET__+0x7f81a2>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:58

  /* CCL/LUT construction */

  /* TRUTH0: 010 is ON */
  CCL_TRUTH0    = CCL_TRUTH_2_bm;
     fb6:	20 93 cb 01 	sts	0x01CB, r18	; 0x8001cb <__RODATA_PM_OFFSET__+0x7f81cb>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:59
  CCL_LUT0CTRLC = CCL_INSEL0_EVENTA_gc;
     fba:	93 e0       	ldi	r25, 0x03	; 3
     fbc:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <__RODATA_PM_OFFSET__+0x7f81ca>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:60
  CCL_LUT0CTRLB = CCL_INSEL1_TCB1_gc;                       /* IN1:POS */
     fc0:	20 ec       	ldi	r18, 0xC0	; 192
     fc2:	20 93 c9 01 	sts	0x01C9, r18	; 0x8001c9 <__RODATA_PM_OFFSET__+0x7f81c9>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:61
  CCL_LUT0CTRLA = CCL_ENABLE_bm;
     fc6:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <__RODATA_PM_OFFSET__+0x7f81c8>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:64

  /* TRUTH1: 001 010 is ON */
  CCL_TRUTH1    = CCL_TRUTH_1_bm | CCL_TRUTH_2_bm;
     fca:	26 e0       	ldi	r18, 0x06	; 6
     fcc:	20 93 cf 01 	sts	0x01CF, r18	; 0x8001cf <__RODATA_PM_OFFSET__+0x7f81cf>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:65
  CCL_LUT1CTRLC = CCL_INSEL0_EVENTA_gc;
     fd0:	90 93 ce 01 	sts	0x01CE, r25	; 0x8001ce <__RODATA_PM_OFFSET__+0x7f81ce>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:66
  CCL_LUT1CTRLB = CCL_INSEL0_TCA0_gc | CCL_INSEL1_TCB1_gc;  /* IN0:POS IN1:POS */
     fd4:	9a ec       	ldi	r25, 0xCA	; 202
     fd6:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <__RODATA_PM_OFFSET__+0x7f81cd>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:67
  CCL_LUT1CTRLA = CCL_ENABLE_bm;
     fda:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <__RODATA_PM_OFFSET__+0x7f81cc>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:73

  /* TRUTH3: 001 010 is ON */
  /* CCL_INSEL0_USART0_gc : USART0TX normal HIGH */
  /* CCL_INSEL1_IO_gc     : USART1RX normal HIGH */
  /* CCL_INSEL2_IO_gc     : USART1TX normal HIGH */
  CCL_TRUTH3    = (uint8_t) ~CCL_TRUTH_7_bm;
     fde:	9f e7       	ldi	r25, 0x7F	; 127
     fe0:	90 93 d7 01 	sts	0x01D7, r25	; 0x8001d7 <__RODATA_PM_OFFSET__+0x7f81d7>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:74
  CCL_LUT3CTRLC = CCL_INSEL2_IO_gc;
     fe4:	30 93 d6 01 	sts	0x01D6, r19	; 0x8001d6 <__RODATA_PM_OFFSET__+0x7f81d6>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:75
  CCL_LUT3CTRLB = CCL_INSEL0_USART0_gc | CCL_INSEL1_IO_gc;
     fe8:	98 e5       	ldi	r25, 0x58	; 88
     fea:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <__RODATA_PM_OFFSET__+0x7f81d5>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:76
  CCL_LUT3CTRLA = CCL_ENABLE_bm | CCL_OUTEN_bm;
     fee:	91 e4       	ldi	r25, 0x41	; 65
     ff0:	90 93 d4 01 	sts	0x01D4, r25	; 0x8001d4 <__RODATA_PM_OFFSET__+0x7f81d4>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:79

  /* CCL enable */
  CCL_CTRLA = CCL_RUNSTDBY_bm | CCL_ENABLE_bm;
     ff4:	90 93 c0 01 	sts	0x01C0, r25	; 0x8001c0 <__RODATA_PM_OFFSET__+0x7f81c0>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:82

  /* RTC_PIT enable */
  RTC_PITCTRLA = RTC_PITEN_bm;
     ff8:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__RODATA_PM_OFFSET__+0x7f8150>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:87

  /* Timer */

  /* TCA0 */
  TCA0_SPLIT_CTRLD = TCA_SPLIT_SPLITM_bm;
     ffc:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <__RODATA_PM_OFFSET__+0x7f8a03>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:88
  TCA0_SPLIT_LPER  = TCA0_STEP - 2;
    1000:	99 e8       	ldi	r25, 0x89	; 137
    1002:	90 93 26 0a 	sts	0x0A26, r25	; 0x800a26 <__RODATA_PM_OFFSET__+0x7f8a26>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:89
  TCA0_SPLIT_LCMP0 = TCA0_STEP / 2;
    1006:	95 e4       	ldi	r25, 0x45	; 69
    1008:	90 93 28 0a 	sts	0x0A28, r25	; 0x800a28 <__RODATA_PM_OFFSET__+0x7f8a28>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:90
  TCA0_SPLIT_HPER  = 1;
    100c:	80 93 27 0a 	sts	0x0A27, r24	; 0x800a27 <__RODATA_PM_OFFSET__+0x7f8a27>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:91
  TCA0_SPLIT_HCMP0 = 1;     /* WOA3=PA3 */
    1010:	80 93 29 0a 	sts	0x0A29, r24	; 0x800a29 <__RODATA_PM_OFFSET__+0x7f8a29>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:92
  TCA0_SPLIT_HCMP1 = 1;     /* WOA4=PA4 */
    1014:	80 93 2b 0a 	sts	0x0A2B, r24	; 0x800a2b <__RODATA_PM_OFFSET__+0x7f8a2b>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:93
  TCA0_SPLIT_CTRLA = TCA_SPLIT_RUNSTDBY_bm | TCA_SPLIT_ENABLE_bm | TCA_SPLIT_CLKSEL_DIV1024_gc;
    1018:	8f e8       	ldi	r24, 0x8F	; 143
    101a:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__RODATA_PM_OFFSET__+0x7f8a00>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:96

  /* TCB1 */
  TCB1_CTRLB = TCB_CNTMODE_PWM8_gc;
    101e:	87 e0       	ldi	r24, 0x07	; 7
    1020:	80 93 91 0a 	sts	0x0A91, r24	; 0x800a91 <__RODATA_PM_OFFSET__+0x7f8a91>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:105
   *
   * Heartbeat with RTS Deactive
   * Flash if RTS Active
   */

  if ( digitalRead(RTS_SENSE_PIN) ) {
    1024:	12 9b       	sbis	0x02, 2	; 2
    1026:	86 c0       	rjmp	.+268    	; 0x1134 <main+0x22e>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:106
    LED_HeartBeat();
    1028:	99 d9       	rcall	.-3278   	; 0x35c <TIM::LED_HeartBeat()>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:459
/******************
 * Initialization *
 ******************/

void JTAG2::setup (void) {
  JTAG_USART.BAUD = pgm_read_word( &BAUD_TABLE[BAUD_19200] );
    102a:	ed e9       	ldi	r30, 0x9D	; 157
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	85 91       	lpm	r24, Z+
    1030:	94 91       	lpm	r25, Z
    1032:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__RODATA_PM_OFFSET__+0x7f8828>
    1036:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__RODATA_PM_OFFSET__+0x7f8829>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:460
  JTAG_USART.CTRLA = JTAG_USART_CTRLA;
    103a:	10 92 25 08 	sts	0x0825, r1	; 0x800825 <__RODATA_PM_OFFSET__+0x7f8825>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:461
  JTAG_USART.CTRLC = JTAG_USART_CTRLC;
    103e:	83 e0       	ldi	r24, 0x03	; 3
    1040:	80 93 27 08 	sts	0x0827, r24	; 0x800827 <__RODATA_PM_OFFSET__+0x7f8827>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:462
  JTAG_USART.CTRLB = JTAG_USART_OFF;
    1044:	88 e8       	ldi	r24, 0x88	; 136
    1046:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__RODATA_PM_OFFSET__+0x7f8826>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:70
  }
  #endif
}

void UPDI::setup (void) {
  UPDI_USART.BAUD  = UPDI_BAUD_CALC;
    104a:	80 eb       	ldi	r24, 0xB0	; 176
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__RODATA_PM_OFFSET__+0x7f8808>
    1052:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__RODATA_PM_OFFSET__+0x7f8809>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:71
  UPDI_USART.CTRLA = UPDI_USART_CTRLA;
    1056:	8a e0       	ldi	r24, 0x0A	; 10
    1058:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__RODATA_PM_OFFSET__+0x7f8805>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:72
  UPDI_USART.CTRLC = UPDI_USART_CTRLC;
    105c:	8b e2       	ldi	r24, 0x2B	; 43
    105e:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <__RODATA_PM_OFFSET__+0x7f8807>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:73
  UPDI_USART.CTRLB = UPDI_USART_ON;
    1062:	88 ec       	ldi	r24, 0xC8	; 200
    1064:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__RODATA_PM_OFFSET__+0x7f8806>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:74
  bit_clear(UPDI_CONTROL, UPDI_CLKU_bp);
    1068:	e6 98       	cbi	0x1c, 6	; 28
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/UPDI.cpp:77

  /* Release target from reset state after resetting WDT timeout */
  if ( bit_is_set(RSTCTRL_RSTFR, RSTCTRL_WDRF_bp) ) Target_Reset(false);
    106a:	80 91 40 00 	lds	r24, 0x0040	; 0x800040 <__RODATA_PM_OFFSET__+0x7f8040>
    106e:	83 ff       	sbrs	r24, 3
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <main+0x170>
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	4e d9       	rcall	.-3428   	; 0x312 <UPDI::Target_Reset(bool)>
ready():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:121
 * Run at the end of the boot sequence *
 ***************************************/

void SYS::ready (void) {
  /* Clears the reset state flag. */
  RSTCTRL_RSTFR = RSTCTRL_RSTFR;
    1076:	80 91 40 00 	lds	r24, 0x0040	; 0x800040 <__RODATA_PM_OFFSET__+0x7f8040>
    107a:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__RODATA_PM_OFFSET__+0x7f8040>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:125

  /* Clear asynchronous interrupts detected during initialization */
  portRegister(RTS_SENSE_PIN).INTFLAGS =
  portRegister(RTS_SENSE_PIN).INTFLAGS;
    107e:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__RODATA_PM_OFFSET__+0x7f8409>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:124
void SYS::ready (void) {
  /* Clears the reset state flag. */
  RSTCTRL_RSTFR = RSTCTRL_RSTFR;

  /* Clear asynchronous interrupts detected during initialization */
  portRegister(RTS_SENSE_PIN).INTFLAGS =
    1082:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <__RODATA_PM_OFFSET__+0x7f8409>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:128
  portRegister(RTS_SENSE_PIN).INTFLAGS;

  /*** Hibernation mode ***/
  set_sleep_mode(SLEEP_MODE_STANDBY);
    1086:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <__RODATA_PM_OFFSET__+0x7f8050>
    108a:	89 7f       	andi	r24, 0xF9	; 249
    108c:	82 60       	ori	r24, 0x02	; 2
    108e:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__RODATA_PM_OFFSET__+0x7f8050>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:131

  /* Interrupt permission */
  sei();
    1092:	78 94       	sei
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:134

  /* It stays in a low power state until the first interrupt occurs. */
  sleep_enable();
    1094:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <__RODATA_PM_OFFSET__+0x7f8050>
    1098:	81 60       	ori	r24, 0x01	; 1
    109a:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__RODATA_PM_OFFSET__+0x7f8050>
process_command():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:336
    wdt_reset();
    #ifdef ENABLE_DEBUG_UPDI_SENDER
    UPDI::_send_buf_clear();
    #endif
    uint8_t message_id = packet.body[MESSAGE_ID];
    packet.size = 1;
    109e:	41 2c       	mov	r4, r1
    10a0:	51 2c       	mov	r5, r1
    10a2:	32 01       	movw	r6, r4
    10a4:	43 94       	inc	r4
get_parameter():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:254
      }
      case PAR_EMU_MODE : {
        /* This response code indicates an UPDI-only implementation */
        /* In normal JTAGICEmkII this is never queried */
        packet.body[1] = 0x55;
        packet.size_word[0] = 2;
    10a6:	52 e0       	ldi	r21, 0x02	; 2
    10a8:	25 2e       	mov	r2, r21
    10aa:	31 2c       	mov	r3, r1
sign_on_response():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:169
   * SIGN_ON Response *
   ********************/

  void sign_on_response (void) {
    UPDI_NVMCTRL = 0;
    packet.size = sizeof(sign_on_resp);
    10ac:	6d e1       	ldi	r22, 0x1D	; 29
    10ae:	86 2e       	mov	r8, r22
    10b0:	91 2c       	mov	r9, r1
    10b2:	a1 2c       	mov	r10, r1
    10b4:	b1 2c       	mov	r11, r1
get():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:86
  /*******************
   * Local functions *
   *******************/

  uint8_t get (void) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_RXCIF_bp);
    10b6:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
    10ba:	87 ff       	sbrs	r24, 7
    10bc:	fc cf       	rjmp	.-8      	; 0x10b6 <main+0x1b0>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:87
    return JTAG_USART.RXDATAL;
    10be:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__RODATA_PM_OFFSET__+0x7f8820>
packet_receive():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:126
    uint16_t _crc = ~0;
    uint8_t *p = (uint8_t*) &packet.soh;
    uint8_t *q = (uint8_t*) &packet.soh;

    /* Waiting for reception (infinite loop) */
    while (get() != MESSAGE_START);
    10c2:	8b 31       	cpi	r24, 0x1B	; 27
    10c4:	c1 f7       	brne	.-16     	; 0x10b6 <main+0x1b0>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:127
    (*p++) = MESSAGE_START;
    10c6:	80 93 8a 38 	sts	0x388A, r24	; 0x80388a <JTAG2::packet>
    10ca:	eb e8       	ldi	r30, 0x8B	; 139
    10cc:	f8 e3       	ldi	r31, 0x38	; 56
get():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:86
  /*******************
   * Local functions *
   *******************/

  uint8_t get (void) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_RXCIF_bp);
    10ce:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
    10d2:	87 ff       	sbrs	r24, 7
    10d4:	fc cf       	rjmp	.-8      	; 0x10ce <main+0x1c8>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:87
    return JTAG_USART.RXDATAL;
    10d6:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__RODATA_PM_OFFSET__+0x7f8820>
packet_receive():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:130
    /* Waiting for reception (infinite loop) */
    while (get() != MESSAGE_START);
    (*p++) = MESSAGE_START;

    /* First 7bytes */
    for (int8_t i = 0; i < 7; i++) *p++ = get();
    10da:	81 93       	st	Z+, r24
    10dc:	28 e3       	ldi	r18, 0x38	; 56
    10de:	e2 39       	cpi	r30, 0x92	; 146
    10e0:	f2 07       	cpc	r31, r18
    10e2:	a9 f7       	brne	.-22     	; 0x10ce <main+0x1c8>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:133

    /* STX confirmation */
    if (packet.stx != TOKEN) return false;
    10e4:	80 91 91 38 	lds	r24, 0x3891	; 0x803891 <JTAG2::packet+0x7>
    10e8:	8e 30       	cpi	r24, 0x0E	; 14
    10ea:	29 f7       	brne	.-54     	; 0x10b6 <main+0x1b0>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:136

    /* Check packet length */
    if (packet.size > sizeof(packet.body)) return false;
    10ec:	80 91 8d 38 	lds	r24, 0x388D	; 0x80388d <JTAG2::packet+0x3>
    10f0:	90 91 8e 38 	lds	r25, 0x388E	; 0x80388e <JTAG2::packet+0x4>
    10f4:	a0 91 8f 38 	lds	r26, 0x388F	; 0x80388f <JTAG2::packet+0x5>
    10f8:	b0 91 90 38 	lds	r27, 0x3890	; 0x803890 <JTAG2::packet+0x6>
    10fc:	85 31       	cpi	r24, 0x15	; 21
    10fe:	92 40       	sbci	r25, 0x02	; 2
    1100:	a1 05       	cpc	r26, r1
    1102:	b1 05       	cpc	r27, r1
    1104:	c0 f6       	brcc	.-80     	; 0x10b6 <main+0x1b0>
    1106:	02 e9       	ldi	r16, 0x92	; 146
    1108:	18 e3       	ldi	r17, 0x38	; 56
    110a:	68 01       	movw	r12, r16
main():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:139

    /* receive the rest */
    for (int16_t j = -2; j < packet.size_word[0]; j++) *p++ = get();
    110c:	8e ef       	ldi	r24, 0xFE	; 254
    110e:	9f ef       	ldi	r25, 0xFF	; 255
packet_receive():
    1110:	20 91 8d 38 	lds	r18, 0x388D	; 0x80388d <JTAG2::packet+0x3>
    1114:	30 91 8e 38 	lds	r19, 0x388E	; 0x80388e <JTAG2::packet+0x4>
    1118:	82 17       	cp	r24, r18
    111a:	93 07       	cpc	r25, r19
    111c:	6c f4       	brge	.+26     	; 0x1138 <main+0x232>
get():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:86
  /*******************
   * Local functions *
   *******************/

  uint8_t get (void) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_RXCIF_bp);
    111e:	20 91 24 08 	lds	r18, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
    1122:	27 ff       	sbrs	r18, 7
    1124:	fc cf       	rjmp	.-8      	; 0x111e <main+0x218>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:87
    return JTAG_USART.RXDATAL;
    1126:	20 91 20 08 	lds	r18, 0x0820	; 0x800820 <__RODATA_PM_OFFSET__+0x7f8820>
packet_receive():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:139

    /* Check packet length */
    if (packet.size > sizeof(packet.body)) return false;

    /* receive the rest */
    for (int16_t j = -2; j < packet.size_word[0]; j++) *p++ = get();
    112a:	d6 01       	movw	r26, r12
    112c:	2d 93       	st	X+, r18
    112e:	6d 01       	movw	r12, r26
    1130:	01 96       	adiw	r24, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:109
  }
  else {
    LED_Flash();
    1132:	ee cf       	rjmp	.-36     	; 0x1110 <main+0x20a>
setup():
    1134:	fb d8       	rcall	.-3594   	; 0x32c <TIM::LED_Flash()>
    1136:	79 cf       	rjmp	.-270    	; 0x102a <main+0x124>
packet_receive():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:139
    1138:	3a e8       	ldi	r19, 0x8A	; 138
    113a:	e3 2e       	mov	r14, r19
    113c:	38 e3       	ldi	r19, 0x38	; 56
    113e:	f3 2e       	mov	r15, r19
main():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:121
  /****************
   * JTAG Receive *
   ****************/

  bool packet_receive (void) {
    uint16_t _crc = ~0;
    1140:	8f ef       	ldi	r24, 0xFF	; 255
    1142:	9f ef       	ldi	r25, 0xFF	; 255
packet_receive():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:142

    /* receive the rest */
    for (int16_t j = -2; j < packet.size_word[0]; j++) *p++ = get();

    /* CRC check when receive buffer is filled */
    while (p != q) _crc = crc16_update(_crc, *q++);
    1144:	ec 14       	cp	r14, r12
    1146:	fd 04       	cpc	r15, r13
    1148:	29 f0       	breq	.+10     	; 0x1154 <main+0x24e>
    114a:	f7 01       	movw	r30, r14
    114c:	61 91       	ld	r22, Z+
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:101
  void flush (void) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_TXCIF_bp);
  }

  uint16_t crc16_update(uint16_t _crc, uint8_t _data) {
    return _crc_ccitt_update(_crc, _data);
    114e:	7f 01       	movw	r14, r30
crc16_update():
    1150:	7f d9       	rcall	.-3330   	; 0x450 <_crc_ccitt_update(unsigned int, unsigned char)>
    1152:	f8 cf       	rjmp	.-16     	; 0x1144 <main+0x23e>
wakeup_jtag():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:485
 * Main loop *
 *************/

void JTAG2::wakeup_jtag (void) {
  for (;;) {
    if (packet_receive()) process_command();
    1154:	89 2b       	or	r24, r25
    1156:	09 f0       	breq	.+2      	; 0x115a <main+0x254>
    1158:	ae cf       	rjmp	.-164    	; 0x10b6 <main+0x1b0>
process_command():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:331
  /****************
   * JTAG Process *
   ****************/

  inline void process_command (void) {
    wdt_reset();
    115a:	a8 95       	wdr
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:335
    #ifdef ENABLE_DEBUG_UPDI_SENDER
    UPDI::_send_buf_clear();
    #endif
    uint8_t message_id = packet.body[MESSAGE_ID];
    115c:	80 91 92 38 	lds	r24, 0x3892	; 0x803892 <JTAG2::packet+0x8>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:336
    packet.size = 1;
    1160:	40 92 8d 38 	sts	0x388D, r4	; 0x80388d <JTAG2::packet+0x3>
    1164:	50 92 8e 38 	sts	0x388E, r5	; 0x80388e <JTAG2::packet+0x4>
    1168:	60 92 8f 38 	sts	0x388F, r6	; 0x80388f <JTAG2::packet+0x5>
    116c:	70 92 90 38 	sts	0x3890, r7	; 0x803890 <JTAG2::packet+0x6>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:337
    packet.body[MESSAGE_ID] = RSP_OK;
    1170:	f0 e8       	ldi	r31, 0x80	; 128
    1172:	f0 93 92 38 	sts	0x3892, r31	; 0x803892 <JTAG2::packet+0x8>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:338
    switch (message_id) {
    1176:	8b 30       	cpi	r24, 0x0B	; 11
    1178:	09 f4       	brne	.+2      	; 0x117c <main+0x276>
    117a:	26 c1       	rjmp	.+588    	; 0x13c8 <main+0x4c2>
    117c:	08 f0       	brcs	.+2      	; 0x1180 <main+0x27a>
    117e:	4c c0       	rjmp	.+152    	; 0x1218 <main+0x312>
    1180:	83 30       	cpi	r24, 0x03	; 3
    1182:	09 f4       	brne	.+2      	; 0x1186 <main+0x280>
    1184:	c6 c0       	rjmp	.+396    	; 0x1312 <main+0x40c>
    1186:	08 f0       	brcs	.+2      	; 0x118a <main+0x284>
    1188:	3d c0       	rjmp	.+122    	; 0x1204 <main+0x2fe>
    118a:	81 30       	cpi	r24, 0x01	; 1
    118c:	09 f4       	brne	.+2      	; 0x1190 <main+0x28a>
    118e:	68 c0       	rjmp	.+208    	; 0x1260 <main+0x35a>
    1190:	08 f4       	brcc	.+2      	; 0x1194 <main+0x28e>
    1192:	b6 c1       	rjmp	.+876    	; 0x1500 <main+0x5fa>
set_parameter():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:191
   * CMND_SET_PARAMETER *
   **********************/

  bool set_parameter (void) {
    uint8_t param_val = packet.body[RSP_DATA + 1];
    switch ( packet.body[RSP_DATA] ) {
    1194:	80 91 93 38 	lds	r24, 0x3893	; 0x803893 <JTAG2::packet+0x9>
    1198:	85 30       	cpi	r24, 0x05	; 5
    119a:	09 f0       	breq	.+2      	; 0x119e <main+0x298>
    119c:	46 c0       	rjmp	.+140    	; 0x122a <main+0x324>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:190
  /**********************
   * CMND_SET_PARAMETER *
   **********************/

  bool set_parameter (void) {
    uint8_t param_val = packet.body[RSP_DATA + 1];
    119e:	d0 90 94 38 	lds	r13, 0x3894	; 0x803894 <JTAG2::packet+0xa>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:195
    switch ( packet.body[RSP_DATA] ) {
      /* JTAG interface speed */
      case PAR_BAUD_RATE : {
        /* Compatible range confirmation */
        if ((param_val >= BAUD_LOWER) && (param_val <= BAUD_UPPER)) {
    11a2:	8e ef       	ldi	r24, 0xFE	; 254
    11a4:	8d 0d       	add	r24, r13
    11a6:	88 31       	cpi	r24, 0x18	; 24
    11a8:	08 f0       	brcs	.+2      	; 0x11ac <main+0x2a6>
    11aa:	af c0       	rjmp	.+350    	; 0x130a <main+0x404>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:196
          uint16_t baud = pgm_read_word( &BAUD_TABLE[param_val] );
    11ac:	8d 2d       	mov	r24, r13
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	fc 01       	movw	r30, r24
    11b2:	ee 0f       	add	r30, r30
    11b4:	ff 1f       	adc	r31, r31
    11b6:	eb 56       	subi	r30, 0x6B	; 107
    11b8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ba:	05 91       	lpm	r16, Z+
    11bc:	14 91       	lpm	r17, Z
    11be:	78 01       	movw	r14, r16
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:197
          if (baud) {
    11c0:	01 15       	cp	r16, r1
    11c2:	11 05       	cpc	r17, r1
    11c4:	09 f4       	brne	.+2      	; 0x11c8 <main+0x2c2>
    11c6:	a1 c0       	rjmp	.+322    	; 0x130a <main+0x404>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:199
            /* If normal, respond and then change speed */
            param_baud_rate_val = (jtag_baud_rate_e) param_val;
    11c8:	80 93 36 38 	sts	0x3836, r24	; 0x803836 <JTAG2::param_baud_rate_val>
    11cc:	90 93 37 38 	sts	0x3837, r25	; 0x803837 <JTAG2::param_baud_rate_val+0x1>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:200
            answer_transfer();
    11d0:	51 d9       	rcall	.-3422   	; 0x474 <JTAG2::answer_transfer()>
flush():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:97
    JTAG_USART.STATUS = USART_TXCIF_bm;
    return JTAG_USART.TXDATAL = _data;
  }

  void flush (void) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_TXCIF_bp);
    11d2:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
    11d6:	86 ff       	sbrs	r24, 6
    11d8:	fc cf       	rjmp	.-8      	; 0x11d2 <main+0x2cc>
set_parameter():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:203
            /* If normal, respond and then change speed */
            param_baud_rate_val = (jtag_baud_rate_e) param_val;
            answer_transfer();
            flush();
            /* If the division ratio is too small, change to double speed mode */
            if (baud < 64) {
    11da:	00 34       	cpi	r16, 0x40	; 64
    11dc:	11 05       	cpc	r17, r1
    11de:	30 f4       	brcc	.+12     	; 0x11ec <main+0x2e6>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:204
              JTAG_USART.CTRLB = JTAG_USART_DBLON;
    11e0:	8a ec       	ldi	r24, 0xCA	; 202
    11e2:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__RODATA_PM_OFFSET__+0x7f8826>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:205
              baud <<= 1;
    11e6:	78 01       	movw	r14, r16
    11e8:	ee 0c       	add	r14, r14
    11ea:	ff 1c       	adc	r15, r15
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:207
            }
            JTAG_USART.BAUD = baud;
    11ec:	e0 92 28 08 	sts	0x0828, r14	; 0x800828 <__RODATA_PM_OFFSET__+0x7f8828>
    11f0:	f0 92 29 08 	sts	0x0829, r15	; 0x800829 <__RODATA_PM_OFFSET__+0x7f8829>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:209
            /* Speed to allow terminal mode */
            if (param_val == BAUD_38400 || param_val == BAUD_666666)
    11f4:	95 e0       	ldi	r25, 0x05	; 5
    11f6:	d9 16       	cp	r13, r25
    11f8:	19 f0       	breq	.+6      	; 0x1200 <main+0x2fa>
    11fa:	a8 e1       	ldi	r26, 0x18	; 24
    11fc:	da 12       	cpse	r13, r26
    11fe:	5b cf       	rjmp	.-330    	; 0x10b6 <main+0x1b0>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:210
              bit_set(UPDI_CONTROL, UPDI::UPDI_TERM_bp);
    1200:	e5 9a       	sbi	0x1c, 5	; 28
    1202:	59 cf       	rjmp	.-334    	; 0x10b6 <main+0x1b0>
process_command():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:338
    UPDI::_send_buf_clear();
    #endif
    uint8_t message_id = packet.body[MESSAGE_ID];
    packet.size = 1;
    packet.body[MESSAGE_ID] = RSP_OK;
    switch (message_id) {
    1204:	85 30       	cpi	r24, 0x05	; 5
    1206:	09 f4       	brne	.+2      	; 0x120a <main+0x304>
    1208:	21 c1       	rjmp	.+578    	; 0x144c <main+0x546>
    120a:	08 f4       	brcc	.+2      	; 0x120e <main+0x308>
    120c:	26 c1       	rjmp	.+588    	; 0x145a <main+0x554>
    120e:	88 30       	cpi	r24, 0x08	; 8
    1210:	61 f0       	breq	.+24     	; 0x122a <main+0x324>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:447
        // SYS::WDT_REBOOT();
        SYS::System_Reset();
      }
      /* Returns negation for unknown commands */
      default : {
        set_response(RSP_FAILED);
    1212:	80 ea       	ldi	r24, 0xA0	; 160
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	7b c0       	rjmp	.+246    	; 0x130e <main+0x408>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:338
    UPDI::_send_buf_clear();
    #endif
    uint8_t message_id = packet.body[MESSAGE_ID];
    packet.size = 1;
    packet.body[MESSAGE_ID] = RSP_OK;
    switch (message_id) {
    1218:	86 31       	cpi	r24, 0x16	; 22
    121a:	48 f4       	brcc	.+18     	; 0x122e <main+0x328>
    121c:	84 31       	cpi	r24, 0x14	; 20
    121e:	28 f4       	brcc	.+10     	; 0x122a <main+0x324>
    1220:	8c 30       	cpi	r24, 0x0C	; 12
    1222:	09 f4       	brne	.+2      	; 0x1226 <main+0x320>
    1224:	36 c1       	rjmp	.+620    	; 0x1492 <main+0x58c>
    1226:	8f 30       	cpi	r24, 0x0F	; 15
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:450
      /* Returns negation for unknown commands */
      default : {
        set_response(RSP_FAILED);
      }
    }
    answer_transfer();
    1228:	a1 f7       	brne	.-24     	; 0x1212 <main+0x30c>
    122a:	24 d9       	rcall	.-3512   	; 0x474 <JTAG2::answer_transfer()>
    122c:	44 cf       	rjmp	.-376    	; 0x10b6 <main+0x1b0>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:338
    UPDI::_send_buf_clear();
    #endif
    uint8_t message_id = packet.body[MESSAGE_ID];
    packet.size = 1;
    packet.body[MESSAGE_ID] = RSP_OK;
    switch (message_id) {
    122e:	86 33       	cpi	r24, 0x36	; 54
    1230:	e1 f3       	breq	.-8      	; 0x122a <main+0x324>
    1232:	85 35       	cpi	r24, 0x55	; 85
    1234:	09 f4       	brne	.+2      	; 0x1238 <main+0x332>
    1236:	4a c1       	rjmp	.+660    	; 0x14cc <main+0x5c6>
    1238:	84 33       	cpi	r24, 0x34	; 52
    123a:	59 f7       	brne	.-42     	; 0x1212 <main+0x30c>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:411
        #endif
        break;
      }
      case CMND_XMEGA_ERASE : {
        /* Received packet error retransmission exception */
        if (before_seqnum == packet.number) break;
    123c:	20 91 8b 38 	lds	r18, 0x388B	; 0x80388b <JTAG2::packet+0x1>
    1240:	30 91 8c 38 	lds	r19, 0x388C	; 0x80388c <JTAG2::packet+0x2>
    1244:	80 91 38 38 	lds	r24, 0x3838	; 0x803838 <JTAG2::before_seqnum>
    1248:	90 91 39 38 	lds	r25, 0x3839	; 0x803839 <JTAG2::before_seqnum+0x1>
    124c:	28 17       	cp	r18, r24
    124e:	39 07       	cpc	r19, r25
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:412
        if (UPDI::runtime(UPDI::UPDI_CMD_ERASE)) {
    1250:	61 f3       	breq	.-40     	; 0x122a <main+0x324>
    1252:	83 e0       	ldi	r24, 0x03	; 3
    1254:	af da       	rcall	.-2722   	; 0x7b4 <UPDI::runtime(unsigned char)>
    1256:	81 11       	cpse	r24, r1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:417
          /* Keep the sequence number if completed successfully */
          before_seqnum = packet.number;
        }
        else {
          set_response(RSP_ILLEGAL_POWER_STATE);
    1258:	10 c1       	rjmp	.+544    	; 0x147a <main+0x574>
    125a:	8d ea       	ldi	r24, 0xAD	; 173
    125c:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:148
  _PROTECTED_WRITE(WDT_CTRLA, _wdt_period);
}

void SYS::WDT_OFF (void) { WDT_SET(WDT_PERIOD_OFF_gc); }

void SYS::WDT_ON (void) { WDT_SET(WDT_PERIOD_8KCLK_gc); }
    125e:	57 c0       	rjmp	.+174    	; 0x130e <main+0x408>
WDT_ON():
    1260:	8b e0       	ldi	r24, 0x0B	; 11
    1262:	9e d8       	rcall	.-3780   	; 0x3a0 <SYS::WDT_SET(unsigned char)>
RTS_Disable():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:108
void SYS::RTS_Enable (void) {
  pinControlRegister(RTS_SENSE_PIN) = RTS_SENSE_CONFIG;
}

void SYS::RTS_Disable (void) {
  pinControlRegister(RTS_SENSE_PIN) = RTS_SENSE_DISABLE;
    1264:	88 e0       	ldi	r24, 0x08	; 8
    1266:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <__RODATA_PM_OFFSET__+0x7f8412>
LED_Stop():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:178
}

/* Suspension (before UPDI approval) */
/* TCA0 changed to charge pump drive speed */
void TIM::LED_Stop (void) {
  if (TIM::mode != 0) {
    126a:	80 91 5d 38 	lds	r24, 0x385D	; 0x80385d <TIM::mode>
    126e:	88 23       	and	r24, r24
    1270:	41 f0       	breq	.+16     	; 0x1282 <main+0x37c>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:179
    TIM::mode = 0;
    1272:	10 92 5d 38 	sts	0x385D, r1	; 0x80385d <TIM::mode>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:180
    TCA0_SPLIT_CTRLA = TCA_SPLIT_RUNSTDBY_bm | TCA_SPLIT_ENABLE_bm | TCA_SPLIT_CLKSEL_DIV1_gc;
    1276:	81 e8       	ldi	r24, 0x81	; 129
    1278:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__RODATA_PM_OFFSET__+0x7f8a00>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:181
    LEDG_EVOUT = EVSYS_USER_OFF_gc;
    127c:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <__RODATA_PM_OFFSET__+0x7f81a9>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:343
    switch (message_id) {
      case CMND_GET_SIGN_ON : {
        SYS::WDT_ON();
        SYS::RTS_Disable();
        TIM::LED_Stop();
        UPDI::Target_Reset(true);
    1280:	0f 98       	cbi	0x01, 7	; 1
process_command():
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	46 d8       	rcall	.-3956   	; 0x312 <UPDI::Target_Reset(bool)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:344
        openDrainWrite(TRST_PIN, LOW);
    1286:	21 9a       	sbi	0x04, 1	; 4
PG_Enable():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:96
/******************
 * Various ON/OFF *
 ******************/

void SYS::PG_Enable (void) {
  digitalWrite(PGEN_PIN, HIGH);
    1288:	48 9a       	sbi	0x09, 0	; 9
transfer_enable():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:106
    return _crc_ccitt_update(_crc, _data);
  }

  void transfer_enable (void) {
    SYS::PG_Enable();
    pinMode(JTAG_TXD_PIN, OUTPUT);
    128a:	42 9a       	sbi	0x08, 2	; 8
    128c:	10 92 52 04 	sts	0x0452, r1	; 0x800452 <__RODATA_PM_OFFSET__+0x7f8452>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:107
    JTAG_USART.CTRLB = JTAG_USART_ON;
    1290:	88 ec       	ldi	r24, 0xC8	; 200
    1292:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__RODATA_PM_OFFSET__+0x7f8826>
sign_on_response():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:168
  /********************
   * SIGN_ON Response *
   ********************/

  void sign_on_response (void) {
    UPDI_NVMCTRL = 0;
    1296:	1d ba       	out	0x1d, r1	; 29
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:169
    packet.size = sizeof(sign_on_resp);
    1298:	80 92 8d 38 	sts	0x388D, r8	; 0x80388d <JTAG2::packet+0x3>
    129c:	90 92 8e 38 	sts	0x388E, r9	; 0x80388e <JTAG2::packet+0x4>
    12a0:	a0 92 8f 38 	sts	0x388F, r10	; 0x80388f <JTAG2::packet+0x5>
    12a4:	b0 92 90 38 	sts	0x3890, r11	; 0x803890 <JTAG2::packet+0x6>
    12a8:	e8 e7       	ldi	r30, 0x78	; 120
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:171
    for (uint8_t i = 0; i < sizeof(sign_on_resp); i++)
      packet.body[i] = pgm_read_byte( &sign_on_resp[i] );
    12ac:	84 91       	lpm	r24, Z
    12ae:	d8 01       	movw	r26, r16
    12b0:	8d 93       	st	X+, r24
    12b2:	8d 01       	movw	r16, r26
    12b4:	31 96       	adiw	r30, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:170
   ********************/

  void sign_on_response (void) {
    UPDI_NVMCTRL = 0;
    packet.size = sizeof(sign_on_resp);
    for (uint8_t i = 0; i < sizeof(sign_on_resp); i++)
    12b6:	8f ea       	ldi	r24, 0xAF	; 175
    12b8:	98 e3       	ldi	r25, 0x38	; 56
    12ba:	8a 17       	cp	r24, r26
    12bc:	9b 07       	cpc	r25, r27
    12be:	b1 f7       	brne	.-20     	; 0x12ac <main+0x3a6>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:176
      packet.body[i] = pgm_read_byte( &sign_on_resp[i] );
    /* Generate version information from SERNUM */
    uint8_t* p = (uint8_t*) &SIGROW_SERNUM0;
    uint8_t* q = (uint8_t*) &SIGROW_SERNUM4;
    uint8_t* r = (uint8_t*) &packet.body[10];
      *r++ = *q++ ^ *p++ ^ *p++;
    12c0:	80 91 07 11 	lds	r24, 0x1107	; 0x801107 <__RODATA_PM_OFFSET__+0x7f9107>
    12c4:	90 91 03 11 	lds	r25, 0x1103	; 0x801103 <__RODATA_PM_OFFSET__+0x7f9103>
    12c8:	89 27       	eor	r24, r25
    12ca:	90 91 04 11 	lds	r25, 0x1104	; 0x801104 <__RODATA_PM_OFFSET__+0x7f9104>
    12ce:	89 27       	eor	r24, r25
    12d0:	80 93 9c 38 	sts	0x389C, r24	; 0x80389c <JTAG2::packet+0x12>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:177
      *r++ = *q++ ^ *p++ ^ *p++;
    12d4:	80 91 08 11 	lds	r24, 0x1108	; 0x801108 <__RODATA_PM_OFFSET__+0x7f9108>
    12d8:	90 91 05 11 	lds	r25, 0x1105	; 0x801105 <__RODATA_PM_OFFSET__+0x7f9105>
    12dc:	89 27       	eor	r24, r25
    12de:	90 91 06 11 	lds	r25, 0x1106	; 0x801106 <__RODATA_PM_OFFSET__+0x7f9106>
    12e2:	89 27       	eor	r24, r25
    12e4:	80 93 9d 38 	sts	0x389D, r24	; 0x80389d <JTAG2::packet+0x13>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:178
      *r++ = *q++;
    12e8:	80 91 09 11 	lds	r24, 0x1109	; 0x801109 <__RODATA_PM_OFFSET__+0x7f9109>
    12ec:	80 93 9e 38 	sts	0x389E, r24	; 0x80389e <JTAG2::packet+0x14>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:179
      *r++ = *q++;
    12f0:	80 91 0a 11 	lds	r24, 0x110A	; 0x80110a <__RODATA_PM_OFFSET__+0x7f910a>
    12f4:	80 93 9f 38 	sts	0x389F, r24	; 0x80389f <JTAG2::packet+0x15>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:180
      *r++ = *q++;
    12f8:	80 91 0b 11 	lds	r24, 0x110B	; 0x80110b <__RODATA_PM_OFFSET__+0x7f910b>
    12fc:	80 93 a0 38 	sts	0x38A0, r24	; 0x8038a0 <JTAG2::packet+0x16>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:181
      *r++ = *q++;
    1300:	80 91 0c 11 	lds	r24, 0x110C	; 0x80110c <__RODATA_PM_OFFSET__+0x7f910c>
    1304:	80 93 a1 38 	sts	0x38A1, r24	; 0x8038a1 <JTAG2::packet+0x17>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:215
              bit_set(UPDI_CONTROL, UPDI::UPDI_TERM_bp);
            return false;
          }
        }
        /* Range violation results in failure response */
        set_response(RSP_ILLEGAL_VALUE);
    1308:	90 cf       	rjmp	.-224    	; 0x122a <main+0x324>
set_parameter():
    130a:	86 ea       	ldi	r24, 0xA6	; 166
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:447
        // SYS::WDT_REBOOT();
        SYS::System_Reset();
      }
      /* Returns negation for unknown commands */
      default : {
        set_response(RSP_FAILED);
    130c:	90 e0       	ldi	r25, 0x00	; 0
process_command():
    130e:	8e d8       	rcall	.-3812   	; 0x42c <JTAG2::set_response(JTAG2::jtag_response_e)>
    1310:	8c cf       	rjmp	.-232    	; 0x122a <main+0x324>
get_parameter():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:235
  /**********************
   * CMND_GET_PARAMETER *
   **********************/

  void get_parameter (void) {
    switch ( packet.body[RSP_DATA] ) {
    1312:	80 91 93 38 	lds	r24, 0x3893	; 0x803893 <JTAG2::packet+0x9>
    1316:	83 30       	cpi	r24, 0x03	; 3
    1318:	99 f1       	breq	.+102    	; 0x1380 <main+0x47a>
    131a:	38 f4       	brcc	.+14     	; 0x132a <main+0x424>
    131c:	81 30       	cpi	r24, 0x01	; 1
    131e:	71 f0       	breq	.+28     	; 0x133c <main+0x436>
    1320:	82 30       	cpi	r24, 0x02	; 2
    1322:	d9 f0       	breq	.+54     	; 0x135a <main+0x454>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:282
          packet.size_word[0] = 1 + sizeof(updi_desc.sib);
          break;
        }
      }
      default : {
        set_response(RSP_ILLEGAL_PARAMETER);
    1324:	81 ea       	ldi	r24, 0xA1	; 161
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	f2 cf       	rjmp	.-28     	; 0x130e <main+0x408>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:235
  /**********************
   * CMND_GET_PARAMETER *
   **********************/

  void get_parameter (void) {
    switch ( packet.body[RSP_DATA] ) {
    132a:	86 30       	cpi	r24, 0x06	; 6
    132c:	89 f1       	breq	.+98     	; 0x1390 <main+0x48a>
    132e:	8d 31       	cpi	r24, 0x1D	; 29
    1330:	d9 f1       	breq	.+118    	; 0x13a8 <main+0x4a2>
    1332:	85 30       	cpi	r24, 0x05	; 5
    1334:	b9 f7       	brne	.-18     	; 0x1324 <main+0x41e>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:258
        packet.body[1] = 0x55;
        packet.size_word[0] = 2;
        break;
      }
      case PAR_BAUD_RATE : {
        packet.body[1] = param_baud_rate_val;
    1336:	80 91 36 38 	lds	r24, 0x3836	; 0x803836 <JTAG2::param_baud_rate_val>
    133a:	23 c0       	rjmp	.+70     	; 0x1382 <main+0x47c>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:237
   **********************/

  void get_parameter (void) {
    switch ( packet.body[RSP_DATA] ) {
      case PAR_HW_VER : {
        packet.body[1] = sign_on_resp[5];
    133c:	82 e0       	ldi	r24, 0x02	; 2
    133e:	80 93 93 38 	sts	0x3893, r24	; 0x803893 <JTAG2::packet+0x9>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:238
        packet.body[2] = sign_on_resp[9];
    1342:	80 93 94 38 	sts	0x3894, r24	; 0x803894 <JTAG2::packet+0xa>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:239
        packet.size_word[0] = 3;
    1346:	e3 e0       	ldi	r30, 0x03	; 3
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	e0 93 8d 38 	sts	0x388D, r30	; 0x80388d <JTAG2::packet+0x3>
    134e:	f0 93 8e 38 	sts	0x388E, r31	; 0x80388e <JTAG2::packet+0x4>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:286
      default : {
        set_response(RSP_ILLEGAL_PARAMETER);
        return;
      }
    }
    packet.body[MESSAGE_ID] = RSP_PARAMETER;
    1352:	81 e8       	ldi	r24, 0x81	; 129
    1354:	80 93 92 38 	sts	0x3892, r24	; 0x803892 <JTAG2::packet+0x8>
    1358:	68 cf       	rjmp	.-304    	; 0x122a <main+0x324>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:243
        packet.body[2] = sign_on_resp[9];
        packet.size_word[0] = 3;
        break;
      }
      case PAR_FW_VER : {
        packet.body[1] = sign_on_resp[3];
    135a:	85 e3       	ldi	r24, 0x35	; 53
    135c:	80 93 93 38 	sts	0x3893, r24	; 0x803893 <JTAG2::packet+0x9>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:244
        packet.body[2] = sign_on_resp[4];
    1360:	87 e0       	ldi	r24, 0x07	; 7
    1362:	80 93 94 38 	sts	0x3894, r24	; 0x803894 <JTAG2::packet+0xa>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:245
        packet.body[3] = sign_on_resp[7];
    1366:	82 e2       	ldi	r24, 0x22	; 34
    1368:	80 93 95 38 	sts	0x3895, r24	; 0x803895 <JTAG2::packet+0xb>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:246
        packet.body[4] = sign_on_resp[8];
    136c:	86 e0       	ldi	r24, 0x06	; 6
    136e:	80 93 96 38 	sts	0x3896, r24	; 0x803896 <JTAG2::packet+0xc>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:247
        packet.size_word[0] = 5;
    1372:	85 e0       	ldi	r24, 0x05	; 5
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	80 93 8d 38 	sts	0x388D, r24	; 0x80388d <JTAG2::packet+0x3>
    137a:	90 93 8e 38 	sts	0x388E, r25	; 0x80388e <JTAG2::packet+0x4>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:253
        break;
      }
      case PAR_EMU_MODE : {
        /* This response code indicates an UPDI-only implementation */
        /* In normal JTAGICEmkII this is never queried */
        packet.body[1] = 0x55;
    137e:	e9 cf       	rjmp	.-46     	; 0x1352 <main+0x44c>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:258
        packet.size_word[0] = 2;
        break;
      }
      case PAR_BAUD_RATE : {
        packet.body[1] = param_baud_rate_val;
    1380:	85 e5       	ldi	r24, 0x55	; 85
    1382:	80 93 93 38 	sts	0x3893, r24	; 0x803893 <JTAG2::packet+0x9>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:259
        packet.size_word[0] = 2;
    1386:	20 92 8d 38 	sts	0x388D, r2	; 0x80388d <JTAG2::packet+0x3>
    138a:	30 92 8e 38 	sts	0x388E, r3	; 0x80388e <JTAG2::packet+0x4>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:263
        break;
      }
      case PAR_VTARGET : {
        _CAPS16(packet.body[1])->word = SYS::get_vcc();
    138e:	e1 cf       	rjmp	.-62     	; 0x1352 <main+0x44c>
    1390:	10 d8       	rcall	.-4064   	; 0x3b2 <SYS::get_vcc()>
    1392:	80 93 93 38 	sts	0x3893, r24	; 0x803893 <JTAG2::packet+0x9>
    1396:	90 93 94 38 	sts	0x3894, r25	; 0x803894 <JTAG2::packet+0xa>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:264
        packet.size_word[0] = 3;
    139a:	a3 e0       	ldi	r26, 0x03	; 3
    139c:	b0 e0       	ldi	r27, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:277
        /* Silicon revision (REVID) can be read as normal IO memory. */
        if (bit_is_set(UPDI_CONTROL, UPDI::UPDI_INFO_bp)) {
          uint8_t *q = &packet.body[RSP_DATA];
          uint8_t *p = &updi_desc.sib[0];
          for (uint8_t i = 0; i < sizeof(updi_desc.sib); i++) *q++ = *p++;
          packet.size_word[0] = 1 + sizeof(updi_desc.sib);
    139e:	a0 93 8d 38 	sts	0x388D, r26	; 0x80388d <JTAG2::packet+0x3>
    13a2:	b0 93 8e 38 	sts	0x388E, r27	; 0x80388e <JTAG2::packet+0x4>
    13a6:	d5 cf       	rjmp	.-86     	; 0x1352 <main+0x44c>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:273
      case PAR_TARGET_SIGNATURE : {
        /* SIB information can be returned as an extended signature. */
        /* Responds correctly only during programming mode.          */
        /* otherwise an error will be returned.                      */
        /* Silicon revision (REVID) can be read as normal IO memory. */
        if (bit_is_set(UPDI_CONTROL, UPDI::UPDI_INFO_bp)) {
    13a8:	e0 9b       	sbis	0x1c, 0	; 28
    13aa:	bc cf       	rjmp	.-136    	; 0x1324 <main+0x41e>
    13ac:	ea e6       	ldi	r30, 0x6A	; 106
    13ae:	f8 e3       	ldi	r31, 0x38	; 56
    13b0:	a3 e9       	ldi	r26, 0x93	; 147
    13b2:	b8 e3       	ldi	r27, 0x38	; 56
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:276
          uint8_t *q = &packet.body[RSP_DATA];
          uint8_t *p = &updi_desc.sib[0];
          for (uint8_t i = 0; i < sizeof(updi_desc.sib); i++) *q++ = *p++;
    13b4:	81 91       	ld	r24, Z+
    13b6:	8d 93       	st	X+, r24
    13b8:	8a e8       	ldi	r24, 0x8A	; 138
    13ba:	98 e3       	ldi	r25, 0x38	; 56
    13bc:	8e 17       	cp	r24, r30
    13be:	9f 07       	cpc	r25, r31
    13c0:	c9 f7       	brne	.-14     	; 0x13b4 <main+0x4ae>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:277
          packet.size_word[0] = 1 + sizeof(updi_desc.sib);
    13c2:	a1 e2       	ldi	r26, 0x21	; 33
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	eb cf       	rjmp	.-42     	; 0x139e <main+0x498>
process_command():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:360
        get_parameter();
        break;
      }
      case CMND_RESET : {
        /* Run only the first time */
        if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_INIT_bp)) {
    13c8:	e7 99       	sbic	0x1c, 7	; 28
    13ca:	2f cf       	rjmp	.-418    	; 0x122a <main+0x324>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:361
          uint8_t hv_control = packet.body[RSP_DATA];
    13cc:	80 91 93 38 	lds	r24, 0x3893	; 0x803893 <JTAG2::packet+0x9>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:362
          if ((hv_control & '0') == '0') {
    13d0:	98 2f       	mov	r25, r24
    13d2:	90 73       	andi	r25, 0x30	; 48
    13d4:	90 33       	cpi	r25, 0x30	; 48
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:366
            /* If the general reset setting is neither 0 nor 1. */
            /* Accepts special extension settings.              */
            /* This forces HV control.                          */
            updi_desc.hvupdi_variant = hv_control;
    13d6:	29 f4       	brne	.+10     	; 0x13e2 <main+0x4dc>
    13d8:	80 93 60 38 	sts	0x3860, r24	; 0x803860 <JTAG2::updi_desc+0x2>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:368
            /* '1' must be passed for automatic HV control to be inhibited */
            if (hv_control != '1') bit_set(UPDI_CONTROL, UPDI::UPDI_FCHV_bp);
    13dc:	81 33       	cpi	r24, 0x31	; 49
    13de:	09 f0       	breq	.+2      	; 0x13e2 <main+0x4dc>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:371
          }
          /* Here UPDI control is tried */
          UPDI::updi_activate();
    13e0:	e4 9a       	sbi	0x1c, 4	; 28
    13e2:	ab dc       	rcall	.-1706   	; 0xd3a <UPDI::updi_activate()>
    13e4:	80 91 5d 38 	lds	r24, 0x385D	; 0x80385d <TIM::mode>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:372
          if (bit_is_set(UPDI_CONTROL, UPDI::UPDI_TERM_bp)) {
    13e8:	e5 9b       	sbis	0x1c, 5	; 28
    13ea:	1a c0       	rjmp	.+52     	; 0x1420 <main+0x51a>
LED_TCB1():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:151
    LEDG_EVOUT = EVSYS_USER_CHANNEL2_gc;
  }
}

void LED_TCB1 (uint8_t mode, uint16_t ccmp) {
  if (TIM::mode != mode) {
    13ec:	83 30       	cpi	r24, 0x03	; 3
    13ee:	99 f0       	breq	.+38     	; 0x1416 <main+0x510>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:152
    TIM::mode = mode;
    13f0:	83 e0       	ldi	r24, 0x03	; 3
    13f2:	80 93 5d 38 	sts	0x385D, r24	; 0x80385d <TIM::mode>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:153
    TCB1_CCMP = ccmp;
    13f6:	e9 ea       	ldi	r30, 0xA9	; 169
    13f8:	f5 e5       	ldi	r31, 0x55	; 85
    13fa:	e0 93 9c 0a 	sts	0x0A9C, r30	; 0x800a9c <__RODATA_PM_OFFSET__+0x7f8a9c>
    13fe:	f0 93 9d 0a 	sts	0x0A9D, r31	; 0x800a9d <__RODATA_PM_OFFSET__+0x7f8a9d>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:154
    TCB1_CNT = 0;
    1402:	10 92 9a 0a 	sts	0x0A9A, r1	; 0x800a9a <__RODATA_PM_OFFSET__+0x7f8a9a>
    1406:	10 92 9b 0a 	sts	0x0A9B, r1	; 0x800a9b <__RODATA_PM_OFFSET__+0x7f8a9b>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:155
    TCB1_CTRLA = TCB_RUNSTDBY_bm | TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
    140a:	8f e4       	ldi	r24, 0x4F	; 79
    140c:	80 93 90 0a 	sts	0x0A90, r24	; 0x800a90 <__RODATA_PM_OFFSET__+0x7f8a90>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:156
    LEDG_EVOUT = EVSYS_USER_CHANNEL0_gc;
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <__RODATA_PM_OFFSET__+0x7f81a9>
WDT_OFF():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:146
void SYS::WDT_SET (uint8_t _wdt_period) {
  loop_until_bit_is_clear(WDT_STATUS, WDT_SYNCBUSY_bp);
  _PROTECTED_WRITE(WDT_CTRLA, _wdt_period);
}

void SYS::WDT_OFF (void) { WDT_SET(WDT_PERIOD_OFF_gc); }
    1416:	80 e0       	ldi	r24, 0x00	; 0
    1418:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <SYS::WDT_SET(unsigned char)>
process_command():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:381
          }
          else {
            /* If not set to interactive mode, the LED will flash rapidly */
            TIM::LED_Fast();
          }
          bit_set(UPDI_CONTROL, UPDI::UPDI_INIT_bp);
    141c:	e7 9a       	sbi	0x1c, 7	; 28
    141e:	05 cf       	rjmp	.-502    	; 0x122a <main+0x324>
LED_TCB1():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:151
    LEDG_EVOUT = EVSYS_USER_CHANNEL2_gc;
  }
}

void LED_TCB1 (uint8_t mode, uint16_t ccmp) {
  if (TIM::mode != mode) {
    1420:	84 30       	cpi	r24, 0x04	; 4
    1422:	e1 f3       	breq	.-8      	; 0x141c <main+0x516>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:152
    TIM::mode = mode;
    1424:	84 e0       	ldi	r24, 0x04	; 4
    1426:	80 93 5d 38 	sts	0x385D, r24	; 0x80385d <TIM::mode>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:153
    TCB1_CCMP = ccmp;
    142a:	85 e1       	ldi	r24, 0x15	; 21
    142c:	94 e0       	ldi	r25, 0x04	; 4
    142e:	80 93 9c 0a 	sts	0x0A9C, r24	; 0x800a9c <__RODATA_PM_OFFSET__+0x7f8a9c>
    1432:	90 93 9d 0a 	sts	0x0A9D, r25	; 0x800a9d <__RODATA_PM_OFFSET__+0x7f8a9d>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:154
    TCB1_CNT = 0;
    1436:	10 92 9a 0a 	sts	0x0A9A, r1	; 0x800a9a <__RODATA_PM_OFFSET__+0x7f8a9a>
    143a:	10 92 9b 0a 	sts	0x0A9B, r1	; 0x800a9b <__RODATA_PM_OFFSET__+0x7f8a9b>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:155
    TCB1_CTRLA = TCB_RUNSTDBY_bm | TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
    143e:	8f e4       	ldi	r24, 0x4F	; 79
    1440:	80 93 90 0a 	sts	0x0A90, r24	; 0x800a90 <__RODATA_PM_OFFSET__+0x7f8a90>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/TIM.cpp:156
    LEDG_EVOUT = EVSYS_USER_CHANNEL0_gc;
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <__RODATA_PM_OFFSET__+0x7f81a9>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:389
        UPDI::_send_buf_copy();
        #endif
        break;
      }
      case CMND_READ_MEMORY : {
        if (!UPDI::runtime(UPDI::UPDI_CMD_READ_MEMORY)) {
    144a:	e8 cf       	rjmp	.-48     	; 0x141c <main+0x516>
process_command():
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	b2 d9       	rcall	.-3228   	; 0x7b4 <UPDI::runtime(unsigned char)>
    1450:	81 11       	cpse	r24, r1
    1452:	eb ce       	rjmp	.-554    	; 0x122a <main+0x324>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:390
          set_response(RSP_NO_TARGET_POWER);
    1454:	8b ea       	ldi	r24, 0xAB	; 171
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	5a cf       	rjmp	.-332    	; 0x130e <main+0x408>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:396
        }
        break;
      }
      case CMND_WRITE_MEMORY : {
        /* Received packet error retransmission exception */
        if (before_seqnum == packet.number) break;
    145a:	20 91 8b 38 	lds	r18, 0x388B	; 0x80388b <JTAG2::packet+0x1>
    145e:	30 91 8c 38 	lds	r19, 0x388C	; 0x80388c <JTAG2::packet+0x2>
    1462:	80 91 38 38 	lds	r24, 0x3838	; 0x803838 <JTAG2::before_seqnum>
    1466:	90 91 39 38 	lds	r25, 0x3839	; 0x803839 <JTAG2::before_seqnum+0x1>
    146a:	28 17       	cp	r18, r24
    146c:	39 07       	cpc	r19, r25
    146e:	09 f4       	brne	.+2      	; 0x1472 <main+0x56c>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:397
        if (UPDI::runtime(UPDI::UPDI_CMD_WRITE_MEMORY)) {
    1470:	dc ce       	rjmp	.-584    	; 0x122a <main+0x324>
    1472:	82 e0       	ldi	r24, 0x02	; 2
    1474:	9f d9       	rcall	.-3266   	; 0x7b4 <UPDI::runtime(unsigned char)>
    1476:	88 23       	and	r24, r24
    1478:	49 f0       	breq	.+18     	; 0x148c <main+0x586>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:414
      case CMND_XMEGA_ERASE : {
        /* Received packet error retransmission exception */
        if (before_seqnum == packet.number) break;
        if (UPDI::runtime(UPDI::UPDI_CMD_ERASE)) {
          /* Keep the sequence number if completed successfully */
          before_seqnum = packet.number;
    147a:	80 91 8b 38 	lds	r24, 0x388B	; 0x80388b <JTAG2::packet+0x1>
    147e:	90 91 8c 38 	lds	r25, 0x388C	; 0x80388c <JTAG2::packet+0x2>
    1482:	80 93 38 38 	sts	0x3838, r24	; 0x803838 <JTAG2::before_seqnum>
    1486:	90 93 39 38 	sts	0x3839, r25	; 0x803839 <JTAG2::before_seqnum+0x1>
    148a:	cf ce       	rjmp	.-610    	; 0x122a <main+0x324>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:402
        if (UPDI::runtime(UPDI::UPDI_CMD_WRITE_MEMORY)) {
          /* Keep the sequence number if completed successfully */
          before_seqnum = packet.number;
        }
        else {
          set_response(RSP_ILLEGAL_MCU_STATE);
    148c:	85 ea       	ldi	r24, 0xA5	; 165
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	3e cf       	rjmp	.-388    	; 0x130e <main+0x408>
set_descripter():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:297

  void set_descripter (uint8_t type) {
    if (type == CMND_SET_DEVICE_DESC) {
      const struct jtag_device_descriptor *desc =
           (struct jtag_device_descriptor*)&packet.body[RSP_DATA];
      updi_desc.flash_page_size = *(uint16_t*)(&desc->uiFlashPageSize[0]);
    1492:	80 91 86 39 	lds	r24, 0x3986	; 0x803986 <JTAG2::packet+0xfc>
    1496:	90 91 87 39 	lds	r25, 0x3987	; 0x803987 <JTAG2::packet+0xfd>
    149a:	80 93 62 38 	sts	0x3862, r24	; 0x803862 <JTAG2::updi_desc+0x4>
    149e:	90 93 63 38 	sts	0x3863, r25	; 0x803863 <JTAG2::updi_desc+0x5>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:298
      updi_desc.eeprom_page_size = desc->ucEepromPageSize;
    14a2:	80 91 88 39 	lds	r24, 0x3988	; 0x803988 <JTAG2::packet+0xfe>
    14a6:	80 93 64 38 	sts	0x3864, r24	; 0x803864 <JTAG2::updi_desc+0x6>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:299
      if ((desc->ucIDRAddress & '0') == '0') {
    14aa:	90 91 83 39 	lds	r25, 0x3983	; 0x803983 <JTAG2::packet+0xf9>
    14ae:	29 2f       	mov	r18, r25
    14b0:	20 73       	andi	r18, 0x30	; 48
    14b2:	20 33       	cpi	r18, 0x30	; 48
    14b4:	19 f4       	brne	.+6      	; 0x14bc <main+0x5b6>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:303
        /* Accepts special extension settings. */
        /* 0x31 must be passed for automatic HV control to be inhibited. */
        /* This parameter can be specified in the `idr` descriptor in the `part` section. */
        updi_desc.hvupdi_variant = desc->ucIDRAddress;  // Valid value 0x30,0x31 or 0x32
    14b6:	90 93 60 38 	sts	0x3860, r25	; 0x803860 <JTAG2::updi_desc+0x2>
    14ba:	b7 ce       	rjmp	.-658    	; 0x122a <main+0x324>
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:308
      }
      else {
        /* If the EEPROM page size is 32 or more, it is considered a HV=12V system. */
        /* This setting will be referenced when automatic HV control is requested.  */
        updi_desc.hvupdi_variant = updi_desc.eeprom_page_size >= 32 ? '0' : '2';
    14bc:	80 32       	cpi	r24, 0x20	; 32
    14be:	20 f4       	brcc	.+8      	; 0x14c8 <main+0x5c2>
main():
    14c0:	82 e3       	ldi	r24, 0x32	; 50
set_descripter():
    14c2:	80 93 60 38 	sts	0x3860, r24	; 0x803860 <JTAG2::updi_desc+0x2>
    14c6:	b1 ce       	rjmp	.-670    	; 0x122a <main+0x324>
main():
    14c8:	80 e3       	ldi	r24, 0x30	; 48
    14ca:	fb cf       	rjmp	.-10     	; 0x14c2 <main+0x5bc>
set_descripter():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:316
    else if (type == CMND_SET_UPDI_PARAMS) {
      /* This structure is used instead of CMND_SET_DEVICE_DESC after */
      /* answering 0x55 ('U') to PAR_EMU_MODE of CMND_GET_PARAMETER.  */
      /* Once you have confirmed the magic number and data length,    */
      /* you can simply clone it into your internal structure.        */
      const struct updi_device_descriptor *desc =
    14cc:	a3 e9       	ldi	r26, 0x93	; 147
    14ce:	b8 e3       	ldi	r27, 0x38	; 56
    14d0:	a9 83       	std	Y+1, r26	; 0x01
    14d2:	ba 83       	std	Y+2, r27	; 0x02
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:318
           (struct updi_device_descriptor*)&packet.body[RSP_DATA];
      if (desc->magicnumber == 'U' && desc->length <= sizeof(updi_desc) - 2) {
    14d4:	80 91 93 38 	lds	r24, 0x3893	; 0x803893 <JTAG2::packet+0x9>
    14d8:	85 35       	cpi	r24, 0x55	; 85
    14da:	09 f0       	breq	.+2      	; 0x14de <main+0x5d8>
    14dc:	a6 ce       	rjmp	.-692    	; 0x122a <main+0x324>
    14de:	90 91 94 38 	lds	r25, 0x3894	; 0x803894 <JTAG2::packet+0xa>
    14e2:	9b 32       	cpi	r25, 0x2B	; 43
    14e4:	08 f0       	brcs	.+2      	; 0x14e8 <main+0x5e2>
    14e6:	a1 ce       	rjmp	.-702    	; 0x122a <main+0x324>
    14e8:	de 01       	movw	r26, r28
    14ea:	13 96       	adiw	r26, 0x03	; 3
    14ec:	e0 e6       	ldi	r30, 0x60	; 96
    14ee:	f8 e3       	ldi	r31, 0x38	; 56
main():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:321
        uint8_t *q = 2 + (uint8_t*)&updi_desc;
        uint8_t *p = 2 + (uint8_t*)&desc;
        for (int8_t i = 0; i < desc->length; i++) *q++ = *p++;
    14f0:	80 e0       	ldi	r24, 0x00	; 0
set_descripter():
    14f2:	98 17       	cp	r25, r24
    14f4:	09 f4       	brne	.+2      	; 0x14f8 <main+0x5f2>
    14f6:	99 ce       	rjmp	.-718    	; 0x122a <main+0x324>
    14f8:	2d 91       	ld	r18, X+
    14fa:	21 93       	st	Z+, r18
    14fc:	8f 5f       	subi	r24, 0xFF	; 255
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:437
      case CMND_GO :
      case CMND_GET_SYNC : {
        break;
      }
      case CMND_SIGN_OFF : {
        answer_transfer();
    14fe:	f9 cf       	rjmp	.-14     	; 0x14f2 <main+0x5ec>
process_command():
    1500:	0e 94 3a 02 	call	0x474	; 0x474 <JTAG2::answer_transfer()>
flush():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:97
    JTAG_USART.STATUS = USART_TXCIF_bm;
    return JTAG_USART.TXDATAL = _data;
  }

  void flush (void) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_TXCIF_bp);
    1504:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
    1508:	86 ff       	sbrs	r24, 6
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:439
        break;
      }
      case CMND_SIGN_OFF : {
        answer_transfer();
        flush();
        if (bit_is_set(UPDI_CONTROL, UPDI::UPDI_PROG_bp))
    150a:	fc cf       	rjmp	.-8      	; 0x1504 <main+0x5fe>
process_command():
    150c:	e1 9b       	sbis	0x1c, 1	; 28
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/JTAG2.cpp:440
          UPDI::runtime(UPDI::UPDI_CMD_GO);
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <main+0x60e>
    1510:	84 e0       	ldi	r24, 0x04	; 4
    1512:	50 d9       	rcall	.-3424   	; 0x7b4 <UPDI::runtime(unsigned char)>
System_Reset():
/Users/askn/Arduino/AVR/UPDI4AVR_FW634B/src/SYS.cpp:88
/*************
 * Self reset *
 *************/

void SYS::System_Reset (void) {
  _PROTECTED_WRITE(RSTCTRL_SWRR, RSTCTRL_SWRE_bm);
    1514:	88 ed       	ldi	r24, 0xD8	; 216
    1516:	91 e0       	ldi	r25, 0x01	; 1
    1518:	84 bf       	out	0x34, r24	; 52
    151a:	90 93 41 00 	sts	0x0041, r25	; 0x800041 <__RODATA_PM_OFFSET__+0x7f8041>
    151e:	79 ce       	rjmp	.-782    	; 0x1212 <main+0x30c>

00001520 <setjmp>:
setjmp():
    1520:	dc 01       	movw	r26, r24
    1522:	2d 92       	st	X+, r2
    1524:	3d 92       	st	X+, r3
    1526:	4d 92       	st	X+, r4
    1528:	5d 92       	st	X+, r5
    152a:	6d 92       	st	X+, r6
    152c:	7d 92       	st	X+, r7
    152e:	8d 92       	st	X+, r8
    1530:	9d 92       	st	X+, r9
    1532:	ad 92       	st	X+, r10
    1534:	bd 92       	st	X+, r11
    1536:	cd 92       	st	X+, r12
    1538:	dd 92       	st	X+, r13
    153a:	ed 92       	st	X+, r14
    153c:	fd 92       	st	X+, r15
    153e:	0d 93       	st	X+, r16
    1540:	1d 93       	st	X+, r17
    1542:	cd 93       	st	X+, r28
    1544:	dd 93       	st	X+, r29
    1546:	ff 91       	pop	r31
    1548:	ef 91       	pop	r30
    154a:	8d b7       	in	r24, 0x3d	; 61
    154c:	8d 93       	st	X+, r24
    154e:	8e b7       	in	r24, 0x3e	; 62
    1550:	8d 93       	st	X+, r24
    1552:	8f b7       	in	r24, 0x3f	; 63
    1554:	8d 93       	st	X+, r24
    1556:	ed 93       	st	X+, r30
    1558:	fd 93       	st	X+, r31
    155a:	88 27       	eor	r24, r24
    155c:	99 27       	eor	r25, r25
    155e:	09 94       	ijmp

00001560 <longjmp>:
longjmp():
    1560:	dc 01       	movw	r26, r24
    1562:	cb 01       	movw	r24, r22
    1564:	81 30       	cpi	r24, 0x01	; 1
    1566:	91 05       	cpc	r25, r1
    1568:	81 1d       	adc	r24, r1
    156a:	2d 90       	ld	r2, X+
    156c:	3d 90       	ld	r3, X+
    156e:	4d 90       	ld	r4, X+
    1570:	5d 90       	ld	r5, X+
    1572:	6d 90       	ld	r6, X+
    1574:	7d 90       	ld	r7, X+
    1576:	8d 90       	ld	r8, X+
    1578:	9d 90       	ld	r9, X+
    157a:	ad 90       	ld	r10, X+
    157c:	bd 90       	ld	r11, X+
    157e:	cd 90       	ld	r12, X+
    1580:	dd 90       	ld	r13, X+
    1582:	ed 90       	ld	r14, X+
    1584:	fd 90       	ld	r15, X+
    1586:	0d 91       	ld	r16, X+
    1588:	1d 91       	ld	r17, X+
    158a:	cd 91       	ld	r28, X+
    158c:	dd 91       	ld	r29, X+
    158e:	ed 91       	ld	r30, X+
    1590:	fd 91       	ld	r31, X+
    1592:	0d 90       	ld	r0, X+
    1594:	0f be       	out	0x3f, r0	; 63
    1596:	ed bf       	out	0x3d, r30	; 61
    1598:	fe bf       	out	0x3e, r31	; 62
    159a:	ed 91       	ld	r30, X+
    159c:	fd 91       	ld	r31, X+
    159e:	09 94       	ijmp

000015a0 <_exit>:
exit():
    15a0:	f8 94       	cli

000015a2 <__stop_program>:
__stop_program():
    15a2:	ff cf       	rjmp	.-2      	; 0x15a2 <__stop_program>

Disassembly of section .nvmem:

000015ea <.nvmem>:
	...
