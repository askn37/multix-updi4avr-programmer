
/var/folders/mz/_z9vt_y13rdf9tt_4qkvv0k40000gn/T/arduino_build_837519/UPDI4AVR_FW634B.ino.elf:     file format elf32-avr


Disassembly of section .data:

00803800 <__data_start>:
__data_start():
  803800:	55 c8       	rjmp	.-3926   	; 0x8028ac <__RODATA_PM_OFFSET__+0x7fa8ac>
  803802:	59 55       	subi	r21, 0x59	; 89
  803804:	c3 08       	sbc	r12, r3

00803806 <UPDI::Target_Reset(bool)::set_ptr_off>:
  803806:	55 c8 00 55 c3 04                                   U..U..

0080380c <UPDI::st8(unsigned long, unsigned char)::set_ptr>:
  80380c:	55 48 00 00 00 00                                   UH....

00803812 <UPDI::ld8(unsigned long)::set_ptr>:
  803812:	55 08 00 00 00 00                                   U.....

00803818 <UPDI::get_cs_stat(unsigned char)::set_ptr>:
  803818:	55 00                                               U.

0080381a <UPDI::set_cs_stat(unsigned char, unsigned char)::set_ptr>:
  80381a:	55 00 00                                            U..

0080381d <UPDI::nvmprog_key>:
  80381d:	55 e0 20 67 6f 72 50 4d 56 4e                       U. gorPMVN

00803827 <UPDI::read_sib(unsigned char*)::set_ptr>:
  803827:	55 e6                                               U.

00803829 <UPDI::urowwrite_key>:
  803829:	55 e0 65 74 26 73 55 4d 56 4e                       U.et&sUMVN

00803833 <NVM::before_addr>:
  803833:	ff ff                                               ..

00803835 <UPDI::erase_key>:
  803835:	55 e0 65 73 61 72 45 4d 56 4e                       U.esarEMVN

0080383f <JTAG2::param_baud_rate_val>:
  80383f:	04 00                                               ..

00803841 <JTAG2::before_seqnum>:
  803841:	ff ff                                               ..

00803843 <UPDI::_set_repeat>:
  803843:	55 a0 00 55 04                                      U..U.

00803848 <UPDI::_set_ptr_l>:
  803848:	55 6a 00 00 00 00                                   Uj....

Disassembly of section .text:

00000000 <__vectors>:
__vectors():
../../../../crt1/gcrt1.S:61
       0:	67 c0       	rjmp	.+206    	; 0xd0 <__ctors_end>
       2:	00 00       	nop
../../../../crt1/gcrt1.S:67
       4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
       6:	00 00       	nop
../../../../crt1/gcrt1.S:68
       8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
       a:	00 00       	nop
../../../../crt1/gcrt1.S:69
       c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
       e:	00 00       	nop
../../../../crt1/gcrt1.S:70
      10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
      12:	00 00       	nop
../../../../crt1/gcrt1.S:71
      14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
      16:	00 00       	nop
../../../../crt1/gcrt1.S:72
      18:	24 c7       	rjmp	.+3656   	; 0xe62 <__vector_6>
      1a:	00 00       	nop
../../../../crt1/gcrt1.S:73
      1c:	55 c7       	rjmp	.+3754   	; 0xec8 <__vector_7>
      1e:	00 00       	nop
../../../../crt1/gcrt1.S:74
      20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
      22:	00 00       	nop
../../../../crt1/gcrt1.S:75
      24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
      26:	00 00       	nop
../../../../crt1/gcrt1.S:76
      28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
      2a:	00 00       	nop
../../../../crt1/gcrt1.S:77
      2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
      2e:	00 00       	nop
../../../../crt1/gcrt1.S:78
      30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
      32:	00 00       	nop
../../../../crt1/gcrt1.S:79
      34:	0b c7       	rjmp	.+3606   	; 0xe4c <__vector_13>
      36:	00 00       	nop
../../../../crt1/gcrt1.S:80
      38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
      3a:	00 00       	nop
../../../../crt1/gcrt1.S:81
      3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
      3e:	00 00       	nop
../../../../crt1/gcrt1.S:82
      40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
      42:	00 00       	nop
../../../../crt1/gcrt1.S:83
      44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
      46:	00 00       	nop
../../../../crt1/gcrt1.S:84
      48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
      4a:	00 00       	nop
../../../../crt1/gcrt1.S:85
      4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
      4e:	00 00       	nop
../../../../crt1/gcrt1.S:86
      50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
      52:	00 00       	nop
../../../../crt1/gcrt1.S:87
      54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
      56:	00 00       	nop
../../../../crt1/gcrt1.S:88
      58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
      5a:	00 00       	nop
../../../../crt1/gcrt1.S:89
      5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
      5e:	00 00       	nop
../../../../crt1/gcrt1.S:90
      60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
      62:	00 00       	nop
../../../../crt1/gcrt1.S:91
      64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
      66:	00 00       	nop
../../../../crt1/gcrt1.S:92
      68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
      6a:	00 00       	nop
../../../../crt1/gcrt1.S:93
      6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
      6e:	00 00       	nop
../../../../crt1/gcrt1.S:94
      70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
      72:	00 00       	nop
../../../../crt1/gcrt1.S:95
      74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
	...

00000078 <__trampolines_end>:
__trampolines_start():
      78:	86 01       	movw	r16, r12
      7a:	02 35       	cpi	r16, 0x52	; 82
      7c:	07 02       	muls	r16, r23
      7e:	02 22       	and	r0, r18
      80:	06 02       	muls	r16, r22
      82:	00 00       	nop
      84:	00 00       	nop
      86:	00 00       	nop
      88:	55 50       	subi	r21, 0x05	; 5
      8a:	44 49       	sbci	r20, 0x94	; 148
      8c:	34 41       	sbci	r19, 0x14	; 20
      8e:	56 52       	subi	r21, 0x26	; 38
      90:	00 00       	nop
      92:	00 00       	nop
	...

00000095 <JTAG2::BAUD_TABLE>:
      95:	00 00 1b 41 8d 20 47 10 23 08 12 04 b6 02 5b 01     ...A. G.#.....[.
      a5:	da 0a 04 01 ae 00 57 00 2b 00 39 01 9c 00 00 00     ......W.+.9.....
      b5:	00 00 0b 01 c8 00 a0 00 85 00 64 00 50 00 43 00     ..........d.P.C.
      c5:	3c 00 28 00 1b 00 14 00 0d 00 00                    <.(........

000000d0 <__ctors_end>:
__dtors_end():
../../../../crt1/gcrt1.S:230
      d0:	11 24       	eor	r1, r1
../../../../crt1/gcrt1.S:231
      d2:	1f be       	out	0x3f, r1	; 63
../../../../crt1/gcrt1.S:232
      d4:	cf ef       	ldi	r28, 0xFF	; 255
../../../../crt1/gcrt1.S:234
      d6:	cd bf       	out	0x3d, r28	; 61
../../../../crt1/gcrt1.S:236
      d8:	df e3       	ldi	r29, 0x3F	; 63
../../../../crt1/gcrt1.S:237
      da:	de bf       	out	0x3e, r29	; 62

000000dc <__do_copy_data>:
__do_copy_data():
      dc:	18 e3       	ldi	r17, 0x38	; 56
      de:	a0 e0       	ldi	r26, 0x00	; 0
      e0:	b8 e3       	ldi	r27, 0x38	; 56
      e2:	e4 ee       	ldi	r30, 0xE4	; 228
      e4:	f5 e1       	ldi	r31, 0x15	; 21
      e6:	02 c0       	rjmp	.+4      	; 0xec <__do_copy_data+0x10>
      e8:	05 90       	lpm	r0, Z+
      ea:	0d 92       	st	X+, r0
      ec:	ae 34       	cpi	r26, 0x4E	; 78
      ee:	b1 07       	cpc	r27, r17
      f0:	d9 f7       	brne	.-10     	; 0xe8 <__do_copy_data+0xc>

000000f2 <__do_clear_bss>:
__do_clear_bss():
      f2:	2a e3       	ldi	r18, 0x3A	; 58
      f4:	ae e4       	ldi	r26, 0x4E	; 78
      f6:	b8 e3       	ldi	r27, 0x38	; 56
      f8:	01 c0       	rjmp	.+2      	; 0xfc <.do_clear_bss_start>

000000fa <.do_clear_bss_loop>:
      fa:	1d 92       	st	X+, r1

000000fc <.do_clear_bss_start>:
      fc:	ae 3a       	cpi	r26, 0xAE	; 174
      fe:	b2 07       	cpc	r27, r18
     100:	e1 f7       	brne	.-8      	; 0xfa <.do_clear_bss_loop>
.do_clear_bss_start():
../../../../crt1/gcrt1.S:314
     102:	07 d7       	rcall	.+3598   	; 0xf12 <main>
../../../../crt1/gcrt1.S:315
     104:	0c 94 f0 0a 	jmp	0x15e0	; 0x15e0 <_exit>

00000108 <__bad_interrupt>:
__vector_22():
../../../../crt1/gcrt1.S:209
     108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <UPDI::RECV()>:
_ZN4UPDI4RECVEv():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:115
/*
 * UPDI reception
 */

uint8_t UPDI::RECV (void) {
  loop_until_bit_is_set(UPDI_USART.STATUS, USART_RXCIF_bp);
     10a:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
     10e:	87 ff       	sbrs	r24, 7
     110:	fc cf       	rjmp	.-8      	; 0x10a <UPDI::RECV()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:116
  UPDI_LASTH = UPDI_USART.RXDATAH ^ 0x80;
     112:	80 91 01 08 	lds	r24, 0x0801	; 0x800801 <__RODATA_PM_OFFSET__+0x7f8801>
     116:	80 58       	subi	r24, 0x80	; 128
     118:	8f bb       	out	0x1f, r24	; 31
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:122
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  UPDI_LASTL = UPDI_USART.RXDATAL;
  _send_buf_push(UPDI_LASTL);
  return UPDI_LASTL;
  #else
  return UPDI_LASTL = UPDI_USART.RXDATAL;
     11a:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__RODATA_PM_OFFSET__+0x7f8800>
     11e:	8e bb       	out	0x1e, r24	; 30
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:124
  #endif
}
     120:	08 95       	ret

00000122 <UPDI::SEND(unsigned char)>:
_ZN4UPDI4SENDEh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:130

/*
 * UPDI transmission : Verify transmitted value with loopback reception
 */

bool UPDI::SEND (uint8_t _data) {
     122:	cf 93       	push	r28
     124:	c8 2f       	mov	r28, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:135
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  _send_buf_push(_data);
  #endif
  bool _r;
  loop_until_bit_is_set(UPDI_USART.STATUS, USART_DREIF_bp);
     126:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
     12a:	85 ff       	sbrs	r24, 5
     12c:	fc cf       	rjmp	.-8      	; 0x126 <UPDI::SEND(unsigned char)+0x4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:136
  UPDI_USART.STATUS = USART_TXCIF_bm;
     12e:	80 e4       	ldi	r24, 0x40	; 64
     130:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:137
  UPDI_USART.TXDATAL = _data;
     134:	c0 93 02 08 	sts	0x0802, r28	; 0x800802 <__RODATA_PM_OFFSET__+0x7f8802>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:138
  loop_until_bit_is_set(UPDI_USART.STATUS, USART_TXCIF_bp);
     138:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
     13c:	86 ff       	sbrs	r24, 6
     13e:	fc cf       	rjmp	.-8      	; 0x138 <UPDI::SEND(unsigned char)+0x16>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:139
  _r = _data == RECV();
     140:	e4 df       	rcall	.-56     	; 0x10a <UPDI::RECV()>
     142:	98 2f       	mov	r25, r24
     144:	81 e0       	ldi	r24, 0x01	; 1
     146:	9c 13       	cpse	r25, r28
     148:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:140
  if (!_r) bit_set(UPDI_LASTH, 0x20);
     14a:	9c 17       	cp	r25, r28
     14c:	11 f0       	breq	.+4      	; 0x152 <UPDI::SEND(unsigned char)+0x30>
     14e:	9f b3       	in	r25, 0x1f	; 31
     150:	9f bb       	out	0x1f, r25	; 31
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:142
  return _r;
}
     152:	cf 91       	pop	r28
     154:	08 95       	ret

00000156 <UPDI::send_bytes(unsigned char*, unsigned char)>:
_ZN4UPDI10send_bytesEPhh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:168
/*
 * Send byte chunks
 */

/* __attribute__((optimize("O0"))) */
bool UPDI::send_bytes (uint8_t *data, uint8_t len) {
     156:	0f 93       	push	r16
     158:	1f 93       	push	r17
     15a:	cf 93       	push	r28
     15c:	c6 2f       	mov	r28, r22
     15e:	8c 01       	movw	r16, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:170
  do {
    if (!SEND(*data++)) return false;
     160:	f8 01       	movw	r30, r16
     162:	81 91       	ld	r24, Z+
     164:	8f 01       	movw	r16, r30
     166:	dd df       	rcall	.-70     	; 0x122 <UPDI::SEND(unsigned char)>
     168:	88 23       	and	r24, r24
     16a:	11 f0       	breq	.+4      	; 0x170 <UPDI::send_bytes(unsigned char*, unsigned char)+0x1a>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:171
  } while (--len);
     16c:	c1 50       	subi	r28, 0x01	; 1
     16e:	c1 f7       	brne	.-16     	; 0x160 <UPDI::send_bytes(unsigned char*, unsigned char)+0xa>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:173
  return true;
}
     170:	cf 91       	pop	r28
     172:	1f 91       	pop	r17
     174:	0f 91       	pop	r16
     176:	08 95       	ret

00000178 <UPDI::set_cs_stat(unsigned char, unsigned char)>:
_ZN4UPDI11set_cs_statEhh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:325
 * Control status transmission
 */

bool UPDI::set_cs_stat (uint8_t code, uint8_t data) {
  static uint8_t set_ptr[] = { UPDI_SYNCH, 0, 0 };
  set_ptr[1] = UPDI_STCS | code;
     178:	ea e1       	ldi	r30, 0x1A	; 26
     17a:	f8 e3       	ldi	r31, 0x38	; 56
     17c:	80 6c       	ori	r24, 0xC0	; 192
     17e:	81 83       	std	Z+1, r24	; 0x01
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:326
  set_ptr[2] = data;
     180:	62 83       	std	Z+2, r22	; 0x02
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:327
  return send_bytes(set_ptr, sizeof(set_ptr));
     182:	63 e0       	ldi	r22, 0x03	; 3
     184:	cf 01       	movw	r24, r30
     186:	e7 cf       	rjmp	.-50     	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>

00000188 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.21]>:
_ZN4UPDI7sts8rsdEmPhh.constprop.21():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:233
    } while (--repeat);
  }
  return len == 0;
}

bool UPDI::sts8rsd (uint32_t addr, uint8_t *data, uint8_t len) {
     188:	0f 93       	push	r16
     18a:	1f 93       	push	r17
     18c:	cf 93       	push	r28
     18e:	c4 2f       	mov	r28, r20
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:234
  _CAPS32(_set_ptr_l[2])->dword = addr;
     190:	60 93 4a 38 	sts	0x384A, r22	; 0x80384a <UPDI::_set_ptr_l+0x2>
     194:	70 93 4b 38 	sts	0x384B, r23	; 0x80384b <UPDI::_set_ptr_l+0x3>
     198:	80 93 4c 38 	sts	0x384C, r24	; 0x80384c <UPDI::_set_ptr_l+0x4>
     19c:	90 93 4d 38 	sts	0x384D, r25	; 0x80384d <UPDI::_set_ptr_l+0x5>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:235
  _set_repeat[2] = len - 1;
     1a0:	8f ef       	ldi	r24, 0xFF	; 255
     1a2:	84 0f       	add	r24, r20
     1a4:	80 93 45 38 	sts	0x3845, r24	; 0x803845 <UPDI::_set_repeat+0x2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:236
  _set_repeat[4] = UPDI_PTR_INC|UPDI_ST|UPDI_DATA1;
     1a8:	84 e6       	ldi	r24, 0x64	; 100
     1aa:	80 93 47 38 	sts	0x3847, r24	; 0x803847 <UPDI::_set_repeat+0x4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:237
  if (!send_bytes(_set_ptr_l, sizeof(_set_ptr_l) - 1)) return false;
     1ae:	65 e0       	ldi	r22, 0x05	; 5
     1b0:	88 e4       	ldi	r24, 0x48	; 72
     1b2:	98 e3       	ldi	r25, 0x38	; 56
     1b4:	d0 df       	rcall	.-96     	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     1b6:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:238
  if (UPDI_ACK != RECV()) return false;
     1b8:	e1 f0       	breq	.+56     	; 0x1f2 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.21]+0x6a>
     1ba:	a7 df       	rcall	.-178    	; 0x10a <UPDI::RECV()>
     1bc:	80 34       	cpi	r24, 0x40	; 64
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:331
  set_ptr[2] = data;
  return send_bytes(set_ptr, sizeof(set_ptr));
}

bool UPDI::set_cs_ctra (uint8_t data) {
  return set_cs_stat(UPDI_CS_CTRLA, data);
     1be:	c9 f4       	brne	.+50     	; 0x1f2 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.21]+0x6a>
set_cs_ctra():
     1c0:	6b e0       	ldi	r22, 0x0B	; 11
     1c2:	82 e0       	ldi	r24, 0x02	; 2
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:239
  _CAPS32(_set_ptr_l[2])->dword = addr;
  _set_repeat[2] = len - 1;
  _set_repeat[4] = UPDI_PTR_INC|UPDI_ST|UPDI_DATA1;
  if (!send_bytes(_set_ptr_l, sizeof(_set_ptr_l) - 1)) return false;
  if (UPDI_ACK != RECV()) return false;
  if (!set_cs_ctra(UPDI_GTVAL_RSD)) return false;
     1c4:	d9 df       	rcall	.-78     	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>
_ZN4UPDI7sts8rsdEmPhh.constprop.21():
     1c6:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:240
  if (!send_bytes(_set_repeat, sizeof(_set_repeat))) return false;
     1c8:	a1 f0       	breq	.+40     	; 0x1f2 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.21]+0x6a>
     1ca:	65 e0       	ldi	r22, 0x05	; 5
     1cc:	83 e4       	ldi	r24, 0x43	; 67
     1ce:	98 e3       	ldi	r25, 0x38	; 56
     1d0:	c2 df       	rcall	.-124    	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     1d2:	88 23       	and	r24, r24
     1d4:	71 f0       	breq	.+28     	; 0x1f2 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.21]+0x6a>
     1d6:	02 ea       	ldi	r16, 0xA2	; 162
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:242
  do {              /* Repeat byte send */
    SEND(*data++);  /* Submission errors must be ignored */
     1d8:	18 e3       	ldi	r17, 0x38	; 56
     1da:	f8 01       	movw	r30, r16
     1dc:	81 91       	ld	r24, Z+
     1de:	8f 01       	movw	r16, r30
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:243
  } while (--len);
     1e0:	a0 df       	rcall	.-192    	; 0x122 <UPDI::SEND(unsigned char)>
     1e2:	c1 50       	subi	r28, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:331
  set_ptr[2] = data;
  return send_bytes(set_ptr, sizeof(set_ptr));
}

bool UPDI::set_cs_ctra (uint8_t data) {
  return set_cs_stat(UPDI_CS_CTRLA, data);
     1e4:	d1 f7       	brne	.-12     	; 0x1da <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.21]+0x52>
set_cs_ctra():
     1e6:	63 e0       	ldi	r22, 0x03	; 3
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:246
  do {              /* Repeat byte send */
    SEND(*data++);  /* Submission errors must be ignored */
  } while (--len);
  if (!set_cs_ctra(UPDI_GTVAL)) return false;
  return true;
}
     1e8:	82 e0       	ldi	r24, 0x02	; 2
_ZN4UPDI7sts8rsdEmPhh.constprop.21():
     1ea:	cf 91       	pop	r28
     1ec:	1f 91       	pop	r17
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:331
  set_ptr[2] = data;
  return send_bytes(set_ptr, sizeof(set_ptr));
}

bool UPDI::set_cs_ctra (uint8_t data) {
  return set_cs_stat(UPDI_CS_CTRLA, data);
     1ee:	0f 91       	pop	r16
set_cs_ctra():
     1f0:	c3 cf       	rjmp	.-122    	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>
_ZN4UPDI7sts8rsdEmPhh.constprop.21():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:246
  do {              /* Repeat byte send */
    SEND(*data++);  /* Submission errors must be ignored */
  } while (--len);
  if (!set_cs_ctra(UPDI_GTVAL)) return false;
  return true;
}
     1f2:	80 e0       	ldi	r24, 0x00	; 0
     1f4:	cf 91       	pop	r28
     1f6:	1f 91       	pop	r17
     1f8:	0f 91       	pop	r16
     1fa:	08 95       	ret

000001fc <UPDI::sts16rsd(unsigned long, unsigned char*, unsigned int) [clone .constprop.11]>:
_ZN4UPDI8sts16rsdEmPhj.constprop.11():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:248

bool UPDI::sts16rsd (uint32_t addr, uint8_t *data, size_t len) {
     1fc:	1f 93       	push	r17
     1fe:	cf 93       	push	r28
     200:	df 93       	push	r29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:249
  _CAPS32(_set_ptr_l[2])->dword = addr;
     202:	60 93 4a 38 	sts	0x384A, r22	; 0x80384a <UPDI::_set_ptr_l+0x2>
     206:	70 93 4b 38 	sts	0x384B, r23	; 0x80384b <UPDI::_set_ptr_l+0x3>
     20a:	80 93 4c 38 	sts	0x384C, r24	; 0x80384c <UPDI::_set_ptr_l+0x4>
     20e:	90 93 4d 38 	sts	0x384D, r25	; 0x80384d <UPDI::_set_ptr_l+0x5>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:250
  uint8_t repeat = len >> 1;
     212:	56 95       	lsr	r21
     214:	47 95       	ror	r20
     216:	14 2f       	mov	r17, r20
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:251
  _set_repeat[2] = repeat - 1;
     218:	41 50       	subi	r20, 0x01	; 1
     21a:	40 93 45 38 	sts	0x3845, r20	; 0x803845 <UPDI::_set_repeat+0x2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:252
  _set_repeat[4] = UPDI_PTR_INC|UPDI_ST|UPDI_DATA2;
     21e:	85 e6       	ldi	r24, 0x65	; 101
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:253
  if (!send_bytes(_set_ptr_l, sizeof(_set_ptr_l) - 1)) return false;
     220:	80 93 47 38 	sts	0x3847, r24	; 0x803847 <UPDI::_set_repeat+0x4>
     224:	65 e0       	ldi	r22, 0x05	; 5
     226:	88 e4       	ldi	r24, 0x48	; 72
     228:	98 e3       	ldi	r25, 0x38	; 56
     22a:	95 df       	rcall	.-214    	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:254
  if (UPDI_ACK != RECV()) return false;
     22c:	88 23       	and	r24, r24
     22e:	f1 f0       	breq	.+60     	; 0x26c <UPDI::sts16rsd(unsigned long, unsigned char*, unsigned int) [clone .constprop.11]+0x70>
     230:	6c df       	rcall	.-296    	; 0x10a <UPDI::RECV()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:331
  set_ptr[2] = data;
  return send_bytes(set_ptr, sizeof(set_ptr));
}

bool UPDI::set_cs_ctra (uint8_t data) {
  return set_cs_stat(UPDI_CS_CTRLA, data);
     232:	80 34       	cpi	r24, 0x40	; 64
     234:	d9 f4       	brne	.+54     	; 0x26c <UPDI::sts16rsd(unsigned long, unsigned char*, unsigned int) [clone .constprop.11]+0x70>
set_cs_ctra():
     236:	6b e0       	ldi	r22, 0x0B	; 11
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:255
  uint8_t repeat = len >> 1;
  _set_repeat[2] = repeat - 1;
  _set_repeat[4] = UPDI_PTR_INC|UPDI_ST|UPDI_DATA2;
  if (!send_bytes(_set_ptr_l, sizeof(_set_ptr_l) - 1)) return false;
  if (UPDI_ACK != RECV()) return false;
  if (!set_cs_ctra(UPDI_GTVAL_RSD)) return false;
     238:	82 e0       	ldi	r24, 0x02	; 2
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:256
  if (!send_bytes(_set_repeat, sizeof(_set_repeat))) return false;
     23a:	9e df       	rcall	.-196    	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>
_ZN4UPDI8sts16rsdEmPhj.constprop.11():
     23c:	88 23       	and	r24, r24
     23e:	b1 f0       	breq	.+44     	; 0x26c <UPDI::sts16rsd(unsigned long, unsigned char*, unsigned int) [clone .constprop.11]+0x70>
     240:	65 e0       	ldi	r22, 0x05	; 5
     242:	83 e4       	ldi	r24, 0x43	; 67
     244:	98 e3       	ldi	r25, 0x38	; 56
     246:	87 df       	rcall	.-242    	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     248:	88 23       	and	r24, r24
     24a:	81 f0       	breq	.+32     	; 0x26c <UPDI::sts16rsd(unsigned long, unsigned char*, unsigned int) [clone .constprop.11]+0x70>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:258
  do {              /* Repeat word send */
    SEND(*data++);  /* Submission errors must be ignored */
     24c:	c0 e9       	ldi	r28, 0x90	; 144
     24e:	d8 e3       	ldi	r29, 0x38	; 56
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:259
    SEND(*data++);  /* Submission errors must be ignored */
     250:	8a 89       	ldd	r24, Y+18	; 0x12
     252:	67 df       	rcall	.-306    	; 0x122 <UPDI::SEND(unsigned char)>
     254:	8b 89       	ldd	r24, Y+19	; 0x13
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:260
  } while (--repeat);
     256:	65 df       	rcall	.-310    	; 0x122 <UPDI::SEND(unsigned char)>
     258:	11 50       	subi	r17, 0x01	; 1
     25a:	22 96       	adiw	r28, 0x02	; 2
     25c:	11 11       	cpse	r17, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:331
  set_ptr[2] = data;
  return send_bytes(set_ptr, sizeof(set_ptr));
}

bool UPDI::set_cs_ctra (uint8_t data) {
  return set_cs_stat(UPDI_CS_CTRLA, data);
     25e:	f8 cf       	rjmp	.-16     	; 0x250 <UPDI::sts16rsd(unsigned long, unsigned char*, unsigned int) [clone .constprop.11]+0x54>
set_cs_ctra():
     260:	63 e0       	ldi	r22, 0x03	; 3
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:263
    SEND(*data++);  /* Submission errors must be ignored */
    SEND(*data++);  /* Submission errors must be ignored */
  } while (--repeat);
  if (!set_cs_ctra(UPDI_GTVAL)) return false;
  return true;
}
     262:	82 e0       	ldi	r24, 0x02	; 2
_ZN4UPDI8sts16rsdEmPhj.constprop.11():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:331
  set_ptr[2] = data;
  return send_bytes(set_ptr, sizeof(set_ptr));
}

bool UPDI::set_cs_ctra (uint8_t data) {
  return set_cs_stat(UPDI_CS_CTRLA, data);
     264:	df 91       	pop	r29
     266:	cf 91       	pop	r28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:263
    SEND(*data++);  /* Submission errors must be ignored */
    SEND(*data++);  /* Submission errors must be ignored */
  } while (--repeat);
  if (!set_cs_ctra(UPDI_GTVAL)) return false;
  return true;
}
     268:	1f 91       	pop	r17
set_cs_ctra():
     26a:	86 cf       	rjmp	.-244    	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>
_ZN4UPDI8sts16rsdEmPhj.constprop.11():
     26c:	80 e0       	ldi	r24, 0x00	; 0
     26e:	df 91       	pop	r29
     270:	cf 91       	pop	r28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:302
 * Control status reception
 */

uint8_t UPDI::get_cs_stat (uint8_t code) {
  static uint8_t set_ptr[] = { UPDI_SYNCH, 0 };
  set_ptr[1] = UPDI_LDCS | code;
     272:	1f 91       	pop	r17
     274:	08 95       	ret

00000276 <UPDI::get_cs_stat(unsigned char)>:
_ZN4UPDI11get_cs_statEh():
     276:	80 68       	ori	r24, 0x80	; 128
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:303
  send_bytes(set_ptr, sizeof(set_ptr));
     278:	80 93 19 38 	sts	0x3819, r24	; 0x803819 <UPDI::get_cs_stat(unsigned char)::set_ptr+0x1>
     27c:	62 e0       	ldi	r22, 0x02	; 2
     27e:	88 e1       	ldi	r24, 0x18	; 24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:304
  return RECV();
     280:	98 e3       	ldi	r25, 0x38	; 56
     282:	69 df       	rcall	.-302    	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:193

/*
 * Single byte transmission
 */

bool UPDI::st8 (uint32_t addr, uint8_t data) {
     284:	42 cf       	rjmp	.-380    	; 0x10a <UPDI::RECV()>

00000286 <UPDI::st8(unsigned long, unsigned char)>:
_ZN4UPDI3st8Emh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:199
  static uint8_t set_ptr[] = {
      UPDI_SYNCH
    , UPDI_STS | UPDI_ADDR3 | UPDI_DATA1
    , 0, 0, 0, 0    // 24bit address
  };
  _CAPS32(set_ptr[2])->dword = addr;
     286:	cf 93       	push	r28
     288:	c4 2f       	mov	r28, r20
     28a:	60 93 0e 38 	sts	0x380E, r22	; 0x80380e <UPDI::st8(unsigned long, unsigned char)::set_ptr+0x2>
     28e:	70 93 0f 38 	sts	0x380F, r23	; 0x80380f <UPDI::st8(unsigned long, unsigned char)::set_ptr+0x3>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:200
  if (!send_bytes(set_ptr, sizeof(set_ptr) - 1)) return false;
     292:	80 93 10 38 	sts	0x3810, r24	; 0x803810 <UPDI::st8(unsigned long, unsigned char)::set_ptr+0x4>
     296:	90 93 11 38 	sts	0x3811, r25	; 0x803811 <UPDI::st8(unsigned long, unsigned char)::set_ptr+0x5>
     29a:	65 e0       	ldi	r22, 0x05	; 5
     29c:	8c e0       	ldi	r24, 0x0C	; 12
     29e:	98 e3       	ldi	r25, 0x38	; 56
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:203
  if (UPDI_ACK != RECV()) return false;
  if (!SEND(data)) return false;
  return UPDI_ACK == RECV();
     2a0:	5a df       	rcall	.-332    	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     2a2:	81 11       	cpse	r24, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:201
    , UPDI_STS | UPDI_ADDR3 | UPDI_DATA1
    , 0, 0, 0, 0    // 24bit address
  };
  _CAPS32(set_ptr[2])->dword = addr;
  if (!send_bytes(set_ptr, sizeof(set_ptr) - 1)) return false;
  if (UPDI_ACK != RECV()) return false;
     2a4:	02 c0       	rjmp	.+4      	; 0x2aa <UPDI::st8(unsigned long, unsigned char)+0x24>
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	0b c0       	rjmp	.+22     	; 0x2c0 <UPDI::st8(unsigned long, unsigned char)+0x3a>
     2aa:	2f df       	rcall	.-418    	; 0x10a <UPDI::RECV()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:202
  if (!SEND(data)) return false;
     2ac:	80 34       	cpi	r24, 0x40	; 64
     2ae:	d9 f7       	brne	.-10     	; 0x2a6 <UPDI::st8(unsigned long, unsigned char)+0x20>
     2b0:	8c 2f       	mov	r24, r28
     2b2:	37 df       	rcall	.-402    	; 0x122 <UPDI::SEND(unsigned char)>
     2b4:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:203
  return UPDI_ACK == RECV();
     2b6:	b9 f3       	breq	.-18     	; 0x2a6 <UPDI::st8(unsigned long, unsigned char)+0x20>
     2b8:	28 df       	rcall	.-432    	; 0x10a <UPDI::RECV()>
     2ba:	91 e0       	ldi	r25, 0x01	; 1
     2bc:	80 34       	cpi	r24, 0x40	; 64
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:204
}
     2be:	99 f7       	brne	.-26     	; 0x2a6 <UPDI::st8(unsigned long, unsigned char)+0x20>
     2c0:	89 2f       	mov	r24, r25
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:181
 * Repeat header transmission
 */

/* __attribute__((optimize("O0"))) */
bool UPDI::send_repeat_header (uint32_t addr, uint8_t cmd, uint8_t len) {
  _CAPS32(_set_ptr_l[2])->dword = addr;
     2c2:	cf 91       	pop	r28
     2c4:	08 95       	ret

000002c6 <UPDI::send_repeat_header(unsigned long, unsigned char, unsigned char)>:
_ZN4UPDI18send_repeat_headerEmhh():
     2c6:	60 93 4a 38 	sts	0x384A, r22	; 0x80384a <UPDI::_set_ptr_l+0x2>
     2ca:	70 93 4b 38 	sts	0x384B, r23	; 0x80384b <UPDI::_set_ptr_l+0x3>
     2ce:	80 93 4c 38 	sts	0x384C, r24	; 0x80384c <UPDI::_set_ptr_l+0x4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:182
  _set_repeat[2] = len - 1;
     2d2:	90 93 4d 38 	sts	0x384D, r25	; 0x80384d <UPDI::_set_ptr_l+0x5>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:183
  _set_repeat[4] = UPDI_PTR_INC | cmd;  // ST,LD + DATA1,DATA2
     2d6:	21 50       	subi	r18, 0x01	; 1
     2d8:	20 93 45 38 	sts	0x3845, r18	; 0x803845 <UPDI::_set_repeat+0x2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:184
  if (!send_bytes(_set_ptr_l, sizeof(_set_ptr_l) - 1)) return false;
     2dc:	44 60       	ori	r20, 0x04	; 4
     2de:	40 93 47 38 	sts	0x3847, r20	; 0x803847 <UPDI::_set_repeat+0x4>
     2e2:	65 e0       	ldi	r22, 0x05	; 5
     2e4:	88 e4       	ldi	r24, 0x48	; 72
     2e6:	98 e3       	ldi	r25, 0x38	; 56
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:185
  if (UPDI_ACK != RECV()) return false;
     2e8:	36 df       	rcall	.-404    	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     2ea:	88 23       	and	r24, r24
     2ec:	39 f0       	breq	.+14     	; 0x2fc <UPDI::send_repeat_header(unsigned long, unsigned char, unsigned char)+0x36>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:186
  return send_bytes(_set_repeat, sizeof(_set_repeat));
     2ee:	0d df       	rcall	.-486    	; 0x10a <UPDI::RECV()>
     2f0:	80 34       	cpi	r24, 0x40	; 64
     2f2:	21 f4       	brne	.+8      	; 0x2fc <UPDI::send_repeat_header(unsigned long, unsigned char, unsigned char)+0x36>
     2f4:	65 e0       	ldi	r22, 0x05	; 5
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:187
}
     2f6:	83 e4       	ldi	r24, 0x43	; 67
     2f8:	98 e3       	ldi	r25, 0x38	; 56
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:210

/*
 * Transmission
 */

bool UPDI::sts8 (uint32_t addr, uint8_t *data, uint8_t len) {
     2fa:	2d cf       	rjmp	.-422    	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	08 95       	ret

00000300 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)>:
_ZN4UPDI4sts8EmPhh():
     300:	ff 92       	push	r15
     302:	0f 93       	push	r16
     304:	1f 93       	push	r17
     306:	cf 93       	push	r28
     308:	df 93       	push	r29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:211
  if (send_repeat_header(addr, UPDI_ST|UPDI_DATA1, len)) {
     30a:	f4 2e       	mov	r15, r20
     30c:	d5 2f       	mov	r29, r21
     30e:	c2 2f       	mov	r28, r18
     310:	40 e6       	ldi	r20, 0x60	; 96
     312:	d9 df       	rcall	.-78     	; 0x2c6 <UPDI::send_repeat_header(unsigned long, unsigned char, unsigned char)>
     314:	88 23       	and	r24, r24
     316:	69 f0       	breq	.+26     	; 0x332 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)+0x32>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:213
    do {
      if (!SEND(*data++)) break;
     318:	0f 2d       	mov	r16, r15
     31a:	1d 2f       	mov	r17, r29
     31c:	f8 01       	movw	r30, r16
     31e:	81 91       	ld	r24, Z+
     320:	8f 01       	movw	r16, r30
     322:	ff de       	rcall	.-514    	; 0x122 <UPDI::SEND(unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:214
      if (UPDI_ACK != RECV()) break;
     324:	88 23       	and	r24, r24
     326:	29 f0       	breq	.+10     	; 0x332 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)+0x32>
     328:	f0 de       	rcall	.-544    	; 0x10a <UPDI::RECV()>
     32a:	80 34       	cpi	r24, 0x40	; 64
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:215
    } while (--len);
     32c:	11 f4       	brne	.+4      	; 0x332 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)+0x32>
     32e:	c1 50       	subi	r28, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:217
  }
  return len == 0;
     330:	a9 f7       	brne	.-22     	; 0x31c <UPDI::sts8(unsigned long, unsigned char*, unsigned char)+0x1c>
     332:	81 e0       	ldi	r24, 0x01	; 1
     334:	c1 11       	cpse	r28, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:218
}
     336:	80 e0       	ldi	r24, 0x00	; 0
     338:	df 91       	pop	r29
     33a:	cf 91       	pop	r28
     33c:	1f 91       	pop	r17
     33e:	0f 91       	pop	r16
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:146
  return _r;
}

/* BREAK character : Generated by slowing down the sending speed */
void UPDI::BREAK (void) {
  loop_until_bit_is_set(UPDI_USART.STATUS, USART_DREIF_bp);
     340:	ff 90       	pop	r15
     342:	08 95       	ret

00000344 <UPDI::BREAK()>:
_ZN4UPDI5BREAKEv():
     344:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:147
  UPDI_USART.BAUD = UPDI_BAUD_BREAK;
     348:	85 ff       	sbrs	r24, 5
     34a:	fc cf       	rjmp	.-8      	; 0x344 <UPDI::BREAK()>
     34c:	80 ec       	ldi	r24, 0xC0	; 192
     34e:	94 e4       	ldi	r25, 0x44	; 68
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:149
  /* Maintains low level signal at least 768bit long */
  SEND(UPDI_NOP);
     350:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__RODATA_PM_OFFSET__+0x7f8808>
     354:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__RODATA_PM_OFFSET__+0x7f8809>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:150
  UPDI_USART.BAUD = UPDI_BAUD_CALC;
     358:	80 e0       	ldi	r24, 0x00	; 0
     35a:	e3 de       	rcall	.-570    	; 0x122 <UPDI::SEND(unsigned char)>
     35c:	80 eb       	ldi	r24, 0xB0	; 176
     35e:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:151
  bit_clear(UPDI_CONTROL, UPDI_CLKU_bp);
     360:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__RODATA_PM_OFFSET__+0x7f8808>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:275
  static uint8_t set_ptr[] = {
      UPDI_SYNCH
    , UPDI_LDS|UPDI_ADDR3|UPDI_DATA1
    , 0, 0, 0, 0  // 24bit address
  };
  _CAPS16(set_ptr[2])->word = (uint16_t)addr;
     364:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__RODATA_PM_OFFSET__+0x7f8809>
     368:	e6 98       	cbi	0x1c, 6	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:276
  while (!send_bytes(set_ptr, sizeof(set_ptr) - 1)) BREAK();
     36a:	08 95       	ret

0000036c <UPDI::ld8(unsigned long)>:
_ZN4UPDI3ld8Em():
     36c:	60 93 14 38 	sts	0x3814, r22	; 0x803814 <UPDI::ld8(unsigned long)::set_ptr+0x2>
     370:	70 93 15 38 	sts	0x3815, r23	; 0x803815 <UPDI::ld8(unsigned long)::set_ptr+0x3>
     374:	65 e0       	ldi	r22, 0x05	; 5
     376:	82 e1       	ldi	r24, 0x12	; 18
     378:	98 e3       	ldi	r25, 0x38	; 56
     37a:	ed de       	rcall	.-550    	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     37c:	81 11       	cpse	r24, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:277
  return RECV();
     37e:	02 c0       	rjmp	.+4      	; 0x384 <UPDI::ld8(unsigned long)+0x18>
     380:	e1 df       	rcall	.-62     	; 0x344 <UPDI::BREAK()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:105
    return send_bytes(set_ptr_off, sizeof(set_ptr_off));
}

/* This only does a system reset */
bool UPDI::updi_reset (bool logic) {
  return set_cs_stat(
     382:	f8 cf       	rjmp	.-16     	; 0x374 <UPDI::ld8(unsigned long)+0x8>
     384:	c2 ce       	rjmp	.-636    	; 0x10a <UPDI::RECV()>

00000386 <UPDI::updi_reset(bool)>:
_ZN4UPDI10updi_resetEb():
     386:	60 e0       	ldi	r22, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:107
    UPDI_CS_ASI_RESET_REQ,
    (logic ? UPDI_RSTREQ : UPDI_NOP));
     388:	81 11       	cpse	r24, r1
     38a:	69 e5       	ldi	r22, 0x59	; 89
     38c:	88 e0       	ldi	r24, 0x08	; 8
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:78
  UPDI_USART.CTRLB = UPDI_USART_ON;
  bit_clear(UPDI_CONTROL, UPDI_CLKU_bp);
}

/* This special system reset will log you out of UPDI */
bool UPDI::Target_Reset (bool _enable) {
     38e:	f4 ce       	rjmp	.-536    	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>

00000390 <UPDI::Target_Reset(bool)>:
_ZN4UPDI12Target_ResetEb():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:95
    , UPDI_NOP
    , UPDI_SYNCH
    , UPDI_STCS | UPDI_CS_CTRLB
    , UPDI_SET_UPDIDIS
  };
  if (!digitalRead(UPDI_TDAT_PIN)) return false;
     390:	cf 93       	push	r28
     392:	11 9b       	sbis	0x02, 1	; 2
     394:	0b c0       	rjmp	.+22     	; 0x3ac <UPDI::Target_Reset(bool)+0x1c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:96
  BREAK();
     396:	c8 2f       	mov	r28, r24
     398:	d5 df       	rcall	.-86     	; 0x344 <UPDI::BREAK()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:98
  if (_enable) 
    return send_bytes(set_ptr_on, sizeof(set_ptr_on));
     39a:	66 e0       	ldi	r22, 0x06	; 6
     39c:	80 e0       	ldi	r24, 0x00	; 0
     39e:	98 e3       	ldi	r25, 0x38	; 56
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:97
    , UPDI_STCS | UPDI_CS_CTRLB
    , UPDI_SET_UPDIDIS
  };
  if (!digitalRead(UPDI_TDAT_PIN)) return false;
  BREAK();
  if (_enable) 
     3a0:	c1 11       	cpse	r28, r1
     3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <UPDI::Target_Reset(bool)+0x18>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:100
    return send_bytes(set_ptr_on, sizeof(set_ptr_on));
  else
    return send_bytes(set_ptr_off, sizeof(set_ptr_off));
     3a4:	86 e0       	ldi	r24, 0x06	; 6
     3a6:	98 e3       	ldi	r25, 0x38	; 56
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:101
}
     3a8:	cf 91       	pop	r28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:100
  if (!digitalRead(UPDI_TDAT_PIN)) return false;
  BREAK();
  if (_enable) 
    return send_bytes(set_ptr_on, sizeof(set_ptr_on));
  else
    return send_bytes(set_ptr_off, sizeof(set_ptr_off));
     3aa:	d5 ce       	rjmp	.-598    	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     3ac:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:101
}
     3ae:	cf 91       	pop	r28
     3b0:	08 95       	ret

000003b2 <LED_TCB1(unsigned char, unsigned int)>:
_Z8LED_TCB1hj():
     3b2:	90 91 65 38 	lds	r25, 0x3865	; 0x803865 <TIM::mode>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:139
    LEDG_EVOUT = EVSYS_USER_CHANNEL2_gc;
  }
}

void LED_TCB1 (uint8_t mode, uint16_t ccmp) {
  if (TIM::mode != mode) {
     3b6:	98 17       	cp	r25, r24
     3b8:	81 f0       	breq	.+32     	; 0x3da <LED_TCB1(unsigned char, unsigned int)+0x28>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:140
    TIM::mode = mode;
     3ba:	80 93 65 38 	sts	0x3865, r24	; 0x803865 <TIM::mode>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:141
    TCB1_CCMP = ccmp;
     3be:	60 93 9c 0a 	sts	0x0A9C, r22	; 0x800a9c <__RODATA_PM_OFFSET__+0x7f8a9c>
     3c2:	70 93 9d 0a 	sts	0x0A9D, r23	; 0x800a9d <__RODATA_PM_OFFSET__+0x7f8a9d>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:142
    TCB1_CNT = 0;
     3c6:	10 92 9a 0a 	sts	0x0A9A, r1	; 0x800a9a <__RODATA_PM_OFFSET__+0x7f8a9a>
     3ca:	10 92 9b 0a 	sts	0x0A9B, r1	; 0x800a9b <__RODATA_PM_OFFSET__+0x7f8a9b>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:143
    TCB1_CTRLA = TCB_RUNSTDBY_bm | TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
     3ce:	8f e4       	ldi	r24, 0x4F	; 79
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:144
    LEDG_EVOUT = EVSYS_USER_CHANNEL0_gc;
     3d0:	80 93 90 0a 	sts	0x0A90, r24	; 0x800a90 <__RODATA_PM_OFFSET__+0x7f8a90>
     3d4:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:146
  }
}
     3d6:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <__RODATA_PM_OFFSET__+0x7f81a9>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:117
  }
}

void TIM::Timeout_Stop (void) {
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    TCB0_CTRLA = 0;
     3da:	08 95       	ret

000003dc <TIM::Timeout_Stop()>:
_ZN3TIM12Timeout_StopEv():
     3dc:	8f b7       	in	r24, 0x3f	; 63
__iCliRetVal():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:118
    TCB0_INTFLAGS = TCB_CAPT_bm;
     3de:	f8 94       	cli
_ZN3TIM12Timeout_StopEv():
     3e0:	10 92 80 0a 	sts	0x0A80, r1	; 0x800a80 <__RODATA_PM_OFFSET__+0x7f8a80>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3e4:	91 e0       	ldi	r25, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:120
  }
  reti();
     3e6:	90 93 86 0a 	sts	0x0A86, r25	; 0x800a86 <__RODATA_PM_OFFSET__+0x7f8a86>
__iRestore():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:69
    return UPDI_LASTL;
  }

  /* NVMCTRL version 0,2,3,4,5 */
  bool nvm_ctrl (uint8_t nvmcmd) {
    return UPDI::st8(NVMCTRL_REG_CTRLA, nvmcmd);
     3ea:	8f bf       	out	0x3f, r24	; 63
_ZN3TIM12Timeout_StopEv():
     3ec:	18 95       	reti
     3ee:	08 95       	ret

000003f0 <NVM::nvm_ctrl(unsigned char)>:
_ZN3NVM8nvm_ctrlEh():
     3f0:	48 2f       	mov	r20, r24
     3f2:	60 e0       	ldi	r22, 0x00	; 0
     3f4:	70 e1       	ldi	r23, 0x10	; 16
     3f6:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:73
  }

  /* NVMCTRL version 2,3,4,5 */
  bool nvm_ctrl_change (uint8_t nvmcmd) {
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	45 cf       	rjmp	.-374    	; 0x286 <UPDI::st8(unsigned long, unsigned char)>

000003fc <NVM::nvm_ctrl_change(unsigned char)>:
_ZN3NVM15nvm_ctrl_changeEh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:74
    if (UPDI::ld8(NVMCTRL_REG_CTRLA) == nvmcmd) return true;
     3fc:	cf 93       	push	r28
     3fe:	c8 2f       	mov	r28, r24
     400:	60 e0       	ldi	r22, 0x00	; 0
     402:	70 e1       	ldi	r23, 0x10	; 16
     404:	80 e0       	ldi	r24, 0x00	; 0
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	b1 df       	rcall	.-158    	; 0x36c <UPDI::ld8(unsigned long)>
     40a:	8c 13       	cpse	r24, r28
     40c:	03 c0       	rjmp	.+6      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:78
    if (!nvm_ctrl(NVM_CMD_NOCMD)) return false;
    if (NVM_CMD_NOCMD != nvmcmd) return nvm_ctrl(nvmcmd);
    return true;
  }
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	cf 91       	pop	r28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:75
  }

  /* NVMCTRL version 2,3,4,5 */
  bool nvm_ctrl_change (uint8_t nvmcmd) {
    if (UPDI::ld8(NVMCTRL_REG_CTRLA) == nvmcmd) return true;
    if (!nvm_ctrl(NVM_CMD_NOCMD)) return false;
     412:	08 95       	ret
     414:	80 e0       	ldi	r24, 0x00	; 0
     416:	ec df       	rcall	.-40     	; 0x3f0 <NVM::nvm_ctrl(unsigned char)>
     418:	88 23       	and	r24, r24
     41a:	d1 f3       	breq	.-12     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:76
    if (NVM_CMD_NOCMD != nvmcmd) return nvm_ctrl(nvmcmd);
     41c:	cc 23       	and	r28, r28
     41e:	b9 f3       	breq	.-18     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     420:	8c 2f       	mov	r24, r28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:78
    return true;
  }
     422:	cf 91       	pop	r28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:76

  /* NVMCTRL version 2,3,4,5 */
  bool nvm_ctrl_change (uint8_t nvmcmd) {
    if (UPDI::ld8(NVMCTRL_REG_CTRLA) == nvmcmd) return true;
    if (!nvm_ctrl(NVM_CMD_NOCMD)) return false;
    if (NVM_CMD_NOCMD != nvmcmd) return nvm_ctrl(nvmcmd);
     424:	e5 cf       	rjmp	.-54     	; 0x3f0 <NVM::nvm_ctrl(unsigned char)>

00000426 <JTAG2::set_response(JTAG2::jtag_response_e)>:
_ZN5JTAG212set_responseENS_15jtag_response_eE():
     426:	e0 e9       	ldi	r30, 0x90	; 144
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:470
/*****************
 * JTAG Response *
 *****************/

void JTAG2::set_response (jtag_response_e response_code) {
  packet.size_word[0] = 4;
     428:	f8 e3       	ldi	r31, 0x38	; 56
     42a:	24 e0       	ldi	r18, 0x04	; 4
     42c:	30 e0       	ldi	r19, 0x00	; 0
     42e:	23 83       	std	Z+3, r18	; 0x03
     430:	34 83       	std	Z+4, r19	; 0x04
     432:	80 87       	std	Z+8, r24	; 0x08
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:472
  /* response number */
  packet.body[MESSAGE_ID] = response_code;
     434:	8c b3       	in	r24, 0x1c	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:474
  /* Internal status flag */
  packet.body[RSP_DATA    ] = UPDI_CONTROL;
     436:	81 87       	std	Z+9, r24	; 0x09
     438:	8d b3       	in	r24, 0x1d	; 29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:475
  packet.body[RSP_DATA + 1] = UPDI_NVMCTRL;
     43a:	82 87       	std	Z+10, r24	; 0x0a
     43c:	8e b3       	in	r24, 0x1e	; 30
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:476
  packet.body[RSP_DATA + 2] = UPDI_LASTL;
     43e:	83 87       	std	Z+11, r24	; 0x0b
     440:	08 95       	ret

00000442 <_crc_ccitt_update(unsigned int, unsigned char)>:
_ZL17_crc_ccitt_updatejh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:477
}
     442:	86 27       	eor	r24, r22
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/crc16.h:285
        "eor    %A0,__tmp_reg__"

        : "=d" (__ret)
        : "r" (__data), "0" (__crc)
        : "r0"
    );
     444:	08 2e       	mov	r0, r24
     446:	82 95       	swap	r24
     448:	80 7f       	andi	r24, 0xF0	; 240
     44a:	80 25       	eor	r24, r0
     44c:	09 2e       	mov	r0, r25
     44e:	98 2f       	mov	r25, r24
     450:	82 95       	swap	r24
     452:	8f 70       	andi	r24, 0x0F	; 15
     454:	08 26       	eor	r0, r24
     456:	86 95       	lsr	r24
     458:	98 27       	eor	r25, r24
     45a:	89 27       	eor	r24, r25
     45c:	88 0f       	add	r24, r24
     45e:	88 0f       	add	r24, r24
     460:	88 0f       	add	r24, r24
     462:	80 25       	eor	r24, r0
     464:	08 95       	ret

00000466 <JTAG2::answer_transfer()>:
_ZN5JTAG215answer_transferEv():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/crc16.h:287
    return __ret;
}
     466:	af 92       	push	r10
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:150

  /***************
   * JTAG Answer *
   ***************/

  void answer_transfer (void) {
     468:	bf 92       	push	r11
     46a:	cf 92       	push	r12
     46c:	df 92       	push	r13
     46e:	ef 92       	push	r14
     470:	ff 92       	push	r15
     472:	0f 93       	push	r16
     474:	1f 93       	push	r17
     476:	cf 93       	push	r28
     478:	df 93       	push	r29
     47a:	00 d0       	rcall	.+0      	; 0x47c <JTAG2::answer_transfer()+0x16>
     47c:	cd b7       	in	r28, 0x3d	; 61
     47e:	de b7       	in	r29, 0x3e	; 62
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:151
    uint16_t _crc = ~0;
     480:	8f ef       	ldi	r24, 0xFF	; 255
     482:	9f ef       	ldi	r25, 0xFF	; 255
     484:	89 83       	std	Y+1, r24	; 0x01
     486:	9a 83       	std	Y+2, r25	; 0x02
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:152
    int16_t _len = packet.size_word[0] + 8;
     488:	e0 90 93 38 	lds	r14, 0x3893	; 0x803893 <JTAG2::packet+0x3>
     48c:	f0 90 94 38 	lds	r15, 0x3894	; 0x803894 <JTAG2::packet+0x4>
     490:	87 01       	movw	r16, r14
     492:	08 5f       	subi	r16, 0xF8	; 248
     494:	1f 4f       	sbci	r17, 0xFF	; 255
     496:	80 e9       	ldi	r24, 0x90	; 144
     498:	c8 2e       	mov	r12, r24
     49a:	88 e3       	ldi	r24, 0x38	; 56
     49c:	d8 2e       	mov	r13, r24
     49e:	56 01       	movw	r10, r12
     4a0:	81 e0       	ldi	r24, 0x01	; 1
     4a2:	e8 1a       	sub	r14, r24
     4a4:	f1 08       	sbc	r15, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:155
    uint8_t *_p = (uint8_t*) &packet.soh;
    uint8_t *_q = (uint8_t*) &packet.soh;
    while (_len--) _crc = crc16_update(_crc, *_q++);
     4a6:	a7 ef       	ldi	r26, 0xF7	; 247
     4a8:	ea 16       	cp	r14, r26
     4aa:	af ef       	ldi	r26, 0xFF	; 255
     4ac:	fa 06       	cpc	r15, r26
     4ae:	49 f0       	breq	.+18     	; 0x4c2 <JTAG2::answer_transfer()+0x5c>
     4b0:	f5 01       	movw	r30, r10
     4b2:	61 91       	ld	r22, Z+
     4b4:	5f 01       	movw	r10, r30
crc16_update():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:101
  void flush (void) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_TXCIF_bp);
  }

  uint16_t crc16_update(uint16_t _crc, uint8_t _data) {
    return _crc_ccitt_update(_crc, _data);
     4b6:	89 81       	ldd	r24, Y+1	; 0x01
     4b8:	9a 81       	ldd	r25, Y+2	; 0x02
     4ba:	c3 df       	rcall	.-122    	; 0x442 <_crc_ccitt_update(unsigned int, unsigned char)>
_ZN5JTAG215answer_transferEv():
     4bc:	89 83       	std	Y+1, r24	; 0x01
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:155
  void answer_transfer (void) {
    uint16_t _crc = ~0;
    int16_t _len = packet.size_word[0] + 8;
    uint8_t *_p = (uint8_t*) &packet.soh;
    uint8_t *_q = (uint8_t*) &packet.soh;
    while (_len--) _crc = crc16_update(_crc, *_q++);
     4be:	9a 83       	std	Y+2, r25	; 0x02
     4c0:	ef cf       	rjmp	.-34     	; 0x4a0 <JTAG2::answer_transfer()+0x3a>
     4c2:	f8 01       	movw	r30, r16
     4c4:	e0 57       	subi	r30, 0x70	; 112
     4c6:	f7 4c       	sbci	r31, 0xC7	; 199
     4c8:	89 81       	ldd	r24, Y+1	; 0x01
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:156
    (*_q++) = _CAPS16(_crc)->bytes[0];
     4ca:	80 83       	st	Z, r24
     4cc:	8a 81       	ldd	r24, Y+2	; 0x02
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:157
    (*_q++) = _CAPS16(_crc)->bytes[1];
     4ce:	81 83       	std	Z+1, r24	; 0x01
     4d0:	2f b7       	in	r18, 0x3f	; 63
__iCliRetVal():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     4d2:	f8 94       	cli
_ZN5JTAG215answer_transferEv():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:157
     4d4:	32 96       	adiw	r30, 0x02	; 2
put():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:92
    return JTAG_USART.RXDATAL;
  }

  uint8_t put (uint8_t _data) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_DREIF_bp);
    JTAG_USART.STATUS = USART_TXCIF_bm;
     4d6:	90 e4       	ldi	r25, 0x40	; 64
_ZN5JTAG215answer_transferEv():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:159
    uint8_t *_q = (uint8_t*) &packet.soh;
    while (_len--) _crc = crc16_update(_crc, *_q++);
    (*_q++) = _CAPS16(_crc)->bytes[0];
    (*_q++) = _CAPS16(_crc)->bytes[1];
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
      while (_p != _q) put(*_p++);
     4d8:	ce 16       	cp	r12, r30
     4da:	df 06       	cpc	r13, r31
     4dc:	71 f4       	brne	.+28     	; 0x4fa <JTAG2::answer_transfer()+0x94>
__iRestore():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     4de:	2f bf       	out	0x3f, r18	; 63
_ZN5JTAG215answer_transferEv():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:161
    }
  }
     4e0:	0f 90       	pop	r0
     4e2:	0f 90       	pop	r0
     4e4:	df 91       	pop	r29
     4e6:	cf 91       	pop	r28
     4e8:	1f 91       	pop	r17
     4ea:	0f 91       	pop	r16
     4ec:	ff 90       	pop	r15
     4ee:	ef 90       	pop	r14
     4f0:	df 90       	pop	r13
     4f2:	cf 90       	pop	r12
     4f4:	bf 90       	pop	r11
     4f6:	af 90       	pop	r10
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:159
    uint8_t *_q = (uint8_t*) &packet.soh;
    while (_len--) _crc = crc16_update(_crc, *_q++);
    (*_q++) = _CAPS16(_crc)->bytes[0];
    (*_q++) = _CAPS16(_crc)->bytes[1];
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
      while (_p != _q) put(*_p++);
     4f8:	08 95       	ret
     4fa:	d6 01       	movw	r26, r12
     4fc:	8d 91       	ld	r24, X+
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:91
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_RXCIF_bp);
    return JTAG_USART.RXDATAL;
  }

  uint8_t put (uint8_t _data) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_DREIF_bp);
     4fe:	6d 01       	movw	r12, r26
put():
     500:	30 91 24 08 	lds	r19, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:92
    JTAG_USART.STATUS = USART_TXCIF_bm;
     504:	35 ff       	sbrs	r19, 5
     506:	fc cf       	rjmp	.-8      	; 0x500 <JTAG2::answer_transfer()+0x9a>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:93
    return JTAG_USART.TXDATAL = _data;
     508:	90 93 24 08 	sts	0x0824, r25	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
     50c:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <__RODATA_PM_OFFSET__+0x7f8822>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:392
  } while (--limit);
  return false;
}

/* __attribute__((optimize("O0"))) */
bool UPDI::loop_until_key_stat_is_set (uint8_t bitmap, uint16_t limit) {
     510:	e3 cf       	rjmp	.-58     	; 0x4d8 <JTAG2::answer_transfer()+0x72>

00000512 <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.24]>:
_ZN4UPDI26loop_until_key_stat_is_setEhj.constprop.24():
     512:	1f 93       	push	r17
     514:	cf 93       	push	r28
     516:	df 93       	push	r29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:308
  send_bytes(set_ptr, sizeof(set_ptr));
  return RECV();
}

bool UPDI::is_cs_stat (uint8_t code, uint8_t check) {
  return check == (get_cs_stat(code) & check);
     518:	18 2f       	mov	r17, r24
     51a:	d0 e0       	ldi	r29, 0x00	; 0
     51c:	c0 e0       	ldi	r28, 0x00	; 0
is_cs_stat():
     51e:	87 e0       	ldi	r24, 0x07	; 7
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:397
bool UPDI::loop_until_key_stat_is_set (uint8_t bitmap, uint16_t limit) {
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  uint16_t _back = _send_ptr;
  #endif
  do {
    if (is_key_stat(bitmap)) return true;
     520:	aa de       	rcall	.-684    	; 0x276 <UPDI::get_cs_stat(unsigned char)>
     522:	81 23       	and	r24, r17
_ZN4UPDI26loop_until_key_stat_is_setEhj.constprop.24():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.10/cores/megaAVR/api/delay_busywait.h:31
static __inline__ __attribute__((__always_inline__)) void delay_micros (uint32_t _us);
static __inline__ __attribute__((__always_inline__)) void delay_millis (uint32_t _ms);

void delay_micros (uint32_t _us) {
  if (F_CPU >= 1000000L) {
    __builtin_avr_delay_cycles((F_CPU / 1000000L) * _us);
     524:	18 17       	cp	r17, r24
     526:	59 f0       	breq	.+22     	; 0x53e <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.24]+0x2c>
delay_micros():
     528:	86 ea       	ldi	r24, 0xA6	; 166
     52a:	8a 95       	dec	r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:402
    #ifdef ENABLE_DEBUG_UPDI_SENDER
    _send_ptr = _back;
    #endif
    TIM::delay_50us();
  } while (--limit);
     52c:	f1 f7       	brne	.-4      	; 0x52a <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.24]+0x18>
     52e:	00 c0       	rjmp	.+0      	; 0x530 <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.24]+0x1e>
_ZN4UPDI26loop_until_key_stat_is_setEhj.constprop.24():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:403
  return false;
     530:	21 97       	sbiw	r28, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:404
}
     532:	a9 f7       	brne	.-22     	; 0x51e <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.24]+0xc>
     534:	80 e0       	ldi	r24, 0x00	; 0
     536:	df 91       	pop	r29
     538:	cf 91       	pop	r28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:397
bool UPDI::loop_until_key_stat_is_set (uint8_t bitmap, uint16_t limit) {
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  uint16_t _back = _send_ptr;
  #endif
  do {
    if (is_key_stat(bitmap)) return true;
     53a:	1f 91       	pop	r17
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:408
  return false;
}

/* __attribute__((optimize("O0"))) */
bool UPDI::set_nvmprog_key (void) {
  if (!send_bytes(nvmprog_key, sizeof(nvmprog_key))) return false;
     53c:	08 95       	ret
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	fa cf       	rjmp	.-12     	; 0x536 <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.24]+0x24>

00000542 <UPDI::set_nvmprog_key()>:
_ZN4UPDI15set_nvmprog_keyEv():
     542:	6a e0       	ldi	r22, 0x0A	; 10
     544:	8d e1       	ldi	r24, 0x1D	; 29
     546:	98 e3       	ldi	r25, 0x38	; 56
     548:	06 de       	rcall	.-1012   	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:409
  return loop_until_key_stat_is_set(UPDI_KEY_NVMPROG);
     54a:	88 23       	and	r24, r24
     54c:	11 f0       	breq	.+4      	; 0x552 <UPDI::set_nvmprog_key()+0x10>
     54e:	80 e1       	ldi	r24, 0x10	; 16
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:410
}
     550:	e0 cf       	rjmp	.-64     	; 0x512 <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.24]>
     552:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:362
  } while (--limit);
  return false;
}

/* __attribute__((optimize("O0"))) */
bool UPDI::loop_until_sys_stat_is_set (uint8_t bitmap, uint16_t limit) {
     554:	08 95       	ret

00000556 <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.28]>:
_ZN4UPDI26loop_until_sys_stat_is_setEhj.constprop.28():
     556:	1f 93       	push	r17
     558:	cf 93       	push	r28
     55a:	df 93       	push	r29
     55c:	18 2f       	mov	r17, r24
     55e:	d0 e0       	ldi	r29, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:308
  send_bytes(set_ptr, sizeof(set_ptr));
  return RECV();
}

bool UPDI::is_cs_stat (uint8_t code, uint8_t check) {
  return check == (get_cs_stat(code) & check);
     560:	c0 e0       	ldi	r28, 0x00	; 0
is_cs_stat():
     562:	8b e0       	ldi	r24, 0x0B	; 11
     564:	88 de       	rcall	.-752    	; 0x276 <UPDI::get_cs_stat(unsigned char)>
     566:	81 23       	and	r24, r17
_ZN4UPDI26loop_until_sys_stat_is_setEhj.constprop.28():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:367
bool UPDI::loop_until_sys_stat_is_set (uint8_t bitmap, uint16_t limit) {
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  uint16_t _back = _send_ptr;
  #endif
  do {
    if (is_sys_stat(bitmap)) return true;
     568:	18 17       	cp	r17, r24
     56a:	59 f0       	breq	.+22     	; 0x582 <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.28]+0x2c>
delay_micros():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.10/cores/megaAVR/api/delay_busywait.h:31
     56c:	86 ea       	ldi	r24, 0xA6	; 166
     56e:	8a 95       	dec	r24
     570:	f1 f7       	brne	.-4      	; 0x56e <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.28]+0x18>
     572:	00 c0       	rjmp	.+0      	; 0x574 <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.28]+0x1e>
_ZN4UPDI26loop_until_sys_stat_is_setEhj.constprop.28():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:372
    #ifdef ENABLE_DEBUG_UPDI_SENDER
    _send_ptr = _back;
    #endif
    TIM::delay_50us();
  } while (--limit);
     574:	21 97       	sbiw	r28, 0x01	; 1
     576:	a9 f7       	brne	.-22     	; 0x562 <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.28]+0xc>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:373
  return false;
     578:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:374
}
     57a:	df 91       	pop	r29
     57c:	cf 91       	pop	r28
     57e:	1f 91       	pop	r17
     580:	08 95       	ret
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:367
bool UPDI::loop_until_sys_stat_is_set (uint8_t bitmap, uint16_t limit) {
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  uint16_t _back = _send_ptr;
  #endif
  do {
    if (is_sys_stat(bitmap)) return true;
     582:	81 e0       	ldi	r24, 0x01	; 1
     584:	fa cf       	rjmp	.-12     	; 0x57a <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.28]+0x24>

00000586 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>:
_ZN4UPDI28loop_until_sys_stat_is_clearEhj():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:347
uint8_t UPDI::get_cs_asi_ctra (void) {
  return get_cs_stat(UPDI_CS_ASI_CTRLA);
}

/* __attribute__((optimize("O0"))) */
bool UPDI::loop_until_sys_stat_is_clear (uint8_t bitmap, uint16_t limit) {
     586:	1f 93       	push	r17
     588:	cf 93       	push	r28
     58a:	df 93       	push	r29
     58c:	18 2f       	mov	r17, r24
     58e:	eb 01       	movw	r28, r22
is_cs_stat():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:308
  send_bytes(set_ptr, sizeof(set_ptr));
  return RECV();
}

bool UPDI::is_cs_stat (uint8_t code, uint8_t check) {
  return check == (get_cs_stat(code) & check);
     590:	8b e0       	ldi	r24, 0x0B	; 11
     592:	71 de       	rcall	.-798    	; 0x276 <UPDI::get_cs_stat(unsigned char)>
     594:	81 23       	and	r24, r17
_ZN4UPDI28loop_until_sys_stat_is_clearEhj():
     596:	18 13       	cpse	r17, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:352
bool UPDI::loop_until_sys_stat_is_clear (uint8_t bitmap, uint16_t limit) {
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  uint16_t _back = _send_ptr;
  #endif
  do {
    if (!is_sys_stat(bitmap)) return true;
     598:	0b c0       	rjmp	.+22     	; 0x5b0 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)+0x2a>
delay_micros():
     59a:	86 ea       	ldi	r24, 0xA6	; 166
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.10/cores/megaAVR/api/delay_busywait.h:31
     59c:	8a 95       	dec	r24
     59e:	f1 f7       	brne	.-4      	; 0x59c <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)+0x16>
     5a0:	00 c0       	rjmp	.+0      	; 0x5a2 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)+0x1c>
_ZN4UPDI28loop_until_sys_stat_is_clearEhj():
     5a2:	21 97       	sbiw	r28, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:357
    #ifdef ENABLE_DEBUG_UPDI_SENDER
    _send_ptr = _back;
    #endif
    TIM::delay_50us();
  } while (--limit);
     5a4:	a9 f7       	brne	.-22     	; 0x590 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)+0xa>
     5a6:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:358
  return false;
     5a8:	df 91       	pop	r29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:359
}
     5aa:	cf 91       	pop	r28
     5ac:	1f 91       	pop	r17
     5ae:	08 95       	ret
     5b0:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:352
bool UPDI::loop_until_sys_stat_is_clear (uint8_t bitmap, uint16_t limit) {
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  uint16_t _back = _send_ptr;
  #endif
  do {
    if (!is_sys_stat(bitmap)) return true;
     5b2:	fa cf       	rjmp	.-12     	; 0x5a8 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)+0x22>

000005b4 <UPDI::HV_Pulse()>:
_ZN4UPDI8HV_PulseEv():
     5b4:	80 91 68 38 	lds	r24, 0x3868	; 0x803868 <JTAG2::updi_desc+0x2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:440

void UPDI::HV_Pulse (void) {
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  UPDI::_send_buf_push(JTAG2::updi_desc.hvupdi_variant);
  #endif
  if (JTAG2::updi_desc.hvupdi_variant != '0'
     5b8:	8d 7f       	andi	r24, 0xFD	; 253
     5ba:	80 33       	cpi	r24, 0x30	; 48
     5bc:	09 f0       	breq	.+2      	; 0x5c0 <UPDI::HV_Pulse()+0xc>
     5be:	38 c0       	rjmp	.+112    	; 0x630 <UPDI::HV_Pulse()+0x7c>
HV_Pulse_ON():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:179
/*
 * HV charge pump drive control
 */

void TIM::HV_Pulse_ON (void) {
  TCA0_SPLIT_CTRLB = TCA_SPLIT_HCMP0EN_bm | TCA_SPLIT_HCMP1EN_bm;
     5c0:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__RODATA_PM_OFFSET__+0x7f8a01>
_ZN4UPDI8HV_PulseEv():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:447

  /* Run high voltage generator */
  TIM::HV_Pulse_ON();

  /* Perform a hardware reset (if wired) */
  openDrainWrite(TRST_PIN, LOW);
     5c4:	21 9a       	sbi	0x04, 1	; 4
delay_micros():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.10/cores/megaAVR/api/delay_busywait.h:31
     5c6:	86 ea       	ldi	r24, 0xA6	; 166
     5c8:	8a 95       	dec	r24
     5ca:	f1 f7       	brne	.-4      	; 0x5c8 <UPDI::HV_Pulse()+0x14>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:449
  TIM::delay_50us();
  openDrainWrite(TRST_PIN, HIGH);
     5cc:	00 c0       	rjmp	.+0      	; 0x5ce <UPDI::HV_Pulse()+0x1a>
_ZN4UPDI8HV_PulseEv():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.10/cores/megaAVR/api/delay_busywait.h:31
     5ce:	21 98       	cbi	0x04, 1	; 4
delay_micros():
     5d0:	8f ec       	ldi	r24, 0xCF	; 207
     5d2:	97 e0       	ldi	r25, 0x07	; 7
     5d4:	01 97       	sbiw	r24, 0x01	; 1
     5d6:	f1 f7       	brne	.-4      	; 0x5d4 <UPDI::HV_Pulse()+0x20>
     5d8:	00 c0       	rjmp	.+0      	; 0x5da <UPDI::HV_Pulse()+0x26>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:453
  TIM::delay_800us();
  /* During this time, raise the circuit to sufficient voltage */

  if (JTAG2::updi_desc.hvupdi_variant == '0')
     5da:	00 00       	nop
_ZN4UPDI8HV_PulseEv():
     5dc:	80 91 68 38 	lds	r24, 0x3868	; 0x803868 <JTAG2::updi_desc+0x2>
     5e0:	80 33       	cpi	r24, 0x30	; 48
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:454
    digitalWrite(HV12_PIN, HIGH);
     5e2:	11 f5       	brne	.+68     	; 0x628 <UPDI::HV_Pulse()+0x74>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.10/cores/megaAVR/api/delay_busywait.h:31
     5e4:	0e 9a       	sbi	0x01, 6	; 1
delay_micros():
     5e6:	8f ec       	ldi	r24, 0xCF	; 207
     5e8:	97 e0       	ldi	r25, 0x07	; 7
     5ea:	01 97       	sbiw	r24, 0x01	; 1
     5ec:	f1 f7       	brne	.-4      	; 0x5ea <UPDI::HV_Pulse()+0x36>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:461
    digitalWrite(HV8_PIN, HIGH);

  /* Apply high voltage only for the required time */
  TIM::delay_800us();

  if (JTAG2::updi_desc.hvupdi_variant == '0')
     5ee:	00 c0       	rjmp	.+0      	; 0x5f0 <UPDI::HV_Pulse()+0x3c>
     5f0:	00 00       	nop
_ZN4UPDI8HV_PulseEv():
     5f2:	80 91 68 38 	lds	r24, 0x3868	; 0x803868 <JTAG2::updi_desc+0x2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:183
}

void TIM::HV_Pulse_OFF (void) {
  TCA0_SPLIT_CTRLB = 0;
     5f6:	80 33       	cpi	r24, 0x30	; 48
     5f8:	c9 f4       	brne	.+50     	; 0x62c <UPDI::HV_Pulse()+0x78>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:469
    digitalWrite(HV8_PIN, LOW);

  TIM::HV_Pulse_OFF();

  /* Keep the UPDI signal low for as long as necessary */
  UPDI_USART.BAUD = UPDI_BAUD_SHORT_BREAK;
     5fa:	0e 98       	cbi	0x01, 6	; 1
HV_Pulse_OFF():
     5fc:	10 92 01 0a 	sts	0x0A01, r1	; 0x800a01 <__RODATA_PM_OFFSET__+0x7f8a01>
_ZN4UPDI8HV_PulseEv():
     600:	88 ee       	ldi	r24, 0xE8	; 232
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:470
  SEND(UPDI_NOP);
     602:	93 e0       	ldi	r25, 0x03	; 3
     604:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__RODATA_PM_OFFSET__+0x7f8808>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:471
  UPDI_USART.BAUD = UPDI_BAUD_CALC;
     608:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__RODATA_PM_OFFSET__+0x7f8809>
     60c:	80 e0       	ldi	r24, 0x00	; 0
     60e:	89 dd       	rcall	.-1262   	; 0x122 <UPDI::SEND(unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:473

  bit_clear(UPDI_CONTROL, UPDI_CLKU_bp);
     610:	80 eb       	ldi	r24, 0xB0	; 176
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:474
  bit_set(UPDI_CONTROL, UPDI_ERHV_bp);
     612:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:477

  /* Wait for system reset to finish */
  loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
     614:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__RODATA_PM_OFFSET__+0x7f8808>
     618:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__RODATA_PM_OFFSET__+0x7f8809>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:456
  /* During this time, raise the circuit to sufficient voltage */

  if (JTAG2::updi_desc.hvupdi_variant == '0')
    digitalWrite(HV12_PIN, HIGH);
  else
    digitalWrite(HV8_PIN, HIGH);
     61c:	e6 98       	cbi	0x1c, 6	; 28
     61e:	e3 9a       	sbi	0x1c, 3	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:464
  TIM::delay_800us();

  if (JTAG2::updi_desc.hvupdi_variant == '0')
    digitalWrite(HV12_PIN, LOW);
  else
    digitalWrite(HV8_PIN, LOW);
     620:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:478
  bit_clear(UPDI_CONTROL, UPDI_CLKU_bp);
  bit_set(UPDI_CONTROL, UPDI_ERHV_bp);

  /* Wait for system reset to finish */
  loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
}
     622:	60 e0       	ldi	r22, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:578

/**********************
 * UPDI control start *
 **********************/

bool UPDI::enter_updi (bool skip) {
     624:	80 e2       	ldi	r24, 0x20	; 32
     626:	af cf       	rjmp	.-162    	; 0x586 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
     628:	2d 9a       	sbi	0x05, 5	; 5
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:583
  #ifdef ENABLE_UPDI_DOUBLESPEED
  const bool hv_val = SYS::get_vcc() >= 4250;
  #endif
  /* Release the physical reset */
  openDrainWrite(TRST_PIN, HIGH);
     62a:	dd cf       	rjmp	.-70     	; 0x5e6 <UPDI::HV_Pulse()+0x32>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:585
  /* target reset deactive */
  if (!skip) {
     62c:	2d 98       	cbi	0x05, 5	; 5
     62e:	e6 cf       	rjmp	.-52     	; 0x5fc <UPDI::HV_Pulse()+0x48>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:587
    /* HV control forced permission */
    if (bit_is_set(UPDI_CONTROL, UPDI_FCHV_bp)) {
     630:	08 95       	ret

00000632 <UPDI::enter_updi(bool)>:
_ZN4UPDI10enter_updiEb():
     632:	0f 93       	push	r16
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:588
      HV_Pulse();
     634:	1f 93       	push	r17
     636:	cf 93       	push	r28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:589
      loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS, 500);
     638:	21 98       	cbi	0x04, 1	; 4
     63a:	81 11       	cpse	r24, r1
     63c:	1d c0       	rjmp	.+58     	; 0x678 <UPDI::enter_updi(bool)+0x46>
     63e:	e4 9b       	sbis	0x1c, 4	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:335
bool UPDI::set_cs_ctra (uint8_t data) {
  return set_cs_stat(UPDI_CS_CTRLA, data);
}

bool UPDI::set_cs_ctrb (uint8_t data) {
  return set_cs_stat(UPDI_CS_CTRLB, data);
     640:	61 c0       	rjmp	.+194    	; 0x704 <UPDI::enter_updi(bool)+0xd2>
     642:	b8 df       	rcall	.-144    	; 0x5b4 <UPDI::HV_Pulse()>
     644:	64 ef       	ldi	r22, 0xF4	; 244
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:590
  if (!skip) {
    /* HV control forced permission */
    if (bit_is_set(UPDI_CONTROL, UPDI_FCHV_bp)) {
      HV_Pulse();
      loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS, 500);
      if (!set_cs_ctrb(UPDI_SET_CCDETDIS)) return false;
     646:	71 e0       	ldi	r23, 0x01	; 1
     648:	80 e2       	ldi	r24, 0x20	; 32
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:662
        }
        bit_set(UPDI_NVMCTRL, UPDI_GEN2_bp);
        break;
      }
      default : {
        return false;
     64a:	9d df       	rcall	.-198    	; 0x586 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
set_cs_ctrb():
     64c:	68 e0       	ldi	r22, 0x08	; 8
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:593
      HV_Pulse();
      loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS, 500);
      if (!set_cs_ctrb(UPDI_SET_CCDETDIS)) return false;

      /* send nvmprog_key */
      if (!set_nvmprog_key()) return false;
     64e:	83 e0       	ldi	r24, 0x03	; 3
     650:	93 dd       	rcall	.-1242   	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>
_ZN4UPDI10enter_updiEb():
     652:	81 11       	cpse	r24, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:596

      /* restart target : change mode */
      if (!updi_reset(true) || !updi_reset(false)) return false;
     654:	02 c0       	rjmp	.+4      	; 0x65a <UPDI::enter_updi(bool)+0x28>
     656:	c0 e0       	ldi	r28, 0x00	; 0
     658:	66 c0       	rjmp	.+204    	; 0x726 <UPDI::enter_updi(bool)+0xf4>
     65a:	73 df       	rcall	.-282    	; 0x542 <UPDI::set_nvmprog_key()>
     65c:	88 23       	and	r24, r24
     65e:	d9 f3       	breq	.-10     	; 0x656 <UPDI::enter_updi(bool)+0x24>
     660:	81 e0       	ldi	r24, 0x01	; 1
     662:	91 de       	rcall	.-734    	; 0x386 <UPDI::updi_reset(bool)>
     664:	88 23       	and	r24, r24
     666:	b9 f3       	breq	.-18     	; 0x656 <UPDI::enter_updi(bool)+0x24>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:597
      loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	8d de       	rcall	.-742    	; 0x386 <UPDI::updi_reset(bool)>
     66c:	88 23       	and	r24, r24
     66e:	99 f3       	breq	.-26     	; 0x656 <UPDI::enter_updi(bool)+0x24>
     670:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:602
    }
    else
      BREAK();
  }
  if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) {
     672:	60 e0       	ldi	r22, 0x00	; 0
     674:	80 e2       	ldi	r24, 0x20	; 32
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:335
bool UPDI::set_cs_ctra (uint8_t data) {
  return set_cs_stat(UPDI_CS_CTRLA, data);
}

bool UPDI::set_cs_ctrb (uint8_t data) {
  return set_cs_stat(UPDI_CS_CTRLB, data);
     676:	87 df       	rcall	.-242    	; 0x586 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
     678:	e0 99       	sbic	0x1c, 0	; 28
     67a:	65 c0       	rjmp	.+202    	; 0x746 <UPDI::enter_updi(bool)+0x114>
set_cs_ctrb():
     67c:	68 e0       	ldi	r22, 0x08	; 8
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:604
    else
      BREAK();
  }
  if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) {
    /* Minimize guard time */
    if (!set_cs_ctrb(UPDI_SET_CCDETDIS)) return false;
     67e:	83 e0       	ldi	r24, 0x03	; 3
     680:	7b dd       	rcall	.-1290   	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>
_ZN4UPDI10enter_updiEb():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:331
  set_ptr[2] = data;
  return send_bytes(set_ptr, sizeof(set_ptr));
}

bool UPDI::set_cs_ctra (uint8_t data) {
  return set_cs_stat(UPDI_CS_CTRLA, data);
     682:	88 23       	and	r24, r24
     684:	41 f3       	breq	.-48     	; 0x656 <UPDI::enter_updi(bool)+0x24>
set_cs_ctra():
     686:	63 e0       	ldi	r22, 0x03	; 3
     688:	82 e0       	ldi	r24, 0x02	; 2
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:605
      BREAK();
  }
  if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) {
    /* Minimize guard time */
    if (!set_cs_ctrb(UPDI_SET_CCDETDIS)) return false;
    if (!set_cs_ctra(UPDI_GTVAL)) return false;
     68a:	76 dd       	rcall	.-1300   	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>
_ZN4UPDI10enter_updiEb():
     68c:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:606
    _CAPS32(JTAG2::updi_desc.signature[0])->dword = -1;
     68e:	19 f3       	breq	.-58     	; 0x656 <UPDI::enter_updi(bool)+0x24>
     690:	8f ef       	ldi	r24, 0xFF	; 255
     692:	9f ef       	ldi	r25, 0xFF	; 255
     694:	dc 01       	movw	r26, r24
     696:	80 93 6d 38 	sts	0x386D, r24	; 0x80386d <JTAG2::updi_desc+0x7>
     69a:	90 93 6e 38 	sts	0x386E, r25	; 0x80386e <JTAG2::updi_desc+0x8>
     69e:	a0 93 6f 38 	sts	0x386F, r26	; 0x80386f <JTAG2::updi_desc+0x9>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:308
  send_bytes(set_ptr, sizeof(set_ptr));
  return RECV();
}

bool UPDI::is_cs_stat (uint8_t code, uint8_t check) {
  return check == (get_cs_stat(code) & check);
     6a2:	b0 93 70 38 	sts	0x3870, r27	; 0x803870 <JTAG2::updi_desc+0xa>
is_cs_stat():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:612

    #ifdef ENABLE_UPDI_DOUBLESPEED
    if (hv_val && !set_cs_asi_ctra(UPDI_SET_UPDICLKSEL_8M)) return false;
    #endif

    if (is_sys_stat(UPDI_SYS_RSTSYS)) {
     6a6:	8b e0       	ldi	r24, 0x0B	; 11
     6a8:	e6 dd       	rcall	.-1076   	; 0x276 <UPDI::get_cs_stat(unsigned char)>
_ZN4UPDI10enter_updiEb():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:427
}

bool UPDI::read_sib (uint8_t *s_ptr) {
  static uint8_t set_ptr[] = { UPDI_SYNCH, UPDI_SIB_256 };
  uint8_t _len = 32;
  if (!send_bytes(set_ptr, sizeof(set_ptr))) return false;
     6aa:	85 fd       	sbrc	r24, 5
     6ac:	2d c0       	rjmp	.+90     	; 0x708 <UPDI::enter_updi(bool)+0xd6>
read_sib():
     6ae:	62 e0       	ldi	r22, 0x02	; 2
     6b0:	87 e2       	ldi	r24, 0x27	; 39
     6b2:	98 e3       	ldi	r25, 0x38	; 56
     6b4:	50 dd       	rcall	.-1376   	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     6b6:	c8 2f       	mov	r28, r24
     6b8:	00 e7       	ldi	r16, 0x70	; 112
     6ba:	18 e3       	ldi	r17, 0x38	; 56
     6bc:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:428
  do { *s_ptr++ = RECV(); } while (--_len);
     6be:	59 f2       	breq	.-106    	; 0x656 <UPDI::enter_updi(bool)+0x24>
     6c0:	24 dd       	rcall	.-1464   	; 0x10a <UPDI::RECV()>
     6c2:	f8 01       	movw	r30, r16
     6c4:	81 93       	st	Z+, r24
     6c6:	8f 01       	movw	r16, r30
     6c8:	f8 e3       	ldi	r31, 0x38	; 56
     6ca:	00 39       	cpi	r16, 0x90	; 144
     6cc:	1f 07       	cpc	r17, r31
     6ce:	c1 f7       	brne	.-16     	; 0x6c0 <UPDI::enter_updi(bool)+0x8e>
_ZN4UPDI10enter_updiEb():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:621

    /*** Get System Information Block ***/
    /* Determine system requirements not announced by host control here */
    uint8_t* _p = &JTAG2::updi_desc.sib[0];
    if (!read_sib(_p)) return false;
    JTAG2::updi_desc.nvmctrl_version = _p[10];
     6d0:	90 91 7a 38 	lds	r25, 0x387A	; 0x80387a <JTAG2::updi_desc+0x14>
     6d4:	90 93 69 38 	sts	0x3869, r25	; 0x803869 <JTAG2::updi_desc+0x3>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:622
    JTAG2::updi_desc.signature[0] = 0x1e;
     6d8:	8e e1       	ldi	r24, 0x1E	; 30
     6da:	80 93 6d 38 	sts	0x386D, r24	; 0x80386d <JTAG2::updi_desc+0x7>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:623
    JTAG2::updi_desc.signature[1] = _p[0];
     6de:	80 91 70 38 	lds	r24, 0x3870	; 0x803870 <JTAG2::updi_desc+0xa>
     6e2:	80 93 6e 38 	sts	0x386E, r24	; 0x80386e <JTAG2::updi_desc+0x8>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:624
    JTAG2::updi_desc.signature[2] = _p[10];
     6e6:	90 93 6f 38 	sts	0x386F, r25	; 0x80386f <JTAG2::updi_desc+0x9>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:625
    switch (_p[0]) {
     6ea:	81 34       	cpi	r24, 0x41	; 65
     6ec:	39 f0       	breq	.+14     	; 0x6fc <UPDI::enter_updi(bool)+0xca>
     6ee:	a8 f4       	brcc	.+42     	; 0x71a <UPDI::enter_updi(bool)+0xe8>
     6f0:	80 32       	cpi	r24, 0x20	; 32
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:638
        /* tinyAVR SIB = 'tinyAVR P:0D:1-3' */
        /* always vesrion 0 */
        break;
      }
      case ' ' :                // 'AVR_DA' Regacy
        JTAG2::updi_desc.signature[1] = 'A';
     6f2:	09 f0       	breq	.+2      	; 0x6f6 <UPDI::enter_updi(bool)+0xc4>
     6f4:	b0 cf       	rjmp	.-160    	; 0x656 <UPDI::enter_updi(bool)+0x24>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:645
        /* AVR Dx SIB = 'AVR     P:2D:1-3' */
        /* AVR DA SIB = '    AVR P:2D:1-3' (Regacy) */
        /* AVR EA SIB = 'AVR     P:3D:1-3' */
        /* AVR DU SIB = 'AVR     P:4D:1-3' */
        /* AVR EB SIB = 'AVR     P:5D:1-3' */
        if (JTAG2::updi_desc.nvmctrl_version == '3') {
     6f6:	81 e4       	ldi	r24, 0x41	; 65
     6f8:	80 93 6e 38 	sts	0x386E, r24	; 0x80386e <JTAG2::updi_desc+0x8>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:656
          bit_set(UPDI_NVMCTRL, UPDI_GEN4_bp);
        }
        else if (JTAG2::updi_desc.nvmctrl_version == '5') {
          // 'AVR_EB' series
          bit_set(UPDI_NVMCTRL, UPDI_GEN5_bp);
          bit_set(UPDI_NVMCTRL, UPDI_GEN3_bp);
     6fc:	93 33       	cpi	r25, 0x33	; 51
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:600
      /* restart target : change mode */
      if (!updi_reset(true) || !updi_reset(false)) return false;
      loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
    }
    else
      BREAK();
     6fe:	d1 f4       	brne	.+52     	; 0x734 <UPDI::enter_updi(bool)+0x102>
     700:	ed 9a       	sbi	0x1d, 5	; 29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:613
    #ifdef ENABLE_UPDI_DOUBLESPEED
    if (hv_val && !set_cs_asi_ctra(UPDI_SET_UPDICLKSEL_8M)) return false;
    #endif

    if (is_sys_stat(UPDI_SYS_RSTSYS)) {
      updi_reset(false);
     702:	1b c0       	rjmp	.+54     	; 0x73a <UPDI::enter_updi(bool)+0x108>
     704:	1f de       	rcall	.-962    	; 0x344 <UPDI::BREAK()>
     706:	b8 cf       	rjmp	.-144    	; 0x678 <UPDI::enter_updi(bool)+0x46>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:614
      if (!loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS, 500)) return false;
     708:	80 e0       	ldi	r24, 0x00	; 0
     70a:	3d de       	rcall	.-902    	; 0x386 <UPDI::updi_reset(bool)>
     70c:	64 ef       	ldi	r22, 0xF4	; 244
     70e:	71 e0       	ldi	r23, 0x01	; 1
     710:	80 e2       	ldi	r24, 0x20	; 32
     712:	39 df       	rcall	.-398    	; 0x586 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
     714:	81 11       	cpse	r24, r1
     716:	cb cf       	rjmp	.-106    	; 0x6ae <UPDI::enter_updi(bool)+0x7c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:625
    if (!read_sib(_p)) return false;
    JTAG2::updi_desc.nvmctrl_version = _p[10];
    JTAG2::updi_desc.signature[0] = 0x1e;
    JTAG2::updi_desc.signature[1] = _p[0];
    JTAG2::updi_desc.signature[2] = _p[10];
    switch (_p[0]) {
     718:	9e cf       	rjmp	.-196    	; 0x656 <UPDI::enter_updi(bool)+0x24>
     71a:	8d 36       	cpi	r24, 0x6D	; 109
     71c:	49 f0       	breq	.+18     	; 0x730 <UPDI::enter_updi(bool)+0xfe>
     71e:	84 37       	cpi	r24, 0x74	; 116
     720:	09 f0       	breq	.+2      	; 0x724 <UPDI::enter_updi(bool)+0xf2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:665
      }
      default : {
        return false;
      }
    }
    bit_set(UPDI_CONTROL, UPDI_INFO_bp);
     722:	99 cf       	rjmp	.-206    	; 0x656 <UPDI::enter_updi(bool)+0x24>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:677
    bit_set(UPDI_CONTROL, UPDI_CLKU_bp);
    do { TIM::delay_50us(); } while (tval != get_cs_asi_ctra());
  }
  #endif
  return true;
}
     724:	e0 9a       	sbi	0x1c, 0	; 28
     726:	8c 2f       	mov	r24, r28
     728:	cf 91       	pop	r28
     72a:	1f 91       	pop	r17
     72c:	0f 91       	pop	r16
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:629
    JTAG2::updi_desc.signature[2] = _p[10];
    switch (_p[0]) {
      case 'm' : {              // 'megaAVR' series
        /* megaAVR SIB = 'megaAVR P:0D:1-3' */
        /* always vesrion 0 */
        bit_set(UPDI_NVMCTRL, UPDI_LOWF_bp);
     72e:	08 95       	ret
     730:	ef 9a       	sbi	0x1d, 7	; 29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:649
        /* AVR EB SIB = 'AVR     P:5D:1-3' */
        if (JTAG2::updi_desc.nvmctrl_version == '3') {
          // 'AVR_Ex' series
          bit_set(UPDI_NVMCTRL, UPDI_GEN3_bp);
        }
        else if (JTAG2::updi_desc.nvmctrl_version == '4') {
     732:	f8 cf       	rjmp	.-16     	; 0x724 <UPDI::enter_updi(bool)+0xf2>
     734:	94 33       	cpi	r25, 0x34	; 52
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:651
          // 'AVR_DU' series
          bit_set(UPDI_NVMCTRL, UPDI_GEN4_bp);
     736:	19 f4       	brne	.+6      	; 0x73e <UPDI::enter_updi(bool)+0x10c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:658
        else if (JTAG2::updi_desc.nvmctrl_version == '5') {
          // 'AVR_EB' series
          bit_set(UPDI_NVMCTRL, UPDI_GEN5_bp);
          bit_set(UPDI_NVMCTRL, UPDI_GEN3_bp);
        }
        bit_set(UPDI_NVMCTRL, UPDI_GEN2_bp);
     738:	ec 9a       	sbi	0x1d, 4	; 29
     73a:	ee 9a       	sbi	0x1d, 6	; 29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:653
        }
        else if (JTAG2::updi_desc.nvmctrl_version == '4') {
          // 'AVR_DU' series
          bit_set(UPDI_NVMCTRL, UPDI_GEN4_bp);
        }
        else if (JTAG2::updi_desc.nvmctrl_version == '5') {
     73c:	f3 cf       	rjmp	.-26     	; 0x724 <UPDI::enter_updi(bool)+0xf2>
     73e:	95 33       	cpi	r25, 0x35	; 53
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:655
          // 'AVR_EB' series
          bit_set(UPDI_NVMCTRL, UPDI_GEN5_bp);
     740:	e1 f7       	brne	.-8      	; 0x73a <UPDI::enter_updi(bool)+0x108>
     742:	eb 9a       	sbi	0x1d, 3	; 29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:676
    UPDI_USART.CTRLB = UPDI_USART_ON | USART_RXMODE_CLK2X_gc;
    bit_set(UPDI_CONTROL, UPDI_CLKU_bp);
    do { TIM::delay_50us(); } while (tval != get_cs_asi_ctra());
  }
  #endif
  return true;
     744:	dd cf       	rjmp	.-70     	; 0x700 <UPDI::enter_updi(bool)+0xce>
     746:	c1 e0       	ldi	r28, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:58
  /* NVMCTRL version 3,4,5 */
  uint8_t nvm_wait_v3 (void) {
    #ifdef ENABLE_DEBUG_UPDI_SENDER
    uint16_t _back = UPDI::_send_ptr;
    #endif
    while (UPDI::ld8(NVMCTRL_V3_REG_STATUS) & 3) {
     748:	ee cf       	rjmp	.-36     	; 0x726 <UPDI::enter_updi(bool)+0xf4>

0000074a <NVM::nvm_wait_v3()>:
_ZN3NVM11nvm_wait_v3Ev():
     74a:	66 e0       	ldi	r22, 0x06	; 6
     74c:	70 e1       	ldi	r23, 0x10	; 16
     74e:	80 e0       	ldi	r24, 0x00	; 0
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	0c de       	rcall	.-1000   	; 0x36c <UPDI::ld8(unsigned long)>
     754:	83 70       	andi	r24, 0x03	; 3
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.10/cores/megaAVR/api/delay_busywait.h:31
     756:	29 f0       	breq	.+10     	; 0x762 <NVM::nvm_wait_v3()+0x18>
delay_micros():
     758:	86 ea       	ldi	r24, 0xA6	; 166
     75a:	8a 95       	dec	r24
     75c:	f1 f7       	brne	.-4      	; 0x75a <NVM::nvm_wait_v3()+0x10>
     75e:	00 c0       	rjmp	.+0      	; 0x760 <NVM::nvm_wait_v3()+0x16>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:64
      #ifdef ENABLE_DEBUG_UPDI_SENDER
      UPDI::_send_ptr = _back;
      #endif
      TIM::delay_50us();
    }
    return UPDI_LASTL;
     760:	f4 cf       	rjmp	.-24     	; 0x74a <NVM::nvm_wait_v3()>
_ZN3NVM11nvm_wait_v3Ev():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:65
  }
     762:	8e b3       	in	r24, 0x1e	; 30
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:87
    nvm_wait();
    return nvm_ctrl_change(nvmcmd);
  }

  /* NVMCTRL version 3,4,5 */
  bool nvm_ctrl_v3 (uint8_t nvmcmd) {
     764:	08 95       	ret

00000766 <NVM::nvm_ctrl_v3(unsigned char)>:
_ZN3NVM11nvm_ctrl_v3Eh():
     766:	cf 93       	push	r28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:88
    nvm_wait_v3();
     768:	c8 2f       	mov	r28, r24
     76a:	ef df       	rcall	.-34     	; 0x74a <NVM::nvm_wait_v3()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:89
    return nvm_ctrl_change(nvmcmd);
     76c:	8c 2f       	mov	r24, r28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:90
  }
     76e:	cf 91       	pop	r28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:89
  }

  /* NVMCTRL version 3,4,5 */
  bool nvm_ctrl_v3 (uint8_t nvmcmd) {
    nvm_wait_v3();
    return nvm_ctrl_change(nvmcmd);
     770:	45 ce       	rjmp	.-886    	; 0x3fc <NVM::nvm_ctrl_change(unsigned char)>

00000772 <NVM::nvm_wait()>:
_ZN3NVM8nvm_waitEv():
     772:	62 e0       	ldi	r22, 0x02	; 2
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:44
  /* NVMCTRL version 0,2 */
  uint8_t nvm_wait (void) {
    #ifdef ENABLE_DEBUG_UPDI_SENDER
    uint16_t _back = UPDI::_send_ptr;
    #endif
    while (UPDI::ld8(NVMCTRL_REG_STATUS) & 3) {
     774:	70 e1       	ldi	r23, 0x10	; 16
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	f8 dd       	rcall	.-1040   	; 0x36c <UPDI::ld8(unsigned long)>
     77c:	83 70       	andi	r24, 0x03	; 3
     77e:	29 f0       	breq	.+10     	; 0x78a <NVM::nvm_wait()+0x18>
delay_micros():
     780:	86 ea       	ldi	r24, 0xA6	; 166
     782:	8a 95       	dec	r24
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.10/cores/megaAVR/api/delay_busywait.h:31
     784:	f1 f7       	brne	.-4      	; 0x782 <NVM::nvm_wait()+0x10>
     786:	00 c0       	rjmp	.+0      	; 0x788 <NVM::nvm_wait()+0x16>
     788:	f4 cf       	rjmp	.-24     	; 0x772 <NVM::nvm_wait()>
_ZN3NVM8nvm_waitEv():
     78a:	8e b3       	in	r24, 0x1e	; 30
     78c:	08 95       	ret

0000078e <SYS::WDT_SET(unsigned char)>:
_ZN3SYS7WDT_SETEh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:50
      #ifdef ENABLE_DEBUG_UPDI_SENDER
      UPDI::_send_ptr = _back;
      #endif
      TIM::delay_50us();
    }
    return UPDI_LASTL;
     78e:	a8 95       	wdr
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:51
  }
     790:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__RODATA_PM_OFFSET__+0x7f8101>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:161
 * WDT operation *
 *****************/

void SYS::WDT_SET (uint8_t _wdt_period) {
  wdt_reset();
  loop_until_bit_is_clear(WDT_STATUS, WDT_SYNCBUSY_bp);
     794:	90 fd       	sbrc	r25, 0
     796:	fc cf       	rjmp	.-8      	; 0x790 <SYS::WDT_SET(unsigned char)+0x2>
     798:	98 ed       	ldi	r25, 0xD8	; 216
     79a:	94 bf       	out	0x34, r25	; 52
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:162
  _PROTECTED_WRITE(WDT_CTRLA, _wdt_period);
     79c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__RODATA_PM_OFFSET__+0x7f8100>
     7a0:	08 95       	ret

000007a2 <UPDI::runtime(unsigned char)>:
_ZN4UPDI7runtimeEh():
     7a2:	af 92       	push	r10
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:163
}
     7a4:	bf 92       	push	r11
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:727

/************************
 * UPDI control process *
 ************************/

bool UPDI::runtime (uint8_t updi_cmd) {
     7a6:	cf 92       	push	r12
     7a8:	df 92       	push	r13
     7aa:	ef 92       	push	r14
     7ac:	ff 92       	push	r15
     7ae:	0f 93       	push	r16
     7b0:	1f 93       	push	r17
     7b2:	cf 93       	push	r28
     7b4:	df 93       	push	r29
     7b6:	cd b7       	in	r28, 0x3d	; 61
     7b8:	de b7       	in	r29, 0x3e	; 62
     7ba:	26 97       	sbiw	r28, 0x06	; 6
     7bc:	cd bf       	out	0x3d, r28	; 61
     7be:	de bf       	out	0x3e, r29	; 62
     7c0:	8e 83       	std	Y+6, r24	; 0x06
     7c2:	1d 82       	std	Y+5, r1	; 0x05
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:728
  volatile bool _result = false;
     7c4:	8e e4       	ldi	r24, 0x4E	; 78
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:729
  if (setjmp(TIM::CONTEXT) == 0) {
     7c6:	98 e3       	ldi	r25, 0x38	; 56
     7c8:	cb d6       	rcall	.+3478   	; 0x1560 <setjmp>
     7ca:	89 2b       	or	r24, r25
     7cc:	09 f0       	breq	.+2      	; 0x7d0 <UPDI::runtime(unsigned char)+0x2e>
     7ce:	f1 c0       	rjmp	.+482    	; 0x9b2 <__DATA_REGION_LENGTH__+0x1b2>
Timeout_Start():
     7d0:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
     7d2:	f8 94       	cli
Timeout_Start():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:106
/*
 * Timeout control
 */

void TIM::Timeout_Start (uint16_t _ms) {
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     7d4:	10 92 8a 0a 	sts	0x0A8A, r1	; 0x800a8a <__RODATA_PM_OFFSET__+0x7f8a8a>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:107
    TCB0_CNT = 0;
     7d8:	10 92 8b 0a 	sts	0x0A8B, r1	; 0x800a8b <__RODATA_PM_OFFSET__+0x7f8a8b>
     7dc:	28 ec       	ldi	r18, 0xC8	; 200
     7de:	30 e0       	ldi	r19, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:108
    TCB0_CCMP = _ms >> 2;
     7e0:	20 93 8c 0a 	sts	0x0A8C, r18	; 0x800a8c <__RODATA_PM_OFFSET__+0x7f8a8c>
     7e4:	30 93 8d 0a 	sts	0x0A8D, r19	; 0x800a8d <__RODATA_PM_OFFSET__+0x7f8a8d>
     7e8:	81 e0       	ldi	r24, 0x01	; 1
     7ea:	80 93 85 0a 	sts	0x0A85, r24	; 0x800a85 <__RODATA_PM_OFFSET__+0x7f8a85>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:109
    TCB0_INTCTRL = TCB_CAPT_bm;
     7ee:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__RODATA_PM_OFFSET__+0x7f8a86>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:110
    TCB0_INTFLAGS = TCB_CAPT_bm;
     7f2:	8f e0       	ldi	r24, 0x0F	; 15
     7f4:	80 93 80 0a 	sts	0x0A80, r24	; 0x800a80 <__RODATA_PM_OFFSET__+0x7f8a80>
__iRestore():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:111
    TCB0_CTRLA = TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
     7f8:	9f bf       	out	0x3f, r25	; 63
_ZN4UPDI7runtimeEh():
     7fa:	8e 81       	ldd	r24, Y+6	; 0x06
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:70
     7fc:	83 30       	cpi	r24, 0x03	; 3
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:731
    TIM::Timeout_Start(800);
    switch (updi_cmd) {
     7fe:	09 f4       	brne	.+2      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     800:	67 c2       	rjmp	.+1230   	; 0xcd0 <__DATA_REGION_LENGTH__+0x4d0>
     802:	84 30       	cpi	r24, 0x04	; 4
     804:	09 f4       	brne	.+2      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
     806:	ad c2       	rjmp	.+1370   	; 0xd62 <__DATA_REGION_LENGTH__+0x562>
write_memory():
     808:	e0 e9       	ldi	r30, 0x90	; 144
     80a:	f8 e3       	ldi	r31, 0x38	; 56
_ZN4UPDI7runtimeEh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:310
/******************
 * NVM write core *
 ******************/

bool NVM::write_memory (void) {
  uint8_t mem_type = JTAG2::packet.body[JTAG2::MEM_TYPE];
     80c:	82 30       	cpi	r24, 0x02	; 2
     80e:	09 f4       	brne	.+2      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:731
     810:	70 c0       	rjmp	.+224    	; 0x8f2 <__DATA_REGION_LENGTH__+0xf2>
     812:	22 85       	ldd	r18, Z+10	; 0x0a
     814:	33 85       	ldd	r19, Z+11	; 0x0b
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:733
      case UPDI_CMD_READ_MEMORY : {
        size_t byte_count = _CAPS16(JTAG2::packet.body[JTAG2::DATA_LENGTH])->word;
     816:	66 85       	ldd	r22, Z+14	; 0x0e
     818:	77 85       	ldd	r23, Z+15	; 0x0f
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:734
        uint32_t start_addr = _CAPS32(JTAG2::packet.body[JTAG2::DATA_ADDRESS])->dword;
     81a:	80 89       	ldd	r24, Z+16	; 0x10
     81c:	91 89       	ldd	r25, Z+17	; 0x11
read_memory():
     81e:	42 e8       	ldi	r20, 0x82	; 130
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:262
/***********************
 * Memory reading core *
 ***********************/

bool NVM::read_memory (uint32_t start_addr, size_t byte_count) {
  JTAG2::packet.body[JTAG2::MESSAGE_ID] = JTAG2::RSP_MEMORY;
     820:	40 87       	std	Z+8, r20	; 0x08
     822:	a9 01       	movw	r20, r18
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:266
  uint8_t *data = &JTAG2::packet.body[JTAG2::RSP_DATA];

  /* Reads from 1 to 256 bytes and even bytes 258 to 512 are allowed */
  if (byte_count == 0 || byte_count > 512 || (byte_count > 256 && byte_count & 1)) {
     824:	41 50       	subi	r20, 0x01	; 1
     826:	51 09       	sbc	r21, r1
     828:	41 15       	cp	r20, r1
     82a:	e2 e0       	ldi	r30, 0x02	; 2
     82c:	5e 07       	cpc	r21, r30
     82e:	30 f4       	brcc	.+12     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     830:	21 30       	cpi	r18, 0x01	; 1
     832:	f1 e0       	ldi	r31, 0x01	; 1
     834:	3f 07       	cpc	r19, r31
     836:	40 f0       	brcs	.+16     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
     838:	20 ff       	sbrs	r18, 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:267
    set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
     83a:	06 c0       	rjmp	.+12     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
     83c:	83 ea       	ldi	r24, 0xA3	; 163
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	f2 dd       	rcall	.-1052   	; 0x426 <JTAG2::set_response(JTAG2::jtag_response_e)>
_ZN4UPDI7runtimeEh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:279
    #ifdef ENABLE_ADDFEATS_LOCK_SIG
    if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_PROG_bp)
      && JTAG2::packet.body[JTAG2::MEM_TYPE] == JTAG2::MTYPE_SIGN_JTAG) {
      /* Signature reading branches to special processing */
      JTAG2::packet.body[JTAG2::RSP_DATA] = JTAG2::updi_desc.signature[(uint8_t)start_addr & 3];
      return true;
     842:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:749
          _result = chip_erase();
        }
        break;
      }
      case UPDI_CMD_GO : {
        _result = Target_Reset(true) && Target_Reset(false);
     844:	8d 83       	std	Y+5, r24	; 0x05
     846:	b5 c0       	rjmp	.+362    	; 0x9b2 <__DATA_REGION_LENGTH__+0x1b2>
read_memory():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:270
  /* Reads from 1 to 256 bytes and even bytes 258 to 512 are allowed */
  if (byte_count == 0 || byte_count > 512 || (byte_count > 256 && byte_count & 1)) {
    set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
    return true;
  }
  JTAG2::packet.size_word[0] = byte_count + 1;
     848:	a0 e9       	ldi	r26, 0x90	; 144
     84a:	b8 e3       	ldi	r27, 0x38	; 56
     84c:	f9 01       	movw	r30, r18
     84e:	31 96       	adiw	r30, 0x01	; 1
     850:	13 96       	adiw	r26, 0x03	; 3
     852:	ed 93       	st	X+, r30
     854:	fc 93       	st	X, r31
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:273

  /* Reading only 1 byte may be special */
  if (byte_count == 1) {
     856:	14 97       	sbiw	r26, 0x04	; 4
     858:	21 30       	cpi	r18, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:276
    #ifdef ENABLE_ADDFEATS_LOCK_SIG
    if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_PROG_bp)
      && JTAG2::packet.body[JTAG2::MEM_TYPE] == JTAG2::MTYPE_SIGN_JTAG) {
     85a:	31 05       	cpc	r19, r1
     85c:	81 f4       	brne	.+32     	; 0x87e <__DATA_REGION_LENGTH__+0x7e>
     85e:	e1 99       	sbic	0x1c, 1	; 28
     860:	0e c0       	rjmp	.+28     	; 0x87e <__DATA_REGION_LENGTH__+0x7e>
     862:	19 96       	adiw	r26, 0x09	; 9
     864:	ec 91       	ld	r30, X
     866:	19 97       	sbiw	r26, 0x09	; 9
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:278
      /* Signature reading branches to special processing */
      JTAG2::packet.body[JTAG2::RSP_DATA] = JTAG2::updi_desc.signature[(uint8_t)start_addr & 3];
     868:	e4 3b       	cpi	r30, 0xB4	; 180
     86a:	49 f4       	brne	.+18     	; 0x87e <__DATA_REGION_LENGTH__+0x7e>
     86c:	63 70       	andi	r22, 0x03	; 3
     86e:	e6 2f       	mov	r30, r22
     870:	f0 e0       	ldi	r31, 0x00	; 0
     872:	ea 59       	subi	r30, 0x9A	; 154
     874:	f7 4c       	sbci	r31, 0xC7	; 199
     876:	87 81       	ldd	r24, Z+7	; 0x07
     878:	19 96       	adiw	r26, 0x09	; 9
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:293
      return true;
    }
    #endif
  }

  if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_PROG_bp)) {
     87a:	8c 93       	st	X, r24
     87c:	e2 cf       	rjmp	.-60     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
     87e:	e1 99       	sbic	0x1c, 1	; 28
     880:	08 c0       	rjmp	.+16     	; 0x892 <__DATA_REGION_LENGTH__+0x92>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:295
    /* A normal read when the device is locked returns a dummy. */
    do { *data++ = 0xFF; } while (--byte_count);
     882:	e9 e9       	ldi	r30, 0x99	; 153
     884:	f8 e3       	ldi	r31, 0x38	; 56
     886:	8f ef       	ldi	r24, 0xFF	; 255
     888:	81 93       	st	Z+, r24
     88a:	21 50       	subi	r18, 0x01	; 1
     88c:	31 09       	sbc	r19, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:299
    return true;
  }

  if ((byte_count - 1) >> 8)
     88e:	e1 f7       	brne	.-8      	; 0x888 <__DATA_REGION_LENGTH__+0x88>
     890:	d8 cf       	rjmp	.-80     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
     892:	45 2f       	mov	r20, r21
     894:	55 27       	eor	r21, r21
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:287
  do { *data++ = RECV(); } while (--len);
  return UPDI_LASTH == 0;
}

bool UPDI::lds16 (uint32_t addr, uint8_t *data, size_t len) {
  uint8_t repeat = (uint16_t)len >> 1;
     896:	45 2b       	or	r20, r21
     898:	e1 f0       	breq	.+56     	; 0x8d2 <__DATA_REGION_LENGTH__+0xd2>
lds16():
     89a:	36 95       	lsr	r19
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:288
  if (!send_repeat_header(addr, UPDI_LD|UPDI_DATA2, repeat)) return false;
     89c:	27 95       	ror	r18
     89e:	f2 2e       	mov	r15, r18
     8a0:	41 e2       	ldi	r20, 0x21	; 33
     8a2:	11 dd       	rcall	.-1502   	; 0x2c6 <UPDI::send_repeat_header(unsigned long, unsigned char, unsigned char)>
     8a4:	00 e9       	ldi	r16, 0x90	; 144
     8a6:	18 e3       	ldi	r17, 0x38	; 56
     8a8:	81 11       	cpse	r24, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:547
  if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) {
    HV_Pulse();
  }

  /* Transition to CHIPERASE mode by system reset */
  if (!set_erase_key()) return false;
     8aa:	02 c0       	rjmp	.+4      	; 0x8b0 <__DATA_REGION_LENGTH__+0xb0>
_ZN4UPDI7runtimeEh():
     8ac:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:290

bool UPDI::lds16 (uint32_t addr, uint8_t *data, size_t len) {
  uint8_t repeat = (uint16_t)len >> 1;
  if (!send_repeat_header(addr, UPDI_LD|UPDI_DATA2, repeat)) return false;
  do {
    *data++ = RECV();
     8ae:	ca cf       	rjmp	.-108    	; 0x844 <__DATA_REGION_LENGTH__+0x44>
lds16():
     8b0:	2c dc       	rcall	.-1960   	; 0x10a <UPDI::RECV()>
     8b2:	f8 01       	movw	r30, r16
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:291
    *data++ = RECV();
     8b4:	81 87       	std	Z+9, r24	; 0x09
     8b6:	29 dc       	rcall	.-1966   	; 0x10a <UPDI::RECV()>
     8b8:	f8 01       	movw	r30, r16
     8ba:	82 87       	std	Z+10, r24	; 0x0a
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:292
  } while (--repeat);
     8bc:	fa 94       	dec	r15
     8be:	0e 5f       	subi	r16, 0xFE	; 254
     8c0:	1f 4f       	sbci	r17, 0xFF	; 255
     8c2:	f1 10       	cpse	r15, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:283
}

bool UPDI::lds8 (uint32_t addr, uint8_t *data, uint8_t len) {
  if (!send_repeat_header(addr, UPDI_LD|UPDI_DATA1, len)) return false;
  do { *data++ = RECV(); } while (--len);
  return UPDI_LASTH == 0;
     8c4:	f5 cf       	rjmp	.-22     	; 0x8b0 <__DATA_REGION_LENGTH__+0xb0>
lds8():
     8c6:	9f b3       	in	r25, 0x1f	; 31
     8c8:	81 e0       	ldi	r24, 0x01	; 1
     8ca:	99 23       	and	r25, r25
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:302
    return UPDI::lds16(start_addr, data, byte_count);
  else
    return UPDI::lds8(start_addr, data, byte_count);
     8cc:	09 f4       	brne	.+2      	; 0x8d0 <__DATA_REGION_LENGTH__+0xd0>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:281
  while (!send_bytes(set_ptr, sizeof(set_ptr) - 1)) BREAK();
  return RECV();
}

bool UPDI::lds8 (uint32_t addr, uint8_t *data, uint8_t len) {
  if (!send_repeat_header(addr, UPDI_LD|UPDI_DATA1, len)) return false;
     8ce:	ba cf       	rjmp	.-140    	; 0x844 <__DATA_REGION_LENGTH__+0x44>
     8d0:	ed cf       	rjmp	.-38     	; 0x8ac <__DATA_REGION_LENGTH__+0xac>
read_memory():
     8d2:	12 2f       	mov	r17, r18
lds8():
     8d4:	40 e2       	ldi	r20, 0x20	; 32
     8d6:	f7 dc       	rcall	.-1554   	; 0x2c6 <UPDI::send_repeat_header(unsigned long, unsigned char, unsigned char)>
     8d8:	88 23       	and	r24, r24
     8da:	41 f3       	breq	.-48     	; 0x8ac <__DATA_REGION_LENGTH__+0xac>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:282
  do { *data++ = RECV(); } while (--len);
     8dc:	e9 e9       	ldi	r30, 0x99	; 153
     8de:	ee 2e       	mov	r14, r30
     8e0:	e8 e3       	ldi	r30, 0x38	; 56
     8e2:	fe 2e       	mov	r15, r30
     8e4:	12 dc       	rcall	.-2012   	; 0x10a <UPDI::RECV()>
     8e6:	f7 01       	movw	r30, r14
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:310
/******************
 * NVM write core *
 ******************/

bool NVM::write_memory (void) {
  uint8_t mem_type = JTAG2::packet.body[JTAG2::MEM_TYPE];
     8e8:	81 93       	st	Z+, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:312
  uint8_t *data = &JTAG2::packet.body[JTAG2::DATA_START];
  size_t byte_count = _CAPS16(JTAG2::packet.body[JTAG2::DATA_LENGTH])->word;
     8ea:	7f 01       	movw	r14, r30
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:313
  uint32_t start_addr = _CAPS32(JTAG2::packet.body[JTAG2::DATA_ADDRESS])->dword;
     8ec:	11 50       	subi	r17, 0x01	; 1
     8ee:	d1 f7       	brne	.-12     	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
     8f0:	ea cf       	rjmp	.-44     	; 0x8c6 <__DATA_REGION_LENGTH__+0xc6>
write_memory():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:316

  /* Address specification outside the processing range is considered an IO area operation */
  if (start_addr >> 24) {
     8f2:	81 85       	ldd	r24, Z+9	; 0x09
     8f4:	02 85       	ldd	r16, Z+10	; 0x0a
     8f6:	13 85       	ldd	r17, Z+11	; 0x0b
     8f8:	c6 84       	ldd	r12, Z+14	; 0x0e
     8fa:	d7 84       	ldd	r13, Z+15	; 0x0f
     8fc:	e0 88       	ldd	r14, Z+16	; 0x10
     8fe:	f1 88       	ldd	r15, Z+17	; 0x11
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:317
    start_addr &= 0xFFFF;
     900:	4f 2d       	mov	r20, r15
     902:	55 27       	eor	r21, r21
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:324
  }

  /* Can only be written to USERROW on locked devices */
  /* This write is only allowed in multiples of 32 bytes */
  if (bit_is_set(UPDI_CONTROL, UPDI::UPDI_INFO_bp)
   && mem_type == JTAG2::MTYPE_XMEGA_USERSIG) // 0xC5
     904:	66 27       	eor	r22, r22
     906:	77 27       	eor	r23, r23
     908:	45 2b       	or	r20, r21
     90a:	46 2b       	or	r20, r22
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:486
 * USERROW region writing *
 *****************************************/

bool UPDI::write_userrow (const uint32_t start_addr, uint8_t *data, const size_t byte_count) {
  /* Only data lengths that are multiples of 32 bytes are allowed. */
  if (byte_count == 0 || byte_count & 0x1F) {
     90c:	47 2b       	or	r20, r23
     90e:	19 f0       	breq	.+6      	; 0x916 <__DATA_REGION_LENGTH__+0x116>
     910:	ee 24       	eor	r14, r14
     912:	ff 24       	eor	r15, r15
_ZN4UPDI7runtimeEh():
     914:	80 e2       	ldi	r24, 0x20	; 32
write_memory():
     916:	e0 9b       	sbis	0x1c, 0	; 28
     918:	62 c0       	rjmp	.+196    	; 0x9de <__DATA_REGION_LENGTH__+0x1de>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:487
    JTAG2::packet.body[JTAG2::MESSAGE_ID] = JTAG2::RSP_ILLEGAL_MEMORY_RANGE;
     91a:	85 3c       	cpi	r24, 0xC5	; 197
     91c:	09 f0       	breq	.+2      	; 0x920 <__DATA_REGION_LENGTH__+0x120>
     91e:	5f c0       	rjmp	.+190    	; 0x9de <__DATA_REGION_LENGTH__+0x1de>
write_userrow():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:368
  }

  /* Other writes are allowed from 1 to 256 bytes */
  if (byte_count == 0 || byte_count > 256) {
    set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
    return true;
     920:	01 15       	cp	r16, r1
     922:	11 05       	cpc	r17, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:420
  return loop_until_key_stat_is_set(UPDI_KEY_CHIPERASE);
}

/* __attribute__((optimize("O0"))) */
bool UPDI::set_urowwrite_key (void) {
  if (!send_bytes(urowwrite_key, sizeof(urowwrite_key))) return false;
     924:	29 f0       	breq	.+10     	; 0x930 <__DATA_REGION_LENGTH__+0x130>
     926:	c8 01       	movw	r24, r16
     928:	8f 71       	andi	r24, 0x1F	; 31
     92a:	99 27       	eor	r25, r25
     92c:	89 2b       	or	r24, r25
     92e:	29 f0       	breq	.+10     	; 0x93a <__DATA_REGION_LENGTH__+0x13a>
     930:	83 ea       	ldi	r24, 0xA3	; 163
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:383
    case JTAG2::MTYPE_FUSE_BITS : {           // 0xB2
      /* The NVMCTRL version 0 implementation is special. */
      if (bit_is_clear(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp)
      && bit_is_clear(UPDI_NVMCTRL, UPDI::UPDI_GEN2_bp)) {
        do {
          if (!write_fuse(start_addr++, *data++)) return false;
     932:	80 93 98 38 	sts	0x3898, r24	; 0x803898 <JTAG2::packet+0x8>
_ZN4UPDI7runtimeEh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:421
  return loop_until_key_stat_is_set(UPDI_KEY_UROWWRITE);
     936:	11 e0       	ldi	r17, 0x01	; 1
     938:	3b c0       	rjmp	.+118    	; 0x9b0 <__DATA_REGION_LENGTH__+0x1b0>
set_urowwrite_key():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:492
    JTAG2::packet.body[JTAG2::MESSAGE_ID] = JTAG2::RSP_ILLEGAL_MEMORY_RANGE;
    return true;
  }

  /* Send the authentication key */
  if (!set_urowwrite_key()) return false;
     93a:	6a e0       	ldi	r22, 0x0A	; 10
     93c:	89 e2       	ldi	r24, 0x29	; 41
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:495

  /* Transition to USERROW mode by system reset */
  if (!updi_reset(true) || !updi_reset(false)) return false;
     93e:	98 e3       	ldi	r25, 0x38	; 56
     940:	0a dc       	rcall	.-2028   	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     942:	81 11       	cpse	r24, r1
     944:	02 c0       	rjmp	.+4      	; 0x94a <__DATA_REGION_LENGTH__+0x14a>
_ZN4UPDI7runtimeEh():
     946:	10 e0       	ldi	r17, 0x00	; 0
     948:	33 c0       	rjmp	.+102    	; 0x9b0 <__DATA_REGION_LENGTH__+0x1b0>
set_urowwrite_key():
     94a:	80 e2       	ldi	r24, 0x20	; 32
     94c:	e2 dd       	rcall	.-1084   	; 0x512 <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.24]>
write_userrow():
     94e:	88 23       	and	r24, r24
     950:	d1 f3       	breq	.-12     	; 0x946 <__DATA_REGION_LENGTH__+0x146>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:498

  /* Wait for system reset to finish */
  loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
     952:	81 e0       	ldi	r24, 0x01	; 1
     954:	18 dd       	rcall	.-1488   	; 0x386 <UPDI::updi_reset(bool)>
     956:	88 23       	and	r24, r24
     958:	b1 f3       	breq	.-20     	; 0x946 <__DATA_REGION_LENGTH__+0x146>
     95a:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:501

  /* Make sure you are in USERROW mode */
  loop_until_sys_stat_is_set(UPDI_SYS_UROWPROG);
     95c:	14 dd       	rcall	.-1496   	; 0x386 <UPDI::updi_reset(bool)>
     95e:	88 23       	and	r24, r24
     960:	91 f3       	breq	.-28     	; 0x946 <__DATA_REGION_LENGTH__+0x146>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:504

  /* Write data to buffer memory */
  sts8rsd(start_addr, data, byte_count);
     962:	70 e0       	ldi	r23, 0x00	; 0
     964:	60 e0       	ldi	r22, 0x00	; 0
     966:	80 e2       	ldi	r24, 0x20	; 32
     968:	0e de       	rcall	.-996    	; 0x586 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
     96a:	84 e0       	ldi	r24, 0x04	; 4
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:508
  /* Ignore any errors here */

  /* After writing the memory, write the end flag */
  set_cs_stat(UPDI_CS_ASI_SYS_CTRLA, UPDI_SET_UROWDONE | UPDI_SET_CLKREQ);
     96c:	f4 dd       	rcall	.-1048   	; 0x556 <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.28]>
     96e:	40 2f       	mov	r20, r16
     970:	c7 01       	movw	r24, r14
     972:	b6 01       	movw	r22, r12
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:513

  /* Wait for data to be transferred to USERROW */
  /* AVR_Dx requires at least 100 * 50us wait loops */
  /* AVR_Ex may not end forever, so give up midway */
  loop_until_sys_stat_is_clear(UPDI_SYS_UROWPROG, 200);
     974:	09 dc       	rcall	.-2030   	; 0x188 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.21]>
     976:	63 e0       	ldi	r22, 0x03	; 3
     978:	8a e0       	ldi	r24, 0x0A	; 10
     97a:	fe db       	rcall	.-2052   	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>
     97c:	68 ec       	ldi	r22, 0xC8	; 200
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:517
  /* Ignore any errors here */

  /* Step completed */
  set_cs_stat(UPDI_CS_ASI_KEY_STATUS, UPDI_KEY_UROWWRITE);
     97e:	70 e0       	ldi	r23, 0x00	; 0
     980:	84 e0       	ldi	r24, 0x04	; 4
     982:	01 de       	rcall	.-1022   	; 0x586 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
     984:	60 e2       	ldi	r22, 0x20	; 32
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:520

  /* If previously in program mode, send unlock key */
  if (bit_is_set(UPDI_CONTROL, UPDI_PROG_bp)) {
     986:	87 e0       	ldi	r24, 0x07	; 7
     988:	f7 db       	rcall	.-2066   	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:525
    set_nvmprog_key();
  }

  /* Exit USERROW mode */
  if (!updi_reset(true) || !updi_reset(false)) return false;
     98a:	e1 99       	sbic	0x1c, 1	; 28
     98c:	26 c0       	rjmp	.+76     	; 0x9da <__DATA_REGION_LENGTH__+0x1da>
     98e:	81 e0       	ldi	r24, 0x01	; 1
     990:	fa dc       	rcall	.-1548   	; 0x386 <UPDI::updi_reset(bool)>
     992:	88 23       	and	r24, r24
     994:	c1 f2       	breq	.-80     	; 0x946 <__DATA_REGION_LENGTH__+0x146>
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	f6 dc       	rcall	.-1556   	; 0x386 <UPDI::updi_reset(bool)>
     99a:	18 2f       	mov	r17, r24
     99c:	88 23       	and	r24, r24
     99e:	99 f2       	breq	.-90     	; 0x946 <__DATA_REGION_LENGTH__+0x146>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:526
  loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
     9a0:	70 e0       	ldi	r23, 0x00	; 0
     9a2:	60 e0       	ldi	r22, 0x00	; 0
     9a4:	80 e2       	ldi	r24, 0x20	; 32
     9a6:	ef dd       	rcall	.-1058   	; 0x586 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
     9a8:	e1 9b       	sbis	0x1c, 1	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:529

  /* Make sure you are in program mode if necessary */
  if (bit_is_set(UPDI_CONTROL, UPDI_PROG_bp)) {
     9aa:	02 c0       	rjmp	.+4      	; 0x9b0 <__DATA_REGION_LENGTH__+0x1b0>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:530
    loop_until_sys_stat_is_set(UPDI_SYS_NVMPROG);
     9ac:	88 e0       	ldi	r24, 0x08	; 8
     9ae:	d3 dd       	rcall	.-1114   	; 0x556 <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.28]>
_ZN4UPDI7runtimeEh():
     9b0:	1d 83       	std	Y+5, r17	; 0x05
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:739
        uint32_t start_addr = _CAPS32(JTAG2::packet.body[JTAG2::DATA_ADDRESS])->dword;
        _result = NVM::read_memory(start_addr, byte_count);
        break;
      }
      case UPDI_CMD_WRITE_MEMORY : {
        _result = NVM::write_memory();
     9b2:	14 dd       	rcall	.-1496   	; 0x3dc <TIM::Timeout_Stop()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:754
        _result = Target_Reset(true) && Target_Reset(false);
        break;
      }
    }
  }
  TIM::Timeout_Stop();
     9b4:	88 ec       	ldi	r24, 0xC8	; 200
     9b6:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__RODATA_PM_OFFSET__+0x7f8806>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:755
  UPDI_USART.CTRLB = UPDI_USART_ON;
     9ba:	a8 95       	wdr
     9bc:	8d 81       	ldd	r24, Y+5	; 0x05
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:756
  wdt_reset();
     9be:	26 96       	adiw	r28, 0x06	; 6
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:758
  return _result;
}
     9c0:	cd bf       	out	0x3d, r28	; 61
     9c2:	de bf       	out	0x3e, r29	; 62
     9c4:	df 91       	pop	r29
     9c6:	cf 91       	pop	r28
     9c8:	1f 91       	pop	r17
     9ca:	0f 91       	pop	r16
     9cc:	ff 90       	pop	r15
     9ce:	ef 90       	pop	r14
     9d0:	df 90       	pop	r13
     9d2:	cf 90       	pop	r12
     9d4:	bf 90       	pop	r11
     9d6:	af 90       	pop	r10
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:521
  /* Step completed */
  set_cs_stat(UPDI_CS_ASI_KEY_STATUS, UPDI_KEY_UROWWRITE);

  /* If previously in program mode, send unlock key */
  if (bit_is_set(UPDI_CONTROL, UPDI_PROG_bp)) {
    set_nvmprog_key();
     9d8:	08 95       	ret
write_userrow():
     9da:	b3 dd       	rcall	.-1178   	; 0x542 <UPDI::set_nvmprog_key()>
     9dc:	d8 cf       	rjmp	.-80     	; 0x98e <__DATA_REGION_LENGTH__+0x18e>
write_memory():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:328
  if (bit_is_set(UPDI_CONTROL, UPDI::UPDI_INFO_bp)
   && mem_type == JTAG2::MTYPE_XMEGA_USERSIG) // 0xC5
    return UPDI::write_userrow(start_addr, data, byte_count);

  /* From this point on, only program mode is allowed. */
  if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_PROG_bp)) return false;
     9de:	e1 9b       	sbis	0x1c, 1	; 28
     9e0:	b2 cf       	rjmp	.-156    	; 0x946 <__DATA_REGION_LENGTH__+0x146>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:331

  /* About flash regions */
  switch (mem_type) {
     9e2:	80 3b       	cpi	r24, 0xB0	; 176
     9e4:	39 f0       	breq	.+14     	; 0x9f4 <__DATA_REGION_LENGTH__+0x1f4>
     9e6:	08 f4       	brcc	.+2      	; 0x9ea <__DATA_REGION_LENGTH__+0x1ea>
     9e8:	cc c0       	rjmp	.+408    	; 0xb82 <__DATA_REGION_LENGTH__+0x382>
     9ea:	90 e4       	ldi	r25, 0x40	; 64
     9ec:	98 0f       	add	r25, r24
     9ee:	92 30       	cpi	r25, 0x02	; 2
     9f0:	08 f0       	brcs	.+2      	; 0x9f4 <__DATA_REGION_LENGTH__+0x1f4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:337
    case JTAG2::MTYPE_FLASH_PAGE :            // 0xB0
    case JTAG2::MTYPE_XMEGA_APP_FLASH :       // 0xC0
    case JTAG2::MTYPE_XMEGA_BOOT_FLASH : {    // 0xC1

      /* Instructions with mismatched page sizes are rejected */
      if (!check_pagesize(JTAG2::updi_desc.flash_page_size, byte_count)) {
     9f2:	c7 c0       	rjmp	.+398    	; 0xb82 <__DATA_REGION_LENGTH__+0x382>
     9f4:	80 91 6a 38 	lds	r24, 0x386A	; 0x80386a <JTAG2::updi_desc+0x4>
     9f8:	90 91 6b 38 	lds	r25, 0x386B	; 0x80386b <JTAG2::updi_desc+0x5>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:28

  bool write_fuse (uint16_t addr, uint8_t data);
  uint16_t before_addr = ~0;

  bool check_pagesize (uint16_t seed, uint16_t test) {
    while (test != seed) {
     9fc:	9c 01       	movw	r18, r24
check_pagesize():
     9fe:	02 17       	cp	r16, r18
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:29
      seed >>= 1;
     a00:	13 07       	cpc	r17, r19
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:30
      if (seed < 2) return false;
     a02:	09 f4       	brne	.+2      	; 0xa06 <__DATA_REGION_LENGTH__+0x206>
     a04:	b6 c1       	rjmp	.+876    	; 0xd72 <__DATA_REGION_LENGTH__+0x572>
     a06:	36 95       	lsr	r19
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:339
    case JTAG2::MTYPE_XMEGA_BOOT_FLASH : {    // 0xC1

      /* Instructions with mismatched page sizes are rejected */
      if (!check_pagesize(JTAG2::updi_desc.flash_page_size, byte_count)) {
        /* Kill the process with a strong error */
        set_response(JTAG2::RSP_FAILED);
     a08:	27 95       	ror	r18
     a0a:	22 30       	cpi	r18, 0x02	; 2
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:348
      /* A page block must be erased before writing to a new page block.
         The new AVRDUDE splits large page blocks into multiple queries to read-modify-write.
         This prevents atomic operations and requires special handling. */
      bool is_bound = bit_is_clear(UPDI_CONTROL, UPDI::UPDI_ERFM_bp);
      if (is_bound) {
        uint16_t block_addr = (start_addr >> 1) & ~((JTAG2::updi_desc.flash_page_size - 1) >> 1);
     a0c:	31 05       	cpc	r19, r1
     a0e:	b8 f7       	brcc	.-18     	; 0x9fe <__DATA_REGION_LENGTH__+0x1fe>
write_memory():
     a10:	80 ea       	ldi	r24, 0xA0	; 160
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	bf c0       	rjmp	.+382    	; 0xb94 <__DATA_REGION_LENGTH__+0x394>
     a16:	01 97       	sbiw	r24, 0x01	; 1
     a18:	96 95       	lsr	r25
     a1a:	87 95       	ror	r24
     a1c:	9c 01       	movw	r18, r24
     a1e:	20 95       	com	r18
     a20:	30 95       	com	r19
     a22:	d7 01       	movw	r26, r14
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:349
        is_bound = before_addr != block_addr;
     a24:	c6 01       	movw	r24, r12
     a26:	b6 95       	lsr	r27
     a28:	a7 95       	ror	r26
     a2a:	97 95       	ror	r25
     a2c:	87 95       	ror	r24
     a2e:	82 23       	and	r24, r18
     a30:	93 23       	and	r25, r19
     a32:	21 e0       	ldi	r18, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:350
        before_addr = block_addr;
     a34:	40 91 33 38 	lds	r20, 0x3833	; 0x803833 <NVM::before_addr>
     a38:	50 91 34 38 	lds	r21, 0x3834	; 0x803834 <NVM::before_addr+0x1>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:188

  bool write_flash_v4 (uint32_t start_addr, uint8_t *data, size_t byte_count, bool is_bound) {
    /* NVMCTRL version 4 */
    /* If the chip is not erased, erase the page. */
    /* However, only when the beginning of the page boundary is addressed */
    if (is_bound) {
     a3c:	48 17       	cp	r20, r24
     a3e:	59 07       	cpc	r21, r25
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:192
      if (!nvm_ctrl_v3(NVM_V2_CMD_FLPER)) return false;
      if (!UPDI::st8(start_addr, 0xFF)) return false;
    }
    if (!nvm_ctrl_v3(NVM_V2_CMD_FLWR)) return false;
     a40:	09 f4       	brne	.+2      	; 0xa44 <__DATA_REGION_LENGTH__+0x244>
     a42:	20 e0       	ldi	r18, 0x00	; 0
     a44:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <NVM::before_addr>
     a48:	90 93 34 38 	sts	0x3834, r25	; 0x803834 <NVM::before_addr+0x1>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:195

    /* This version allows bulk writes of 512 bytes */
    if (byte_count == 1) UPDI::st8(start_addr, *data);
     a4c:	ec 9b       	sbis	0x1d, 4	; 29
     a4e:	2d c0       	rjmp	.+90     	; 0xaaa <__DATA_REGION_LENGTH__+0x2aa>
write_flash_v4():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:123
      set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
      return true;
    }
    if (!nvm_ctrl_v3(NVM_V2_CMD_EEERWR)) return false;

    if (byte_count == 1) UPDI::st8(start_addr, *data);
     a50:	21 11       	cpse	r18, r1
     a52:	0e c0       	rjmp	.+28     	; 0xa70 <__DATA_REGION_LENGTH__+0x270>
     a54:	82 e0       	ldi	r24, 0x02	; 2
     a56:	87 de       	rcall	.-754    	; 0x766 <NVM::nvm_ctrl_v3(unsigned char)>
     a58:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:189
  bool write_flash_v4 (uint32_t start_addr, uint8_t *data, size_t byte_count, bool is_bound) {
    /* NVMCTRL version 4 */
    /* If the chip is not erased, erase the page. */
    /* However, only when the beginning of the page boundary is addressed */
    if (is_bound) {
      if (!nvm_ctrl_v3(NVM_V2_CMD_FLPER)) return false;
     a5a:	09 f4       	brne	.+2      	; 0xa5e <__DATA_REGION_LENGTH__+0x25e>
     a5c:	74 cf       	rjmp	.-280    	; 0x946 <__DATA_REGION_LENGTH__+0x146>
     a5e:	01 30       	cpi	r16, 0x01	; 1
     a60:	11 05       	cpc	r17, r1
     a62:	91 f4       	brne	.+36     	; 0xa88 <__DATA_REGION_LENGTH__+0x288>
write_eeprom_v4():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:190
      if (!UPDI::st8(start_addr, 0xFF)) return false;
     a64:	40 91 a2 38 	lds	r20, 0x38A2	; 0x8038a2 <JTAG2::packet+0x12>
     a68:	c7 01       	movw	r24, r14
     a6a:	b6 01       	movw	r22, r12
     a6c:	0c dc       	rcall	.-2024   	; 0x286 <UPDI::st8(unsigned long, unsigned char)>
     a6e:	16 c0       	rjmp	.+44     	; 0xa9c <__DATA_REGION_LENGTH__+0x29c>
write_flash_v4():
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	79 de       	rcall	.-782    	; 0x766 <NVM::nvm_ctrl_v3(unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:196
    }
    if (!nvm_ctrl_v3(NVM_V2_CMD_FLWR)) return false;

    /* This version allows bulk writes of 512 bytes */
    if (byte_count == 1) UPDI::st8(start_addr, *data);
    else if ((byte_count - 1) >> 8) UPDI::sts16rsd(start_addr, data, byte_count);
     a74:	88 23       	and	r24, r24
     a76:	09 f4       	brne	.+2      	; 0xa7a <__DATA_REGION_LENGTH__+0x27a>
     a78:	66 cf       	rjmp	.-308    	; 0x946 <__DATA_REGION_LENGTH__+0x146>
     a7a:	4f ef       	ldi	r20, 0xFF	; 255
     a7c:	c7 01       	movw	r24, r14
     a7e:	b6 01       	movw	r22, r12
     a80:	02 dc       	rcall	.-2044   	; 0x286 <UPDI::st8(unsigned long, unsigned char)>
     a82:	81 11       	cpse	r24, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:126
    if (!nvm_ctrl_v3(NVM_V2_CMD_EEERWR)) return false;

    if (byte_count == 1) UPDI::st8(start_addr, *data);
    else UPDI::sts8(start_addr, data, byte_count);

    return nvm_ctrl_v3(NVM_V2_CMD_NOCMD);
     a84:	e7 cf       	rjmp	.-50     	; 0xa54 <__DATA_REGION_LENGTH__+0x254>
     a86:	5f cf       	rjmp	.-322    	; 0x946 <__DATA_REGION_LENGTH__+0x146>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:197
    if (!nvm_ctrl_v3(NVM_V2_CMD_FLWR)) return false;

    /* This version allows bulk writes of 512 bytes */
    if (byte_count == 1) UPDI::st8(start_addr, *data);
    else if ((byte_count - 1) >> 8) UPDI::sts16rsd(start_addr, data, byte_count);
    else UPDI::sts8rsd(start_addr, data, byte_count);
     a88:	c8 01       	movw	r24, r16
     a8a:	01 97       	sbiw	r24, 0x01	; 1
     a8c:	89 2f       	mov	r24, r25
     a8e:	99 27       	eor	r25, r25
     a90:	89 2b       	or	r24, r25
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:356
      }

      /* NVMCTRL processing steps vary depending on the version. */
      if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN4_bp))
        return write_flash_v4(start_addr, data, byte_count, is_bound);
      else if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp))
     a92:	31 f0       	breq	.+12     	; 0xaa0 <__DATA_REGION_LENGTH__+0x2a0>
     a94:	a8 01       	movw	r20, r16
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:206

  bool write_flash_v3 (uint32_t start_addr, uint8_t *data, size_t byte_count, bool is_bound) {
    /* NVMCTRL version 3 or 5 */
    /* If the chip is not erased, erase the page. */
    /* However, only when the beginning of the page boundary is addressed */
    if (is_bound) {
     a96:	c7 01       	movw	r24, r14
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:207
      nvm_wait_v3();
     a98:	b6 01       	movw	r22, r12
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:208
      if (!UPDI::st8(start_addr, 0xFF)) return false;
     a9a:	b0 db       	rcall	.-2208   	; 0x1fc <UPDI::sts16rsd(unsigned long, unsigned char*, unsigned int) [clone .constprop.11]>
write_eeprom_v4():
     a9c:	80 e0       	ldi	r24, 0x00	; 0
     a9e:	20 c0       	rjmp	.+64     	; 0xae0 <__DATA_REGION_LENGTH__+0x2e0>
write_flash_v4():
     aa0:	40 2f       	mov	r20, r16
     aa2:	c7 01       	movw	r24, r14
     aa4:	b6 01       	movw	r22, r12
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:209
      if (!nvm_ctrl_v3(NVM_V3_CMD_FLPER)) return false;
     aa6:	70 db       	rcall	.-2336   	; 0x188 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.21]>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:211
    }
    else if (!nvm_ctrl_v3(NVM_V3_CMD_FLPBCLR)) return false;
     aa8:	f9 cf       	rjmp	.-14     	; 0xa9c <__DATA_REGION_LENGTH__+0x29c>
write_memory():
     aaa:	ed 9b       	sbis	0x1d, 5	; 29
     aac:	22 c0       	rjmp	.+68     	; 0xaf2 <__DATA_REGION_LENGTH__+0x2f2>
write_flash_v3():
     aae:	22 23       	and	r18, r18
     ab0:	c9 f0       	breq	.+50     	; 0xae4 <__DATA_REGION_LENGTH__+0x2e4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:212
    nvm_wait_v3();
     ab2:	4b de       	rcall	.-874    	; 0x74a <NVM::nvm_wait_v3()>
     ab4:	4f ef       	ldi	r20, 0xFF	; 255
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:214

    if (byte_count == 1) UPDI::st8(start_addr, *data);
     ab6:	c7 01       	movw	r24, r14
     ab8:	b6 01       	movw	r22, r12
     aba:	e5 db       	rcall	.-2102   	; 0x286 <UPDI::st8(unsigned long, unsigned char)>
     abc:	88 23       	and	r24, r24
     abe:	09 f4       	brne	.+2      	; 0xac2 <__DATA_REGION_LENGTH__+0x2c2>
     ac0:	42 cf       	rjmp	.-380    	; 0x946 <__DATA_REGION_LENGTH__+0x146>
     ac2:	88 e0       	ldi	r24, 0x08	; 8
     ac4:	50 de       	rcall	.-864    	; 0x766 <NVM::nvm_ctrl_v3(unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:217
    else UPDI::sts8rsd(start_addr, data, byte_count);

    return nvm_ctrl_v3(NVM_V3_CMD_FLPW);
     ac6:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:142
    if (!nvm_ctrl_v3(NVM_V3_CMD_EEPBCLR)) return false;

    if (byte_count == 1) UPDI::st8(start_addr, *data);
    else UPDI::sts8(start_addr, data, byte_count);

    return nvm_ctrl_v3(NVM_V3_CMD_EEPERW);
     ac8:	09 f4       	brne	.+2      	; 0xacc <__DATA_REGION_LENGTH__+0x2cc>
     aca:	3d cf       	rjmp	.-390    	; 0x946 <__DATA_REGION_LENGTH__+0x146>
     acc:	3e de       	rcall	.-900    	; 0x74a <NVM::nvm_wait_v3()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:211
    if (is_bound) {
      nvm_wait_v3();
      if (!UPDI::st8(start_addr, 0xFF)) return false;
      if (!nvm_ctrl_v3(NVM_V3_CMD_FLPER)) return false;
    }
    else if (!nvm_ctrl_v3(NVM_V3_CMD_FLPBCLR)) return false;
     ace:	01 30       	cpi	r16, 0x01	; 1
     ad0:	11 05       	cpc	r17, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:215
    nvm_wait_v3();

    if (byte_count == 1) UPDI::st8(start_addr, *data);
    else UPDI::sts8rsd(start_addr, data, byte_count);
     ad2:	51 f4       	brne	.+20     	; 0xae8 <__DATA_REGION_LENGTH__+0x2e8>
     ad4:	40 91 a2 38 	lds	r20, 0x38A2	; 0x8038a2 <JTAG2::packet+0x12>
     ad8:	c7 01       	movw	r24, r14
     ada:	b6 01       	movw	r22, r12
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:358
      /* NVMCTRL processing steps vary depending on the version. */
      if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN4_bp))
        return write_flash_v4(start_addr, data, byte_count, is_bound);
      else if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp))
        return write_flash_v3(start_addr, data, byte_count, is_bound);
      else if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN2_bp))
     adc:	d4 db       	rcall	.-2136   	; 0x286 <UPDI::st8(unsigned long, unsigned char)>
     ade:	84 e0       	ldi	r24, 0x04	; 4
write_eeprom_v3():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:224

  bool write_flash_v2 (uint32_t start_addr, uint8_t *data, size_t byte_count, bool is_bound) {
    /* NVMCTRL version 2 */
    /* If the chip is not erased, erase the page. */
    /* However, only when the beginning of the page boundary is addressed */
    if (is_bound) {
     ae0:	42 de       	rcall	.-892    	; 0x766 <NVM::nvm_ctrl_v3(unsigned char)>
     ae2:	83 c0       	rjmp	.+262    	; 0xbea <__DATA_REGION_LENGTH__+0x3ea>
write_flash_v3():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:82
    return true;
  }

  /* NVMCTRL version 2 */
  bool nvm_ctrl_v2 (uint8_t nvmcmd) {
    nvm_wait();
     ae4:	8f e0       	ldi	r24, 0x0F	; 15
     ae6:	ee cf       	rjmp	.-36     	; 0xac4 <__DATA_REGION_LENGTH__+0x2c4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:83
    return nvm_ctrl_change(nvmcmd);
     ae8:	40 2f       	mov	r20, r16
     aea:	c7 01       	movw	r24, r14
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:228
    /* However, only when the beginning of the page boundary is addressed */
    if (is_bound) {
      if (!nvm_ctrl_v2(NVM_V2_CMD_FLPER)) return false;
      if (!UPDI::st8(start_addr, 0xFF)) return false;
    }
    if (!nvm_ctrl_v2(NVM_V2_CMD_FLWR)) return false;
     aec:	b6 01       	movw	r22, r12
     aee:	4c db       	rcall	.-2408   	; 0x188 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.21]>
     af0:	f6 cf       	rjmp	.-20     	; 0xade <__DATA_REGION_LENGTH__+0x2de>
write_memory():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:231

    /* This version allows bulk writes of 512 bytes */
    if (byte_count == 1) UPDI::st8(start_addr, *data);
     af2:	ee 9b       	sbis	0x1d, 6	; 29
     af4:	31 c0       	rjmp	.+98     	; 0xb58 <__DATA_REGION_LENGTH__+0x358>
write_flash_v2():
     af6:	21 11       	cpse	r18, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:156
      set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
      return true;
    }
    if (!nvm_ctrl_v2(NVM_V2_CMD_EEERWR)) return false;

    if (byte_count == 1) UPDI::st8(start_addr, *data);
     af8:	0f c0       	rjmp	.+30     	; 0xb18 <__DATA_REGION_LENGTH__+0x318>
nvm_ctrl_v2():
     afa:	3b de       	rcall	.-906    	; 0x772 <NVM::nvm_wait()>
     afc:	82 e0       	ldi	r24, 0x02	; 2
     afe:	7e dc       	rcall	.-1796   	; 0x3fc <NVM::nvm_ctrl_change(unsigned char)>
write_flash_v2():
     b00:	88 23       	and	r24, r24
     b02:	09 f4       	brne	.+2      	; 0xb06 <__DATA_REGION_LENGTH__+0x306>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:82
    return true;
  }

  /* NVMCTRL version 2 */
  bool nvm_ctrl_v2 (uint8_t nvmcmd) {
    nvm_wait();
     b04:	20 cf       	rjmp	.-448    	; 0x946 <__DATA_REGION_LENGTH__+0x146>
     b06:	01 30       	cpi	r16, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:83
    return nvm_ctrl_change(nvmcmd);
     b08:	11 05       	cpc	r17, r1
     b0a:	99 f4       	brne	.+38     	; 0xb32 <__DATA_REGION_LENGTH__+0x332>
write_eeprom_v2():
     b0c:	40 91 a2 38 	lds	r20, 0x38A2	; 0x8038a2 <JTAG2::packet+0x12>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:225
  bool write_flash_v2 (uint32_t start_addr, uint8_t *data, size_t byte_count, bool is_bound) {
    /* NVMCTRL version 2 */
    /* If the chip is not erased, erase the page. */
    /* However, only when the beginning of the page boundary is addressed */
    if (is_bound) {
      if (!nvm_ctrl_v2(NVM_V2_CMD_FLPER)) return false;
     b10:	c7 01       	movw	r24, r14
     b12:	b6 01       	movw	r22, r12
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:226
      if (!UPDI::st8(start_addr, 0xFF)) return false;
     b14:	b8 db       	rcall	.-2192   	; 0x286 <UPDI::st8(unsigned long, unsigned char)>
     b16:	17 c0       	rjmp	.+46     	; 0xb46 <__DATA_REGION_LENGTH__+0x346>
nvm_ctrl_v2():
     b18:	2c de       	rcall	.-936    	; 0x772 <NVM::nvm_wait()>
     b1a:	88 e0       	ldi	r24, 0x08	; 8
     b1c:	6f dc       	rcall	.-1826   	; 0x3fc <NVM::nvm_ctrl_change(unsigned char)>
write_flash_v2():
     b1e:	88 23       	and	r24, r24
     b20:	09 f4       	brne	.+2      	; 0xb24 <__DATA_REGION_LENGTH__+0x324>
     b22:	11 cf       	rjmp	.-478    	; 0x946 <__DATA_REGION_LENGTH__+0x146>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:232
    }
    if (!nvm_ctrl_v2(NVM_V2_CMD_FLWR)) return false;

    /* This version allows bulk writes of 512 bytes */
    if (byte_count == 1) UPDI::st8(start_addr, *data);
    else if ((byte_count - 1) >> 8) UPDI::sts16rsd(start_addr, data, byte_count);
     b24:	4f ef       	ldi	r20, 0xFF	; 255
     b26:	c7 01       	movw	r24, r14
     b28:	b6 01       	movw	r22, r12
     b2a:	ad db       	rcall	.-2214   	; 0x286 <UPDI::st8(unsigned long, unsigned char)>
     b2c:	81 11       	cpse	r24, r1
     b2e:	e5 cf       	rjmp	.-54     	; 0xafa <__DATA_REGION_LENGTH__+0x2fa>
     b30:	0a cf       	rjmp	.-492    	; 0x946 <__DATA_REGION_LENGTH__+0x146>
     b32:	c8 01       	movw	r24, r16
     b34:	01 97       	sbiw	r24, 0x01	; 1
     b36:	89 2f       	mov	r24, r25
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:82
    return true;
  }

  /* NVMCTRL version 2 */
  bool nvm_ctrl_v2 (uint8_t nvmcmd) {
    nvm_wait();
     b38:	99 27       	eor	r25, r25
     b3a:	89 2b       	or	r24, r25
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:83
    return nvm_ctrl_change(nvmcmd);
     b3c:	41 f0       	breq	.+16     	; 0xb4e <__DATA_REGION_LENGTH__+0x34e>
     b3e:	a8 01       	movw	r20, r16
     b40:	c7 01       	movw	r24, r14
     b42:	b6 01       	movw	r22, r12
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:233
    if (!nvm_ctrl_v2(NVM_V2_CMD_FLWR)) return false;

    /* This version allows bulk writes of 512 bytes */
    if (byte_count == 1) UPDI::st8(start_addr, *data);
    else if ((byte_count - 1) >> 8) UPDI::sts16rsd(start_addr, data, byte_count);
    else UPDI::sts8rsd(start_addr, data, byte_count);
     b44:	5b db       	rcall	.-2378   	; 0x1fc <UPDI::sts16rsd(unsigned long, unsigned char*, unsigned int) [clone .constprop.11]>
nvm_ctrl_v2():
     b46:	15 de       	rcall	.-982    	; 0x772 <NVM::nvm_wait()>
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	58 dc       	rcall	.-1872   	; 0x3fc <NVM::nvm_ctrl_change(unsigned char)>
     b4c:	4e c0       	rjmp	.+156    	; 0xbea <__DATA_REGION_LENGTH__+0x3ea>
write_flash_v2():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:242

  bool write_flash_v0 (uint32_t start_addr, uint8_t *data, size_t byte_count, bool is_bound) {
    /* NVMCTRL version 0 */
    /* This version does not require page erasure. */
    /* Just clearing the buffer buffer is sufficient. */
    if (is_bound) {
     b4e:	40 2f       	mov	r20, r16
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:170
    if (byte_count > 64) {
      /* If the limit is exceeded, it will fall back and force a Single-byte write */
      set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
      return true;
    }
    nvm_wait();
     b50:	c7 01       	movw	r24, r14
     b52:	b6 01       	movw	r22, r12
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:172

    if (byte_count == 1) UPDI::st8(start_addr, *data);
     b54:	19 db       	rcall	.-2510   	; 0x188 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.21]>
     b56:	f7 cf       	rjmp	.-18     	; 0xb46 <__DATA_REGION_LENGTH__+0x346>
write_flash_v0():
     b58:	21 11       	cpse	r18, r1
     b5a:	0d c0       	rjmp	.+26     	; 0xb76 <__DATA_REGION_LENGTH__+0x376>
write_eeprom_v0():
     b5c:	0a de       	rcall	.-1004   	; 0x772 <NVM::nvm_wait()>
     b5e:	01 30       	cpi	r16, 0x01	; 1
     b60:	11 05       	cpc	r17, r1
     b62:	09 f0       	breq	.+2      	; 0xb66 <__DATA_REGION_LENGTH__+0x366>
     b64:	b0 c0       	rjmp	.+352    	; 0xcc6 <__DATA_REGION_LENGTH__+0x4c6>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:175
    else UPDI::sts8rsd(start_addr, data, byte_count);

    return nvm_ctrl(NVM_CMD_ERWP);
     b66:	40 91 a2 38 	lds	r20, 0x38A2	; 0x8038a2 <JTAG2::packet+0x12>
     b6a:	c7 01       	movw	r24, r14
     b6c:	b6 01       	movw	r22, r12
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:243
  bool write_flash_v0 (uint32_t start_addr, uint8_t *data, size_t byte_count, bool is_bound) {
    /* NVMCTRL version 0 */
    /* This version does not require page erasure. */
    /* Just clearing the buffer buffer is sufficient. */
    if (is_bound) {
      nvm_wait();
     b6e:	8b db       	rcall	.-2282   	; 0x286 <UPDI::st8(unsigned long, unsigned char)>
     b70:	83 e0       	ldi	r24, 0x03	; 3
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:244
      if (!nvm_ctrl(NVM_CMD_PBC)) return false;
     b72:	3e dc       	rcall	.-1924   	; 0x3f0 <NVM::nvm_ctrl(unsigned char)>
     b74:	3a c0       	rjmp	.+116    	; 0xbea <__DATA_REGION_LENGTH__+0x3ea>
write_flash_v0():
     b76:	fd dd       	rcall	.-1030   	; 0x772 <NVM::nvm_wait()>
     b78:	84 e0       	ldi	r24, 0x04	; 4
     b7a:	3a dc       	rcall	.-1932   	; 0x3f0 <NVM::nvm_ctrl(unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:366
        return write_flash_v0(start_addr, data, byte_count, is_bound);
    }
  }

  /* Other writes are allowed from 1 to 256 bytes */
  if (byte_count == 0 || byte_count > 256) {
     b7c:	81 11       	cpse	r24, r1
     b7e:	ee cf       	rjmp	.-36     	; 0xb5c <__DATA_REGION_LENGTH__+0x35c>
     b80:	e2 ce       	rjmp	.-572    	; 0x946 <__DATA_REGION_LENGTH__+0x146>
write_memory():
     b82:	98 01       	movw	r18, r16
     b84:	21 50       	subi	r18, 0x01	; 1
     b86:	31 09       	sbc	r19, r1
     b88:	2f 3f       	cpi	r18, 0xFF	; 255
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:367
    set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
     b8a:	31 05       	cpc	r19, r1
     b8c:	29 f0       	breq	.+10     	; 0xb98 <__DATA_REGION_LENGTH__+0x398>
     b8e:	20 f0       	brcs	.+8      	; 0xb98 <__DATA_REGION_LENGTH__+0x398>
     b90:	83 ea       	ldi	r24, 0xA3	; 163
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:371
    return true;
  }

  switch (mem_type) {
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	48 dc       	rcall	.-1904   	; 0x426 <JTAG2::set_response(JTAG2::jtag_response_e)>
     b96:	cf ce       	rjmp	.-610    	; 0x936 <__DATA_REGION_LENGTH__+0x136>
     b98:	81 3b       	cpi	r24, 0xB1	; 177
     b9a:	29 f0       	breq	.+10     	; 0xba6 <__DATA_REGION_LENGTH__+0x3a6>
     b9c:	c8 f4       	brcc	.+50     	; 0xbd0 <__DATA_REGION_LENGTH__+0x3d0>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:393
    }
    case JTAG2::MTYPE_XMEGA_EEPROM :          // 0xC4
    case JTAG2::MTYPE_EEPROM_PAGE :           // 0xB1
    case JTAG2::MTYPE_EEPROM : {              // 0x22
      /* NVMCTRL processing steps vary depending on the version. */
      if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN4_bp))
     b9e:	80 32       	cpi	r24, 0x20	; 32
     ba0:	f1 f0       	breq	.+60     	; 0xbde <__DATA_REGION_LENGTH__+0x3de>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:116

  bool write_eeprom_v4 (uint32_t start_addr, uint8_t *data, size_t byte_count) {
    /* NVMCTRL version 4 */
    /* This version cannot be written in bulk transfer */
    /* Only 2 bytes (1 word) can be written at a time */
    if (byte_count > 2) {
     ba2:	82 32       	cpi	r24, 0x22	; 34
     ba4:	c9 f4       	brne	.+50     	; 0xbd8 <__DATA_REGION_LENGTH__+0x3d8>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:121
      /* If the limit is exceeded, it will fall back and force a Single-byte write */
      set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
      return true;
    }
    if (!nvm_ctrl_v3(NVM_V2_CMD_EEERWR)) return false;
     ba6:	ec 9b       	sbis	0x1d, 4	; 29
     ba8:	56 c0       	rjmp	.+172    	; 0xc56 <__DATA_REGION_LENGTH__+0x456>
write_eeprom_v4():
     baa:	03 30       	cpi	r16, 0x03	; 3
     bac:	11 05       	cpc	r17, r1
     bae:	80 f7       	brcc	.-32     	; 0xb90 <__DATA_REGION_LENGTH__+0x390>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:123

    if (byte_count == 1) UPDI::st8(start_addr, *data);
     bb0:	83 e1       	ldi	r24, 0x13	; 19
     bb2:	d9 dd       	rcall	.-1102   	; 0x766 <NVM::nvm_ctrl_v3(unsigned char)>
     bb4:	88 23       	and	r24, r24
     bb6:	09 f4       	brne	.+2      	; 0xbba <__DATA_REGION_LENGTH__+0x3ba>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:124
    else UPDI::sts8(start_addr, data, byte_count);
     bb8:	c6 ce       	rjmp	.-628    	; 0x946 <__DATA_REGION_LENGTH__+0x146>
     bba:	01 30       	cpi	r16, 0x01	; 1
     bbc:	11 05       	cpc	r17, r1
     bbe:	09 f4       	brne	.+2      	; 0xbc2 <__DATA_REGION_LENGTH__+0x3c2>
     bc0:	51 cf       	rjmp	.-350    	; 0xa64 <__DATA_REGION_LENGTH__+0x264>
     bc2:	22 e0       	ldi	r18, 0x02	; 2
     bc4:	42 ea       	ldi	r20, 0xA2	; 162
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:371
  if (byte_count == 0 || byte_count > 256) {
    set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
    return true;
  }

  switch (mem_type) {
     bc6:	58 e3       	ldi	r21, 0x38	; 56
     bc8:	c7 01       	movw	r24, r14
     bca:	b6 01       	movw	r22, r12
     bcc:	99 db       	rcall	.-2254   	; 0x300 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:404
      else
        return write_eeprom_v0(start_addr, data, byte_count);
    }
    default :
      /* Other memory types are rejected */
      set_response(JTAG2::RSP_ILLEGAL_MEMORY_TYPE);
     bce:	66 cf       	rjmp	.-308    	; 0xa9c <__DATA_REGION_LENGTH__+0x29c>
write_memory():
     bd0:	84 3b       	cpi	r24, 0xB4	; 180
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:374
  }

  switch (mem_type) {
    /* Can write to the IO region as is */
    case JTAG2::MTYPE_SRAM : {                // 0x20
      return UPDI::sts8(start_addr, data, byte_count);
     bd2:	68 f0       	brcs	.+26     	; 0xbee <__DATA_REGION_LENGTH__+0x3ee>
     bd4:	84 3c       	cpi	r24, 0xC4	; 196
     bd6:	39 f3       	breq	.-50     	; 0xba6 <__DATA_REGION_LENGTH__+0x3a6>
     bd8:	82 ea       	ldi	r24, 0xA2	; 162
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	db cf       	rjmp	.-74     	; 0xb94 <__DATA_REGION_LENGTH__+0x394>
     bde:	20 2f       	mov	r18, r16
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:83
  }

  /* NVMCTRL version 2 */
  bool nvm_ctrl_v2 (uint8_t nvmcmd) {
    nvm_wait();
    return nvm_ctrl_change(nvmcmd);
     be0:	42 ea       	ldi	r20, 0xA2	; 162
     be2:	58 e3       	ldi	r21, 0x38	; 56
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:381
    /* EEPROM region */
    case JTAG2::MTYPE_LOCK_BITS :             // 0xB3
    case JTAG2::MTYPE_FUSE_BITS : {           // 0xB2
      /* The NVMCTRL version 0 implementation is special. */
      if (bit_is_clear(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp)
      && bit_is_clear(UPDI_NVMCTRL, UPDI::UPDI_GEN2_bp)) {
     be4:	c7 01       	movw	r24, r14
     be6:	b6 01       	movw	r22, r12
     be8:	8b db       	rcall	.-2282   	; 0x300 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)>
nvm_ctrl_v2():
     bea:	18 2f       	mov	r17, r24
     bec:	e1 ce       	rjmp	.-574    	; 0x9b0 <__DATA_REGION_LENGTH__+0x1b0>
write_memory():
     bee:	ed 99       	sbic	0x1d, 5	; 29
     bf0:	da cf       	rjmp	.-76     	; 0xba6 <__DATA_REGION_LENGTH__+0x3a6>
     bf2:	ee 99       	sbic	0x1d, 6	; 29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:100

  bool write_fuse (uint16_t addr, uint8_t data) {
    /* Version 0 of FUSE can write one byte at a time in a special way */
    struct fuse_packet_t { uint16_t data; uint16_t addr; } fuse_packet;
    fuse_packet.data = data;
    fuse_packet.addr = addr;
     bf4:	d8 cf       	rjmp	.-80     	; 0xba6 <__DATA_REGION_LENGTH__+0x3a6>
     bf6:	c8 01       	movw	r24, r16
     bf8:	80 57       	subi	r24, 0x70	; 112
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:99
   **********************************************/

  bool write_fuse (uint16_t addr, uint8_t data) {
    /* Version 0 of FUSE can write one byte at a time in a special way */
    struct fuse_packet_t { uint16_t data; uint16_t addr; } fuse_packet;
    fuse_packet.data = data;
     bfa:	97 4c       	sbci	r25, 0xC7	; 199
     bfc:	5c 01       	movw	r10, r24
     bfe:	00 e9       	ldi	r16, 0x90	; 144
     c00:	18 e3       	ldi	r17, 0x38	; 56
write_fuse():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:100
    fuse_packet.addr = addr;
     c02:	f6 01       	movw	r30, r12
     c04:	e0 59       	subi	r30, 0x90	; 144
     c06:	f8 43       	sbci	r31, 0x38	; 56
     c08:	6f 01       	movw	r12, r30
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:101
    nvm_wait();
     c0a:	f8 01       	movw	r30, r16
     c0c:	82 89       	ldd	r24, Z+18	; 0x12
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:102
    if (!UPDI::sts8(NVMCTRL_REG_DATA,
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	89 83       	std	Y+1, r24	; 0x01
     c12:	9a 83       	std	Y+2, r25	; 0x02
     c14:	c6 01       	movw	r24, r12
     c16:	80 0f       	add	r24, r16
     c18:	91 1f       	adc	r25, r17
     c1a:	8b 83       	std	Y+3, r24	; 0x03
     c1c:	9c 83       	std	Y+4, r25	; 0x04
     c1e:	a9 dd       	rcall	.-1198   	; 0x772 <NVM::nvm_wait()>
     c20:	24 e0       	ldi	r18, 0x04	; 4
     c22:	ae 01       	movw	r20, r28
     c24:	4f 5f       	subi	r20, 0xFF	; 255
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:104
      (uint8_t*)&fuse_packet, sizeof(fuse_packet))) return false;
    if (!nvm_ctrl(NVM_CMD_WFU)) return false;
     c26:	5f 4f       	sbci	r21, 0xFF	; 255
     c28:	66 e0       	ldi	r22, 0x06	; 6
     c2a:	70 e1       	ldi	r23, 0x10	; 16
     c2c:	80 e0       	ldi	r24, 0x00	; 0
     c2e:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:105
    return ((nvm_wait() & 7) == 0);
     c30:	67 db       	rcall	.-2354   	; 0x300 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)>
     c32:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:383
    case JTAG2::MTYPE_FUSE_BITS : {           // 0xB2
      /* The NVMCTRL version 0 implementation is special. */
      if (bit_is_clear(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp)
      && bit_is_clear(UPDI_NVMCTRL, UPDI::UPDI_GEN2_bp)) {
        do {
          if (!write_fuse(start_addr++, *data++)) return false;
     c34:	09 f4       	brne	.+2      	; 0xc38 <__DATA_REGION_LENGTH__+0x438>
     c36:	87 ce       	rjmp	.-754    	; 0x946 <__DATA_REGION_LENGTH__+0x146>
     c38:	87 e0       	ldi	r24, 0x07	; 7
     c3a:	da db       	rcall	.-2124   	; 0x3f0 <NVM::nvm_ctrl(unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:384
        } while (--byte_count);
     c3c:	88 23       	and	r24, r24
     c3e:	09 f4       	brne	.+2      	; 0xc42 <__DATA_REGION_LENGTH__+0x442>
     c40:	82 ce       	rjmp	.-764    	; 0x946 <__DATA_REGION_LENGTH__+0x146>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:395
    case JTAG2::MTYPE_EEPROM_PAGE :           // 0xB1
    case JTAG2::MTYPE_EEPROM : {              // 0x22
      /* NVMCTRL processing steps vary depending on the version. */
      if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN4_bp))
        return write_eeprom_v4(start_addr, data, byte_count);
      else if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp))
     c42:	97 dd       	rcall	.-1234   	; 0x772 <NVM::nvm_wait()>
write_memory():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:132
  }

  bool write_eeprom_v3 (uint32_t start_addr, uint8_t *data, size_t byte_count) {
    /* NVMCTRL version 3 or 5 */
    /* This version can write 8 bytes in bulk */
    if (byte_count > 8) {
     c44:	87 70       	andi	r24, 0x07	; 7
     c46:	09 f0       	breq	.+2      	; 0xc4a <__DATA_REGION_LENGTH__+0x44a>
     c48:	7e ce       	rjmp	.-772    	; 0x946 <__DATA_REGION_LENGTH__+0x146>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:137
      /* If the limit is exceeded, it will fall back and force a Single-byte write */
      set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
      return true;
    }
    if (!nvm_ctrl_v3(NVM_V3_CMD_EEPBCLR)) return false;
     c4a:	0f 5f       	subi	r16, 0xFF	; 255
     c4c:	1f 4f       	sbci	r17, 0xFF	; 255
     c4e:	a0 16       	cp	r10, r16
     c50:	b1 06       	cpc	r11, r17
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:139

    if (byte_count == 1) UPDI::st8(start_addr, *data);
     c52:	d9 f6       	brne	.-74     	; 0xc0a <__DATA_REGION_LENGTH__+0x40a>
     c54:	70 ce       	rjmp	.-800    	; 0x936 <__DATA_REGION_LENGTH__+0x136>
     c56:	ed 9b       	sbis	0x1d, 5	; 29
     c58:	1a c0       	rjmp	.+52     	; 0xc8e <__DATA_REGION_LENGTH__+0x48e>
write_eeprom_v3():
     c5a:	09 30       	cpi	r16, 0x09	; 9
     c5c:	11 05       	cpc	r17, r1
     c5e:	08 f0       	brcs	.+2      	; 0xc62 <__DATA_REGION_LENGTH__+0x462>
     c60:	97 cf       	rjmp	.-210    	; 0xb90 <__DATA_REGION_LENGTH__+0x390>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:142
    else UPDI::sts8(start_addr, data, byte_count);

    return nvm_ctrl_v3(NVM_V3_CMD_EEPERW);
     c62:	8f e1       	ldi	r24, 0x1F	; 31
     c64:	80 dd       	rcall	.-1280   	; 0x766 <NVM::nvm_ctrl_v3(unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:140
      return true;
    }
    if (!nvm_ctrl_v3(NVM_V3_CMD_EEPBCLR)) return false;

    if (byte_count == 1) UPDI::st8(start_addr, *data);
    else UPDI::sts8(start_addr, data, byte_count);
     c66:	88 23       	and	r24, r24
     c68:	09 f4       	brne	.+2      	; 0xc6c <__DATA_REGION_LENGTH__+0x46c>
     c6a:	6d ce       	rjmp	.-806    	; 0x946 <__DATA_REGION_LENGTH__+0x146>
     c6c:	01 30       	cpi	r16, 0x01	; 1
     c6e:	11 05       	cpc	r17, r1
     c70:	39 f4       	brne	.+14     	; 0xc80 <__DATA_REGION_LENGTH__+0x480>
     c72:	40 91 a2 38 	lds	r20, 0x38A2	; 0x8038a2 <JTAG2::packet+0x12>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:397
      /* NVMCTRL processing steps vary depending on the version. */
      if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN4_bp))
        return write_eeprom_v4(start_addr, data, byte_count);
      else if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp))
        return write_eeprom_v3(start_addr, data, byte_count);
      else if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN2_bp))
     c76:	c7 01       	movw	r24, r14
     c78:	b6 01       	movw	r22, r12
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:149

  bool write_eeprom_v2 (uint32_t start_addr, uint8_t *data, size_t byte_count) {
    /* NVMCTRL version 2 */
    /* This version cannot be written in bulk transfer */
    /* Only 2 bytes (1 word) can be written at a time */
    if (byte_count > 2) {
     c7a:	05 db       	rcall	.-2550   	; 0x286 <UPDI::st8(unsigned long, unsigned char)>
     c7c:	85 e1       	ldi	r24, 0x15	; 21
     c7e:	30 cf       	rjmp	.-416    	; 0xae0 <__DATA_REGION_LENGTH__+0x2e0>
     c80:	20 2f       	mov	r18, r16
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:82
    return true;
  }

  /* NVMCTRL version 2 */
  bool nvm_ctrl_v2 (uint8_t nvmcmd) {
    nvm_wait();
     c82:	42 ea       	ldi	r20, 0xA2	; 162
     c84:	58 e3       	ldi	r21, 0x38	; 56
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:83
    return nvm_ctrl_change(nvmcmd);
     c86:	c7 01       	movw	r24, r14
     c88:	b6 01       	movw	r22, r12
     c8a:	3a db       	rcall	.-2444   	; 0x300 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:154
    if (byte_count > 2) {
      /* If the limit is exceeded, it will fall back and force a Single-byte write */
      set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
      return true;
    }
    if (!nvm_ctrl_v2(NVM_V2_CMD_EEERWR)) return false;
     c8c:	f7 cf       	rjmp	.-18     	; 0xc7c <__DATA_REGION_LENGTH__+0x47c>
write_memory():
     c8e:	ee 9b       	sbis	0x1d, 6	; 29
     c90:	15 c0       	rjmp	.+42     	; 0xcbc <__DATA_REGION_LENGTH__+0x4bc>
write_eeprom_v2():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:156

    if (byte_count == 1) UPDI::st8(start_addr, *data);
     c92:	03 30       	cpi	r16, 0x03	; 3
     c94:	11 05       	cpc	r17, r1
     c96:	08 f0       	brcs	.+2      	; 0xc9a <__DATA_REGION_LENGTH__+0x49a>
     c98:	7b cf       	rjmp	.-266    	; 0xb90 <__DATA_REGION_LENGTH__+0x390>
nvm_ctrl_v2():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:157
    else UPDI::sts8(start_addr, data, byte_count);
     c9a:	6b dd       	rcall	.-1322   	; 0x772 <NVM::nvm_wait()>
     c9c:	83 e1       	ldi	r24, 0x13	; 19
     c9e:	ae db       	rcall	.-2212   	; 0x3fc <NVM::nvm_ctrl_change(unsigned char)>
write_eeprom_v2():
     ca0:	88 23       	and	r24, r24
     ca2:	09 f4       	brne	.+2      	; 0xca6 <__DATA_REGION_LENGTH__+0x4a6>
     ca4:	50 ce       	rjmp	.-864    	; 0x946 <__DATA_REGION_LENGTH__+0x146>
     ca6:	01 30       	cpi	r16, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:165
  }

  bool write_eeprom_v0 (uint32_t start_addr, uint8_t *data, size_t byte_count) {
    /* NVMCTRL version 0 */
    /* This version allows fast bulk writes of 32 or 64 bytes */
    if (byte_count > 64) {
     ca8:	11 05       	cpc	r17, r1
     caa:	09 f4       	brne	.+2      	; 0xcae <__DATA_REGION_LENGTH__+0x4ae>
     cac:	2f cf       	rjmp	.-418    	; 0xb0c <__DATA_REGION_LENGTH__+0x30c>
     cae:	22 e0       	ldi	r18, 0x02	; 2
     cb0:	42 ea       	ldi	r20, 0xA2	; 162
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:173
      return true;
    }
    nvm_wait();

    if (byte_count == 1) UPDI::st8(start_addr, *data);
    else UPDI::sts8rsd(start_addr, data, byte_count);
     cb2:	58 e3       	ldi	r21, 0x38	; 56
     cb4:	c7 01       	movw	r24, r14
     cb6:	b6 01       	movw	r22, r12
     cb8:	23 db       	rcall	.-2490   	; 0x300 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)>
     cba:	45 cf       	rjmp	.-374    	; 0xb46 <__DATA_REGION_LENGTH__+0x346>
write_eeprom_v0():
     cbc:	01 34       	cpi	r16, 0x41	; 65
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:743
      case UPDI_CMD_WRITE_MEMORY : {
        _result = NVM::write_memory();
        break;
      }
      case UPDI_CMD_ERASE : {
        if (JTAG2::packet.body[JTAG2::MEM_TYPE] == JTAG2::XMEGA_ERASE_CHIP) {
     cbe:	11 05       	cpc	r17, r1
     cc0:	08 f4       	brcc	.+2      	; 0xcc4 <__DATA_REGION_LENGTH__+0x4c4>
     cc2:	4c cf       	rjmp	.-360    	; 0xb5c <__DATA_REGION_LENGTH__+0x35c>
     cc4:	65 cf       	rjmp	.-310    	; 0xb90 <__DATA_REGION_LENGTH__+0x390>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:542
 ****************************/

// __attribute__((optimize("O0")))
bool UPDI::chip_erase (void) {
  /* If UPDI is prohibited, try HV control */
  if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) {
     cc6:	40 2f       	mov	r20, r16
     cc8:	c7 01       	movw	r24, r14
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:414
  return loop_until_key_stat_is_set(UPDI_KEY_NVMPROG);
}

/* __attribute__((optimize("O0"))) */
bool UPDI::set_erase_key (void) {
  if (!send_bytes(erase_key, sizeof(erase_key))) return false;
     cca:	b6 01       	movw	r22, r12
     ccc:	5d da       	rcall	.-2886   	; 0x188 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.21]>
     cce:	50 cf       	rjmp	.-352    	; 0xb70 <__DATA_REGION_LENGTH__+0x370>
_ZN4UPDI7runtimeEh():
     cd0:	80 91 99 38 	lds	r24, 0x3899	; 0x803899 <JTAG2::packet+0x9>
     cd4:	81 11       	cpse	r24, r1
     cd6:	6d ce       	rjmp	.-806    	; 0x9b2 <__DATA_REGION_LENGTH__+0x1b2>
chip_erase():
     cd8:	e0 9b       	sbis	0x1c, 0	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:415
  return loop_until_key_stat_is_set(UPDI_KEY_CHIPERASE);
     cda:	41 c0       	rjmp	.+130    	; 0xd5e <__DATA_REGION_LENGTH__+0x55e>
set_erase_key():
     cdc:	6a e0       	ldi	r22, 0x0A	; 10
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:547
  if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) {
    HV_Pulse();
  }

  /* Transition to CHIPERASE mode by system reset */
  if (!set_erase_key()) return false;
     cde:	85 e3       	ldi	r24, 0x35	; 53
     ce0:	98 e3       	ldi	r25, 0x38	; 56
     ce2:	39 da       	rcall	.-2958   	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:550

  /* Issue a system reset */
  if (!updi_reset(true) || !updi_reset(false)) return false;
     ce4:	88 23       	and	r24, r24
     ce6:	09 f4       	brne	.+2      	; 0xcea <__DATA_REGION_LENGTH__+0x4ea>
     ce8:	e1 cd       	rjmp	.-1086   	; 0x8ac <__DATA_REGION_LENGTH__+0xac>
     cea:	88 e0       	ldi	r24, 0x08	; 8
     cec:	12 dc       	rcall	.-2012   	; 0x512 <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.24]>
chip_erase():
     cee:	88 23       	and	r24, r24
     cf0:	09 f4       	brne	.+2      	; 0xcf4 <__DATA_REGION_LENGTH__+0x4f4>
     cf2:	dc cd       	rjmp	.-1096   	; 0x8ac <__DATA_REGION_LENGTH__+0xac>
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	47 db       	rcall	.-2418   	; 0x386 <UPDI::updi_reset(bool)>
     cf8:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:553

  /* If LOCKSTATUS is clear, the chip is unlocked */
  loop_until_sys_stat_is_clear(UPDI_SYS_LOCKSTATUS);
     cfa:	09 f4       	brne	.+2      	; 0xcfe <__DATA_REGION_LENGTH__+0x4fe>
     cfc:	d7 cd       	rjmp	.-1106   	; 0x8ac <__DATA_REGION_LENGTH__+0xac>
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	42 db       	rcall	.-2428   	; 0x386 <UPDI::updi_reset(bool)>
     d02:	88 23       	and	r24, r24
     d04:	09 f4       	brne	.+2      	; 0xd08 <__DATA_REGION_LENGTH__+0x508>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:308
  send_bytes(set_ptr, sizeof(set_ptr));
  return RECV();
}

bool UPDI::is_cs_stat (uint8_t code, uint8_t check) {
  return check == (get_cs_stat(code) & check);
     d06:	d2 cd       	rjmp	.-1116   	; 0x8ac <__DATA_REGION_LENGTH__+0xac>
     d08:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:382
bool UPDI::loop_until_key_stat_is_clear (uint8_t bitmap, uint16_t limit) {
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  uint16_t _back = _send_ptr;
  #endif
  do {
    if (!is_key_stat(bitmap)) return true;
     d0a:	60 e0       	ldi	r22, 0x00	; 0
     d0c:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.10/cores/megaAVR/api/delay_busywait.h:31
     d0e:	3b dc       	rcall	.-1930   	; 0x586 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
     d10:	10 e0       	ldi	r17, 0x00	; 0
     d12:	00 e0       	ldi	r16, 0x00	; 0
is_cs_stat():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:387
    #ifdef ENABLE_DEBUG_UPDI_SENDER
    _send_ptr = _back;
    #endif
    TIM::delay_50us();
  } while (--limit);
     d14:	87 e0       	ldi	r24, 0x07	; 7
     d16:	af da       	rcall	.-2722   	; 0x276 <UPDI::get_cs_stat(unsigned char)>
loop_until_key_stat_is_clear():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:559

  /* Make sure the CHER bit is cleared before next reset */
  loop_until_key_stat_is_clear(UPDI_KEY_CHIPERASE);

  /* Chip erasure was successful */
  bit_set(UPDI_CONTROL, UPDI_ERFM_bp);
     d18:	83 ff       	sbrs	r24, 3
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:563

  /* Once the HV control and device is successfully unlocked, */
  /* you should be able to enter program mode. */
  if (!set_nvmprog_key()) return false;
     d1a:	07 c0       	rjmp	.+14     	; 0xd2a <__DATA_REGION_LENGTH__+0x52a>
delay_micros():
     d1c:	f6 ea       	ldi	r31, 0xA6	; 166
     d1e:	fa 95       	dec	r31
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:564
  if (!updi_reset(true) || !updi_reset(false)) return false;
     d20:	f1 f7       	brne	.-4      	; 0xd1e <__DATA_REGION_LENGTH__+0x51e>
     d22:	00 c0       	rjmp	.+0      	; 0xd24 <__DATA_REGION_LENGTH__+0x524>
loop_until_key_stat_is_clear():
     d24:	01 50       	subi	r16, 0x01	; 1
     d26:	11 09       	sbc	r17, r1
     d28:	a9 f7       	brne	.-22     	; 0xd14 <__DATA_REGION_LENGTH__+0x514>
chip_erase():
     d2a:	e2 9a       	sbi	0x1c, 2	; 28
     d2c:	0a dc       	rcall	.-2028   	; 0x542 <UPDI::set_nvmprog_key()>
     d2e:	88 23       	and	r24, r24
     d30:	09 f4       	brne	.+2      	; 0xd34 <__DATA_REGION_LENGTH__+0x534>
     d32:	bc cd       	rjmp	.-1160   	; 0x8ac <__DATA_REGION_LENGTH__+0xac>
     d34:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:565
  loop_until_sys_stat_is_clear(UPDI_SYS_LOCKSTATUS);
     d36:	27 db       	rcall	.-2482   	; 0x386 <UPDI::updi_reset(bool)>
     d38:	88 23       	and	r24, r24
     d3a:	09 f4       	brne	.+2      	; 0xd3e <__DATA_REGION_LENGTH__+0x53e>
     d3c:	b7 cd       	rjmp	.-1170   	; 0x8ac <__DATA_REGION_LENGTH__+0xac>
     d3e:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:566
  loop_until_sys_stat_is_set(UPDI_SYS_NVMPROG);
     d40:	22 db       	rcall	.-2492   	; 0x386 <UPDI::updi_reset(bool)>
     d42:	88 23       	and	r24, r24
     d44:	09 f4       	brne	.+2      	; 0xd48 <__DATA_REGION_LENGTH__+0x548>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:569

  /* After performing HV control, it is necessary to obtain SIB */
  bit_clear(UPDI_CONTROL, UPDI_INFO_bp);
     d46:	b2 cd       	rjmp	.-1180   	; 0x8ac <__DATA_REGION_LENGTH__+0xac>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:570
  bit_set(UPDI_CONTROL, UPDI_PROG_bp);
     d48:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:571
  return enter_updi(true);
     d4a:	60 e0       	ldi	r22, 0x00	; 0
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	1b dc       	rcall	.-1994   	; 0x586 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
     d50:	88 e0       	ldi	r24, 0x08	; 8
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:543

// __attribute__((optimize("O0")))
bool UPDI::chip_erase (void) {
  /* If UPDI is prohibited, try HV control */
  if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) {
    HV_Pulse();
     d52:	01 dc       	rcall	.-2046   	; 0x556 <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.28]>
     d54:	e0 98       	cbi	0x1c, 0	; 28
     d56:	e1 9a       	sbi	0x1c, 1	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:749
          _result = chip_erase();
        }
        break;
      }
      case UPDI_CMD_GO : {
        _result = Target_Reset(true) && Target_Reset(false);
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	6b dc       	rcall	.-1834   	; 0x632 <UPDI::enter_updi(bool)>
     d5c:	73 cd       	rjmp	.-1306   	; 0x844 <__DATA_REGION_LENGTH__+0x44>
     d5e:	2a dc       	rcall	.-1964   	; 0x5b4 <UPDI::HV_Pulse()>
     d60:	bd cf       	rjmp	.-134    	; 0xcdc <__DATA_REGION_LENGTH__+0x4dc>
_ZN4UPDI7runtimeEh():
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	15 db       	rcall	.-2518   	; 0x390 <UPDI::Target_Reset(bool)>
     d66:	88 23       	and	r24, r24
     d68:	09 f4       	brne	.+2      	; 0xd6c <__DATA_REGION_LENGTH__+0x56c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:347

      /* A page block must be erased before writing to a new page block.
         The new AVRDUDE splits large page blocks into multiple queries to read-modify-write.
         This prevents atomic operations and requires special handling. */
      bool is_bound = bit_is_clear(UPDI_CONTROL, UPDI::UPDI_ERFM_bp);
      if (is_bound) {
     d6a:	6c cd       	rjmp	.-1320   	; 0x844 <__DATA_REGION_LENGTH__+0x44>
     d6c:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:346
      }

      /* A page block must be erased before writing to a new page block.
         The new AVRDUDE splits large page blocks into multiple queries to read-modify-write.
         This prevents atomic operations and requires special handling. */
      bool is_bound = bit_is_clear(UPDI_CONTROL, UPDI::UPDI_ERFM_bp);
     d6e:	10 db       	rcall	.-2528   	; 0x390 <UPDI::Target_Reset(bool)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:704

/**********************
 * UPDI authorization *
 **********************/

bool UPDI::updi_activate (bool hv_active) {
     d70:	69 cd       	rjmp	.-1326   	; 0x844 <__DATA_REGION_LENGTH__+0x44>
write_memory():
     d72:	e2 9b       	sbis	0x1c, 2	; 28
     d74:	50 ce       	rjmp	.-864    	; 0xa16 <__DATA_REGION_LENGTH__+0x216>
_ZN4UPDI7runtimeEh():
     d76:	20 e0       	ldi	r18, 0x00	; 0
     d78:	69 ce       	rjmp	.-814    	; 0xa4c <__DATA_REGION_LENGTH__+0x24c>

00000d7a <UPDI::updi_activate(bool)>:
_ZN4UPDI13updi_activateEb():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:705
  volatile uint8_t count = 4;
     d7a:	cf 93       	push	r28
     d7c:	df 93       	push	r29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:706
  while (--count && bit_is_clear(UPDI_CONTROL, UPDI_PROG_bp)) {
     d7e:	00 d0       	rcall	.+0      	; 0xd80 <UPDI::updi_activate(bool)+0x6>
     d80:	cd b7       	in	r28, 0x3d	; 61
     d82:	de b7       	in	r29, 0x3e	; 62
     d84:	8a 83       	std	Y+2, r24	; 0x02
     d86:	84 e0       	ldi	r24, 0x04	; 4
     d88:	89 83       	std	Y+1, r24	; 0x01
     d8a:	89 81       	ldd	r24, Y+1	; 0x01
     d8c:	81 50       	subi	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:709
    /* For the second lap, forced HV control is enabled by the CMND_RESET parameter */
    /* For the third lap, forced HV control of JP short is allowed. */
    if ((count == 2 && hv_active)
     d8e:	89 83       	std	Y+1, r24	; 0x01
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:710
     || (count == 1 && JTAG2::updi_desc.hvupdi_variant != '1' 
     d90:	88 23       	and	r24, r24
     d92:	09 f4       	brne	.+2      	; 0xd96 <UPDI::updi_activate(bool)+0x1c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:709
bool UPDI::updi_activate (bool hv_active) {
  volatile uint8_t count = 4;
  while (--count && bit_is_clear(UPDI_CONTROL, UPDI_PROG_bp)) {
    /* For the second lap, forced HV control is enabled by the CMND_RESET parameter */
    /* For the third lap, forced HV control of JP short is allowed. */
    if ((count == 2 && hv_active)
     d94:	3a c0       	rjmp	.+116    	; 0xe0a <UPDI::updi_activate(bool)+0x90>
     d96:	e1 99       	sbic	0x1c, 1	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:710
     || (count == 1 && JTAG2::updi_desc.hvupdi_variant != '1' 
     d98:	38 c0       	rjmp	.+112    	; 0xe0a <UPDI::updi_activate(bool)+0x90>
     d9a:	89 81       	ldd	r24, Y+1	; 0x01
     d9c:	82 30       	cpi	r24, 0x02	; 2
     d9e:	19 f4       	brne	.+6      	; 0xda6 <UPDI::updi_activate(bool)+0x2c>
     da0:	2a 81       	ldd	r18, Y+2	; 0x02
     da2:	21 11       	cpse	r18, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:712
                    && !digitalRead(JP_SENSE_PIN))) {
      bit_set(UPDI_CONTROL, UPDI_FCHV_bp);
     da4:	08 c0       	rjmp	.+16     	; 0xdb6 <UPDI::updi_activate(bool)+0x3c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:714
    }
    if (setjmp(TIM::CONTEXT) == 0) {
     da6:	89 81       	ldd	r24, Y+1	; 0x01
     da8:	81 30       	cpi	r24, 0x01	; 1
     daa:	31 f4       	brne	.+12     	; 0xdb8 <UPDI::updi_activate(bool)+0x3e>
     dac:	80 91 68 38 	lds	r24, 0x3868	; 0x803868 <JTAG2::updi_desc+0x2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:106
/*
 * Timeout control
 */

void TIM::Timeout_Start (uint16_t _ms) {
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     db0:	81 33       	cpi	r24, 0x31	; 49
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     db2:	11 f0       	breq	.+4      	; 0xdb8 <UPDI::updi_activate(bool)+0x3e>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:107
    TCB0_CNT = 0;
     db4:	53 9b       	sbis	0x0a, 3	; 10
     db6:	e4 9a       	sbi	0x1c, 4	; 28
     db8:	8e e4       	ldi	r24, 0x4E	; 78
     dba:	98 e3       	ldi	r25, 0x38	; 56
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:108
    TCB0_CCMP = _ms >> 2;
     dbc:	d1 d3       	rcall	.+1954   	; 0x1560 <setjmp>
     dbe:	89 2b       	or	r24, r25
     dc0:	11 f5       	brne	.+68     	; 0xe06 <UPDI::updi_activate(bool)+0x8c>
Timeout_Start():
     dc2:	8f b7       	in	r24, 0x3f	; 63
__iCliRetVal():
     dc4:	f8 94       	cli
Timeout_Start():
     dc6:	ea e8       	ldi	r30, 0x8A	; 138
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:109
    TCB0_INTCTRL = TCB_CAPT_bm;
     dc8:	fa e0       	ldi	r31, 0x0A	; 10
     dca:	10 82       	st	Z, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:110
    TCB0_INTFLAGS = TCB_CAPT_bm;
     dcc:	11 82       	std	Z+1, r1	; 0x01
     dce:	2f e1       	ldi	r18, 0x1F	; 31
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:111
    TCB0_CTRLA = TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	ec e8       	ldi	r30, 0x8C	; 140
     dd4:	fa e0       	ldi	r31, 0x0A	; 10
     dd6:	20 83       	st	Z, r18
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     dd8:	31 83       	std	Z+1, r19	; 0x01
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:716
      TIM::Timeout_Start(125);
      enter_updi(false) && enter_prog();
     dda:	21 e0       	ldi	r18, 0x01	; 1
     ddc:	e5 e8       	ldi	r30, 0x85	; 133
     dde:	fa e0       	ldi	r31, 0x0A	; 10
     de0:	20 83       	st	Z, r18
     de2:	e6 e8       	ldi	r30, 0x86	; 134
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:684
/******************************
 * Programming control starts *
 ******************************/

bool UPDI::enter_prog (void) {
  if (bit_is_clear(UPDI_CONTROL, UPDI_PROG_bp)) {
     de4:	fa e0       	ldi	r31, 0x0A	; 10
     de6:	20 83       	st	Z, r18
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:685
    if (!(UPDI_LASTL & UPDI_SYS_NVMPROG)) {
     de8:	2f e0       	ldi	r18, 0x0F	; 15
     dea:	e0 e8       	ldi	r30, 0x80	; 128
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:694
      }
      if (!updi_reset(true) || !updi_reset(false)) return false;
      loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
      loop_until_sys_stat_is_set(UPDI_SYS_NVMPROG);
    }
    bit_set(UPDI_CONTROL, UPDI_INFO_bp);
     dec:	fa e0       	ldi	r31, 0x0A	; 10
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:695
    bit_set(UPDI_CONTROL, UPDI_PROG_bp);
     dee:	20 83       	st	Z, r18
__iRestore():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:718
    }
    if (setjmp(TIM::CONTEXT) == 0) {
      TIM::Timeout_Start(125);
      enter_updi(false) && enter_prog();
    }
    TIM::Timeout_Stop();
     df0:	8f bf       	out	0x3f, r24	; 63
_ZN4UPDI13updi_activateEb():
     df2:	80 e0       	ldi	r24, 0x00	; 0
     df4:	1e dc       	rcall	.-1988   	; 0x632 <UPDI::enter_updi(bool)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:720
  }
  return bit_is_set(UPDI_CONTROL, UPDI_PROG_bp);
     df6:	88 23       	and	r24, r24
     df8:	31 f0       	breq	.+12     	; 0xe06 <UPDI::updi_activate(bool)+0x8c>
enter_prog():
     dfa:	e1 99       	sbic	0x1c, 1	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:721
}
     dfc:	04 c0       	rjmp	.+8      	; 0xe06 <UPDI::updi_activate(bool)+0x8c>
     dfe:	f3 9b       	sbis	0x1e, 3	; 30
     e00:	0c c0       	rjmp	.+24     	; 0xe1a <UPDI::updi_activate(bool)+0xa0>
     e02:	e0 9a       	sbi	0x1c, 0	; 28
     e04:	e1 9a       	sbi	0x1c, 1	; 28
_ZN4UPDI13updi_activateEb():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:686
 ******************************/

bool UPDI::enter_prog (void) {
  if (bit_is_clear(UPDI_CONTROL, UPDI_PROG_bp)) {
    if (!(UPDI_LASTL & UPDI_SYS_NVMPROG)) {
      if (UPDI_LASTL & UPDI_SYS_LOCKSTATUS) return false;
     e06:	ea da       	rcall	.-2604   	; 0x3dc <TIM::Timeout_Stop()>
     e08:	c0 cf       	rjmp	.-128    	; 0xd8a <UPDI::updi_activate(bool)+0x10>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:308
  send_bytes(set_ptr, sizeof(set_ptr));
  return RECV();
}

bool UPDI::is_cs_stat (uint8_t code, uint8_t check) {
  return check == (get_cs_stat(code) & check);
     e0a:	8c b3       	in	r24, 0x1c	; 28
     e0c:	86 95       	lsr	r24
     e0e:	81 70       	andi	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:687

bool UPDI::enter_prog (void) {
  if (bit_is_clear(UPDI_CONTROL, UPDI_PROG_bp)) {
    if (!(UPDI_LASTL & UPDI_SYS_NVMPROG)) {
      if (UPDI_LASTL & UPDI_SYS_LOCKSTATUS) return false;
      if (!is_key_stat(UPDI_KEY_NVMPROG)) {
     e10:	0f 90       	pop	r0
     e12:	0f 90       	pop	r0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:690
        if (!set_nvmprog_key()) return false;
      }
      if (!updi_reset(true) || !updi_reset(false)) return false;
     e14:	df 91       	pop	r29
     e16:	cf 91       	pop	r28
     e18:	08 95       	ret
enter_prog():
     e1a:	f0 99       	sbic	0x1e, 0	; 30
     e1c:	f4 cf       	rjmp	.-24     	; 0xe06 <UPDI::updi_activate(bool)+0x8c>
is_cs_stat():
     e1e:	87 e0       	ldi	r24, 0x07	; 7
     e20:	2a da       	rcall	.-2988   	; 0x276 <UPDI::get_cs_stat(unsigned char)>
enter_prog():
     e22:	84 ff       	sbrs	r24, 4
     e24:	0f c0       	rjmp	.+30     	; 0xe44 <UPDI::updi_activate(bool)+0xca>
     e26:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:691
      loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
     e28:	ae da       	rcall	.-2724   	; 0x386 <UPDI::updi_reset(bool)>
     e2a:	88 23       	and	r24, r24
     e2c:	61 f3       	breq	.-40     	; 0xe06 <UPDI::updi_activate(bool)+0x8c>
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	aa da       	rcall	.-2732   	; 0x386 <UPDI::updi_reset(bool)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:692
      loop_until_sys_stat_is_set(UPDI_SYS_NVMPROG);
     e32:	88 23       	and	r24, r24
     e34:	41 f3       	breq	.-48     	; 0xe06 <UPDI::updi_activate(bool)+0x8c>
     e36:	70 e0       	ldi	r23, 0x00	; 0
     e38:	60 e0       	ldi	r22, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:688
bool UPDI::enter_prog (void) {
  if (bit_is_clear(UPDI_CONTROL, UPDI_PROG_bp)) {
    if (!(UPDI_LASTL & UPDI_SYS_NVMPROG)) {
      if (UPDI_LASTL & UPDI_SYS_LOCKSTATUS) return false;
      if (!is_key_stat(UPDI_KEY_NVMPROG)) {
        if (!set_nvmprog_key()) return false;
     e3a:	80 e2       	ldi	r24, 0x20	; 32
     e3c:	a4 db       	rcall	.-2232   	; 0x586 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
     e3e:	88 e0       	ldi	r24, 0x08	; 8
     e40:	8a db       	rcall	.-2284   	; 0x556 <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.28]>
     e42:	df cf       	rjmp	.-66     	; 0xe02 <UPDI::updi_activate(bool)+0x88>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:276
ISR(TCB0_INT_vect, ISR_NAKED) {
  /***
    This interrupt is a global escape due to timeout.
    There is no return to the source of the interrupt.
  ***/
  __asm__ __volatile__ ("EOR R1,R1");
     e44:	7e db       	rcall	.-2308   	; 0x542 <UPDI::set_nvmprog_key()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:277
  TCB0_CTRLA = 0;
     e46:	81 11       	cpse	r24, r1
     e48:	ee cf       	rjmp	.-36     	; 0xe26 <UPDI::updi_activate(bool)+0xac>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:278
  TCB0_INTFLAGS = TCB_CAPT_bm;
     e4a:	dd cf       	rjmp	.-70     	; 0xe06 <UPDI::updi_activate(bool)+0x8c>

00000e4c <__vector_13>:
__vector_13():
     e4c:	11 24       	eor	r1, r1
     e4e:	10 92 80 0a 	sts	0x0A80, r1	; 0x800a80 <__RODATA_PM_OFFSET__+0x7f8a80>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:279
  longjmp(TIM::CONTEXT, 2);
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__RODATA_PM_OFFSET__+0x7f8a86>
     e58:	62 e0       	ldi	r22, 0x02	; 2
     e5a:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:248

/*
 * RTS monitoring upper and lower end interrupts
 */

ISR(portIntrruptVector(RTS_SENSE_PIN)) {
     e5c:	8e e4       	ldi	r24, 0x4E	; 78
     e5e:	98 e3       	ldi	r25, 0x38	; 56
     e60:	9f d3       	rcall	.+1854   	; 0x15a0 <longjmp>

00000e62 <__vector_6>:
__vector_6():
     e62:	1f 92       	push	r1
     e64:	0f 92       	push	r0
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	0f 92       	push	r0
     e6a:	11 24       	eor	r1, r1
     e6c:	2f 93       	push	r18
     e6e:	3f 93       	push	r19
     e70:	4f 93       	push	r20
     e72:	5f 93       	push	r21
     e74:	6f 93       	push	r22
     e76:	7f 93       	push	r23
     e78:	8f 93       	push	r24
     e7a:	9f 93       	push	r25
     e7c:	af 93       	push	r26
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:169

void SYS::WDT_OFF (void) { WDT_SET(WDT_PERIOD_OFF_gc); }

void SYS::WDT_ON (void) { WDT_SET(WDT_PERIOD_8KCLK_gc); }

void SYS::WDT_Short (void) { WDT_SET(WDT_PERIOD_128CLK_gc); }
     e7e:	bf 93       	push	r27
     e80:	ef 93       	push	r30
     e82:	ff 93       	push	r31
WDT_Short():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:108
void SYS::RTS_Enable (void) {
  pinControlRegister(RTS_SENSE_PIN) = RTS_SENSE_CONFIG;
}

void SYS::RTS_Disable (void) {
  pinControlRegister(RTS_SENSE_PIN) = RTS_SENSE_DISABLE;
     e84:	85 e0       	ldi	r24, 0x05	; 5
     e86:	83 dc       	rcall	.-1786   	; 0x78e <SYS::WDT_SET(unsigned char)>
RTS_Disable():
     e88:	88 e0       	ldi	r24, 0x08	; 8
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:260
  ***/

  SYS::WDT_Short();
  SYS::RTS_Disable();
  portRegister(RTS_SENSE_PIN).INTFLAGS =
  portRegister(RTS_SENSE_PIN).INTFLAGS;
     e8a:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <__RODATA_PM_OFFSET__+0x7f8412>
__vector_6():
     e8e:	e0 e0       	ldi	r30, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:259
    is set to approximately 250ms.
  ***/

  SYS::WDT_Short();
  SYS::RTS_Disable();
  portRegister(RTS_SENSE_PIN).INTFLAGS =
     e90:	f4 e0       	ldi	r31, 0x04	; 4
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:96
/******************
 * Various ON/OFF *
 ******************/

void SYS::PG_Enable (void) {
  digitalWrite(PGEN_PIN, HIGH);
     e92:	81 85       	ldd	r24, Z+9	; 0x09
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:150
  }
}

/* Flash (after RTS assert/UPDI authorization) */
void TIM::LED_Flash (void) {
  LED_TCB1(2, TCB1_FLASH);
     e94:	81 87       	std	Z+9, r24	; 0x09
PG_Enable():
     e96:	48 9a       	sbi	0x09, 0	; 9
LED_Flash():
     e98:	69 ea       	ldi	r22, 0xA9	; 169
     e9a:	78 e0       	ldi	r23, 0x08	; 8
     e9c:	82 e0       	ldi	r24, 0x02	; 2
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:263
  SYS::RTS_Disable();
  portRegister(RTS_SENSE_PIN).INTFLAGS =
  portRegister(RTS_SENSE_PIN).INTFLAGS;
  SYS::PG_Enable();
  TIM::LED_Flash();
  UPDI::Target_Reset(true);
     e9e:	89 da       	rcall	.-2798   	; 0x3b2 <LED_TCB1(unsigned char, unsigned int)>
__vector_6():
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	76 da       	rcall	.-2836   	; 0x390 <UPDI::Target_Reset(bool)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:264
  openDrainWrite(TRST_PIN, LOW);
     ea4:	21 9a       	sbi	0x04, 1	; 4
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:265
}
     ea6:	ff 91       	pop	r31
     ea8:	ef 91       	pop	r30
     eaa:	bf 91       	pop	r27
     eac:	af 91       	pop	r26
     eae:	9f 91       	pop	r25
     eb0:	8f 91       	pop	r24
     eb2:	7f 91       	pop	r23
     eb4:	6f 91       	pop	r22
     eb6:	5f 91       	pop	r21
     eb8:	4f 91       	pop	r20
     eba:	3f 91       	pop	r19
     ebc:	2f 91       	pop	r18
     ebe:	0f 90       	pop	r0
     ec0:	0f be       	out	0x3f, r0	; 63
     ec2:	0f 90       	pop	r0
     ec4:	1f 90       	pop	r1
     ec6:	18 95       	reti

00000ec8 <__vector_7>:
__vector_7():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:218
  /***
    The LED flashes rapidly while the UPDI data line is LOW.
    If there is no response for 1 second,
    the process will be aborted and the system will restart.
  ***/
  SYS::WDT_SET(WDT_PERIOD_1KCLK_gc);
     ec8:	88 e0       	ldi	r24, 0x08	; 8
     eca:	61 dc       	rcall	.-1854   	; 0x78e <SYS::WDT_SET(unsigned char)>
LED_Fast():
     ecc:	65 e1       	ldi	r22, 0x15	; 21
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:160
  LED_TCB1(3, TCB1_BLINK);
}

/* Fast blinking (UPDI memory access in progress) */
void TIM::LED_Fast (void) {
  LED_TCB1(4, TCB1_FAST);
     ece:	74 e0       	ldi	r23, 0x04	; 4
     ed0:	84 e0       	ldi	r24, 0x04	; 4
     ed2:	6f da       	rcall	.-2850   	; 0x3b2 <LED_TCB1(unsigned char, unsigned int)>
__vector_7():
     ed4:	11 9b       	sbis	0x02, 1	; 2
     ed6:	fe cf       	rjmp	.-4      	; 0xed4 <__vector_7+0xc>
WDT_Short():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:220
    If there is no response for 1 second,
    the process will be aborted and the system will restart.
  ***/
  SYS::WDT_SET(WDT_PERIOD_1KCLK_gc);
  TIM::LED_Fast();
  while (!digitalRead(UPDI_TDAT_PIN));
     ed8:	85 e0       	ldi	r24, 0x05	; 5
     eda:	59 dc       	rcall	.-1870   	; 0x78e <SYS::WDT_SET(unsigned char)>
__vector_7():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:169

void SYS::WDT_OFF (void) { WDT_SET(WDT_PERIOD_OFF_gc); }

void SYS::WDT_ON (void) { WDT_SET(WDT_PERIOD_8KCLK_gc); }

void SYS::WDT_Short (void) { WDT_SET(WDT_PERIOD_128CLK_gc); }
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	58 da       	rcall	.-2896   	; 0x390 <UPDI::Target_Reset(bool)>
     ee0:	88 e0       	ldi	r24, 0x08	; 8
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:226

  /***
    If UPDI can be communicated, attempt to reset the target.
  ***/
  SYS::WDT_Short();
  UPDI::Target_Reset(true);
     ee2:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__RODATA_PM_OFFSET__+0x7f8806>
delay_micros():
     ee6:	8f ec       	ldi	r24, 0xCF	; 207
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:229

  /* Attempt to reset the target hardware. */
  UPDI_USART.CTRLB = UPDI_USART_OFF;
     ee8:	97 e0       	ldi	r25, 0x07	; 7
     eea:	01 97       	sbiw	r24, 0x01	; 1
     eec:	f1 f7       	brne	.-4      	; 0xeea <__vector_7+0x22>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.10/cores/megaAVR/api/delay_busywait.h:31
     eee:	00 c0       	rjmp	.+0      	; 0xef0 <__vector_7+0x28>
     ef0:	00 00       	nop
__vector_7():
     ef2:	01 9a       	sbi	0x00, 1	; 0
     ef4:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <__RODATA_PM_OFFSET__+0x7f8411>
     ef8:	09 98       	cbi	0x01, 1	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:231
  delay_micros(800);
  pinMode(UPDI_TDAT_PIN, OUTPUT);
     efa:	21 9a       	sbi	0x04, 1	; 4
LED_Blink():
     efc:	69 ea       	ldi	r22, 0xA9	; 169
     efe:	75 e5       	ldi	r23, 0x55	; 85
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:232
  digitalWrite(UPDI_TDAT_PIN, LOW);
     f00:	83 e0       	ldi	r24, 0x03	; 3
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:233
  openDrainWrite(TRST_PIN, LOW);
     f02:	57 da       	rcall	.-2898   	; 0x3b2 <LED_TCB1(unsigned char, unsigned int)>
WDT_OFF():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:155
  LED_TCB1(2, TCB1_FLASH);
}

/* Flashing (SW1 assert) */
void TIM::LED_Blink (void) {
  LED_TCB1(3, TCB1_BLINK);
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	43 dc       	rcall	.-1914   	; 0x78e <SYS::WDT_SET(unsigned char)>
__vector_7():
     f08:	30 9b       	sbis	0x06, 0	; 6
     f0a:	fe cf       	rjmp	.-4      	; 0xf08 <__vector_7+0x40>
WDT_REBOOT():
     f0c:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:165
  wdt_reset();
  loop_until_bit_is_clear(WDT_STATUS, WDT_SYNCBUSY_bp);
  _PROTECTED_WRITE(WDT_CTRLA, _wdt_period);
}

void SYS::WDT_OFF (void) { WDT_SET(WDT_PERIOD_OFF_gc); }
     f0e:	3f dc       	rcall	.-1922   	; 0x78e <SYS::WDT_SET(unsigned char)>
     f10:	ff cf       	rjmp	.-2      	; 0xf10 <__vector_7+0x48>

00000f12 <main>:
main():
     f12:	cf 93       	push	r28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:238
  openDrainWrite(TRST_PIN, LOW);

  /* The LED will blink and wait while the button is pressed. */
  TIM::LED_Blink();
  SYS::WDT_OFF();
  while (!digitalRead(SW_SENSE_PIN));
     f14:	df 93       	push	r29
     f16:	00 d0       	rcall	.+0      	; 0xf18 <main+0x6>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:172
void SYS::WDT_ON (void) { WDT_SET(WDT_PERIOD_8KCLK_gc); }

void SYS::WDT_Short (void) { WDT_SET(WDT_PERIOD_128CLK_gc); }

void SYS::WDT_REBOOT (void) {
  WDT_SET(WDT_PERIOD_8CLK_gc);
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
     f1c:	f8 94       	cli
initVariant():
     f1e:	24 e0       	ldi	r18, 0x04	; 4
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.10/variants/tinyAVR2_20/variant.h:281
    "   DEC  R24     \n"
    "   BRNE 2b        " /* 3 loop PORTA to PORTC */
    : : "z" ((register8_t*)&PORTA_PIN0CTRL),
        "r" ((uint8_t)PORT_ISC_INPUT_DISABLE_gc)
      : "r24", "r25"
  );
     f20:	e0 e1       	ldi	r30, 0x10	; 16
     f22:	f4 e0       	ldi	r31, 0x04	; 4
     f24:	83 e0       	ldi	r24, 0x03	; 3
     f26:	98 e0       	ldi	r25, 0x08	; 8
     f28:	21 93       	st	Z+, r18
     f2a:	9a 95       	dec	r25
     f2c:	e9 f7       	brne	.-6      	; 0xf28 <main+0x16>
     f2e:	78 96       	adiw	r30, 0x18	; 24
     f30:	8a 95       	dec	r24
     f32:	c9 f7       	brne	.-14     	; 0xf26 <main+0x14>
_CLKCTRL_SETUP():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.10/cores/megaAVR/api/CLKCTRL_megaAVR.h:127
  // _PROTECTED_WRITE(CLKCTRL.MCLKCTRLA, CLKCTRL_CLKSEL_OSC20M_gc);

#else

  #if defined(_CLKCTRL_PDIV_)
  _PROTECTED_WRITE(CLKCTRL_MCLKCTRLB, _CLKCTRL_PDIV_ | CLKCTRL_PEN_bm);
     f34:	88 ed       	ldi	r24, 0xD8	; 216
     f36:	41 e0       	ldi	r20, 0x01	; 1
     f38:	50 e0       	ldi	r21, 0x00	; 0
     f3a:	84 bf       	out	0x34, r24	; 52
     f3c:	40 93 61 00 	sts	0x0061, r20	; 0x800061 <__RODATA_PM_OFFSET__+0x7f8061>
setup():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:17
#include <avr/io.h>

void SYS::setup (void) {

  /* Target reset release */
  pinControlRegister(TRST_PIN) = TRST_PIN_CONFIG;
     f40:	8c e0       	ldi	r24, 0x0C	; 12
     f42:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <__RODATA_PM_OFFSET__+0x7f8431>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:20

  /* Outgoing port */
  PORTA_DIRSET = _BV(pinPosition(HVP1_PIN))
     f46:	88 ef       	ldi	r24, 0xF8	; 248
     f48:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <__RODATA_PM_OFFSET__+0x7f8401>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:25
               | _BV(pinPosition(HVP2_PIN))
               | _BV(pinPosition(HV12_PIN))
               | _BV(pinPosition(LEDG_PIN))
               | _BV(pinPosition(LEDY_PIN));
  PORTB_DIRSET = _BV(pinPosition(HV8_PIN));
     f4c:	80 e2       	ldi	r24, 0x20	; 32
     f4e:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__RODATA_PM_OFFSET__+0x7f8421>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:28

  /* USART switching LOW=Target opening (PG_Disable) */
  PORTC_DIRSET = _BV(pinPosition(PGEN_PIN));
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <__RODATA_PM_OFFSET__+0x7f8441>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:31

  /* LED output */
  LEDG_EVOUT_MUX = LEDG_EVOUT_ALT;          /* OUT:PA7 */
     f58:	80 93 e0 05 	sts	0x05E0, r24	; 0x8005e0 <__RODATA_PM_OFFSET__+0x7f85e0>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:32
  PORTMUX_CCLROUTEA = PORTMUX_LUT3_ALT1_gc; /* OUT:PA5 IN:PC0,PC1,PC2 */
     f5c:	98 e0       	ldi	r25, 0x08	; 8
     f5e:	90 93 e1 05 	sts	0x05E1, r25	; 0x8005e1 <__RODATA_PM_OFFSET__+0x7f85e1>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:33
  PORTA_OUTSET = _BV(pinPosition(LEDG_PIN))
     f62:	30 ea       	ldi	r19, 0xA0	; 160
     f64:	30 93 05 04 	sts	0x0405, r19	; 0x800405 <__RODATA_PM_OFFSET__+0x7f8405>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:37
               | _BV(pinPosition(LEDY_PIN));

  /* USART Alternative Selection */
  PORTMUX_USARTROUTEA = JTAG_PMUX_ALT | UPDI_PMUX_ALT;
     f68:	45 e0       	ldi	r20, 0x05	; 5
     f6a:	40 93 e2 05 	sts	0x05E2, r20	; 0x8005e2 <__RODATA_PM_OFFSET__+0x7f85e2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:40

  /* JTAG port */
  pinControlRegister(JTAG_TXD_PIN) = JTAG_TXD_CONFIG;
     f6e:	90 93 52 04 	sts	0x0452, r25	; 0x800452 <__RODATA_PM_OFFSET__+0x7f8452>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:41
  pinControlRegister(JTAG_RXD_PIN) = JTAG_RXD_CONFIG;
     f72:	90 93 51 04 	sts	0x0451, r25	; 0x800451 <__RODATA_PM_OFFSET__+0x7f8451>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:44

  /* UPDI port */
  pinControlRegister(UPDI_TDAT_PIN) = UPDI_TDAT_CONFIG;
     f76:	90 93 11 04 	sts	0x0411, r25	; 0x800411 <__RODATA_PM_OFFSET__+0x7f8411>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:47

  /* HV generator */
  pinControlRegister(HVP1_PIN) = HVP1_PIN_CONFIG;
     f7a:	20 93 13 04 	sts	0x0413, r18	; 0x800413 <__RODATA_PM_OFFSET__+0x7f8413>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:48
  pinControlRegister(HVP2_PIN) = HVP2_PIN_CONFIG;
     f7e:	34 e8       	ldi	r19, 0x84	; 132
     f80:	30 93 14 04 	sts	0x0414, r19	; 0x800414 <__RODATA_PM_OFFSET__+0x7f8414>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:51

  /* SW1 Interrupt permission */
  pinControlRegister(SW_SENSE_PIN) = SW_SENSE_CONFIG;
     f84:	3d e0       	ldi	r19, 0x0D	; 13
     f86:	30 93 30 04 	sts	0x0430, r19	; 0x800430 <__RODATA_PM_OFFSET__+0x7f8430>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:54

  /* RTS monitor */
  pinControlRegister(RTS_SENSE_PIN) = RTS_SENSE_CONFIG;
     f8a:	39 e0       	ldi	r19, 0x09	; 9
     f8c:	30 93 12 04 	sts	0x0412, r19	; 0x800412 <__RODATA_PM_OFFSET__+0x7f8412>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:57

  /* JP1 monitor */
  pinControlRegister(JP_SENSE_PIN) = JP_SENSE_CONFIG;
     f90:	90 93 53 04 	sts	0x0453, r25	; 0x800453 <__RODATA_PM_OFFSET__+0x7f8453>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:60

  /* Initialize state variables */
  UPDI_CONTROL = 0;
     f94:	1c ba       	out	0x1c, r1	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:61
  UPDI_NVMCTRL = 0;
     f96:	1d ba       	out	0x1d, r1	; 29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:46

void TIM::setup (void) {

  /* EVSYS signal distribution */

  EVSYS_CHANNEL0 = EVSYS_CHANNEL0_CCL_LUT0_gc;
     f98:	90 e1       	ldi	r25, 0x10	; 16
     f9a:	90 93 90 01 	sts	0x0190, r25	; 0x800190 <__RODATA_PM_OFFSET__+0x7f8190>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:47
  EVSYS_CHANNEL1 = EVSYS_CHANNEL1_RTC_PIT_DIV128_gc;
     f9e:	3a e0       	ldi	r19, 0x0A	; 10
     fa0:	30 93 91 01 	sts	0x0191, r19	; 0x800191 <__RODATA_PM_OFFSET__+0x7f8191>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:48
  EVSYS_CHANNEL2 = EVSYS_CHANNEL2_CCL_LUT1_gc;
     fa4:	91 e1       	ldi	r25, 0x11	; 17
     fa6:	90 93 92 01 	sts	0x0192, r25	; 0x800192 <__RODATA_PM_OFFSET__+0x7f8192>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:49
  EVSYS_CHANNEL3 = EVSYS_CHANNEL3_PORTA_PIN5_gc;  /* <- PA5:LEDY */
     faa:	9d e4       	ldi	r25, 0x4D	; 77
     fac:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <__RODATA_PM_OFFSET__+0x7f8193>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:50
  EVSYS_USERTCB0COUNT = EVSYS_USER_CHANNEL1_gc;
     fb0:	92 e0       	ldi	r25, 0x02	; 2
     fb2:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <__RODATA_PM_OFFSET__+0x7f81b1>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:51
  EVSYS_USERTCB1COUNT = EVSYS_USER_CHANNEL1_gc;
     fb6:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <__RODATA_PM_OFFSET__+0x7f81b3>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:52
  EVSYS_USERCCLLUT0A  = EVSYS_USER_CHANNEL3_gc;   /* <- PA5:LEDY */
     fba:	20 93 a0 01 	sts	0x01A0, r18	; 0x8001a0 <__RODATA_PM_OFFSET__+0x7f81a0>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:53
  EVSYS_USERCCLLUT1A  = EVSYS_USER_CHANNEL3_gc;   /* <- PA5:LEDY */
     fbe:	20 93 a2 01 	sts	0x01A2, r18	; 0x8001a2 <__RODATA_PM_OFFSET__+0x7f81a2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:60
  /* When PA5:LEDY of CCL3 is used, the signal output of CCL0 and CCL1 is stopped. */

  /* CCL/LUT construction */

  /* TRUTH0: 010 is ON */
  CCL_TRUTH0    = CCL_TRUTH_2_bm;
     fc2:	20 93 cb 01 	sts	0x01CB, r18	; 0x8001cb <__RODATA_PM_OFFSET__+0x7f81cb>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:61
  CCL_LUT0CTRLC = CCL_INSEL2_EVENTA_gc;           /* <- IN2:PA5 */
     fc6:	93 e0       	ldi	r25, 0x03	; 3
     fc8:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <__RODATA_PM_OFFSET__+0x7f81ca>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:62
  CCL_LUT0CTRLB = CCL_INSEL1_TCB1_gc;             /* <- IN1:POS */
     fcc:	20 ec       	ldi	r18, 0xC0	; 192
     fce:	20 93 c9 01 	sts	0x01C9, r18	; 0x8001c9 <__RODATA_PM_OFFSET__+0x7f81c9>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:63
  CCL_LUT0CTRLA = CCL_ENABLE_bm;
     fd2:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <__RODATA_PM_OFFSET__+0x7f81c8>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:66

  /* TRUTH1: 001 010 is ON */
  CCL_TRUTH1    = CCL_TRUTH_1_bm | CCL_TRUTH_2_bm;
     fd6:	26 e0       	ldi	r18, 0x06	; 6
     fd8:	20 93 cf 01 	sts	0x01CF, r18	; 0x8001cf <__RODATA_PM_OFFSET__+0x7f81cf>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:67
  CCL_LUT1CTRLC = CCL_INSEL2_EVENTA_gc;           /* <- IN2:PA5 */
     fdc:	90 93 ce 01 	sts	0x01CE, r25	; 0x8001ce <__RODATA_PM_OFFSET__+0x7f81ce>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:68
  CCL_LUT1CTRLB = CCL_INSEL0_TCA0_gc | CCL_INSEL1_TCB1_gc;  /* <- IN0:POS IN1:POS */
     fe0:	2a ec       	ldi	r18, 0xCA	; 202
     fe2:	20 93 cd 01 	sts	0x01CD, r18	; 0x8001cd <__RODATA_PM_OFFSET__+0x7f81cd>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:69
  CCL_LUT1CTRLA = CCL_ENABLE_bm;
     fe6:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <__RODATA_PM_OFFSET__+0x7f81cc>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:75

  /* TRUTH3: 001 010 is ON */
  /* CCL_INSEL0_USART0_gc : USART0TX normal HIGH */
  /* CCL_INSEL1_IO_gc     : USART1RX normal HIGH */
  /* CCL_INSEL2_IO_gc     : USART1TX normal HIGH */
  CCL_TRUTH3    = (uint8_t) ~CCL_TRUTH_7_bm;
     fea:	2f e7       	ldi	r18, 0x7F	; 127
     fec:	20 93 d7 01 	sts	0x01D7, r18	; 0x8001d7 <__RODATA_PM_OFFSET__+0x7f81d7>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:76
  CCL_LUT3CTRLC = CCL_INSEL2_IO_gc;
     ff0:	40 93 d6 01 	sts	0x01D6, r20	; 0x8001d6 <__RODATA_PM_OFFSET__+0x7f81d6>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:77
  CCL_LUT3CTRLB = CCL_INSEL0_USART0_gc | CCL_INSEL1_IO_gc;
     ff4:	28 e5       	ldi	r18, 0x58	; 88
     ff6:	20 93 d5 01 	sts	0x01D5, r18	; 0x8001d5 <__RODATA_PM_OFFSET__+0x7f81d5>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:78
  CCL_LUT3CTRLA = CCL_ENABLE_bm | CCL_OUTEN_bm;
     ffa:	21 e4       	ldi	r18, 0x41	; 65
     ffc:	20 93 d4 01 	sts	0x01D4, r18	; 0x8001d4 <__RODATA_PM_OFFSET__+0x7f81d4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:81

  /* CCL enable */
  CCL_CTRLA = CCL_RUNSTDBY_bm | CCL_ENABLE_bm;
    1000:	20 93 c0 01 	sts	0x01C0, r18	; 0x8001c0 <__RODATA_PM_OFFSET__+0x7f81c0>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:84

  /* RTC_PIT enable */
  RTC_PITCTRLA = RTC_PITEN_bm;
    1004:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__RODATA_PM_OFFSET__+0x7f8150>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:89

  /* Timer */

  /* TCA0 */
  TCA0_SPLIT_CTRLD = TCA_SPLIT_SPLITM_bm;
    1008:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <__RODATA_PM_OFFSET__+0x7f8a03>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:90
  TCA0_SPLIT_LPER  = TCA0_STEP - 2;
    100c:	29 e8       	ldi	r18, 0x89	; 137
    100e:	20 93 26 0a 	sts	0x0A26, r18	; 0x800a26 <__RODATA_PM_OFFSET__+0x7f8a26>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:91
  TCA0_SPLIT_LCMP0 = TCA0_STEP / 2;
    1012:	25 e4       	ldi	r18, 0x45	; 69
    1014:	20 93 28 0a 	sts	0x0A28, r18	; 0x800a28 <__RODATA_PM_OFFSET__+0x7f8a28>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:92
  TCA0_SPLIT_HPER  = 1;
    1018:	80 93 27 0a 	sts	0x0A27, r24	; 0x800a27 <__RODATA_PM_OFFSET__+0x7f8a27>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:93
  TCA0_SPLIT_HCMP0 = 1;     /* WOA3=PA3 */
    101c:	80 93 29 0a 	sts	0x0A29, r24	; 0x800a29 <__RODATA_PM_OFFSET__+0x7f8a29>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:94
  TCA0_SPLIT_HCMP1 = 1;     /* WOA4=PA4 */
    1020:	80 93 2b 0a 	sts	0x0A2B, r24	; 0x800a2b <__RODATA_PM_OFFSET__+0x7f8a2b>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:95
  TCA0_SPLIT_CTRLA = TCA_SPLIT_RUNSTDBY_bm | TCA_SPLIT_ENABLE_bm | TCA_SPLIT_CLKSEL_DIV1024_gc;
    1024:	8f e8       	ldi	r24, 0x8F	; 143
    1026:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__RODATA_PM_OFFSET__+0x7f8a00>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:98

  /* TCB1 */
  TCB1_CTRLB = TCB_CNTMODE_PWM8_gc;
    102a:	87 e0       	ldi	r24, 0x07	; 7
    102c:	80 93 91 0a 	sts	0x0A91, r24	; 0x800a91 <__RODATA_PM_OFFSET__+0x7f8a91>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:459
/******************
 * Initialization *
 ******************/

void JTAG2::setup (void) {
  JTAG_USART.BAUD = pgm_read_word( &BAUD_TABLE[BAUD_19200] );
    1030:	ed e9       	ldi	r30, 0x9D	; 157
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	45 91       	lpm	r20, Z+
    1036:	54 91       	lpm	r21, Z
    1038:	40 93 28 08 	sts	0x0828, r20	; 0x800828 <__RODATA_PM_OFFSET__+0x7f8828>
    103c:	50 93 29 08 	sts	0x0829, r21	; 0x800829 <__RODATA_PM_OFFSET__+0x7f8829>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:460
  JTAG_USART.CTRLA = JTAG_USART_CTRLA;
    1040:	10 92 25 08 	sts	0x0825, r1	; 0x800825 <__RODATA_PM_OFFSET__+0x7f8825>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:461
  JTAG_USART.CTRLC = JTAG_USART_CTRLC;
    1044:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__RODATA_PM_OFFSET__+0x7f8827>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:462
  JTAG_USART.CTRLB = JTAG_USART_OFF;
    1048:	88 e8       	ldi	r24, 0x88	; 136
    104a:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__RODATA_PM_OFFSET__+0x7f8826>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:70
  }
  #endif
}

void UPDI::setup (void) {
  UPDI_USART.BAUD  = UPDI_BAUD_CALC;
    104e:	80 eb       	ldi	r24, 0xB0	; 176
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__RODATA_PM_OFFSET__+0x7f8808>
    1056:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__RODATA_PM_OFFSET__+0x7f8809>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:71
  UPDI_USART.CTRLA = UPDI_USART_CTRLA;
    105a:	30 93 05 08 	sts	0x0805, r19	; 0x800805 <__RODATA_PM_OFFSET__+0x7f8805>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:72
  UPDI_USART.CTRLC = UPDI_USART_CTRLC;
    105e:	8b e2       	ldi	r24, 0x2B	; 43
    1060:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <__RODATA_PM_OFFSET__+0x7f8807>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:73
  UPDI_USART.CTRLB = UPDI_USART_ON;
    1064:	88 ec       	ldi	r24, 0xC8	; 200
    1066:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__RODATA_PM_OFFSET__+0x7f8806>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:74
  bit_clear(UPDI_CONTROL, UPDI_CLKU_bp);
    106a:	e6 98       	cbi	0x1c, 6	; 28
ready():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:121
 * Run at the end of the boot sequence *
 ***************************************/

void SYS::ready (void) {
  /* Release target from reset state after resetting WDT timeout */
  if (bit_is_set(RSTCTRL_RSTFR, RSTCTRL_WDRF_bp))
    106c:	80 91 40 00 	lds	r24, 0x0040	; 0x800040 <__RODATA_PM_OFFSET__+0x7f8040>
    1070:	83 ff       	sbrs	r24, 3
    1072:	02 c0       	rjmp	.+4      	; 0x1078 <main+0x166>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:122
    UPDI::Target_Reset(false);
    1074:	80 e0       	ldi	r24, 0x00	; 0
    1076:	8c d9       	rcall	.-3304   	; 0x390 <UPDI::Target_Reset(bool)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:125

  /* Clears the reset state flag. */
  RSTCTRL_RSTFR = RSTCTRL_RSTFR;
    1078:	80 91 40 00 	lds	r24, 0x0040	; 0x800040 <__RODATA_PM_OFFSET__+0x7f8040>
    107c:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__RODATA_PM_OFFSET__+0x7f8040>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:128

  /*** Hibernation mode ***/
  set_sleep_mode(SLEEP_MODE_STANDBY);
    1080:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <__RODATA_PM_OFFSET__+0x7f8050>
    1084:	89 7f       	andi	r24, 0xF9	; 249
    1086:	82 60       	ori	r24, 0x02	; 2
    1088:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__RODATA_PM_OFFSET__+0x7f8050>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:131

  /* Clear asynchronous interrupts detected during initialization */
  while (portRegister(RTS_SENSE_PIN).INTFLAGS) {
    108c:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__RODATA_PM_OFFSET__+0x7f8409>
    1090:	88 23       	and	r24, r24
    1092:	29 f0       	breq	.+10     	; 0x109e <main+0x18c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:133
    portRegister(RTS_SENSE_PIN).INTFLAGS =
    portRegister(RTS_SENSE_PIN).INTFLAGS;
    1094:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__RODATA_PM_OFFSET__+0x7f8409>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:132
  /*** Hibernation mode ***/
  set_sleep_mode(SLEEP_MODE_STANDBY);

  /* Clear asynchronous interrupts detected during initialization */
  while (portRegister(RTS_SENSE_PIN).INTFLAGS) {
    portRegister(RTS_SENSE_PIN).INTFLAGS =
    1098:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <__RODATA_PM_OFFSET__+0x7f8409>
    109c:	f7 cf       	rjmp	.-18     	; 0x108c <main+0x17a>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:137
    portRegister(RTS_SENSE_PIN).INTFLAGS;
  }

  /* Interrupt permission */
  sei();
    109e:	78 94       	sei
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:142

  /* Keeps the LED flashing while the RTS maintains a low signal level. */
  /* This usually indicates that the serial console is still open.      */
  /* After completion, the system will be reset. */
  if (!digitalRead(RTS_SENSE_PIN)) {
    10a0:	12 99       	sbic	0x02, 2	; 2
    10a2:	0f c0       	rjmp	.+30     	; 0x10c2 <main+0x1b0>
LED_Flash():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:150
  }
}

/* Flash (after RTS assert/UPDI authorization) */
void TIM::LED_Flash (void) {
  LED_TCB1(2, TCB1_FLASH);
    10a4:	69 ea       	ldi	r22, 0xA9	; 169
    10a6:	78 e0       	ldi	r23, 0x08	; 8
    10a8:	82 e0       	ldi	r24, 0x02	; 2
    10aa:	83 d9       	rcall	.-3322   	; 0x3b2 <LED_TCB1(unsigned char, unsigned int)>
ready():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:144
    TIM::LED_Flash();
    while (!digitalRead(RTS_SENSE_PIN)) {
    10ac:	12 99       	sbic	0x02, 2	; 2
    10ae:	06 c0       	rjmp	.+12     	; 0x10bc <main+0x1aa>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:145
      sleep_enable();
    10b0:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <__RODATA_PM_OFFSET__+0x7f8050>
    10b4:	81 60       	ori	r24, 0x01	; 1
    10b6:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__RODATA_PM_OFFSET__+0x7f8050>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:172
void SYS::WDT_ON (void) { WDT_SET(WDT_PERIOD_8KCLK_gc); }

void SYS::WDT_Short (void) { WDT_SET(WDT_PERIOD_128CLK_gc); }

void SYS::WDT_REBOOT (void) {
  WDT_SET(WDT_PERIOD_8CLK_gc);
    10ba:	f8 cf       	rjmp	.-16     	; 0x10ac <main+0x19a>
WDT_REBOOT():
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	67 db       	rcall	.-2354   	; 0x78e <SYS::WDT_SET(unsigned char)>
    10c0:	ff cf       	rjmp	.-2      	; 0x10c0 <main+0x1ae>
LED_HeartBeat():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:129
 * LED operation switching
 */

/* Heartbeat (waiting) */
void TIM::LED_HeartBeat (void) {
  if (TIM::mode != 1) {
    10c2:	80 91 65 38 	lds	r24, 0x3865	; 0x803865 <TIM::mode>
    10c6:	81 30       	cpi	r24, 0x01	; 1
    10c8:	99 f0       	breq	.+38     	; 0x10f0 <main+0x1de>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:130
    TIM::mode = 1;
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	80 93 65 38 	sts	0x3865, r24	; 0x803865 <TIM::mode>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:131
    TCB1_CCMP = TCB1_HBEAT;
    10d0:	8a e8       	ldi	r24, 0x8A	; 138
    10d2:	95 e4       	ldi	r25, 0x45	; 69
    10d4:	80 93 9c 0a 	sts	0x0A9C, r24	; 0x800a9c <__RODATA_PM_OFFSET__+0x7f8a9c>
    10d8:	90 93 9d 0a 	sts	0x0A9D, r25	; 0x800a9d <__RODATA_PM_OFFSET__+0x7f8a9d>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:132
    TCB1_CNT = 0;
    10dc:	10 92 9a 0a 	sts	0x0A9A, r1	; 0x800a9a <__RODATA_PM_OFFSET__+0x7f8a9a>
    10e0:	10 92 9b 0a 	sts	0x0A9B, r1	; 0x800a9b <__RODATA_PM_OFFSET__+0x7f8a9b>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:133
    TCB1_CTRLA = TCB_RUNSTDBY_bm | TCB_ENABLE_bm | TCB_CLKSEL_TCA0_gc;
    10e4:	85 e4       	ldi	r24, 0x45	; 69
    10e6:	80 93 90 0a 	sts	0x0A90, r24	; 0x800a90 <__RODATA_PM_OFFSET__+0x7f8a90>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:134
    LEDG_EVOUT = EVSYS_USER_CHANNEL2_gc;
    10ea:	83 e0       	ldi	r24, 0x03	; 3
    10ec:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <__RODATA_PM_OFFSET__+0x7f81a9>
ready():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:152
    SYS::WDT_REBOOT();
  }
  TIM::LED_HeartBeat();

  /* It stays in a low power state until the first interrupt occurs. */
  sleep_enable();
    10f0:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <__RODATA_PM_OFFSET__+0x7f8050>
    10f4:	81 60       	ori	r24, 0x01	; 1
    10f6:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__RODATA_PM_OFFSET__+0x7f8050>
get_parameter():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:253
      }
      case PAR_EMU_MODE : {
        /* This response code indicates an UPDI-only implementation */
        /* In normal JTAGICEmkII this is never queried */
        packet.body[1] = 0x55;
        packet.size_word[0] = 2;
    10fa:	f2 e0       	ldi	r31, 0x02	; 2
    10fc:	af 2e       	mov	r10, r31
    10fe:	b1 2c       	mov	r11, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:263
        packet.size_word[0] = 2;
        break;
      }
      case PAR_VTARGET : {
        _CAPS16(packet.body[1])->word = SYS::get_vcc();
        packet.size_word[0] = 3;
    1100:	a3 e0       	ldi	r26, 0x03	; 3
    1102:	8a 2e       	mov	r8, r26
    1104:	91 2c       	mov	r9, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:246
      case PAR_FW_VER : {
        packet.body[1] = sign_on_resp[3];
        packet.body[2] = sign_on_resp[4];
        packet.body[3] = sign_on_resp[7];
        packet.body[4] = sign_on_resp[8];
        packet.size_word[0] = 5;
    1106:	b5 e0       	ldi	r27, 0x05	; 5
    1108:	2b 2e       	mov	r2, r27
    110a:	31 2c       	mov	r3, r1
sign_on_response():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:168
  /********************
   * SIGN_ON Response *
   ********************/

  void sign_on_response (void) {
    packet.size_word[0] = sizeof(sign_on_resp);
    110c:	1d e1       	ldi	r17, 0x1D	; 29
    110e:	41 2e       	mov	r4, r17
    1110:	51 2c       	mov	r5, r1
    1112:	05 eb       	ldi	r16, 0xB5	; 181
    1114:	60 2e       	mov	r6, r16
    1116:	08 e3       	ldi	r16, 0x38	; 56
    1118:	70 2e       	mov	r7, r16
get():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:86
  /*******************
   * Local functions *
   *******************/

  uint8_t get (void) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_RXCIF_bp);
    111a:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
    111e:	87 ff       	sbrs	r24, 7
    1120:	fc cf       	rjmp	.-8      	; 0x111a <main+0x208>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:87
    return JTAG_USART.RXDATAL;
    1122:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__RODATA_PM_OFFSET__+0x7f8820>
packet_receive():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:126
    uint16_t _crc = ~0;
    uint8_t *p = (uint8_t*) &packet.soh;
    uint8_t *q = (uint8_t*) &packet.soh;

    /* Waiting for reception (infinite loop) */
    while (get() != MESSAGE_START);
    1126:	8b 31       	cpi	r24, 0x1B	; 27
    1128:	c1 f7       	brne	.-16     	; 0x111a <main+0x208>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:127
    (*p++) = MESSAGE_START;
    112a:	80 93 90 38 	sts	0x3890, r24	; 0x803890 <JTAG2::packet>
    112e:	e1 e9       	ldi	r30, 0x91	; 145
    1130:	f8 e3       	ldi	r31, 0x38	; 56
get():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:86
  /*******************
   * Local functions *
   *******************/

  uint8_t get (void) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_RXCIF_bp);
    1132:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
    1136:	87 ff       	sbrs	r24, 7
    1138:	fc cf       	rjmp	.-8      	; 0x1132 <main+0x220>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:87
    return JTAG_USART.RXDATAL;
    113a:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__RODATA_PM_OFFSET__+0x7f8820>
packet_receive():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:130
    /* Waiting for reception (infinite loop) */
    while (get() != MESSAGE_START);
    (*p++) = MESSAGE_START;

    /* First 7bytes */
    for (int8_t i = 0; i < 7; i++) *p++ = get();
    113e:	81 93       	st	Z+, r24
    1140:	28 e3       	ldi	r18, 0x38	; 56
    1142:	e8 39       	cpi	r30, 0x98	; 152
    1144:	f2 07       	cpc	r31, r18
    1146:	a9 f7       	brne	.-22     	; 0x1132 <main+0x220>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:133

    /* STX confirmation */
    if (packet.stx != TOKEN) return false;
    1148:	80 91 97 38 	lds	r24, 0x3897	; 0x803897 <JTAG2::packet+0x7>
    114c:	8e 30       	cpi	r24, 0x0E	; 14
    114e:	29 f7       	brne	.-54     	; 0x111a <main+0x208>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:136

    /* Check packet length */
    if (packet.size > sizeof(packet.body)) return false;
    1150:	80 91 93 38 	lds	r24, 0x3893	; 0x803893 <JTAG2::packet+0x3>
    1154:	90 91 94 38 	lds	r25, 0x3894	; 0x803894 <JTAG2::packet+0x4>
    1158:	a0 91 95 38 	lds	r26, 0x3895	; 0x803895 <JTAG2::packet+0x5>
    115c:	b0 91 96 38 	lds	r27, 0x3896	; 0x803896 <JTAG2::packet+0x6>
    1160:	85 31       	cpi	r24, 0x15	; 21
    1162:	92 40       	sbci	r25, 0x02	; 2
    1164:	a1 05       	cpc	r26, r1
    1166:	b1 05       	cpc	r27, r1
    1168:	c0 f6       	brcc	.-80     	; 0x111a <main+0x208>
    116a:	08 e9       	ldi	r16, 0x98	; 152
    116c:	18 e3       	ldi	r17, 0x38	; 56
    116e:	68 01       	movw	r12, r16
main():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:139

    /* receive the rest */
    for (int16_t j = -2; j < packet.size_word[0]; j++) *p++ = get();
    1170:	8e ef       	ldi	r24, 0xFE	; 254
    1172:	9f ef       	ldi	r25, 0xFF	; 255
packet_receive():
    1174:	20 91 93 38 	lds	r18, 0x3893	; 0x803893 <JTAG2::packet+0x3>
    1178:	30 91 94 38 	lds	r19, 0x3894	; 0x803894 <JTAG2::packet+0x4>
    117c:	82 17       	cp	r24, r18
    117e:	93 07       	cpc	r25, r19
    1180:	5c f4       	brge	.+22     	; 0x1198 <main+0x286>
get():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:86
  /*******************
   * Local functions *
   *******************/

  uint8_t get (void) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_RXCIF_bp);
    1182:	20 91 24 08 	lds	r18, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
    1186:	27 ff       	sbrs	r18, 7
    1188:	fc cf       	rjmp	.-8      	; 0x1182 <main+0x270>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:87
    return JTAG_USART.RXDATAL;
    118a:	20 91 20 08 	lds	r18, 0x0820	; 0x800820 <__RODATA_PM_OFFSET__+0x7f8820>
packet_receive():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:139

    /* Check packet length */
    if (packet.size > sizeof(packet.body)) return false;

    /* receive the rest */
    for (int16_t j = -2; j < packet.size_word[0]; j++) *p++ = get();
    118e:	d6 01       	movw	r26, r12
    1190:	2d 93       	st	X+, r18
    1192:	6d 01       	movw	r12, r26
    1194:	01 96       	adiw	r24, 0x01	; 1
    1196:	ee cf       	rjmp	.-36     	; 0x1174 <main+0x262>
    1198:	e0 e9       	ldi	r30, 0x90	; 144
    119a:	ee 2e       	mov	r14, r30
    119c:	e8 e3       	ldi	r30, 0x38	; 56
    119e:	fe 2e       	mov	r15, r30
main():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:121
  /****************
   * JTAG Receive *
   ****************/

  bool packet_receive (void) {
    uint16_t _crc = ~0;
    11a0:	8f ef       	ldi	r24, 0xFF	; 255
    11a2:	9f ef       	ldi	r25, 0xFF	; 255
packet_receive():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:142

    /* receive the rest */
    for (int16_t j = -2; j < packet.size_word[0]; j++) *p++ = get();

    /* CRC check when receive buffer is filled */
    while (p != q) _crc = crc16_update(_crc, *q++);
    11a4:	ec 14       	cp	r14, r12
    11a6:	fd 04       	cpc	r15, r13
    11a8:	29 f0       	breq	.+10     	; 0x11b4 <main+0x2a2>
    11aa:	f7 01       	movw	r30, r14
    11ac:	61 91       	ld	r22, Z+
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:101
  void flush (void) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_TXCIF_bp);
  }

  uint16_t crc16_update(uint16_t _crc, uint8_t _data) {
    return _crc_ccitt_update(_crc, _data);
    11ae:	7f 01       	movw	r14, r30
crc16_update():
    11b0:	48 d9       	rcall	.-3440   	; 0x442 <_crc_ccitt_update(unsigned int, unsigned char)>
    11b2:	f8 cf       	rjmp	.-16     	; 0x11a4 <main+0x292>
wakeup_jtag():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:485
 * Main loop *
 *************/

void JTAG2::wakeup_jtag (void) {
  for (;;) {
    if (packet_receive()) process_command();
    11b4:	89 2b       	or	r24, r25
    11b6:	09 f0       	breq	.+2      	; 0x11ba <main+0x2a8>
    11b8:	b0 cf       	rjmp	.-160    	; 0x111a <main+0x208>
process_command():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:330
  /****************
   * JTAG Process *
   ****************/

  inline void process_command (void) {
    wdt_reset();
    11ba:	a8 95       	wdr
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:334
    #ifdef ENABLE_DEBUG_UPDI_SENDER
    UPDI::_send_buf_clear();
    #endif
    uint8_t message_id = packet.body[MESSAGE_ID];
    11bc:	80 91 98 38 	lds	r24, 0x3898	; 0x803898 <JTAG2::packet+0x8>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:335
    packet.size_word[0] = 1;
    11c0:	21 e0       	ldi	r18, 0x01	; 1
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	20 93 93 38 	sts	0x3893, r18	; 0x803893 <JTAG2::packet+0x3>
    11c8:	30 93 94 38 	sts	0x3894, r19	; 0x803894 <JTAG2::packet+0x4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:336
    packet.body[MESSAGE_ID] = RSP_OK;
    11cc:	30 e8       	ldi	r19, 0x80	; 128
    11ce:	30 93 98 38 	sts	0x3898, r19	; 0x803898 <JTAG2::packet+0x8>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:337
    switch (message_id) {
    11d2:	8b 30       	cpi	r24, 0x0B	; 11
    11d4:	09 f4       	brne	.+2      	; 0x11d8 <main+0x2c6>
    11d6:	3a c1       	rjmp	.+628    	; 0x144c <main+0x53a>
    11d8:	08 f0       	brcs	.+2      	; 0x11dc <main+0x2ca>
    11da:	4c c0       	rjmp	.+152    	; 0x1274 <main+0x362>
    11dc:	83 30       	cpi	r24, 0x03	; 3
    11de:	09 f4       	brne	.+2      	; 0x11e2 <main+0x2d0>
    11e0:	bf c0       	rjmp	.+382    	; 0x1360 <main+0x44e>
    11e2:	08 f0       	brcs	.+2      	; 0x11e6 <main+0x2d4>
    11e4:	3d c0       	rjmp	.+122    	; 0x1260 <main+0x34e>
    11e6:	81 30       	cpi	r24, 0x01	; 1
    11e8:	09 f4       	brne	.+2      	; 0x11ec <main+0x2da>
    11ea:	68 c0       	rjmp	.+208    	; 0x12bc <main+0x3aa>
    11ec:	08 f4       	brcc	.+2      	; 0x11f0 <main+0x2de>
    11ee:	a8 c1       	rjmp	.+848    	; 0x1540 <main+0x62e>
set_parameter():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:190
   * CMND_SET_PARAMETER *
   **********************/

  bool set_parameter (void) {
    uint8_t param_val = packet.body[RSP_DATA + 1];
    switch ( packet.body[RSP_DATA] ) {
    11f0:	80 91 99 38 	lds	r24, 0x3899	; 0x803899 <JTAG2::packet+0x9>
    11f4:	85 30       	cpi	r24, 0x05	; 5
    11f6:	09 f0       	breq	.+2      	; 0x11fa <main+0x2e8>
    11f8:	46 c0       	rjmp	.+140    	; 0x1286 <main+0x374>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:189
  /**********************
   * CMND_SET_PARAMETER *
   **********************/

  bool set_parameter (void) {
    uint8_t param_val = packet.body[RSP_DATA + 1];
    11fa:	d0 90 9a 38 	lds	r13, 0x389A	; 0x80389a <JTAG2::packet+0xa>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:194
    switch ( packet.body[RSP_DATA] ) {
      /* JTAG interface speed */
      case PAR_BAUD_RATE : {
        /* Compatible range confirmation */
        if ((param_val >= BAUD_LOWER) && (param_val <= BAUD_UPPER)) {
    11fe:	8e ef       	ldi	r24, 0xFE	; 254
    1200:	8d 0d       	add	r24, r13
    1202:	88 31       	cpi	r24, 0x18	; 24
    1204:	08 f0       	brcs	.+2      	; 0x1208 <main+0x2f6>
    1206:	a8 c0       	rjmp	.+336    	; 0x1358 <main+0x446>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:195
          uint16_t baud = pgm_read_word( &BAUD_TABLE[param_val] );
    1208:	8d 2d       	mov	r24, r13
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	fc 01       	movw	r30, r24
    120e:	ee 0f       	add	r30, r30
    1210:	ff 1f       	adc	r31, r31
    1212:	eb 56       	subi	r30, 0x6B	; 107
    1214:	ff 4f       	sbci	r31, 0xFF	; 255
    1216:	05 91       	lpm	r16, Z+
    1218:	14 91       	lpm	r17, Z
    121a:	78 01       	movw	r14, r16
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:196
          if (baud) {
    121c:	01 15       	cp	r16, r1
    121e:	11 05       	cpc	r17, r1
    1220:	09 f4       	brne	.+2      	; 0x1224 <main+0x312>
    1222:	9a c0       	rjmp	.+308    	; 0x1358 <main+0x446>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:198
            /* If normal, respond and then change speed */
            param_baud_rate_val = (jtag_baud_rate_e) param_val;
    1224:	80 93 3f 38 	sts	0x383F, r24	; 0x80383f <JTAG2::param_baud_rate_val>
    1228:	90 93 40 38 	sts	0x3840, r25	; 0x803840 <JTAG2::param_baud_rate_val+0x1>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:199
            answer_transfer();
    122c:	1c d9       	rcall	.-3528   	; 0x466 <JTAG2::answer_transfer()>
flush():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:97
    JTAG_USART.STATUS = USART_TXCIF_bm;
    return JTAG_USART.TXDATAL = _data;
  }

  void flush (void) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_TXCIF_bp);
    122e:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
    1232:	86 ff       	sbrs	r24, 6
    1234:	fc cf       	rjmp	.-8      	; 0x122e <main+0x31c>
set_parameter():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:202
            /* If normal, respond and then change speed */
            param_baud_rate_val = (jtag_baud_rate_e) param_val;
            answer_transfer();
            flush();
            /* If the division ratio is too small, change to double speed mode */
            if (baud < 64) {
    1236:	00 34       	cpi	r16, 0x40	; 64
    1238:	11 05       	cpc	r17, r1
    123a:	30 f4       	brcc	.+12     	; 0x1248 <main+0x336>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:203
              JTAG_USART.CTRLB = JTAG_USART_DBLON;
    123c:	8a ec       	ldi	r24, 0xCA	; 202
    123e:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__RODATA_PM_OFFSET__+0x7f8826>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:204
              baud <<= 1;
    1242:	78 01       	movw	r14, r16
    1244:	ee 0c       	add	r14, r14
    1246:	ff 1c       	adc	r15, r15
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:206
            }
            JTAG_USART.BAUD = baud;
    1248:	e0 92 28 08 	sts	0x0828, r14	; 0x800828 <__RODATA_PM_OFFSET__+0x7f8828>
    124c:	f0 92 29 08 	sts	0x0829, r15	; 0x800829 <__RODATA_PM_OFFSET__+0x7f8829>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:208
            /* Speed to allow terminal mode */
            if (param_val == BAUD_38400 || param_val == BAUD_666666)
    1250:	b5 e0       	ldi	r27, 0x05	; 5
    1252:	db 16       	cp	r13, r27
    1254:	19 f0       	breq	.+6      	; 0x125c <main+0x34a>
    1256:	e8 e1       	ldi	r30, 0x18	; 24
    1258:	de 12       	cpse	r13, r30
    125a:	5f cf       	rjmp	.-322    	; 0x111a <main+0x208>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:209
              bit_set(UPDI_CONTROL, UPDI::UPDI_TERM_bp);
    125c:	e5 9a       	sbi	0x1c, 5	; 28
    125e:	5d cf       	rjmp	.-326    	; 0x111a <main+0x208>
process_command():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:337
    UPDI::_send_buf_clear();
    #endif
    uint8_t message_id = packet.body[MESSAGE_ID];
    packet.size_word[0] = 1;
    packet.body[MESSAGE_ID] = RSP_OK;
    switch (message_id) {
    1260:	85 30       	cpi	r24, 0x05	; 5
    1262:	09 f4       	brne	.+2      	; 0x1266 <main+0x354>
    1264:	13 c1       	rjmp	.+550    	; 0x148c <main+0x57a>
    1266:	08 f4       	brcc	.+2      	; 0x126a <main+0x358>
    1268:	18 c1       	rjmp	.+560    	; 0x149a <main+0x588>
    126a:	88 30       	cpi	r24, 0x08	; 8
    126c:	61 f0       	breq	.+24     	; 0x1286 <main+0x374>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:447
        // SYS::WDT_REBOOT();
        SYS::System_Reset();
      }
      /* Returns negation for unknown commands */
      default : {
        set_response(RSP_FAILED);
    126e:	80 ea       	ldi	r24, 0xA0	; 160
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	74 c0       	rjmp	.+232    	; 0x135c <main+0x44a>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:337
    UPDI::_send_buf_clear();
    #endif
    uint8_t message_id = packet.body[MESSAGE_ID];
    packet.size_word[0] = 1;
    packet.body[MESSAGE_ID] = RSP_OK;
    switch (message_id) {
    1274:	86 31       	cpi	r24, 0x16	; 22
    1276:	48 f4       	brcc	.+18     	; 0x128a <main+0x378>
    1278:	84 31       	cpi	r24, 0x14	; 20
    127a:	28 f4       	brcc	.+10     	; 0x1286 <main+0x374>
    127c:	8c 30       	cpi	r24, 0x0C	; 12
    127e:	09 f4       	brne	.+2      	; 0x1282 <main+0x370>
    1280:	28 c1       	rjmp	.+592    	; 0x14d2 <main+0x5c0>
    1282:	8f 30       	cpi	r24, 0x0F	; 15
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:450
      /* Returns negation for unknown commands */
      default : {
        set_response(RSP_FAILED);
      }
    }
    answer_transfer();
    1284:	a1 f7       	brne	.-24     	; 0x126e <main+0x35c>
    1286:	ef d8       	rcall	.-3618   	; 0x466 <JTAG2::answer_transfer()>
    1288:	48 cf       	rjmp	.-368    	; 0x111a <main+0x208>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:337
    UPDI::_send_buf_clear();
    #endif
    uint8_t message_id = packet.body[MESSAGE_ID];
    packet.size_word[0] = 1;
    packet.body[MESSAGE_ID] = RSP_OK;
    switch (message_id) {
    128a:	86 33       	cpi	r24, 0x36	; 54
    128c:	e1 f3       	breq	.-8      	; 0x1286 <main+0x374>
    128e:	85 35       	cpi	r24, 0x55	; 85
    1290:	09 f4       	brne	.+2      	; 0x1294 <main+0x382>
    1292:	3c c1       	rjmp	.+632    	; 0x150c <main+0x5fa>
    1294:	84 33       	cpi	r24, 0x34	; 52
    1296:	59 f7       	brne	.-42     	; 0x126e <main+0x35c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:411
        #endif
        break;
      }
      case CMND_XMEGA_ERASE : {
        /* Received packet error retransmission exception */
        if (before_seqnum == packet.number) break;
    1298:	20 91 91 38 	lds	r18, 0x3891	; 0x803891 <JTAG2::packet+0x1>
    129c:	30 91 92 38 	lds	r19, 0x3892	; 0x803892 <JTAG2::packet+0x2>
    12a0:	80 91 41 38 	lds	r24, 0x3841	; 0x803841 <JTAG2::before_seqnum>
    12a4:	90 91 42 38 	lds	r25, 0x3842	; 0x803842 <JTAG2::before_seqnum+0x1>
    12a8:	28 17       	cp	r18, r24
    12aa:	39 07       	cpc	r19, r25
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:412
        if (UPDI::runtime(UPDI::UPDI_CMD_ERASE)) {
    12ac:	61 f3       	breq	.-40     	; 0x1286 <main+0x374>
    12ae:	83 e0       	ldi	r24, 0x03	; 3
    12b0:	78 da       	rcall	.-2832   	; 0x7a2 <UPDI::runtime(unsigned char)>
    12b2:	81 11       	cpse	r24, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:417
          /* Keep the sequence number if completed successfully */
          before_seqnum = packet.number;
        }
        else {
          set_response(RSP_ILLEGAL_POWER_STATE);
    12b4:	02 c1       	rjmp	.+516    	; 0x14ba <main+0x5a8>
    12b6:	8d ea       	ldi	r24, 0xAD	; 173
    12b8:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:167
  _PROTECTED_WRITE(WDT_CTRLA, _wdt_period);
}

void SYS::WDT_OFF (void) { WDT_SET(WDT_PERIOD_OFF_gc); }

void SYS::WDT_ON (void) { WDT_SET(WDT_PERIOD_8KCLK_gc); }
    12ba:	50 c0       	rjmp	.+160    	; 0x135c <main+0x44a>
WDT_ON():
    12bc:	8b e0       	ldi	r24, 0x0B	; 11
    12be:	67 da       	rcall	.-2866   	; 0x78e <SYS::WDT_SET(unsigned char)>
RTS_Disable():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:108
void SYS::RTS_Enable (void) {
  pinControlRegister(RTS_SENSE_PIN) = RTS_SENSE_CONFIG;
}

void SYS::RTS_Disable (void) {
  pinControlRegister(RTS_SENSE_PIN) = RTS_SENSE_DISABLE;
    12c0:	88 e0       	ldi	r24, 0x08	; 8
    12c2:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <__RODATA_PM_OFFSET__+0x7f8412>
LED_Stop():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:166
}

/* Suspension (before UPDI approval) */
/* TCA0 changed to charge pump drive speed */
void TIM::LED_Stop (void) {
  if (TIM::mode != 0) {
    12c6:	80 91 65 38 	lds	r24, 0x3865	; 0x803865 <TIM::mode>
    12ca:	88 23       	and	r24, r24
    12cc:	41 f0       	breq	.+16     	; 0x12de <main+0x3cc>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:167
    TIM::mode = 0;
    12ce:	10 92 65 38 	sts	0x3865, r1	; 0x803865 <TIM::mode>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:168
    TCA0_SPLIT_CTRLA = TCA_SPLIT_RUNSTDBY_bm | TCA_SPLIT_ENABLE_bm | TCA_SPLIT_CLKSEL_DIV1_gc;
    12d2:	81 e8       	ldi	r24, 0x81	; 129
    12d4:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__RODATA_PM_OFFSET__+0x7f8a00>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:169
    LEDG_EVOUT = EVSYS_USER_OFF_gc;
    12d8:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <__RODATA_PM_OFFSET__+0x7f81a9>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:342
    switch (message_id) {
      case CMND_GET_SIGN_ON : {
        SYS::WDT_ON();
        SYS::RTS_Disable();
        TIM::LED_Stop();
        UPDI::Target_Reset(true);
    12dc:	0f 98       	cbi	0x01, 7	; 1
process_command():
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	57 d8       	rcall	.-3922   	; 0x390 <UPDI::Target_Reset(bool)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:343
        openDrainWrite(TRST_PIN, LOW);
    12e2:	21 9a       	sbi	0x04, 1	; 4
PG_Enable():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:96
/******************
 * Various ON/OFF *
 ******************/

void SYS::PG_Enable (void) {
  digitalWrite(PGEN_PIN, HIGH);
    12e4:	48 9a       	sbi	0x09, 0	; 9
transfer_enable():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:106
    return _crc_ccitt_update(_crc, _data);
  }

  void transfer_enable (void) {
    SYS::PG_Enable();
    pinMode(JTAG_TXD_PIN, OUTPUT);
    12e6:	42 9a       	sbi	0x08, 2	; 8
    12e8:	10 92 52 04 	sts	0x0452, r1	; 0x800452 <__RODATA_PM_OFFSET__+0x7f8452>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:107
    JTAG_USART.CTRLB = JTAG_USART_ON;
    12ec:	88 ec       	ldi	r24, 0xC8	; 200
    12ee:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__RODATA_PM_OFFSET__+0x7f8826>
sign_on_response():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:168
  /********************
   * SIGN_ON Response *
   ********************/

  void sign_on_response (void) {
    packet.size_word[0] = sizeof(sign_on_resp);
    12f2:	40 92 93 38 	sts	0x3893, r4	; 0x803893 <JTAG2::packet+0x3>
    12f6:	50 92 94 38 	sts	0x3894, r5	; 0x803894 <JTAG2::packet+0x4>
    12fa:	e8 e7       	ldi	r30, 0x78	; 120
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:170
    for (uint8_t i = 0; i < sizeof(sign_on_resp); i++)
      packet.body[i] = pgm_read_byte( &sign_on_resp[i] );
    12fe:	84 91       	lpm	r24, Z
    1300:	d8 01       	movw	r26, r16
    1302:	8d 93       	st	X+, r24
    1304:	8d 01       	movw	r16, r26
    1306:	31 96       	adiw	r30, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:169
   * SIGN_ON Response *
   ********************/

  void sign_on_response (void) {
    packet.size_word[0] = sizeof(sign_on_resp);
    for (uint8_t i = 0; i < sizeof(sign_on_resp); i++)
    1308:	6a 16       	cp	r6, r26
    130a:	7b 06       	cpc	r7, r27
    130c:	c1 f7       	brne	.-16     	; 0x12fe <main+0x3ec>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:175
      packet.body[i] = pgm_read_byte( &sign_on_resp[i] );
    /* Generate version information from SERNUM */
    uint8_t* p = (uint8_t*) &SIGROW_SERNUM0;
    uint8_t* q = (uint8_t*) &SIGROW_SERNUM4;
    uint8_t* r = (uint8_t*) &packet.body[10];
      *r++ = *q++ ^ *p++ ^ *p++;
    130e:	80 91 07 11 	lds	r24, 0x1107	; 0x801107 <__RODATA_PM_OFFSET__+0x7f9107>
    1312:	90 91 03 11 	lds	r25, 0x1103	; 0x801103 <__RODATA_PM_OFFSET__+0x7f9103>
    1316:	89 27       	eor	r24, r25
    1318:	90 91 04 11 	lds	r25, 0x1104	; 0x801104 <__RODATA_PM_OFFSET__+0x7f9104>
    131c:	89 27       	eor	r24, r25
    131e:	80 93 a2 38 	sts	0x38A2, r24	; 0x8038a2 <JTAG2::packet+0x12>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:176
      *r++ = *q++ ^ *p++ ^ *p++;
    1322:	80 91 08 11 	lds	r24, 0x1108	; 0x801108 <__RODATA_PM_OFFSET__+0x7f9108>
    1326:	90 91 05 11 	lds	r25, 0x1105	; 0x801105 <__RODATA_PM_OFFSET__+0x7f9105>
    132a:	89 27       	eor	r24, r25
    132c:	90 91 06 11 	lds	r25, 0x1106	; 0x801106 <__RODATA_PM_OFFSET__+0x7f9106>
    1330:	89 27       	eor	r24, r25
    1332:	80 93 a3 38 	sts	0x38A3, r24	; 0x8038a3 <JTAG2::packet+0x13>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:177
      *r++ = *q++;
    1336:	80 91 09 11 	lds	r24, 0x1109	; 0x801109 <__RODATA_PM_OFFSET__+0x7f9109>
    133a:	80 93 a4 38 	sts	0x38A4, r24	; 0x8038a4 <JTAG2::packet+0x14>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:178
      *r++ = *q++;
    133e:	80 91 0a 11 	lds	r24, 0x110A	; 0x80110a <__RODATA_PM_OFFSET__+0x7f910a>
    1342:	80 93 a5 38 	sts	0x38A5, r24	; 0x8038a5 <JTAG2::packet+0x15>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:179
      *r++ = *q++;
    1346:	80 91 0b 11 	lds	r24, 0x110B	; 0x80110b <__RODATA_PM_OFFSET__+0x7f910b>
    134a:	80 93 a6 38 	sts	0x38A6, r24	; 0x8038a6 <JTAG2::packet+0x16>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:180
      *r++ = *q++;
    134e:	80 91 0c 11 	lds	r24, 0x110C	; 0x80110c <__RODATA_PM_OFFSET__+0x7f910c>
    1352:	80 93 a7 38 	sts	0x38A7, r24	; 0x8038a7 <JTAG2::packet+0x17>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:214
              bit_set(UPDI_CONTROL, UPDI::UPDI_TERM_bp);
            return false;
          }
        }
        /* Range violation results in failure response */
        set_response(RSP_ILLEGAL_VALUE);
    1356:	97 cf       	rjmp	.-210    	; 0x1286 <main+0x374>
set_parameter():
    1358:	86 ea       	ldi	r24, 0xA6	; 166
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:447
        // SYS::WDT_REBOOT();
        SYS::System_Reset();
      }
      /* Returns negation for unknown commands */
      default : {
        set_response(RSP_FAILED);
    135a:	90 e0       	ldi	r25, 0x00	; 0
process_command():
    135c:	64 d8       	rcall	.-3896   	; 0x426 <JTAG2::set_response(JTAG2::jtag_response_e)>
    135e:	93 cf       	rjmp	.-218    	; 0x1286 <main+0x374>
get_parameter():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:234
  /**********************
   * CMND_GET_PARAMETER *
   **********************/

  void get_parameter (void) {
    switch ( packet.body[RSP_DATA] ) {
    1360:	80 91 99 38 	lds	r24, 0x3899	; 0x803899 <JTAG2::packet+0x9>
    1364:	83 30       	cpi	r24, 0x03	; 3
    1366:	81 f1       	breq	.+96     	; 0x13c8 <main+0x4b6>
    1368:	38 f4       	brcc	.+14     	; 0x1378 <main+0x466>
    136a:	81 30       	cpi	r24, 0x01	; 1
    136c:	79 f0       	breq	.+30     	; 0x138c <main+0x47a>
    136e:	82 30       	cpi	r24, 0x02	; 2
    1370:	b9 f0       	breq	.+46     	; 0x13a0 <main+0x48e>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:281
          packet.size_word[0] = 1 + sizeof(updi_desc.sib);
          break;
        }
      }
      default : {
        set_response(RSP_ILLEGAL_PARAMETER);
    1372:	81 ea       	ldi	r24, 0xA1	; 161
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	f2 cf       	rjmp	.-28     	; 0x135c <main+0x44a>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:234
  /**********************
   * CMND_GET_PARAMETER *
   **********************/

  void get_parameter (void) {
    switch ( packet.body[RSP_DATA] ) {
    1378:	86 30       	cpi	r24, 0x06	; 6
    137a:	71 f1       	breq	.+92     	; 0x13d8 <main+0x4c6>
    137c:	8d 31       	cpi	r24, 0x1D	; 29
    137e:	09 f4       	brne	.+2      	; 0x1382 <main+0x470>
    1380:	51 c0       	rjmp	.+162    	; 0x1424 <main+0x512>
    1382:	85 30       	cpi	r24, 0x05	; 5
    1384:	b1 f7       	brne	.-20     	; 0x1372 <main+0x460>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:257
        packet.body[1] = 0x55;
        packet.size_word[0] = 2;
        break;
      }
      case PAR_BAUD_RATE : {
        packet.body[1] = param_baud_rate_val;
    1386:	80 91 3f 38 	lds	r24, 0x383F	; 0x80383f <JTAG2::param_baud_rate_val>
    138a:	1f c0       	rjmp	.+62     	; 0x13ca <main+0x4b8>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:236
   **********************/

  void get_parameter (void) {
    switch ( packet.body[RSP_DATA] ) {
      case PAR_HW_VER : {
        packet.body[1] = sign_on_resp[5];
    138c:	82 e0       	ldi	r24, 0x02	; 2
    138e:	80 93 99 38 	sts	0x3899, r24	; 0x803899 <JTAG2::packet+0x9>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:237
        packet.body[2] = sign_on_resp[9];
    1392:	80 93 9a 38 	sts	0x389A, r24	; 0x80389a <JTAG2::packet+0xa>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:263
        packet.size_word[0] = 2;
        break;
      }
      case PAR_VTARGET : {
        _CAPS16(packet.body[1])->word = SYS::get_vcc();
        packet.size_word[0] = 3;
    1396:	80 92 93 38 	sts	0x3893, r8	; 0x803893 <JTAG2::packet+0x3>
    139a:	90 92 94 38 	sts	0x3894, r9	; 0x803894 <JTAG2::packet+0x4>
    139e:	10 c0       	rjmp	.+32     	; 0x13c0 <main+0x4ae>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:242
        packet.body[2] = sign_on_resp[9];
        packet.size_word[0] = 3;
        break;
      }
      case PAR_FW_VER : {
        packet.body[1] = sign_on_resp[3];
    13a0:	85 e3       	ldi	r24, 0x35	; 53
    13a2:	80 93 99 38 	sts	0x3899, r24	; 0x803899 <JTAG2::packet+0x9>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:243
        packet.body[2] = sign_on_resp[4];
    13a6:	87 e0       	ldi	r24, 0x07	; 7
    13a8:	80 93 9a 38 	sts	0x389A, r24	; 0x80389a <JTAG2::packet+0xa>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:244
        packet.body[3] = sign_on_resp[7];
    13ac:	82 e2       	ldi	r24, 0x22	; 34
    13ae:	80 93 9b 38 	sts	0x389B, r24	; 0x80389b <JTAG2::packet+0xb>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:245
        packet.body[4] = sign_on_resp[8];
    13b2:	86 e0       	ldi	r24, 0x06	; 6
    13b4:	80 93 9c 38 	sts	0x389C, r24	; 0x80389c <JTAG2::packet+0xc>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:246
        packet.size_word[0] = 5;
    13b8:	20 92 93 38 	sts	0x3893, r2	; 0x803893 <JTAG2::packet+0x3>
    13bc:	30 92 94 38 	sts	0x3894, r3	; 0x803894 <JTAG2::packet+0x4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:285
      default : {
        set_response(RSP_ILLEGAL_PARAMETER);
        return;
      }
    }
    packet.body[MESSAGE_ID] = RSP_PARAMETER;
    13c0:	81 e8       	ldi	r24, 0x81	; 129
    13c2:	80 93 98 38 	sts	0x3898, r24	; 0x803898 <JTAG2::packet+0x8>
    13c6:	5f cf       	rjmp	.-322    	; 0x1286 <main+0x374>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:252
        break;
      }
      case PAR_EMU_MODE : {
        /* This response code indicates an UPDI-only implementation */
        /* In normal JTAGICEmkII this is never queried */
        packet.body[1] = 0x55;
    13c8:	85 e5       	ldi	r24, 0x55	; 85
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:257
        packet.size_word[0] = 2;
        break;
      }
      case PAR_BAUD_RATE : {
        packet.body[1] = param_baud_rate_val;
    13ca:	80 93 99 38 	sts	0x3899, r24	; 0x803899 <JTAG2::packet+0x9>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:258
        packet.size_word[0] = 2;
    13ce:	a0 92 93 38 	sts	0x3893, r10	; 0x803893 <JTAG2::packet+0x3>
    13d2:	b0 92 94 38 	sts	0x3894, r11	; 0x803894 <JTAG2::packet+0x4>
    13d6:	f4 cf       	rjmp	.-24     	; 0x13c0 <main+0x4ae>
get_vcc():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:70
 * Self VCC measurement *
 ************************/

/*** This routine is exclusive to the tinyAVR-2 series. ***/
uint16_t SYS::get_vcc (void) {
  ADC0_CTRLA = ADC_ENABLE_bm;
    13d8:	f1 e0       	ldi	r31, 0x01	; 1
    13da:	f0 93 00 06 	sts	0x0600, r31	; 0x800600 <__RODATA_PM_OFFSET__+0x7f8600>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:71
  ADC0_CTRLB = ADC_PRESC_DIV2_gc;
    13de:	10 92 01 06 	sts	0x0601, r1	; 0x800601 <__RODATA_PM_OFFSET__+0x7f8601>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:72
  ADC0_CTRLC = ADC_REFSEL_1024MV_gc | ((F_CPU / 1000000UL) << ADC_TIMEBASE_gp);
    13e2:	84 e5       	ldi	r24, 0x54	; 84
    13e4:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__RODATA_PM_OFFSET__+0x7f8602>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:73
  ADC0_CTRLE = 17; /* (SAMPDUR + 0.5) * fCLK_ADC = 10.5 µs sample duration */
    13e8:	81 e1       	ldi	r24, 0x11	; 17
    13ea:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__RODATA_PM_OFFSET__+0x7f8608>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:74
  ADC0_MUXPOS = ADC_MUXPOS_VDDDIV10_gc; /* ADC channel VDD/10 */
    13ee:	91 e3       	ldi	r25, 0x31	; 49
    13f0:	90 93 0c 06 	sts	0x060C, r25	; 0x80060c <__RODATA_PM_OFFSET__+0x7f860c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:75
  ADC0_COMMAND = ADC_MODE_SINGLE_12BIT_gc | ADC_START_IMMEDIATE_gc;
    13f4:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <__RODATA_PM_OFFSET__+0x7f860a>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:76
  loop_until_bit_is_set(ADC0_INTFLAGS, ADC_SAMPRDY_bp);
    13f8:	80 91 05 06 	lds	r24, 0x0605	; 0x800605 <__RODATA_PM_OFFSET__+0x7f8605>
    13fc:	81 ff       	sbrs	r24, 1
    13fe:	fc cf       	rjmp	.-8      	; 0x13f8 <main+0x4e6>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:77
  uint16_t adc_reading = ADC0_SAMPLE;
    1400:	80 91 14 06 	lds	r24, 0x0614	; 0x800614 <__RODATA_PM_OFFSET__+0x7f8614>
    1404:	90 91 15 06 	lds	r25, 0x0615	; 0x800615 <__RODATA_PM_OFFSET__+0x7f8615>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:78
  adc_reading += adc_reading + (adc_reading >> 1);  /* x2.5 */
    1408:	9c 01       	movw	r18, r24
    140a:	36 95       	lsr	r19
    140c:	27 95       	ror	r18
    140e:	88 0f       	add	r24, r24
    1410:	99 1f       	adc	r25, r25
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:79
  ADC0_CTRLA = 0;
    1412:	10 92 00 06 	sts	0x0600, r1	; 0x800600 <__RODATA_PM_OFFSET__+0x7f8600>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:78
  ADC0_CTRLE = 17; /* (SAMPDUR + 0.5) * fCLK_ADC = 10.5 µs sample duration */
  ADC0_MUXPOS = ADC_MUXPOS_VDDDIV10_gc; /* ADC channel VDD/10 */
  ADC0_COMMAND = ADC_MODE_SINGLE_12BIT_gc | ADC_START_IMMEDIATE_gc;
  loop_until_bit_is_set(ADC0_INTFLAGS, ADC_SAMPRDY_bp);
  uint16_t adc_reading = ADC0_SAMPLE;
  adc_reading += adc_reading + (adc_reading >> 1);  /* x2.5 */
    1416:	82 0f       	add	r24, r18
    1418:	93 1f       	adc	r25, r19
get_parameter():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:262
        break;
      }
      case PAR_VTARGET : {
        _CAPS16(packet.body[1])->word = SYS::get_vcc();
    141a:	80 93 99 38 	sts	0x3899, r24	; 0x803899 <JTAG2::packet+0x9>
    141e:	90 93 9a 38 	sts	0x389A, r25	; 0x80389a <JTAG2::packet+0xa>
    1422:	b9 cf       	rjmp	.-142    	; 0x1396 <main+0x484>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:272
      case PAR_TARGET_SIGNATURE : {
        /* SIB information can be returned as an extended signature. */
        /* Responds correctly only during programming mode.          */
        /* otherwise an error will be returned.                      */
        /* Silicon revision (REVID) can be read as normal IO memory. */
        if (bit_is_set(UPDI_CONTROL, UPDI::UPDI_INFO_bp)) {
    1424:	e0 9b       	sbis	0x1c, 0	; 28
    1426:	a5 cf       	rjmp	.-182    	; 0x1372 <main+0x460>
    1428:	e0 e7       	ldi	r30, 0x70	; 112
    142a:	f8 e3       	ldi	r31, 0x38	; 56
    142c:	a9 e9       	ldi	r26, 0x99	; 153
    142e:	b8 e3       	ldi	r27, 0x38	; 56
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:275
          uint8_t *q = &packet.body[RSP_DATA];
          uint8_t *p = &updi_desc.sib[0];
          for (uint8_t i = 0; i < sizeof(updi_desc.sib); i++) *q++ = *p++;
    1430:	81 91       	ld	r24, Z+
    1432:	8d 93       	st	X+, r24
    1434:	20 e9       	ldi	r18, 0x90	; 144
    1436:	38 e3       	ldi	r19, 0x38	; 56
    1438:	2e 17       	cp	r18, r30
    143a:	3f 07       	cpc	r19, r31
    143c:	c9 f7       	brne	.-14     	; 0x1430 <main+0x51e>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:276
          packet.size_word[0] = 1 + sizeof(updi_desc.sib);
    143e:	81 e2       	ldi	r24, 0x21	; 33
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	80 93 93 38 	sts	0x3893, r24	; 0x803893 <JTAG2::packet+0x3>
    1446:	90 93 94 38 	sts	0x3894, r25	; 0x803894 <JTAG2::packet+0x4>
    144a:	ba cf       	rjmp	.-140    	; 0x13c0 <main+0x4ae>
process_command():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:359
        get_parameter();
        break;
      }
      case CMND_RESET : {
        /* Run only the first time */
        if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_INIT_bp)) {
    144c:	e7 99       	sbic	0x1c, 7	; 28
    144e:	1b cf       	rjmp	.-458    	; 0x1286 <main+0x374>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:360
          uint8_t hv_control = packet.body[RSP_DATA];
    1450:	90 91 99 38 	lds	r25, 0x3899	; 0x803899 <JTAG2::packet+0x9>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:362
          bool hv_active = false;
          if ((hv_control & '0') == '0') {
    1454:	89 2f       	mov	r24, r25
    1456:	80 73       	andi	r24, 0x30	; 48
    1458:	80 33       	cpi	r24, 0x30	; 48
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:366
            /* If the general reset setting is neither 0 nor 1. */
            /* Accepts special extension settings.              */
            /* This forces HV control.                          */
            updi_desc.hvupdi_variant = hv_control;
    145a:	29 f4       	brne	.+10     	; 0x1466 <main+0x554>
    145c:	90 93 68 38 	sts	0x3868, r25	; 0x803868 <JTAG2::updi_desc+0x2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:368
            /* '1' must be passed for automatic HV control to be inhibited */
            if (hv_control != '1') hv_active = true;
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	91 33       	cpi	r25, 0x31	; 49
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:361
      }
      case CMND_RESET : {
        /* Run only the first time */
        if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_INIT_bp)) {
          uint8_t hv_control = packet.body[RSP_DATA];
          bool hv_active = false;
    1464:	09 f4       	brne	.+2      	; 0x1468 <main+0x556>
main():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:371
            updi_desc.hvupdi_variant = hv_control;
            /* '1' must be passed for automatic HV control to be inhibited */
            if (hv_control != '1') hv_active = true;
          }
          /* Here UPDI control is tried */
          UPDI::updi_activate(hv_active);
    1466:	80 e0       	ldi	r24, 0x00	; 0
process_command():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:372
          if (bit_is_set(UPDI_CONTROL, UPDI::UPDI_TERM_bp)) {
    1468:	88 dc       	rcall	.-1776   	; 0xd7a <UPDI::updi_activate(bool)>
    146a:	e5 9b       	sbis	0x1c, 5	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:155
  LED_TCB1(2, TCB1_FLASH);
}

/* Flashing (SW1 assert) */
void TIM::LED_Blink (void) {
  LED_TCB1(3, TCB1_BLINK);
    146c:	09 c0       	rjmp	.+18     	; 0x1480 <main+0x56e>
LED_Blink():
    146e:	69 ea       	ldi	r22, 0xA9	; 169
    1470:	75 e5       	ldi	r23, 0x55	; 85
    1472:	83 e0       	ldi	r24, 0x03	; 3
    1474:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LED_TCB1(unsigned char, unsigned int)>
WDT_OFF():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:165
  wdt_reset();
  loop_until_bit_is_clear(WDT_STATUS, WDT_SYNCBUSY_bp);
  _PROTECTED_WRITE(WDT_CTRLA, _wdt_period);
}

void SYS::WDT_OFF (void) { WDT_SET(WDT_PERIOD_OFF_gc); }
    1478:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:381
          }
          else {
            /* If not set to interactive mode, the LED will flash rapidly */
            TIM::LED_Fast();
          }
          bit_set(UPDI_CONTROL, UPDI::UPDI_INIT_bp);
    147a:	89 d9       	rcall	.-3310   	; 0x78e <SYS::WDT_SET(unsigned char)>
process_command():
    147c:	e7 9a       	sbi	0x1c, 7	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:160
}

/* Fast blinking (UPDI memory access in progress) */
void TIM::LED_Fast (void) {
  LED_TCB1(4, TCB1_FAST);
    147e:	03 cf       	rjmp	.-506    	; 0x1286 <main+0x374>
LED_Fast():
    1480:	65 e1       	ldi	r22, 0x15	; 21
    1482:	74 e0       	ldi	r23, 0x04	; 4
    1484:	84 e0       	ldi	r24, 0x04	; 4
    1486:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LED_TCB1(unsigned char, unsigned int)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:389
        UPDI::_send_buf_copy();
        #endif
        break;
      }
      case CMND_READ_MEMORY : {
        if (!UPDI::runtime(UPDI::UPDI_CMD_READ_MEMORY)) {
    148a:	f8 cf       	rjmp	.-16     	; 0x147c <main+0x56a>
process_command():
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	89 d9       	rcall	.-3310   	; 0x7a2 <UPDI::runtime(unsigned char)>
    1490:	81 11       	cpse	r24, r1
    1492:	f9 ce       	rjmp	.-526    	; 0x1286 <main+0x374>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:390
          set_response(RSP_NO_TARGET_POWER);
    1494:	8b ea       	ldi	r24, 0xAB	; 171
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	61 cf       	rjmp	.-318    	; 0x135c <main+0x44a>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:396
        }
        break;
      }
      case CMND_WRITE_MEMORY : {
        /* Received packet error retransmission exception */
        if (before_seqnum == packet.number) break;
    149a:	20 91 91 38 	lds	r18, 0x3891	; 0x803891 <JTAG2::packet+0x1>
    149e:	30 91 92 38 	lds	r19, 0x3892	; 0x803892 <JTAG2::packet+0x2>
    14a2:	80 91 41 38 	lds	r24, 0x3841	; 0x803841 <JTAG2::before_seqnum>
    14a6:	90 91 42 38 	lds	r25, 0x3842	; 0x803842 <JTAG2::before_seqnum+0x1>
    14aa:	28 17       	cp	r18, r24
    14ac:	39 07       	cpc	r19, r25
    14ae:	09 f4       	brne	.+2      	; 0x14b2 <main+0x5a0>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:397
        if (UPDI::runtime(UPDI::UPDI_CMD_WRITE_MEMORY)) {
    14b0:	ea ce       	rjmp	.-556    	; 0x1286 <main+0x374>
    14b2:	82 e0       	ldi	r24, 0x02	; 2
    14b4:	76 d9       	rcall	.-3348   	; 0x7a2 <UPDI::runtime(unsigned char)>
    14b6:	88 23       	and	r24, r24
    14b8:	49 f0       	breq	.+18     	; 0x14cc <main+0x5ba>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:414
      case CMND_XMEGA_ERASE : {
        /* Received packet error retransmission exception */
        if (before_seqnum == packet.number) break;
        if (UPDI::runtime(UPDI::UPDI_CMD_ERASE)) {
          /* Keep the sequence number if completed successfully */
          before_seqnum = packet.number;
    14ba:	80 91 91 38 	lds	r24, 0x3891	; 0x803891 <JTAG2::packet+0x1>
    14be:	90 91 92 38 	lds	r25, 0x3892	; 0x803892 <JTAG2::packet+0x2>
    14c2:	80 93 41 38 	sts	0x3841, r24	; 0x803841 <JTAG2::before_seqnum>
    14c6:	90 93 42 38 	sts	0x3842, r25	; 0x803842 <JTAG2::before_seqnum+0x1>
    14ca:	dd ce       	rjmp	.-582    	; 0x1286 <main+0x374>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:402
        if (UPDI::runtime(UPDI::UPDI_CMD_WRITE_MEMORY)) {
          /* Keep the sequence number if completed successfully */
          before_seqnum = packet.number;
        }
        else {
          set_response(RSP_ILLEGAL_MCU_STATE);
    14cc:	85 ea       	ldi	r24, 0xA5	; 165
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	45 cf       	rjmp	.-374    	; 0x135c <main+0x44a>
set_descripter():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:296

  void set_descripter (uint8_t type) {
    if (type == CMND_SET_DEVICE_DESC) {
      const struct jtag_device_descriptor *desc =
           (struct jtag_device_descriptor*)&packet.body[RSP_DATA];
      updi_desc.flash_page_size = *(uint16_t*)(&desc->uiFlashPageSize[0]);
    14d2:	80 91 8c 39 	lds	r24, 0x398C	; 0x80398c <JTAG2::packet+0xfc>
    14d6:	90 91 8d 39 	lds	r25, 0x398D	; 0x80398d <JTAG2::packet+0xfd>
    14da:	80 93 6a 38 	sts	0x386A, r24	; 0x80386a <JTAG2::updi_desc+0x4>
    14de:	90 93 6b 38 	sts	0x386B, r25	; 0x80386b <JTAG2::updi_desc+0x5>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:297
      updi_desc.eeprom_page_size = desc->ucEepromPageSize;
    14e2:	80 91 8e 39 	lds	r24, 0x398E	; 0x80398e <JTAG2::packet+0xfe>
    14e6:	80 93 6c 38 	sts	0x386C, r24	; 0x80386c <JTAG2::updi_desc+0x6>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:298
      if ((desc->ucIDRAddress & '0') == '0') {
    14ea:	90 91 89 39 	lds	r25, 0x3989	; 0x803989 <JTAG2::packet+0xf9>
    14ee:	29 2f       	mov	r18, r25
    14f0:	20 73       	andi	r18, 0x30	; 48
    14f2:	20 33       	cpi	r18, 0x30	; 48
    14f4:	19 f4       	brne	.+6      	; 0x14fc <main+0x5ea>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:302
        /* Accepts special extension settings. */
        /* 0x31 must be passed for automatic HV control to be inhibited. */
        /* This parameter can be specified in the `idr` descriptor in the `part` section. */
        updi_desc.hvupdi_variant = desc->ucIDRAddress;  // Valid value 0x30,0x31 or 0x32
    14f6:	90 93 68 38 	sts	0x3868, r25	; 0x803868 <JTAG2::updi_desc+0x2>
    14fa:	c5 ce       	rjmp	.-630    	; 0x1286 <main+0x374>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:307
      }
      else {
        /* If the EEPROM page size is 32 or more, it is considered a HV=12V system. */
        /* This setting will be referenced when automatic HV control is requested.  */
        updi_desc.hvupdi_variant = updi_desc.eeprom_page_size >= 32 ? '0' : '2';
    14fc:	80 32       	cpi	r24, 0x20	; 32
    14fe:	20 f4       	brcc	.+8      	; 0x1508 <main+0x5f6>
main():
    1500:	82 e3       	ldi	r24, 0x32	; 50
set_descripter():
    1502:	80 93 68 38 	sts	0x3868, r24	; 0x803868 <JTAG2::updi_desc+0x2>
    1506:	bf ce       	rjmp	.-642    	; 0x1286 <main+0x374>
main():
    1508:	80 e3       	ldi	r24, 0x30	; 48
    150a:	fb cf       	rjmp	.-10     	; 0x1502 <main+0x5f0>
set_descripter():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:315
    else if (type == CMND_SET_UPDI_PARAMS) {
      /* This structure is used instead of CMND_SET_DEVICE_DESC after */
      /* answering 0x55 ('U') to PAR_EMU_MODE of CMND_GET_PARAMETER.  */
      /* Once you have confirmed the magic number and data length,    */
      /* you can simply clone it into your internal structure.        */
      const struct updi_device_descriptor *desc =
    150c:	a9 e9       	ldi	r26, 0x99	; 153
    150e:	b8 e3       	ldi	r27, 0x38	; 56
    1510:	a9 83       	std	Y+1, r26	; 0x01
    1512:	ba 83       	std	Y+2, r27	; 0x02
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:317
           (struct updi_device_descriptor*)&packet.body[RSP_DATA];
      if (desc->magicnumber == 'U' && desc->length <= sizeof(updi_desc) - 2) {
    1514:	80 91 99 38 	lds	r24, 0x3899	; 0x803899 <JTAG2::packet+0x9>
    1518:	85 35       	cpi	r24, 0x55	; 85
    151a:	09 f0       	breq	.+2      	; 0x151e <main+0x60c>
    151c:	b4 ce       	rjmp	.-664    	; 0x1286 <main+0x374>
    151e:	90 91 9a 38 	lds	r25, 0x389A	; 0x80389a <JTAG2::packet+0xa>
    1522:	99 32       	cpi	r25, 0x29	; 41
    1524:	08 f0       	brcs	.+2      	; 0x1528 <main+0x616>
    1526:	af ce       	rjmp	.-674    	; 0x1286 <main+0x374>
    1528:	de 01       	movw	r26, r28
    152a:	13 96       	adiw	r26, 0x03	; 3
    152c:	e8 e6       	ldi	r30, 0x68	; 104
    152e:	f8 e3       	ldi	r31, 0x38	; 56
main():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:320
        uint8_t *q = 2 + (uint8_t*)&updi_desc;
        uint8_t *p = 2 + (uint8_t*)&desc;
        for (int8_t i = 0; i < desc->length; i++) *q++ = *p++;
    1530:	80 e0       	ldi	r24, 0x00	; 0
set_descripter():
    1532:	89 17       	cp	r24, r25
    1534:	09 f4       	brne	.+2      	; 0x1538 <main+0x626>
    1536:	a7 ce       	rjmp	.-690    	; 0x1286 <main+0x374>
    1538:	2d 91       	ld	r18, X+
    153a:	21 93       	st	Z+, r18
    153c:	8f 5f       	subi	r24, 0xFF	; 255
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:437
      case CMND_GO :
      case CMND_GET_SYNC : {
        break;
      }
      case CMND_SIGN_OFF : {
        answer_transfer();
    153e:	f9 cf       	rjmp	.-14     	; 0x1532 <main+0x620>
process_command():
    1540:	0e 94 33 02 	call	0x466	; 0x466 <JTAG2::answer_transfer()>
flush():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:97
    JTAG_USART.STATUS = USART_TXCIF_bm;
    return JTAG_USART.TXDATAL = _data;
  }

  void flush (void) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_TXCIF_bp);
    1544:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
    1548:	86 ff       	sbrs	r24, 6
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:439
        break;
      }
      case CMND_SIGN_OFF : {
        answer_transfer();
        flush();
        if (bit_is_set(UPDI_CONTROL, UPDI::UPDI_PROG_bp))
    154a:	fc cf       	rjmp	.-8      	; 0x1544 <main+0x632>
process_command():
    154c:	e1 9b       	sbis	0x1c, 1	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:440
          UPDI::runtime(UPDI::UPDI_CMD_GO);
    154e:	02 c0       	rjmp	.+4      	; 0x1554 <main+0x642>
    1550:	84 e0       	ldi	r24, 0x04	; 4
    1552:	27 d9       	rcall	.-3506   	; 0x7a2 <UPDI::runtime(unsigned char)>
System_Reset():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:88
/*************
 * Self reset *
 *************/

void SYS::System_Reset (void) {
  _PROTECTED_WRITE(RSTCTRL_SWRR, RSTCTRL_SWRE_bm);
    1554:	88 ed       	ldi	r24, 0xD8	; 216
    1556:	b1 e0       	ldi	r27, 0x01	; 1
    1558:	84 bf       	out	0x34, r24	; 52
    155a:	b0 93 41 00 	sts	0x0041, r27	; 0x800041 <__RODATA_PM_OFFSET__+0x7f8041>
    155e:	87 ce       	rjmp	.-754    	; 0x126e <main+0x35c>

00001560 <setjmp>:
setjmp():
    1560:	dc 01       	movw	r26, r24
    1562:	2d 92       	st	X+, r2
    1564:	3d 92       	st	X+, r3
    1566:	4d 92       	st	X+, r4
    1568:	5d 92       	st	X+, r5
    156a:	6d 92       	st	X+, r6
    156c:	7d 92       	st	X+, r7
    156e:	8d 92       	st	X+, r8
    1570:	9d 92       	st	X+, r9
    1572:	ad 92       	st	X+, r10
    1574:	bd 92       	st	X+, r11
    1576:	cd 92       	st	X+, r12
    1578:	dd 92       	st	X+, r13
    157a:	ed 92       	st	X+, r14
    157c:	fd 92       	st	X+, r15
    157e:	0d 93       	st	X+, r16
    1580:	1d 93       	st	X+, r17
    1582:	cd 93       	st	X+, r28
    1584:	dd 93       	st	X+, r29
    1586:	ff 91       	pop	r31
    1588:	ef 91       	pop	r30
    158a:	8d b7       	in	r24, 0x3d	; 61
    158c:	8d 93       	st	X+, r24
    158e:	8e b7       	in	r24, 0x3e	; 62
    1590:	8d 93       	st	X+, r24
    1592:	8f b7       	in	r24, 0x3f	; 63
    1594:	8d 93       	st	X+, r24
    1596:	ed 93       	st	X+, r30
    1598:	fd 93       	st	X+, r31
    159a:	88 27       	eor	r24, r24
    159c:	99 27       	eor	r25, r25
    159e:	09 94       	ijmp

000015a0 <longjmp>:
longjmp():
    15a0:	dc 01       	movw	r26, r24
    15a2:	cb 01       	movw	r24, r22
    15a4:	81 30       	cpi	r24, 0x01	; 1
    15a6:	91 05       	cpc	r25, r1
    15a8:	81 1d       	adc	r24, r1
    15aa:	2d 90       	ld	r2, X+
    15ac:	3d 90       	ld	r3, X+
    15ae:	4d 90       	ld	r4, X+
    15b0:	5d 90       	ld	r5, X+
    15b2:	6d 90       	ld	r6, X+
    15b4:	7d 90       	ld	r7, X+
    15b6:	8d 90       	ld	r8, X+
    15b8:	9d 90       	ld	r9, X+
    15ba:	ad 90       	ld	r10, X+
    15bc:	bd 90       	ld	r11, X+
    15be:	cd 90       	ld	r12, X+
    15c0:	dd 90       	ld	r13, X+
    15c2:	ed 90       	ld	r14, X+
    15c4:	fd 90       	ld	r15, X+
    15c6:	0d 91       	ld	r16, X+
    15c8:	1d 91       	ld	r17, X+
    15ca:	cd 91       	ld	r28, X+
    15cc:	dd 91       	ld	r29, X+
    15ce:	ed 91       	ld	r30, X+
    15d0:	fd 91       	ld	r31, X+
    15d2:	0d 90       	ld	r0, X+
    15d4:	0f be       	out	0x3f, r0	; 63
    15d6:	ed bf       	out	0x3d, r30	; 61
    15d8:	fe bf       	out	0x3e, r31	; 62
    15da:	ed 91       	ld	r30, X+
    15dc:	fd 91       	ld	r31, X+
    15de:	09 94       	ijmp

000015e0 <_exit>:
exit():
    15e0:	f8 94       	cli

000015e2 <__stop_program>:
__stop_program():
    15e2:	ff cf       	rjmp	.-2      	; 0x15e2 <__stop_program>

Disassembly of section .nvmem:

00001632 <.nvmem>:
	...
