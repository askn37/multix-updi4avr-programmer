
/var/folders/mz/_z9vt_y13rdf9tt_4qkvv0k40000gn/T/arduino_build_441522/UPDI4AVR_FW634B.ino.elf:     file format elf32-avr


Disassembly of section .data:

00803800 <__data_start>:
__data_start():
  803800:	55 c8       	rjmp	.-3926   	; 0x8028ac <__RODATA_PM_OFFSET__+0x7fa8ac>
  803802:	00 c3       	rjmp	.+1536   	; 0x803e04 <__bss_end+0x35a>
  803804:	04 55       	subi	r16, 0x54	; 84

00803805 <UPDI::st8(unsigned long, unsigned char)::set_ptr>:
  803805:	55 48 00 00 00 00                                   UH....

0080380b <UPDI::ld8(unsigned long)::set_ptr>:
  80380b:	55 08 00 00 00 00                                   U.....

00803811 <UPDI::get_cs_stat(unsigned char)::set_ptr>:
  803811:	55 00                                               U.

00803813 <UPDI::set_cs_stat(unsigned char, unsigned char)::set_ptr>:
  803813:	55 00 00                                            U..

00803816 <UPDI::nvmprog_key>:
  803816:	55 e0 20 67 6f 72 50 4d 56 4e                       U. gorPMVN

00803820 <UPDI::urowwrite_key>:
  803820:	55 e0 65 74 26 73 55 4d 56 4e                       U.et&sUMVN

0080382a <UPDI::erase_key>:
  80382a:	55 e0 65 73 61 72 45 4d 56 4e                       U.esarEMVN

00803834 <UPDI::read_sib(unsigned char*)::set_ptr>:
  803834:	55 e6                                               U.

00803836 <JTAG2::param_baud_rate_val>:
  803836:	04 00                                               ..

00803838 <JTAG2::before_seqnum>:
  803838:	ff ff                                               ..

0080383a <UPDI::_set_repeat>:
  80383a:	55 a0 00 55 04                                      U..U.

0080383f <UPDI::_set_ptr_l>:
  80383f:	55 6a 00 00 00 00 00                                Uj.....

Disassembly of section .text:

00000000 <__vectors>:
__vectors():
../../../../crt1/gcrt1.S:61
       0:	67 c0       	rjmp	.+206    	; 0xd0 <__ctors_end>
       2:	00 00       	nop
../../../../crt1/gcrt1.S:67
       4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
       6:	00 00       	nop
../../../../crt1/gcrt1.S:68
       8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
       a:	00 00       	nop
../../../../crt1/gcrt1.S:69
       c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
       e:	00 00       	nop
../../../../crt1/gcrt1.S:70
      10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
      12:	00 00       	nop
../../../../crt1/gcrt1.S:71
      14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
      16:	00 00       	nop
../../../../crt1/gcrt1.S:72
      18:	ce c6       	rjmp	.+3484   	; 0xdb6 <__vector_6>
      1a:	00 00       	nop
../../../../crt1/gcrt1.S:73
      1c:	fd c6       	rjmp	.+3578   	; 0xe18 <__vector_7>
      1e:	00 00       	nop
../../../../crt1/gcrt1.S:74
      20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
      22:	00 00       	nop
../../../../crt1/gcrt1.S:75
      24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
      26:	00 00       	nop
../../../../crt1/gcrt1.S:76
      28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
      2a:	00 00       	nop
../../../../crt1/gcrt1.S:77
      2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
      2e:	00 00       	nop
../../../../crt1/gcrt1.S:78
      30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
      32:	00 00       	nop
../../../../crt1/gcrt1.S:79
      34:	b5 c6       	rjmp	.+3434   	; 0xda0 <__vector_13>
      36:	00 00       	nop
../../../../crt1/gcrt1.S:80
      38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
      3a:	00 00       	nop
../../../../crt1/gcrt1.S:81
      3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
      3e:	00 00       	nop
../../../../crt1/gcrt1.S:82
      40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
      42:	00 00       	nop
../../../../crt1/gcrt1.S:83
      44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
      46:	00 00       	nop
../../../../crt1/gcrt1.S:84
      48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
      4a:	00 00       	nop
../../../../crt1/gcrt1.S:85
      4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
      4e:	00 00       	nop
../../../../crt1/gcrt1.S:86
      50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
      52:	00 00       	nop
../../../../crt1/gcrt1.S:87
      54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
      56:	00 00       	nop
../../../../crt1/gcrt1.S:88
      58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
      5a:	00 00       	nop
../../../../crt1/gcrt1.S:89
      5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
      5e:	00 00       	nop
../../../../crt1/gcrt1.S:90
      60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
      62:	00 00       	nop
../../../../crt1/gcrt1.S:91
      64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
      66:	00 00       	nop
../../../../crt1/gcrt1.S:92
      68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
      6a:	00 00       	nop
../../../../crt1/gcrt1.S:93
      6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
      6e:	00 00       	nop
../../../../crt1/gcrt1.S:94
      70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
      72:	00 00       	nop
../../../../crt1/gcrt1.S:95
      74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
	...

00000078 <__trampolines_end>:
__trampolines_start():
      78:	86 01       	movw	r16, r12
      7a:	02 35       	cpi	r16, 0x52	; 82
      7c:	07 02       	muls	r16, r23
      7e:	02 22       	and	r0, r18
      80:	06 02       	muls	r16, r22
      82:	00 00       	nop
      84:	00 00       	nop
      86:	00 00       	nop
      88:	55 50       	subi	r21, 0x05	; 5
      8a:	44 49       	sbci	r20, 0x94	; 148
      8c:	34 41       	sbci	r19, 0x14	; 20
      8e:	56 52       	subi	r21, 0x26	; 38
      90:	00 00       	nop
      92:	00 00       	nop
	...

00000095 <JTAG2::BAUD_TABLE>:
      95:	00 00 1b 41 8d 20 47 10 23 08 12 04 b6 02 5b 01     ...A. G.#.....[.
      a5:	da 0a 04 01 ae 00 57 00 2b 00 39 01 9c 00 00 00     ......W.+.9.....
      b5:	00 00 0b 01 c8 00 a0 00 85 00 64 00 50 00 43 00     ..........d.P.C.
      c5:	3c 00 28 00 1b 00 14 00 0d 00 00                    <.(........

000000d0 <__ctors_end>:
__dtors_end():
../../../../crt1/gcrt1.S:230
      d0:	11 24       	eor	r1, r1
../../../../crt1/gcrt1.S:231
      d2:	1f be       	out	0x3f, r1	; 63
../../../../crt1/gcrt1.S:232
      d4:	cf ef       	ldi	r28, 0xFF	; 255
../../../../crt1/gcrt1.S:234
      d6:	cd bf       	out	0x3d, r28	; 61
../../../../crt1/gcrt1.S:236
      d8:	df e3       	ldi	r29, 0x3F	; 63
../../../../crt1/gcrt1.S:237
      da:	de bf       	out	0x3e, r29	; 62

000000dc <__do_copy_data>:
__do_copy_data():
      dc:	18 e3       	ldi	r17, 0x38	; 56
      de:	a0 e0       	ldi	r26, 0x00	; 0
      e0:	b8 e3       	ldi	r27, 0x38	; 56
      e2:	e6 ec       	ldi	r30, 0xC6	; 198
      e4:	f5 e1       	ldi	r31, 0x15	; 21
      e6:	02 c0       	rjmp	.+4      	; 0xec <__do_copy_data+0x10>
      e8:	05 90       	lpm	r0, Z+
      ea:	0d 92       	st	X+, r0
      ec:	a6 34       	cpi	r26, 0x46	; 70
      ee:	b1 07       	cpc	r27, r17
      f0:	d9 f7       	brne	.-10     	; 0xe8 <__do_copy_data+0xc>

000000f2 <__do_clear_bss>:
__do_clear_bss():
      f2:	2a e3       	ldi	r18, 0x3A	; 58
      f4:	a6 e4       	ldi	r26, 0x46	; 70
      f6:	b8 e3       	ldi	r27, 0x38	; 56
      f8:	01 c0       	rjmp	.+2      	; 0xfc <.do_clear_bss_start>

000000fa <.do_clear_bss_loop>:
      fa:	1d 92       	st	X+, r1

000000fc <.do_clear_bss_start>:
      fc:	aa 3a       	cpi	r26, 0xAA	; 170
      fe:	b2 07       	cpc	r27, r18
     100:	e1 f7       	brne	.-8      	; 0xfa <.do_clear_bss_loop>
.do_clear_bss_start():
../../../../crt1/gcrt1.S:314
     102:	bc d6       	rcall	.+3448   	; 0xe7c <main>
../../../../crt1/gcrt1.S:315
     104:	0c 94 e1 0a 	jmp	0x15c2	; 0x15c2 <_exit>

00000108 <__bad_interrupt>:
__vector_22():
../../../../crt1/gcrt1.S:209
     108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <UPDI::RECV()>:
_ZN4UPDI4RECVEv():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:104
/*
 * UPDI reception
 */

uint8_t UPDI::RECV (void) {
  loop_until_bit_is_set(UPDI_USART.STATUS, USART_RXCIF_bp);
     10a:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
     10e:	87 ff       	sbrs	r24, 7
     110:	fc cf       	rjmp	.-8      	; 0x10a <UPDI::RECV()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:105
  UPDI_LASTH = UPDI_USART.RXDATAH ^ 0x80;
     112:	80 91 01 08 	lds	r24, 0x0801	; 0x800801 <__RODATA_PM_OFFSET__+0x7f8801>
     116:	80 58       	subi	r24, 0x80	; 128
     118:	8f bb       	out	0x1f, r24	; 31
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:111
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  UPDI_LASTL = UPDI_USART.RXDATAL;
  _send_buf_push(UPDI_LASTL);
  return UPDI_LASTL;
  #else
  return UPDI_LASTL = UPDI_USART.RXDATAL;
     11a:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__RODATA_PM_OFFSET__+0x7f8800>
     11e:	8e bb       	out	0x1e, r24	; 30
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:113
  #endif
}
     120:	08 95       	ret

00000122 <UPDI::SEND(unsigned char)>:
_ZN4UPDI4SENDEh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:119

/*
 * UPDI transmission : Verify transmitted value with loopback reception
 */

bool UPDI::SEND (uint8_t _data) {
     122:	cf 93       	push	r28
     124:	c8 2f       	mov	r28, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:124
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  _send_buf_push(_data);
  #endif
  bool _r;
  loop_until_bit_is_set(UPDI_USART.STATUS, USART_DREIF_bp);
     126:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
     12a:	85 ff       	sbrs	r24, 5
     12c:	fc cf       	rjmp	.-8      	; 0x126 <UPDI::SEND(unsigned char)+0x4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:125
  UPDI_USART.STATUS = USART_TXCIF_bm;
     12e:	80 e4       	ldi	r24, 0x40	; 64
     130:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:126
  UPDI_USART.TXDATAL = _data;
     134:	c0 93 02 08 	sts	0x0802, r28	; 0x800802 <__RODATA_PM_OFFSET__+0x7f8802>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:127
  loop_until_bit_is_set(UPDI_USART.STATUS, USART_TXCIF_bp);
     138:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
     13c:	86 ff       	sbrs	r24, 6
     13e:	fc cf       	rjmp	.-8      	; 0x138 <UPDI::SEND(unsigned char)+0x16>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:128
  _r = _data == RECV();
     140:	e4 df       	rcall	.-56     	; 0x10a <UPDI::RECV()>
     142:	98 2f       	mov	r25, r24
     144:	81 e0       	ldi	r24, 0x01	; 1
     146:	9c 13       	cpse	r25, r28
     148:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:129
  if (!_r) bit_set(UPDI_LASTH, 0x20);
     14a:	9c 17       	cp	r25, r28
     14c:	11 f0       	breq	.+4      	; 0x152 <UPDI::SEND(unsigned char)+0x30>
     14e:	9f b3       	in	r25, 0x1f	; 31
     150:	9f bb       	out	0x1f, r25	; 31
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:131
  return _r;
}
     152:	cf 91       	pop	r28
     154:	08 95       	ret

00000156 <UPDI::send_bytes(unsigned char*, unsigned char)>:
_ZN4UPDI10send_bytesEPhh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:155
/*
 * Send byte chunks
 */

/* __attribute__((optimize("O0"))) */
bool UPDI::send_bytes (uint8_t *data, uint8_t len) {
     156:	0f 93       	push	r16
     158:	1f 93       	push	r17
     15a:	cf 93       	push	r28
     15c:	c6 2f       	mov	r28, r22
     15e:	8c 01       	movw	r16, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:157
  do {
    if (!SEND(*data++)) return false;
     160:	f8 01       	movw	r30, r16
     162:	81 91       	ld	r24, Z+
     164:	8f 01       	movw	r16, r30
     166:	dd df       	rcall	.-70     	; 0x122 <UPDI::SEND(unsigned char)>
     168:	88 23       	and	r24, r24
     16a:	11 f0       	breq	.+4      	; 0x170 <UPDI::send_bytes(unsigned char*, unsigned char)+0x1a>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:158
  } while (--len);
     16c:	c1 50       	subi	r28, 0x01	; 1
     16e:	c1 f7       	brne	.-16     	; 0x160 <UPDI::send_bytes(unsigned char*, unsigned char)+0xa>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:160
  return true;
}
     170:	cf 91       	pop	r28
     172:	1f 91       	pop	r17
     174:	0f 91       	pop	r16
     176:	08 95       	ret

00000178 <UPDI::set_cs_stat(unsigned char, unsigned char)>:
_ZN4UPDI11set_cs_statEhh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:312
 * Control status transmission
 */

bool UPDI::set_cs_stat (uint8_t code, uint8_t data) {
  static uint8_t set_ptr[] = { UPDI_SYNCH, 0, 0 };
  set_ptr[1] = UPDI_STCS | code;
     178:	e3 e1       	ldi	r30, 0x13	; 19
     17a:	f8 e3       	ldi	r31, 0x38	; 56
     17c:	80 6c       	ori	r24, 0xC0	; 192
     17e:	81 83       	std	Z+1, r24	; 0x01
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:313
  set_ptr[2] = data;
     180:	62 83       	std	Z+2, r22	; 0x02
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:314
  return send_bytes(set_ptr, sizeof(set_ptr));
     182:	63 e0       	ldi	r22, 0x03	; 3
     184:	cf 01       	movw	r24, r30
     186:	e7 cf       	rjmp	.-50     	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>

00000188 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.17]>:
_ZN4UPDI7sts8rsdEmPhh.constprop.17():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:220
    } while (--repeat);
  }
  return len == 0;
}

bool UPDI::sts8rsd (uint32_t addr, uint8_t *data, uint8_t len) {
     188:	0f 93       	push	r16
     18a:	1f 93       	push	r17
     18c:	cf 93       	push	r28
     18e:	c4 2f       	mov	r28, r20
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:221
  _CAPS32(_set_ptr_l[2])->dword = addr;
     190:	60 93 41 38 	sts	0x3841, r22	; 0x803841 <UPDI::_set_ptr_l+0x2>
     194:	70 93 42 38 	sts	0x3842, r23	; 0x803842 <UPDI::_set_ptr_l+0x3>
     198:	80 93 43 38 	sts	0x3843, r24	; 0x803843 <UPDI::_set_ptr_l+0x4>
     19c:	90 93 44 38 	sts	0x3844, r25	; 0x803844 <UPDI::_set_ptr_l+0x5>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:222
  _set_repeat[2] = len - 1;
     1a0:	8f ef       	ldi	r24, 0xFF	; 255
     1a2:	84 0f       	add	r24, r20
     1a4:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <UPDI::_set_repeat+0x2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:223
  _set_repeat[4] = UPDI_PTR_INC|UPDI_ST|UPDI_DATA1;
     1a8:	84 e6       	ldi	r24, 0x64	; 100
     1aa:	80 93 3e 38 	sts	0x383E, r24	; 0x80383e <UPDI::_set_repeat+0x4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:224
  if (!send_bytes(_set_ptr_l, sizeof(_set_ptr_l) - 1)) return false;
     1ae:	65 e0       	ldi	r22, 0x05	; 5
     1b0:	8f e3       	ldi	r24, 0x3F	; 63
     1b2:	98 e3       	ldi	r25, 0x38	; 56
     1b4:	d0 df       	rcall	.-96     	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     1b6:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:225
  if (UPDI_ACK != RECV()) return false;
     1b8:	e1 f0       	breq	.+56     	; 0x1f2 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.17]+0x6a>
     1ba:	a7 df       	rcall	.-178    	; 0x10a <UPDI::RECV()>
     1bc:	80 34       	cpi	r24, 0x40	; 64
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:318
  set_ptr[2] = data;
  return send_bytes(set_ptr, sizeof(set_ptr));
}

bool UPDI::set_cs_ctra (uint8_t data) {
  return set_cs_stat(UPDI_CS_CTRLA, data);
     1be:	c9 f4       	brne	.+50     	; 0x1f2 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.17]+0x6a>
set_cs_ctra():
     1c0:	6e e0       	ldi	r22, 0x0E	; 14
     1c2:	82 e0       	ldi	r24, 0x02	; 2
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:226
  _CAPS32(_set_ptr_l[2])->dword = addr;
  _set_repeat[2] = len - 1;
  _set_repeat[4] = UPDI_PTR_INC|UPDI_ST|UPDI_DATA1;
  if (!send_bytes(_set_ptr_l, sizeof(_set_ptr_l) - 1)) return false;
  if (UPDI_ACK != RECV()) return false;
  if (!set_cs_ctra(UPDI_SET_RSD|UPDI_GTVAL_RSD)) return false;
     1c4:	d9 df       	rcall	.-78     	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>
_ZN4UPDI7sts8rsdEmPhh.constprop.17():
     1c6:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:227
  if (!send_bytes(_set_repeat, sizeof(_set_repeat))) return false;
     1c8:	a1 f0       	breq	.+40     	; 0x1f2 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.17]+0x6a>
     1ca:	65 e0       	ldi	r22, 0x05	; 5
     1cc:	8a e3       	ldi	r24, 0x3A	; 58
     1ce:	98 e3       	ldi	r25, 0x38	; 56
     1d0:	c2 df       	rcall	.-124    	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     1d2:	88 23       	and	r24, r24
     1d4:	71 f0       	breq	.+28     	; 0x1f2 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.17]+0x6a>
     1d6:	0e e9       	ldi	r16, 0x9E	; 158
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:229
  do {              /* Repeat byte send */
    SEND(*data++);  /* Submission errors must be ignored */
     1d8:	18 e3       	ldi	r17, 0x38	; 56
     1da:	f8 01       	movw	r30, r16
     1dc:	81 91       	ld	r24, Z+
     1de:	8f 01       	movw	r16, r30
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:230
  } while (--len);
     1e0:	a0 df       	rcall	.-192    	; 0x122 <UPDI::SEND(unsigned char)>
     1e2:	c1 50       	subi	r28, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:318
  set_ptr[2] = data;
  return send_bytes(set_ptr, sizeof(set_ptr));
}

bool UPDI::set_cs_ctra (uint8_t data) {
  return set_cs_stat(UPDI_CS_CTRLA, data);
     1e4:	d1 f7       	brne	.-12     	; 0x1da <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.17]+0x52>
set_cs_ctra():
     1e6:	66 e0       	ldi	r22, 0x06	; 6
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:233
  do {              /* Repeat byte send */
    SEND(*data++);  /* Submission errors must be ignored */
  } while (--len);
  if (!set_cs_ctra(UPDI_GTVAL)) return false;
  return true;
}
     1e8:	82 e0       	ldi	r24, 0x02	; 2
_ZN4UPDI7sts8rsdEmPhh.constprop.17():
     1ea:	cf 91       	pop	r28
     1ec:	1f 91       	pop	r17
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:318
  set_ptr[2] = data;
  return send_bytes(set_ptr, sizeof(set_ptr));
}

bool UPDI::set_cs_ctra (uint8_t data) {
  return set_cs_stat(UPDI_CS_CTRLA, data);
     1ee:	0f 91       	pop	r16
set_cs_ctra():
     1f0:	c3 cf       	rjmp	.-122    	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>
_ZN4UPDI7sts8rsdEmPhh.constprop.17():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:233
  do {              /* Repeat byte send */
    SEND(*data++);  /* Submission errors must be ignored */
  } while (--len);
  if (!set_cs_ctra(UPDI_GTVAL)) return false;
  return true;
}
     1f2:	80 e0       	ldi	r24, 0x00	; 0
     1f4:	cf 91       	pop	r28
     1f6:	1f 91       	pop	r17
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:289
 * Control status reception
 */

uint8_t UPDI::get_cs_stat (uint8_t code) {
  static uint8_t set_ptr[] = { UPDI_SYNCH, 0 };
  set_ptr[1] = UPDI_LDCS | code;
     1f8:	0f 91       	pop	r16
     1fa:	08 95       	ret

000001fc <UPDI::get_cs_stat(unsigned char)>:
_ZN4UPDI11get_cs_statEh():
     1fc:	80 68       	ori	r24, 0x80	; 128
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:290
  send_bytes(set_ptr, sizeof(set_ptr));
     1fe:	80 93 12 38 	sts	0x3812, r24	; 0x803812 <UPDI::get_cs_stat(unsigned char)::set_ptr+0x1>
     202:	62 e0       	ldi	r22, 0x02	; 2
     204:	81 e1       	ldi	r24, 0x11	; 17
     206:	98 e3       	ldi	r25, 0x38	; 56
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:291
  return RECV();
     208:	a6 df       	rcall	.-180    	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     20a:	7f cf       	rjmp	.-258    	; 0x10a <UPDI::RECV()>

0000020c <UPDI::st8(unsigned long, unsigned char)>:
_ZN4UPDI3st8Emh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:180

/*
 * Single byte transmission
 */

bool UPDI::st8 (uint32_t addr, uint8_t data) {
     20c:	cf 93       	push	r28
     20e:	c4 2f       	mov	r28, r20
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:186
  static uint8_t set_ptr[] = {
      UPDI_SYNCH
    , UPDI_STS | UPDI_ADDR3 | UPDI_DATA1
    , 0, 0, 0, 0    // 24bit address
  };
  _CAPS32(set_ptr[2])->dword = addr;
     210:	60 93 07 38 	sts	0x3807, r22	; 0x803807 <UPDI::st8(unsigned long, unsigned char)::set_ptr+0x2>
     214:	70 93 08 38 	sts	0x3808, r23	; 0x803808 <UPDI::st8(unsigned long, unsigned char)::set_ptr+0x3>
     218:	80 93 09 38 	sts	0x3809, r24	; 0x803809 <UPDI::st8(unsigned long, unsigned char)::set_ptr+0x4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:187
  if (!send_bytes(set_ptr, sizeof(set_ptr) - 1)) return false;
     21c:	90 93 0a 38 	sts	0x380A, r25	; 0x80380a <UPDI::st8(unsigned long, unsigned char)::set_ptr+0x5>
     220:	65 e0       	ldi	r22, 0x05	; 5
     222:	85 e0       	ldi	r24, 0x05	; 5
     224:	98 e3       	ldi	r25, 0x38	; 56
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:190
  if (UPDI_ACK != RECV()) return false;
  if (!SEND(data)) return false;
  return UPDI_ACK == RECV();
     226:	97 df       	rcall	.-210    	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     228:	81 11       	cpse	r24, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:188
    , UPDI_STS | UPDI_ADDR3 | UPDI_DATA1
    , 0, 0, 0, 0    // 24bit address
  };
  _CAPS32(set_ptr[2])->dword = addr;
  if (!send_bytes(set_ptr, sizeof(set_ptr) - 1)) return false;
  if (UPDI_ACK != RECV()) return false;
     22a:	02 c0       	rjmp	.+4      	; 0x230 <UPDI::st8(unsigned long, unsigned char)+0x24>
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	0b c0       	rjmp	.+22     	; 0x246 <UPDI::st8(unsigned long, unsigned char)+0x3a>
     230:	6c df       	rcall	.-296    	; 0x10a <UPDI::RECV()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:189
  if (!SEND(data)) return false;
     232:	80 34       	cpi	r24, 0x40	; 64
     234:	d9 f7       	brne	.-10     	; 0x22c <UPDI::st8(unsigned long, unsigned char)+0x20>
     236:	8c 2f       	mov	r24, r28
     238:	74 df       	rcall	.-280    	; 0x122 <UPDI::SEND(unsigned char)>
     23a:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:190
  return UPDI_ACK == RECV();
     23c:	b9 f3       	breq	.-18     	; 0x22c <UPDI::st8(unsigned long, unsigned char)+0x20>
     23e:	65 df       	rcall	.-310    	; 0x10a <UPDI::RECV()>
     240:	91 e0       	ldi	r25, 0x01	; 1
     242:	80 34       	cpi	r24, 0x40	; 64
     244:	99 f7       	brne	.-26     	; 0x22c <UPDI::st8(unsigned long, unsigned char)+0x20>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:191
}
     246:	89 2f       	mov	r24, r25
     248:	cf 91       	pop	r28
     24a:	08 95       	ret

0000024c <UPDI::send_repeat_header(unsigned long, unsigned char, unsigned char)>:
_ZN4UPDI18send_repeat_headerEmhh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:168
 * Repeat header transmission
 */

/* __attribute__((optimize("O0"))) */
bool UPDI::send_repeat_header (uint32_t addr, uint8_t cmd, uint8_t len) {
  _CAPS32(_set_ptr_l[2])->dword = addr;
     24c:	60 93 41 38 	sts	0x3841, r22	; 0x803841 <UPDI::_set_ptr_l+0x2>
     250:	70 93 42 38 	sts	0x3842, r23	; 0x803842 <UPDI::_set_ptr_l+0x3>
     254:	80 93 43 38 	sts	0x3843, r24	; 0x803843 <UPDI::_set_ptr_l+0x4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:169
  _set_repeat[2] = len - 1;
     258:	90 93 44 38 	sts	0x3844, r25	; 0x803844 <UPDI::_set_ptr_l+0x5>
     25c:	21 50       	subi	r18, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:170
  _set_repeat[4] = UPDI_PTR_INC | cmd;  // ST,LD + DATA1,DATA2
     25e:	20 93 3c 38 	sts	0x383C, r18	; 0x80383c <UPDI::_set_repeat+0x2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:171
  if (!send_bytes(_set_ptr_l, sizeof(_set_ptr_l) - 1)) return false;
     262:	44 60       	ori	r20, 0x04	; 4
     264:	40 93 3e 38 	sts	0x383E, r20	; 0x80383e <UPDI::_set_repeat+0x4>
     268:	65 e0       	ldi	r22, 0x05	; 5
     26a:	8f e3       	ldi	r24, 0x3F	; 63
     26c:	98 e3       	ldi	r25, 0x38	; 56
     26e:	73 df       	rcall	.-282    	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:172
  if (UPDI_ACK != RECV()) return false;
     270:	88 23       	and	r24, r24
     272:	39 f0       	breq	.+14     	; 0x282 <UPDI::send_repeat_header(unsigned long, unsigned char, unsigned char)+0x36>
     274:	4a df       	rcall	.-364    	; 0x10a <UPDI::RECV()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:173
  return send_bytes(_set_repeat, sizeof(_set_repeat));
     276:	80 34       	cpi	r24, 0x40	; 64
     278:	21 f4       	brne	.+8      	; 0x282 <UPDI::send_repeat_header(unsigned long, unsigned char, unsigned char)+0x36>
     27a:	65 e0       	ldi	r22, 0x05	; 5
     27c:	8a e3       	ldi	r24, 0x3A	; 58
     27e:	98 e3       	ldi	r25, 0x38	; 56
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:174
}
     280:	6a cf       	rjmp	.-300    	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:197

/*
 * Transmission
 */

bool UPDI::sts8 (uint32_t addr, uint8_t *data, uint8_t len) {
     282:	80 e0       	ldi	r24, 0x00	; 0
     284:	08 95       	ret

00000286 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)>:
_ZN4UPDI4sts8EmPhh():
     286:	ff 92       	push	r15
     288:	0f 93       	push	r16
     28a:	1f 93       	push	r17
     28c:	cf 93       	push	r28
     28e:	df 93       	push	r29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:198
  if (send_repeat_header(addr, UPDI_ST|UPDI_DATA1, len)) {
     290:	f4 2e       	mov	r15, r20
     292:	d5 2f       	mov	r29, r21
     294:	c2 2f       	mov	r28, r18
     296:	40 e6       	ldi	r20, 0x60	; 96
     298:	d9 df       	rcall	.-78     	; 0x24c <UPDI::send_repeat_header(unsigned long, unsigned char, unsigned char)>
     29a:	88 23       	and	r24, r24
     29c:	69 f0       	breq	.+26     	; 0x2b8 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)+0x32>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:200
    do {
      if (!SEND(*data++)) break;
     29e:	0f 2d       	mov	r16, r15
     2a0:	1d 2f       	mov	r17, r29
     2a2:	f8 01       	movw	r30, r16
     2a4:	81 91       	ld	r24, Z+
     2a6:	8f 01       	movw	r16, r30
     2a8:	3c df       	rcall	.-392    	; 0x122 <UPDI::SEND(unsigned char)>
     2aa:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:201
      if (UPDI_ACK != RECV()) break;
     2ac:	29 f0       	breq	.+10     	; 0x2b8 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)+0x32>
     2ae:	2d df       	rcall	.-422    	; 0x10a <UPDI::RECV()>
     2b0:	80 34       	cpi	r24, 0x40	; 64
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:202
    } while (--len);
     2b2:	11 f4       	brne	.+4      	; 0x2b8 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)+0x32>
     2b4:	c1 50       	subi	r28, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:204
  }
  return len == 0;
     2b6:	a9 f7       	brne	.-22     	; 0x2a2 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)+0x1c>
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	c1 11       	cpse	r28, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:205
}
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	df 91       	pop	r29
     2c0:	cf 91       	pop	r28
     2c2:	1f 91       	pop	r17
     2c4:	0f 91       	pop	r16
     2c6:	ff 90       	pop	r15
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:134
  if (!_r) bit_set(UPDI_LASTH, 0x20);
  return _r;
}

/* BREAK character : Generated by slowing down the sending speed */
void UPDI::BREAK (void) {
     2c8:	08 95       	ret

000002ca <UPDI::BREAK()>:
_ZN4UPDI5BREAKEv():
     2ca:	cf 93       	push	r28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:135
  UPDI_USART.BAUD = UPDI_BAUD_BREAK;
     2cc:	df 93       	push	r29
     2ce:	c0 e0       	ldi	r28, 0x00	; 0
     2d0:	d8 e0       	ldi	r29, 0x08	; 8
     2d2:	80 ec       	ldi	r24, 0xC0	; 192
     2d4:	94 e4       	ldi	r25, 0x44	; 68
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:137
  /* Maintains low level signal at least 768bit long */
  SEND(UPDI_NOP);
     2d6:	88 87       	std	Y+8, r24	; 0x08
     2d8:	99 87       	std	Y+9, r25	; 0x09
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:138
  UPDI_USART.BAUD = UPDI_BAUD_CALC;
     2da:	80 e0       	ldi	r24, 0x00	; 0
     2dc:	22 df       	rcall	.-444    	; 0x122 <UPDI::SEND(unsigned char)>
     2de:	80 eb       	ldi	r24, 0xB0	; 176
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:139
  bit_clear(UPDI_CONTROL, UPDI_CLKU_bp);
     2e0:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:140
}
     2e2:	88 87       	std	Y+8, r24	; 0x08
     2e4:	99 87       	std	Y+9, r25	; 0x09
     2e6:	e6 98       	cbi	0x1c, 6	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:262
  static uint8_t set_ptr[] = {
      UPDI_SYNCH
    , UPDI_LDS|UPDI_ADDR3|UPDI_DATA1
    , 0, 0, 0, 0  // 24bit address
  };
  _CAPS16(set_ptr[2])->word = (uint16_t)addr;
     2e8:	df 91       	pop	r29
     2ea:	cf 91       	pop	r28
     2ec:	08 95       	ret

000002ee <UPDI::ld8(unsigned long)>:
_ZN4UPDI3ld8Em():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:263
  while (!send_bytes(set_ptr, sizeof(set_ptr) - 1)) BREAK();
     2ee:	60 93 0d 38 	sts	0x380D, r22	; 0x80380d <UPDI::ld8(unsigned long)::set_ptr+0x2>
     2f2:	70 93 0e 38 	sts	0x380E, r23	; 0x80380e <UPDI::ld8(unsigned long)::set_ptr+0x3>
     2f6:	65 e0       	ldi	r22, 0x05	; 5
     2f8:	8b e0       	ldi	r24, 0x0B	; 11
     2fa:	98 e3       	ldi	r25, 0x38	; 56
     2fc:	2c df       	rcall	.-424    	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     2fe:	81 11       	cpse	r24, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:264
  return RECV();
     300:	02 c0       	rjmp	.+4      	; 0x306 <UPDI::ld8(unsigned long)+0x18>
     302:	e3 df       	rcall	.-58     	; 0x2ca <UPDI::BREAK()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:94
  return send_bytes(set_ptr, sizeof(set_ptr));
}

/* This only does a system reset */
bool UPDI::updi_reset (bool logic) {
  return set_cs_stat(
     304:	f8 cf       	rjmp	.-16     	; 0x2f6 <UPDI::ld8(unsigned long)+0x8>
     306:	01 cf       	rjmp	.-510    	; 0x10a <UPDI::RECV()>

00000308 <UPDI::updi_reset(bool)>:
_ZN4UPDI10updi_resetEb():
     308:	60 e0       	ldi	r22, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:96
    UPDI_CS_ASI_RESET_REQ,
    (logic ? UPDI_RSTREQ : UPDI_NOP));
     30a:	81 11       	cpse	r24, r1
     30c:	69 e5       	ldi	r22, 0x59	; 89
     30e:	88 e0       	ldi	r24, 0x08	; 8
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:78
  UPDI_USART.CTRLB = UPDI_USART_ON;
  bit_clear(UPDI_CONTROL, UPDI_CLKU_bp);
}

/* This special system reset will log you out of UPDI */
bool UPDI::Target_Reset (bool _enable) {
     310:	33 cf       	rjmp	.-410    	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>

00000312 <UPDI::Target_Reset(bool)>:
_ZN4UPDI12Target_ResetEb():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:86
    , UPDI_STCS | UPDI_CS_ASI_RESET_REQ
    , 0
    , UPDI_STCS | UPDI_CS_CTRLB
    , UPDI_SET_UPDIDIS
  };
  if (!digitalRead(UPDI_TDAT_PIN)) return false;
     312:	cf 93       	push	r28
     314:	11 9b       	sbis	0x02, 1	; 2
     316:	0c c0       	rjmp	.+24     	; 0x330 <UPDI::Target_Reset(bool)+0x1e>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:87
  BREAK();
     318:	c8 2f       	mov	r28, r24
     31a:	d7 df       	rcall	.-82     	; 0x2ca <UPDI::BREAK()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:88
  set_ptr[2] = _enable ? UPDI_RSTREQ : UPDI_NOP;
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	c1 11       	cpse	r28, r1
     320:	89 e5       	ldi	r24, 0x59	; 89
     322:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <__DATA_REGION_ORIGIN__+0x2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:89
  return send_bytes(set_ptr, sizeof(set_ptr));
     326:	65 e0       	ldi	r22, 0x05	; 5
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	98 e3       	ldi	r25, 0x38	; 56
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:90
}
     32c:	cf 91       	pop	r28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:89
    , UPDI_SET_UPDIDIS
  };
  if (!digitalRead(UPDI_TDAT_PIN)) return false;
  BREAK();
  set_ptr[2] = _enable ? UPDI_RSTREQ : UPDI_NOP;
  return send_bytes(set_ptr, sizeof(set_ptr));
     32e:	13 cf       	rjmp	.-474    	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     330:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:90
}
     332:	cf 91       	pop	r28
     334:	08 95       	ret

00000336 <TIM::LED_Flash()>:
_ZN3TIM9LED_FlashEv():
     336:	80 91 61 38 	lds	r24, 0x3861	; 0x803861 <TIM::mode>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:139
    LEDG_EVOUT = EVSYS_USER_CHANNEL2_gc;
  }
}

void LED_TCB1 (uint8_t mode, uint16_t ccmp) {
  if (TIM::mode != mode) {
     33a:	82 30       	cpi	r24, 0x02	; 2
     33c:	99 f0       	breq	.+38     	; 0x364 <TIM::LED_Flash()+0x2e>
     33e:	82 e0       	ldi	r24, 0x02	; 2
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:140
    TIM::mode = mode;
     340:	80 93 61 38 	sts	0x3861, r24	; 0x803861 <TIM::mode>
     344:	89 ea       	ldi	r24, 0xA9	; 169
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:141
    TCB1_CCMP = ccmp;
     346:	98 e0       	ldi	r25, 0x08	; 8
     348:	80 93 9c 0a 	sts	0x0A9C, r24	; 0x800a9c <__RODATA_PM_OFFSET__+0x7f8a9c>
     34c:	90 93 9d 0a 	sts	0x0A9D, r25	; 0x800a9d <__RODATA_PM_OFFSET__+0x7f8a9d>
     350:	10 92 9a 0a 	sts	0x0A9A, r1	; 0x800a9a <__RODATA_PM_OFFSET__+0x7f8a9a>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:142
    TCB1_CNT = 0;
     354:	10 92 9b 0a 	sts	0x0A9B, r1	; 0x800a9b <__RODATA_PM_OFFSET__+0x7f8a9b>
     358:	8f e4       	ldi	r24, 0x4F	; 79
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:143
    TCB1_CTRLA = TCB_RUNSTDBY_bm | TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
     35a:	80 93 90 0a 	sts	0x0A90, r24	; 0x800a90 <__RODATA_PM_OFFSET__+0x7f8a90>
     35e:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:144
    LEDG_EVOUT = EVSYS_USER_CHANNEL0_gc;
     360:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <__RODATA_PM_OFFSET__+0x7f81a9>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:151
}

/* Flash (after RTS assert/UPDI authorization) */
void TIM::LED_Flash (void) {
  LED_TCB1(2, TCB1_FLASH);
}
     364:	08 95       	ret

00000366 <TIM::Timeout_Stop()>:
_ZN3TIM12Timeout_StopEv():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:116
    TCB0_CTRLA = TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
  }
}

void TIM::Timeout_Stop (void) {
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     366:	8f b7       	in	r24, 0x3f	; 63
__iCliRetVal():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     368:	f8 94       	cli
_ZN3TIM12Timeout_StopEv():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:117
    TCB0_CTRLA = 0;
     36a:	10 92 80 0a 	sts	0x0A80, r1	; 0x800a80 <__RODATA_PM_OFFSET__+0x7f8a80>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:118
    TCB0_INTFLAGS = TCB_CAPT_bm;
     36e:	91 e0       	ldi	r25, 0x01	; 1
     370:	90 93 86 0a 	sts	0x0A86, r25	; 0x800a86 <__RODATA_PM_OFFSET__+0x7f8a86>
__iRestore():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:120
  }
  reti();
     374:	8f bf       	out	0x3f, r24	; 63
_ZN3TIM12Timeout_StopEv():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:121
}
     376:	18 95       	reti
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:160
/*****************
 * WDT operation *
 *****************/

void SYS::WDT_SET (uint8_t _wdt_period) {
  loop_until_bit_is_clear(WDT_STATUS, WDT_SYNCBUSY_bp);
     378:	08 95       	ret

0000037a <SYS::WDT_SET(unsigned char)>:
_ZN3SYS7WDT_SETEh():
     37a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__RODATA_PM_OFFSET__+0x7f8101>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:161
  _PROTECTED_WRITE(WDT_CTRLA, _wdt_period);
     37e:	90 fd       	sbrc	r25, 0
     380:	fc cf       	rjmp	.-8      	; 0x37a <SYS::WDT_SET(unsigned char)>
     382:	98 ed       	ldi	r25, 0xD8	; 216
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:162
}
     384:	94 bf       	out	0x34, r25	; 52
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:69
    return UPDI_LASTL;
  }

  /* NVMCTRL version 0 (,2,3,5) */
  bool nvm_ctrl (uint8_t nvmcmd) {
    return UPDI::st8(NVMCTRL_REG_CTRLA, nvmcmd);
     386:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__RODATA_PM_OFFSET__+0x7f8100>
     38a:	08 95       	ret

0000038c <NVM::nvm_ctrl(unsigned char)>:
_ZN3NVM8nvm_ctrlEh():
     38c:	48 2f       	mov	r20, r24
     38e:	60 e0       	ldi	r22, 0x00	; 0
     390:	70 e1       	ldi	r23, 0x10	; 16
     392:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:73
  }

  /* NVMCTRL version 2,3,5 */
  bool nvm_ctrl_change (uint8_t nvmcmd) {
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	3a cf       	rjmp	.-396    	; 0x20c <UPDI::st8(unsigned long, unsigned char)>

00000398 <NVM::nvm_ctrl_change(unsigned char)>:
_ZN3NVM15nvm_ctrl_changeEh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:74
    if (UPDI::ld8(NVMCTRL_REG_CTRLA) == nvmcmd) return true;
     398:	cf 93       	push	r28
     39a:	c8 2f       	mov	r28, r24
     39c:	60 e0       	ldi	r22, 0x00	; 0
     39e:	70 e1       	ldi	r23, 0x10	; 16
     3a0:	80 e0       	ldi	r24, 0x00	; 0
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	a4 df       	rcall	.-184    	; 0x2ee <UPDI::ld8(unsigned long)>
     3a6:	8c 13       	cpse	r24, r28
     3a8:	03 c0       	rjmp	.+6      	; 0x3b0 <NVM::nvm_ctrl_change(unsigned char)+0x18>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:78
    if (!nvm_ctrl(NVM_CMD_NOCMD)) return false;
    if (NVM_CMD_NOCMD != nvmcmd) return nvm_ctrl(nvmcmd);
    return true;
  }
     3aa:	81 e0       	ldi	r24, 0x01	; 1
     3ac:	cf 91       	pop	r28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:75
  }

  /* NVMCTRL version 2,3,5 */
  bool nvm_ctrl_change (uint8_t nvmcmd) {
    if (UPDI::ld8(NVMCTRL_REG_CTRLA) == nvmcmd) return true;
    if (!nvm_ctrl(NVM_CMD_NOCMD)) return false;
     3ae:	08 95       	ret
     3b0:	80 e0       	ldi	r24, 0x00	; 0
     3b2:	ec df       	rcall	.-40     	; 0x38c <NVM::nvm_ctrl(unsigned char)>
     3b4:	88 23       	and	r24, r24
     3b6:	d1 f3       	breq	.-12     	; 0x3ac <NVM::nvm_ctrl_change(unsigned char)+0x14>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:76
    if (NVM_CMD_NOCMD != nvmcmd) return nvm_ctrl(nvmcmd);
     3b8:	cc 23       	and	r28, r28
     3ba:	b9 f3       	breq	.-18     	; 0x3aa <NVM::nvm_ctrl_change(unsigned char)+0x12>
     3bc:	8c 2f       	mov	r24, r28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:78
    return true;
  }
     3be:	cf 91       	pop	r28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:76

  /* NVMCTRL version 2,3,5 */
  bool nvm_ctrl_change (uint8_t nvmcmd) {
    if (UPDI::ld8(NVMCTRL_REG_CTRLA) == nvmcmd) return true;
    if (!nvm_ctrl(NVM_CMD_NOCMD)) return false;
    if (NVM_CMD_NOCMD != nvmcmd) return nvm_ctrl(nvmcmd);
     3c0:	e5 cf       	rjmp	.-54     	; 0x38c <NVM::nvm_ctrl(unsigned char)>

000003c2 <JTAG2::set_response(JTAG2::jtag_response_e)>:
_ZN5JTAG212set_responseENS_15jtag_response_eE():
     3c2:	ec e8       	ldi	r30, 0x8C	; 140
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:471
/*****************
 * JTAG Response *
 *****************/

void JTAG2::set_response (jtag_response_e response_code) {
  packet.size = 4;
     3c4:	f8 e3       	ldi	r31, 0x38	; 56
     3c6:	44 e0       	ldi	r20, 0x04	; 4
     3c8:	50 e0       	ldi	r21, 0x00	; 0
     3ca:	60 e0       	ldi	r22, 0x00	; 0
     3cc:	70 e0       	ldi	r23, 0x00	; 0
     3ce:	43 83       	std	Z+3, r20	; 0x03
     3d0:	54 83       	std	Z+4, r21	; 0x04
     3d2:	65 83       	std	Z+5, r22	; 0x05
     3d4:	76 83       	std	Z+6, r23	; 0x06
     3d6:	80 87       	std	Z+8, r24	; 0x08
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:473
  /* response number */
  packet.body[MESSAGE_ID] = response_code;
     3d8:	8c b3       	in	r24, 0x1c	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:475
  /* Internal status flag */
  packet.body[RSP_DATA    ] = UPDI_CONTROL;
     3da:	81 87       	std	Z+9, r24	; 0x09
     3dc:	8d b3       	in	r24, 0x1d	; 29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:476
  packet.body[RSP_DATA + 1] = UPDI_NVMCTRL;
     3de:	82 87       	std	Z+10, r24	; 0x0a
     3e0:	8e b3       	in	r24, 0x1e	; 30
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:477
  packet.body[RSP_DATA + 2] = UPDI_LASTL;
     3e2:	83 87       	std	Z+11, r24	; 0x0b
     3e4:	08 95       	ret

000003e6 <_crc_ccitt_update(unsigned int, unsigned char)>:
_ZL17_crc_ccitt_updatejh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:478
}
     3e6:	86 27       	eor	r24, r22
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/crc16.h:285
        "eor    %A0,__tmp_reg__"

        : "=d" (__ret)
        : "r" (__data), "0" (__crc)
        : "r0"
    );
     3e8:	08 2e       	mov	r0, r24
     3ea:	82 95       	swap	r24
     3ec:	80 7f       	andi	r24, 0xF0	; 240
     3ee:	80 25       	eor	r24, r0
     3f0:	09 2e       	mov	r0, r25
     3f2:	98 2f       	mov	r25, r24
     3f4:	82 95       	swap	r24
     3f6:	8f 70       	andi	r24, 0x0F	; 15
     3f8:	08 26       	eor	r0, r24
     3fa:	86 95       	lsr	r24
     3fc:	98 27       	eor	r25, r24
     3fe:	89 27       	eor	r24, r25
     400:	88 0f       	add	r24, r24
     402:	88 0f       	add	r24, r24
     404:	88 0f       	add	r24, r24
     406:	80 25       	eor	r24, r0
     408:	08 95       	ret

0000040a <JTAG2::answer_transfer()>:
_ZN5JTAG215answer_transferEv():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/crc16.h:287
    return __ret;
}
     40a:	af 92       	push	r10
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:150

  /***************
   * JTAG Answer *
   ***************/

  void answer_transfer (void) {
     40c:	bf 92       	push	r11
     40e:	cf 92       	push	r12
     410:	df 92       	push	r13
     412:	ef 92       	push	r14
     414:	ff 92       	push	r15
     416:	0f 93       	push	r16
     418:	1f 93       	push	r17
     41a:	cf 93       	push	r28
     41c:	df 93       	push	r29
     41e:	00 d0       	rcall	.+0      	; 0x420 <JTAG2::answer_transfer()+0x16>
     420:	cd b7       	in	r28, 0x3d	; 61
     422:	de b7       	in	r29, 0x3e	; 62
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:151
    uint16_t _crc = ~0;
     424:	8f ef       	ldi	r24, 0xFF	; 255
     426:	9f ef       	ldi	r25, 0xFF	; 255
     428:	89 83       	std	Y+1, r24	; 0x01
     42a:	9a 83       	std	Y+2, r25	; 0x02
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:152
    int16_t _len = packet.size_word[0] + 8;
     42c:	e0 90 8f 38 	lds	r14, 0x388F	; 0x80388f <JTAG2::packet+0x3>
     430:	f0 90 90 38 	lds	r15, 0x3890	; 0x803890 <JTAG2::packet+0x4>
     434:	87 01       	movw	r16, r14
     436:	08 5f       	subi	r16, 0xF8	; 248
     438:	1f 4f       	sbci	r17, 0xFF	; 255
     43a:	8c e8       	ldi	r24, 0x8C	; 140
     43c:	c8 2e       	mov	r12, r24
     43e:	88 e3       	ldi	r24, 0x38	; 56
     440:	d8 2e       	mov	r13, r24
     442:	56 01       	movw	r10, r12
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	e8 1a       	sub	r14, r24
     448:	f1 08       	sbc	r15, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:155
    uint8_t *_p = (uint8_t*) &packet.soh;
    uint8_t *_q = (uint8_t*) &packet.soh;
    while (_len--) _crc = crc16_update(_crc, *_q++);
     44a:	a7 ef       	ldi	r26, 0xF7	; 247
     44c:	ea 16       	cp	r14, r26
     44e:	af ef       	ldi	r26, 0xFF	; 255
     450:	fa 06       	cpc	r15, r26
     452:	49 f0       	breq	.+18     	; 0x466 <JTAG2::answer_transfer()+0x5c>
     454:	f5 01       	movw	r30, r10
     456:	61 91       	ld	r22, Z+
     458:	5f 01       	movw	r10, r30
crc16_update():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:101
  void flush (void) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_TXCIF_bp);
  }

  uint16_t crc16_update(uint16_t _crc, uint8_t _data) {
    return _crc_ccitt_update(_crc, _data);
     45a:	89 81       	ldd	r24, Y+1	; 0x01
     45c:	9a 81       	ldd	r25, Y+2	; 0x02
     45e:	c3 df       	rcall	.-122    	; 0x3e6 <_crc_ccitt_update(unsigned int, unsigned char)>
_ZN5JTAG215answer_transferEv():
     460:	89 83       	std	Y+1, r24	; 0x01
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:155
  void answer_transfer (void) {
    uint16_t _crc = ~0;
    int16_t _len = packet.size_word[0] + 8;
    uint8_t *_p = (uint8_t*) &packet.soh;
    uint8_t *_q = (uint8_t*) &packet.soh;
    while (_len--) _crc = crc16_update(_crc, *_q++);
     462:	9a 83       	std	Y+2, r25	; 0x02
     464:	ef cf       	rjmp	.-34     	; 0x444 <JTAG2::answer_transfer()+0x3a>
     466:	f8 01       	movw	r30, r16
     468:	e4 57       	subi	r30, 0x74	; 116
     46a:	f7 4c       	sbci	r31, 0xC7	; 199
     46c:	89 81       	ldd	r24, Y+1	; 0x01
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:156
    (*_q++) = _CAPS16(_crc)->bytes[0];
     46e:	80 83       	st	Z, r24
     470:	8a 81       	ldd	r24, Y+2	; 0x02
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:157
    (*_q++) = _CAPS16(_crc)->bytes[1];
     472:	81 83       	std	Z+1, r24	; 0x01
     474:	2f b7       	in	r18, 0x3f	; 63
__iCliRetVal():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:158
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     476:	f8 94       	cli
_ZN5JTAG215answer_transferEv():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:50
     478:	32 96       	adiw	r30, 0x02	; 2
put():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:157
    int16_t _len = packet.size_word[0] + 8;
    uint8_t *_p = (uint8_t*) &packet.soh;
    uint8_t *_q = (uint8_t*) &packet.soh;
    while (_len--) _crc = crc16_update(_crc, *_q++);
    (*_q++) = _CAPS16(_crc)->bytes[0];
    (*_q++) = _CAPS16(_crc)->bytes[1];
     47a:	90 e4       	ldi	r25, 0x40	; 64
_ZN5JTAG215answer_transferEv():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:92
    return JTAG_USART.RXDATAL;
  }

  uint8_t put (uint8_t _data) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_DREIF_bp);
    JTAG_USART.STATUS = USART_TXCIF_bm;
     47c:	ce 16       	cp	r12, r30
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:159
    uint8_t *_q = (uint8_t*) &packet.soh;
    while (_len--) _crc = crc16_update(_crc, *_q++);
    (*_q++) = _CAPS16(_crc)->bytes[0];
    (*_q++) = _CAPS16(_crc)->bytes[1];
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
      while (_p != _q) put(*_p++);
     47e:	df 06       	cpc	r13, r31
     480:	71 f4       	brne	.+28     	; 0x49e <JTAG2::answer_transfer()+0x94>
__iRestore():
     482:	2f bf       	out	0x3f, r18	; 63
_ZN5JTAG215answer_transferEv():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:161
    }
  }
     484:	0f 90       	pop	r0
     486:	0f 90       	pop	r0
     488:	df 91       	pop	r29
     48a:	cf 91       	pop	r28
     48c:	1f 91       	pop	r17
     48e:	0f 91       	pop	r16
     490:	ff 90       	pop	r15
     492:	ef 90       	pop	r14
     494:	df 90       	pop	r13
     496:	cf 90       	pop	r12
     498:	bf 90       	pop	r11
     49a:	af 90       	pop	r10
     49c:	08 95       	ret
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:159
    uint8_t *_q = (uint8_t*) &packet.soh;
    while (_len--) _crc = crc16_update(_crc, *_q++);
    (*_q++) = _CAPS16(_crc)->bytes[0];
    (*_q++) = _CAPS16(_crc)->bytes[1];
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
      while (_p != _q) put(*_p++);
     49e:	d6 01       	movw	r26, r12
     4a0:	8d 91       	ld	r24, X+
     4a2:	6d 01       	movw	r12, r26
put():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:91
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_RXCIF_bp);
    return JTAG_USART.RXDATAL;
  }

  uint8_t put (uint8_t _data) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_DREIF_bp);
     4a4:	30 91 24 08 	lds	r19, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
     4a8:	35 ff       	sbrs	r19, 5
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:92
    JTAG_USART.STATUS = USART_TXCIF_bm;
     4aa:	fc cf       	rjmp	.-8      	; 0x4a4 <JTAG2::answer_transfer()+0x9a>
     4ac:	90 93 24 08 	sts	0x0824, r25	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:93
    return JTAG_USART.TXDATAL = _data;
     4b0:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <__RODATA_PM_OFFSET__+0x7f8822>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:375
  } while (--limit);
  return false;
}

/* __attribute__((optimize("O0"))) */
bool UPDI::loop_until_key_stat_is_set (uint8_t bitmap, uint16_t limit) {
     4b4:	e3 cf       	rjmp	.-58     	; 0x47c <JTAG2::answer_transfer()+0x72>

000004b6 <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.20]>:
_ZN4UPDI26loop_until_key_stat_is_setEhj.constprop.20():
     4b6:	1f 93       	push	r17
     4b8:	cf 93       	push	r28
     4ba:	df 93       	push	r29
     4bc:	18 2f       	mov	r17, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:295
  send_bytes(set_ptr, sizeof(set_ptr));
  return RECV();
}

bool UPDI::is_cs_stat (uint8_t code, uint8_t check) {
  return check == (get_cs_stat(code) & check);
     4be:	d0 e0       	ldi	r29, 0x00	; 0
     4c0:	c0 e0       	ldi	r28, 0x00	; 0
is_cs_stat():
     4c2:	87 e0       	ldi	r24, 0x07	; 7
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:380
bool UPDI::loop_until_key_stat_is_set (uint8_t bitmap, uint16_t limit) {
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  uint16_t _back = _send_ptr;
  #endif
  do {
    if (is_key_stat(bitmap)) return true;
     4c4:	9b de       	rcall	.-714    	; 0x1fc <UPDI::get_cs_stat(unsigned char)>
     4c6:	81 23       	and	r24, r17
_ZN4UPDI26loop_until_key_stat_is_setEhj.constprop.20():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.8/cores/megaAVR/api/delay_busywait.h:31
static __inline__ __attribute__((__always_inline__)) void delay_micros (uint32_t _us);
static __inline__ __attribute__((__always_inline__)) void delay_millis (uint32_t _ms);

void delay_micros (uint32_t _us) {
  if (F_CPU >= 1000000L) {
    __builtin_avr_delay_cycles((F_CPU / 1000000L) * _us);
     4c8:	18 17       	cp	r17, r24
     4ca:	59 f0       	breq	.+22     	; 0x4e2 <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.20]+0x2c>
delay_micros():
     4cc:	86 ea       	ldi	r24, 0xA6	; 166
     4ce:	8a 95       	dec	r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:385
    #ifdef ENABLE_DEBUG_UPDI_SENDER
    _send_ptr = _back;
    #endif
    TIM::delay_50us();
  } while (--limit);
     4d0:	f1 f7       	brne	.-4      	; 0x4ce <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.20]+0x18>
     4d2:	00 c0       	rjmp	.+0      	; 0x4d4 <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.20]+0x1e>
_ZN4UPDI26loop_until_key_stat_is_setEhj.constprop.20():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:386
  return false;
     4d4:	21 97       	sbiw	r28, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:387
}
     4d6:	a9 f7       	brne	.-22     	; 0x4c2 <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.20]+0xc>
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	df 91       	pop	r29
     4dc:	cf 91       	pop	r28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:380
bool UPDI::loop_until_key_stat_is_set (uint8_t bitmap, uint16_t limit) {
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  uint16_t _back = _send_ptr;
  #endif
  do {
    if (is_key_stat(bitmap)) return true;
     4de:	1f 91       	pop	r17
     4e0:	08 95       	ret
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:391
  return false;
}

/* __attribute__((optimize("O0"))) */
bool UPDI::set_nvmprog_key (void) {
  if (!send_bytes(nvmprog_key, sizeof(nvmprog_key))) return false;
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	fa cf       	rjmp	.-12     	; 0x4da <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.20]+0x24>

000004e6 <UPDI::set_nvmprog_key()>:
_ZN4UPDI15set_nvmprog_keyEv():
     4e6:	6a e0       	ldi	r22, 0x0A	; 10
     4e8:	86 e1       	ldi	r24, 0x16	; 22
     4ea:	98 e3       	ldi	r25, 0x38	; 56
     4ec:	34 de       	rcall	.-920    	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:392
  return loop_until_key_stat_is_set(UPDI_KEY_NVMPROG);
     4ee:	88 23       	and	r24, r24
     4f0:	11 f0       	breq	.+4      	; 0x4f6 <UPDI::set_nvmprog_key()+0x10>
     4f2:	80 e1       	ldi	r24, 0x10	; 16
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:393
}
     4f4:	e0 cf       	rjmp	.-64     	; 0x4b6 <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.20]>
     4f6:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:345
  } while (--limit);
  return false;
}

/* __attribute__((optimize("O0"))) */
bool UPDI::loop_until_sys_stat_is_set (uint8_t bitmap, uint16_t limit) {
     4f8:	08 95       	ret

000004fa <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.23]>:
_ZN4UPDI26loop_until_sys_stat_is_setEhj.constprop.23():
     4fa:	1f 93       	push	r17
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
     500:	18 2f       	mov	r17, r24
     502:	d0 e0       	ldi	r29, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:295
  send_bytes(set_ptr, sizeof(set_ptr));
  return RECV();
}

bool UPDI::is_cs_stat (uint8_t code, uint8_t check) {
  return check == (get_cs_stat(code) & check);
     504:	c0 e0       	ldi	r28, 0x00	; 0
is_cs_stat():
     506:	8b e0       	ldi	r24, 0x0B	; 11
     508:	79 de       	rcall	.-782    	; 0x1fc <UPDI::get_cs_stat(unsigned char)>
     50a:	81 23       	and	r24, r17
_ZN4UPDI26loop_until_sys_stat_is_setEhj.constprop.23():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:350
bool UPDI::loop_until_sys_stat_is_set (uint8_t bitmap, uint16_t limit) {
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  uint16_t _back = _send_ptr;
  #endif
  do {
    if (is_sys_stat(bitmap)) return true;
     50c:	18 17       	cp	r17, r24
     50e:	59 f0       	breq	.+22     	; 0x526 <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.23]+0x2c>
delay_micros():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.8/cores/megaAVR/api/delay_busywait.h:31
     510:	86 ea       	ldi	r24, 0xA6	; 166
     512:	8a 95       	dec	r24
     514:	f1 f7       	brne	.-4      	; 0x512 <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.23]+0x18>
     516:	00 c0       	rjmp	.+0      	; 0x518 <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.23]+0x1e>
_ZN4UPDI26loop_until_sys_stat_is_setEhj.constprop.23():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:355
    #ifdef ENABLE_DEBUG_UPDI_SENDER
    _send_ptr = _back;
    #endif
    TIM::delay_50us();
  } while (--limit);
     518:	21 97       	sbiw	r28, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:356
  return false;
     51a:	a9 f7       	brne	.-22     	; 0x506 <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.23]+0xc>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:357
}
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	df 91       	pop	r29
     520:	cf 91       	pop	r28
     522:	1f 91       	pop	r17
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:350
bool UPDI::loop_until_sys_stat_is_set (uint8_t bitmap, uint16_t limit) {
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  uint16_t _back = _send_ptr;
  #endif
  do {
    if (is_sys_stat(bitmap)) return true;
     524:	08 95       	ret
     526:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:330
uint8_t UPDI::get_cs_asi_ctra (void) {
  return get_cs_stat(UPDI_CS_ASI_CTRLA);
}

/* __attribute__((optimize("O0"))) */
bool UPDI::loop_until_sys_stat_is_clear (uint8_t bitmap, uint16_t limit) {
     528:	fa cf       	rjmp	.-12     	; 0x51e <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.23]+0x24>

0000052a <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>:
_ZN4UPDI28loop_until_sys_stat_is_clearEhj():
     52a:	1f 93       	push	r17
     52c:	cf 93       	push	r28
     52e:	df 93       	push	r29
     530:	18 2f       	mov	r17, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:295
  send_bytes(set_ptr, sizeof(set_ptr));
  return RECV();
}

bool UPDI::is_cs_stat (uint8_t code, uint8_t check) {
  return check == (get_cs_stat(code) & check);
     532:	eb 01       	movw	r28, r22
is_cs_stat():
     534:	8b e0       	ldi	r24, 0x0B	; 11
     536:	62 de       	rcall	.-828    	; 0x1fc <UPDI::get_cs_stat(unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:335
bool UPDI::loop_until_sys_stat_is_clear (uint8_t bitmap, uint16_t limit) {
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  uint16_t _back = _send_ptr;
  #endif
  do {
    if (!is_sys_stat(bitmap)) return true;
     538:	81 23       	and	r24, r17
_ZN4UPDI28loop_until_sys_stat_is_clearEhj():
     53a:	18 13       	cpse	r17, r24
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.8/cores/megaAVR/api/delay_busywait.h:31
     53c:	0b c0       	rjmp	.+22     	; 0x554 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)+0x2a>
delay_micros():
     53e:	86 ea       	ldi	r24, 0xA6	; 166
     540:	8a 95       	dec	r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:340
    #ifdef ENABLE_DEBUG_UPDI_SENDER
    _send_ptr = _back;
    #endif
    TIM::delay_50us();
  } while (--limit);
     542:	f1 f7       	brne	.-4      	; 0x540 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)+0x16>
     544:	00 c0       	rjmp	.+0      	; 0x546 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)+0x1c>
_ZN4UPDI28loop_until_sys_stat_is_clearEhj():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:341
  return false;
     546:	21 97       	sbiw	r28, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:342
}
     548:	a9 f7       	brne	.-22     	; 0x534 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)+0xa>
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	df 91       	pop	r29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:335
bool UPDI::loop_until_sys_stat_is_clear (uint8_t bitmap, uint16_t limit) {
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  uint16_t _back = _send_ptr;
  #endif
  do {
    if (!is_sys_stat(bitmap)) return true;
     54e:	cf 91       	pop	r28
     550:	1f 91       	pop	r17
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:561

/**********************
 * UPDI control start *
 **********************/

bool UPDI::enter_updi (bool skip) {
     552:	08 95       	ret
     554:	81 e0       	ldi	r24, 0x01	; 1
     556:	fa cf       	rjmp	.-12     	; 0x54c <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)+0x22>

00000558 <UPDI::enter_updi(bool) [clone .part.12]>:
_ZN4UPDI10enter_updiEb.part.12():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:318
  set_ptr[2] = data;
  return send_bytes(set_ptr, sizeof(set_ptr));
}

bool UPDI::set_cs_ctra (uint8_t data) {
  return set_cs_stat(UPDI_CS_CTRLA, data);
     558:	0f 93       	push	r16
     55a:	1f 93       	push	r17
     55c:	cf 93       	push	r28
set_cs_ctra():
     55e:	66 e0       	ldi	r22, 0x06	; 6
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:583
    else
      BREAK();
  }
  if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) {
    /* Minimize guard time */
    if (!set_cs_ctra(UPDI_GTVAL)) return false;
     560:	82 e0       	ldi	r24, 0x02	; 2
     562:	0a de       	rcall	.-1004   	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>
_ZN4UPDI10enter_updiEb.part.12():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:633
        /* Version 4 is now considered the same as 2. */
        bit_set(UPDI_NVMCTRL, UPDI_GEN2_bp);
        break;
      }
      default : {
        return false;
     564:	81 11       	cpse	r24, r1
     566:	02 c0       	rjmp	.+4      	; 0x56c <UPDI::enter_updi(bool) [clone .part.12]+0x14>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:584
      BREAK();
  }
  if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) {
    /* Minimize guard time */
    if (!set_cs_ctra(UPDI_GTVAL)) return false;
    _CAPS32(JTAG2::updi_desc.signature[0])->dword = -1;
     568:	c0 e0       	ldi	r28, 0x00	; 0
     56a:	49 c0       	rjmp	.+146    	; 0x5fe <UPDI::enter_updi(bool) [clone .part.12]+0xa6>
     56c:	8f ef       	ldi	r24, 0xFF	; 255
     56e:	9f ef       	ldi	r25, 0xFF	; 255
     570:	dc 01       	movw	r26, r24
     572:	80 93 69 38 	sts	0x3869, r24	; 0x803869 <JTAG2::updi_desc+0x7>
     576:	90 93 6a 38 	sts	0x386A, r25	; 0x80386a <JTAG2::updi_desc+0x8>
     57a:	a0 93 6b 38 	sts	0x386B, r26	; 0x80386b <JTAG2::updi_desc+0x9>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:295
  send_bytes(set_ptr, sizeof(set_ptr));
  return RECV();
}

bool UPDI::is_cs_stat (uint8_t code, uint8_t check) {
  return check == (get_cs_stat(code) & check);
     57e:	b0 93 6c 38 	sts	0x386C, r27	; 0x80386c <JTAG2::updi_desc+0xa>
is_cs_stat():
     582:	8b e0       	ldi	r24, 0x0B	; 11
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:586
  if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) {
    /* Minimize guard time */
    if (!set_cs_ctra(UPDI_GTVAL)) return false;
    _CAPS32(JTAG2::updi_desc.signature[0])->dword = -1;

    if (is_sys_stat(UPDI_SYS_RSTSYS)) {
     584:	3b de       	rcall	.-906    	; 0x1fc <UPDI::get_cs_stat(unsigned char)>
_ZN4UPDI10enter_updiEb.part.12():
     586:	85 fd       	sbrc	r24, 5
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:410
}

bool UPDI::read_sib (uint8_t *s_ptr) {
  static uint8_t set_ptr[] = { UPDI_SYNCH, UPDI_SIB_256 };
  uint8_t _len = 32;
  if (!send_bytes(set_ptr, sizeof(set_ptr))) return false;
     588:	2b c0       	rjmp	.+86     	; 0x5e0 <UPDI::enter_updi(bool) [clone .part.12]+0x88>
read_sib():
     58a:	62 e0       	ldi	r22, 0x02	; 2
     58c:	84 e3       	ldi	r24, 0x34	; 52
     58e:	98 e3       	ldi	r25, 0x38	; 56
     590:	e2 dd       	rcall	.-1084   	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     592:	c8 2f       	mov	r28, r24
     594:	0c e6       	ldi	r16, 0x6C	; 108
     596:	18 e3       	ldi	r17, 0x38	; 56
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:411
  do { *s_ptr++ = RECV(); } while (--_len);
     598:	88 23       	and	r24, r24
     59a:	31 f3       	breq	.-52     	; 0x568 <UPDI::enter_updi(bool) [clone .part.12]+0x10>
     59c:	b6 dd       	rcall	.-1172   	; 0x10a <UPDI::RECV()>
     59e:	f8 01       	movw	r30, r16
     5a0:	81 93       	st	Z+, r24
     5a2:	8f 01       	movw	r16, r30
     5a4:	f8 e3       	ldi	r31, 0x38	; 56
     5a6:	0c 38       	cpi	r16, 0x8C	; 140
     5a8:	1f 07       	cpc	r17, r31
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:595

    /*** Get System Information Block ***/
    /* Determine system requirements not announced by host control here */
    uint8_t* _p = &JTAG2::updi_desc.sib[0];
    if (!read_sib(_p)) return false;
    JTAG2::updi_desc.nvmctrl_version = _p[10];
     5aa:	c1 f7       	brne	.-16     	; 0x59c <UPDI::enter_updi(bool) [clone .part.12]+0x44>
_ZN4UPDI10enter_updiEb.part.12():
     5ac:	90 91 76 38 	lds	r25, 0x3876	; 0x803876 <JTAG2::updi_desc+0x14>
     5b0:	90 93 65 38 	sts	0x3865, r25	; 0x803865 <JTAG2::updi_desc+0x3>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:596
    JTAG2::updi_desc.signature[0] = 0x1e;
     5b4:	8e e1       	ldi	r24, 0x1E	; 30
     5b6:	80 93 69 38 	sts	0x3869, r24	; 0x803869 <JTAG2::updi_desc+0x7>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:597
    JTAG2::updi_desc.signature[1] = _p[0];
     5ba:	80 91 6c 38 	lds	r24, 0x386C	; 0x80386c <JTAG2::updi_desc+0xa>
     5be:	80 93 6a 38 	sts	0x386A, r24	; 0x80386a <JTAG2::updi_desc+0x8>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:598
    JTAG2::updi_desc.signature[2] = _p[10];
     5c2:	90 93 6b 38 	sts	0x386B, r25	; 0x80386b <JTAG2::updi_desc+0x9>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:599
    switch (_p[0]) {
     5c6:	81 34       	cpi	r24, 0x41	; 65
     5c8:	31 f0       	breq	.+12     	; 0x5d6 <UPDI::enter_updi(bool) [clone .part.12]+0x7e>
     5ca:	98 f4       	brcc	.+38     	; 0x5f2 <UPDI::enter_updi(bool) [clone .part.12]+0x9a>
     5cc:	80 32       	cpi	r24, 0x20	; 32
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:612
        /* tinyAVR SIB = 'tinyAVR P:0D:1-3' */
        /* always vesrion 0 */
        break;
      }
      case ' ' :                // 'AVR_DA' Regacy
        JTAG2::updi_desc.signature[1] = 'A';
     5ce:	61 f6       	brne	.-104    	; 0x568 <UPDI::enter_updi(bool) [clone .part.12]+0x10>
     5d0:	81 e4       	ldi	r24, 0x41	; 65
     5d2:	80 93 6a 38 	sts	0x386A, r24	; 0x80386a <JTAG2::updi_desc+0x8>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:619
        /* AVR Dx SIB = 'AVR     P:2D:1-3' */
        /* AVR DA SIB = '    AVR P:2D:1-3' (Regacy) */
        /* AVR EA SIB = 'AVR     P:3D:1-3' */
        /* AVR DU SIB = 'AVR     P:4D:1-3' */
        /* AVR EB SIB = 'AVR     P:5D:1-3' */
        if (JTAG2::updi_desc.nvmctrl_version == '3') {
     5d6:	93 33       	cpi	r25, 0x33	; 51
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:626
          bit_set(UPDI_NVMCTRL, UPDI_GEN3_bp);
        }
        else if (JTAG2::updi_desc.nvmctrl_version == '5') {
          // 'AVR_EB' series
          bit_set(UPDI_NVMCTRL, UPDI_GEN5_bp);
          bit_set(UPDI_NVMCTRL, UPDI_GEN3_bp);
     5d8:	c9 f4       	brne	.+50     	; 0x60c <UPDI::enter_updi(bool) [clone .part.12]+0xb4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:629
        }
        /* Version 4 is now considered the same as 2. */
        bit_set(UPDI_NVMCTRL, UPDI_GEN2_bp);
     5da:	ed 9a       	sbi	0x1d, 5	; 29
     5dc:	ee 9a       	sbi	0x1d, 6	; 29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:587
    /* Minimize guard time */
    if (!set_cs_ctra(UPDI_GTVAL)) return false;
    _CAPS32(JTAG2::updi_desc.signature[0])->dword = -1;

    if (is_sys_stat(UPDI_SYS_RSTSYS)) {
      UPDI::Target_Reset(false);
     5de:	0e c0       	rjmp	.+28     	; 0x5fc <UPDI::enter_updi(bool) [clone .part.12]+0xa4>
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	97 de       	rcall	.-722    	; 0x312 <UPDI::Target_Reset(bool)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:588
      if (!loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS, 500)) return false;
     5e4:	64 ef       	ldi	r22, 0xF4	; 244
     5e6:	71 e0       	ldi	r23, 0x01	; 1
     5e8:	80 e2       	ldi	r24, 0x20	; 32
     5ea:	9f df       	rcall	.-194    	; 0x52a <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
     5ec:	81 11       	cpse	r24, r1
     5ee:	cd cf       	rjmp	.-102    	; 0x58a <UPDI::enter_updi(bool) [clone .part.12]+0x32>
     5f0:	bb cf       	rjmp	.-138    	; 0x568 <UPDI::enter_updi(bool) [clone .part.12]+0x10>
     5f2:	8d 36       	cpi	r24, 0x6D	; 109
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:599
    if (!read_sib(_p)) return false;
    JTAG2::updi_desc.nvmctrl_version = _p[10];
    JTAG2::updi_desc.signature[0] = 0x1e;
    JTAG2::updi_desc.signature[1] = _p[0];
    JTAG2::updi_desc.signature[2] = _p[10];
    switch (_p[0]) {
     5f4:	49 f0       	breq	.+18     	; 0x608 <UPDI::enter_updi(bool) [clone .part.12]+0xb0>
     5f6:	84 37       	cpi	r24, 0x74	; 116
     5f8:	09 f0       	breq	.+2      	; 0x5fc <UPDI::enter_updi(bool) [clone .part.12]+0xa4>
     5fa:	b6 cf       	rjmp	.-148    	; 0x568 <UPDI::enter_updi(bool) [clone .part.12]+0x10>
     5fc:	e0 9a       	sbi	0x1c, 0	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:636
      }
      default : {
        return false;
      }
    }
    bit_set(UPDI_CONTROL, UPDI_INFO_bp);
     5fe:	8c 2f       	mov	r24, r28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:639
  }
  return true;
}
     600:	cf 91       	pop	r28
     602:	1f 91       	pop	r17
     604:	0f 91       	pop	r16
     606:	08 95       	ret
     608:	ef 9a       	sbi	0x1d, 7	; 29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:603
    JTAG2::updi_desc.signature[2] = _p[10];
    switch (_p[0]) {
      case 'm' : {              // 'megaAVR' series
        /* megaAVR SIB = 'megaAVR P:0D:1-3' */
        /* always vesrion 0 */
        bit_set(UPDI_NVMCTRL, UPDI_LOWF_bp);
     60a:	f8 cf       	rjmp	.-16     	; 0x5fc <UPDI::enter_updi(bool) [clone .part.12]+0xa4>
     60c:	95 33       	cpi	r25, 0x35	; 53
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:623
        /* AVR EB SIB = 'AVR     P:5D:1-3' */
        if (JTAG2::updi_desc.nvmctrl_version == '3') {
          // 'AVR_Ex' series
          bit_set(UPDI_NVMCTRL, UPDI_GEN3_bp);
        }
        else if (JTAG2::updi_desc.nvmctrl_version == '5') {
     60e:	31 f7       	brne	.-52     	; 0x5dc <UPDI::enter_updi(bool) [clone .part.12]+0x84>
     610:	eb 9a       	sbi	0x1d, 3	; 29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:625
          // 'AVR_EB' series
          bit_set(UPDI_NVMCTRL, UPDI_GEN5_bp);
     612:	e3 cf       	rjmp	.-58     	; 0x5da <UPDI::enter_updi(bool) [clone .part.12]+0x82>

00000614 <UPDI::HV_Pulse()>:
_ZN4UPDI8HV_PulseEv():
     614:	80 91 64 38 	lds	r24, 0x3864	; 0x803864 <JTAG2::updi_desc+0x2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:423

void UPDI::HV_Pulse (void) {
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  UPDI::_send_buf_push(JTAG2::updi_desc.hvupdi_variant);
  #endif
  if (JTAG2::updi_desc.hvupdi_variant != '0'
     618:	8d 7f       	andi	r24, 0xFD	; 253
     61a:	80 33       	cpi	r24, 0x30	; 48
     61c:	09 f0       	breq	.+2      	; 0x620 <UPDI::HV_Pulse()+0xc>
     61e:	38 c0       	rjmp	.+112    	; 0x690 <UPDI::HV_Pulse()+0x7c>
HV_Pulse_ON():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:179
/*
 * HV charge pump drive control
 */

void TIM::HV_Pulse_ON (void) {
  TCA0_SPLIT_CTRLB = TCA_SPLIT_HCMP0EN_bm | TCA_SPLIT_HCMP1EN_bm;
     620:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__RODATA_PM_OFFSET__+0x7f8a01>
_ZN4UPDI8HV_PulseEv():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:430

  /* Run high voltage generator */
  TIM::HV_Pulse_ON();

  /* Perform a hardware reset (if wired) */
  openDrainWrite(TRST_PIN, LOW);
     624:	21 9a       	sbi	0x04, 1	; 4
delay_micros():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.8/cores/megaAVR/api/delay_busywait.h:31
     626:	86 ea       	ldi	r24, 0xA6	; 166
     628:	8a 95       	dec	r24
     62a:	f1 f7       	brne	.-4      	; 0x628 <UPDI::HV_Pulse()+0x14>
     62c:	00 c0       	rjmp	.+0      	; 0x62e <UPDI::HV_Pulse()+0x1a>
_ZN4UPDI8HV_PulseEv():
     62e:	21 98       	cbi	0x04, 1	; 4
delay_micros():
     630:	8f ec       	ldi	r24, 0xCF	; 207
     632:	97 e0       	ldi	r25, 0x07	; 7
     634:	01 97       	sbiw	r24, 0x01	; 1
     636:	f1 f7       	brne	.-4      	; 0x634 <UPDI::HV_Pulse()+0x20>
     638:	00 c0       	rjmp	.+0      	; 0x63a <UPDI::HV_Pulse()+0x26>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:436
  TIM::delay_50us();
  openDrainWrite(TRST_PIN, HIGH);
  TIM::delay_800us();
  /* During this time, raise the circuit to sufficient voltage */

  if (JTAG2::updi_desc.hvupdi_variant == '0')
     63a:	00 00       	nop
_ZN4UPDI8HV_PulseEv():
     63c:	80 91 64 38 	lds	r24, 0x3864	; 0x803864 <JTAG2::updi_desc+0x2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:437
    digitalWrite(HV12_PIN, HIGH);
     640:	80 33       	cpi	r24, 0x30	; 48
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.8/cores/megaAVR/api/delay_busywait.h:31
     642:	11 f5       	brne	.+68     	; 0x688 <UPDI::HV_Pulse()+0x74>
     644:	0e 9a       	sbi	0x01, 6	; 1
delay_micros():
     646:	8f ec       	ldi	r24, 0xCF	; 207
     648:	97 e0       	ldi	r25, 0x07	; 7
     64a:	01 97       	sbiw	r24, 0x01	; 1
     64c:	f1 f7       	brne	.-4      	; 0x64a <UPDI::HV_Pulse()+0x36>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:444
    digitalWrite(HV8_PIN, HIGH);

  /* Apply high voltage only for the required time */
  TIM::delay_800us();

  if (JTAG2::updi_desc.hvupdi_variant == '0')
     64e:	00 c0       	rjmp	.+0      	; 0x650 <UPDI::HV_Pulse()+0x3c>
     650:	00 00       	nop
_ZN4UPDI8HV_PulseEv():
     652:	80 91 64 38 	lds	r24, 0x3864	; 0x803864 <JTAG2::updi_desc+0x2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:445
    digitalWrite(HV12_PIN, LOW);
     656:	80 33       	cpi	r24, 0x30	; 48
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:183
}

void TIM::HV_Pulse_OFF (void) {
  TCA0_SPLIT_CTRLB = 0;
     658:	c9 f4       	brne	.+50     	; 0x68c <UPDI::HV_Pulse()+0x78>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:452
    digitalWrite(HV8_PIN, LOW);

  TIM::HV_Pulse_OFF();

  /* Keep the UPDI signal low for as long as necessary */
  UPDI_USART.BAUD = UPDI_BAUD_SHORT_BREAK;
     65a:	0e 98       	cbi	0x01, 6	; 1
HV_Pulse_OFF():
     65c:	10 92 01 0a 	sts	0x0A01, r1	; 0x800a01 <__RODATA_PM_OFFSET__+0x7f8a01>
_ZN4UPDI8HV_PulseEv():
     660:	88 ee       	ldi	r24, 0xE8	; 232
     662:	93 e0       	ldi	r25, 0x03	; 3
     664:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__RODATA_PM_OFFSET__+0x7f8808>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:453
  SEND(UPDI_NOP);
     668:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__RODATA_PM_OFFSET__+0x7f8809>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:454
  UPDI_USART.BAUD = UPDI_BAUD_CALC;
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	59 dd       	rcall	.-1358   	; 0x122 <UPDI::SEND(unsigned char)>
     670:	80 eb       	ldi	r24, 0xB0	; 176
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__RODATA_PM_OFFSET__+0x7f8808>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:456

  bit_clear(UPDI_CONTROL, UPDI_CLKU_bp);
     678:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__RODATA_PM_OFFSET__+0x7f8809>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:460
  bit_set(UPDI_CONTROL, UPDI_ERHV_bp);

  /* Wait for system reset to finish */
  loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
     67c:	e6 98       	cbi	0x1c, 6	; 28
     67e:	e3 9a       	sbi	0x1c, 3	; 28
     680:	70 e0       	ldi	r23, 0x00	; 0
     682:	60 e0       	ldi	r22, 0x00	; 0
     684:	80 e2       	ldi	r24, 0x20	; 32
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:439
  /* During this time, raise the circuit to sufficient voltage */

  if (JTAG2::updi_desc.hvupdi_variant == '0')
    digitalWrite(HV12_PIN, HIGH);
  else
    digitalWrite(HV8_PIN, HIGH);
     686:	51 cf       	rjmp	.-350    	; 0x52a <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
     688:	2d 9a       	sbi	0x05, 5	; 5
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:447
  TIM::delay_800us();

  if (JTAG2::updi_desc.hvupdi_variant == '0')
    digitalWrite(HV12_PIN, LOW);
  else
    digitalWrite(HV8_PIN, LOW);
     68a:	dd cf       	rjmp	.-70     	; 0x646 <UPDI::HV_Pulse()+0x32>
     68c:	2d 98       	cbi	0x05, 5	; 5
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:461
  bit_clear(UPDI_CONTROL, UPDI_CLKU_bp);
  bit_set(UPDI_CONTROL, UPDI_ERHV_bp);

  /* Wait for system reset to finish */
  loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
}
     68e:	e6 cf       	rjmp	.-52     	; 0x65c <UPDI::HV_Pulse()+0x48>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:58
  /* NVMCTRL version 3,5 */
  uint8_t nvm_wait_v3 (void) {
    #ifdef ENABLE_DEBUG_UPDI_SENDER
    uint16_t _back = UPDI::_send_ptr;
    #endif
    while (UPDI::ld8(NVMCTRL_V3_REG_STATUS) & 3) {
     690:	08 95       	ret

00000692 <NVM::nvm_wait_v3()>:
_ZN3NVM11nvm_wait_v3Ev():
     692:	66 e0       	ldi	r22, 0x06	; 6
     694:	70 e1       	ldi	r23, 0x10	; 16
     696:	80 e0       	ldi	r24, 0x00	; 0
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	29 de       	rcall	.-942    	; 0x2ee <UPDI::ld8(unsigned long)>
     69c:	83 70       	andi	r24, 0x03	; 3
     69e:	29 f0       	breq	.+10     	; 0x6aa <NVM::nvm_wait_v3()+0x18>
delay_micros():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.8/cores/megaAVR/api/delay_busywait.h:31
     6a0:	86 ea       	ldi	r24, 0xA6	; 166
     6a2:	8a 95       	dec	r24
     6a4:	f1 f7       	brne	.-4      	; 0x6a2 <NVM::nvm_wait_v3()+0x10>
     6a6:	00 c0       	rjmp	.+0      	; 0x6a8 <NVM::nvm_wait_v3()+0x16>
     6a8:	f4 cf       	rjmp	.-24     	; 0x692 <NVM::nvm_wait_v3()>
_ZN3NVM11nvm_wait_v3Ev():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:64
      #ifdef ENABLE_DEBUG_UPDI_SENDER
      UPDI::_send_ptr = _back;
      #endif
      TIM::delay_50us();
    }
    return UPDI_LASTL;
     6aa:	8e b3       	in	r24, 0x1e	; 30
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:65
  }
     6ac:	08 95       	ret

000006ae <NVM::nvm_wait()>:
_ZN3NVM8nvm_waitEv():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:44
  /* NVMCTRL version 0,2,4 */
  uint8_t nvm_wait (void) {
    #ifdef ENABLE_DEBUG_UPDI_SENDER
    uint16_t _back = UPDI::_send_ptr;
    #endif
    while (UPDI::ld8(NVMCTRL_REG_STATUS) & 3) {
     6ae:	62 e0       	ldi	r22, 0x02	; 2
     6b0:	70 e1       	ldi	r23, 0x10	; 16
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	1b de       	rcall	.-970    	; 0x2ee <UPDI::ld8(unsigned long)>
     6b8:	83 70       	andi	r24, 0x03	; 3
     6ba:	29 f0       	breq	.+10     	; 0x6c6 <NVM::nvm_wait()+0x18>
delay_micros():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.8/cores/megaAVR/api/delay_busywait.h:31
     6bc:	86 ea       	ldi	r24, 0xA6	; 166
     6be:	8a 95       	dec	r24
     6c0:	f1 f7       	brne	.-4      	; 0x6be <NVM::nvm_wait()+0x10>
     6c2:	00 c0       	rjmp	.+0      	; 0x6c4 <NVM::nvm_wait()+0x16>
     6c4:	f4 cf       	rjmp	.-24     	; 0x6ae <NVM::nvm_wait()>
_ZN3NVM8nvm_waitEv():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:50
      #ifdef ENABLE_DEBUG_UPDI_SENDER
      UPDI::_send_ptr = _back;
      #endif
      TIM::delay_50us();
    }
    return UPDI_LASTL;
     6c6:	8e b3       	in	r24, 0x1e	; 30
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:51
  }
     6c8:	08 95       	ret

000006ca <UPDI::updi_activate(bool)>:
_ZN4UPDI13updi_activateEb():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:667

/**********************
 * UPDI authorization *
 **********************/

bool UPDI::updi_activate (bool hv_active) {
     6ca:	cf 93       	push	r28
     6cc:	df 93       	push	r29
     6ce:	00 d0       	rcall	.+0      	; 0x6d0 <UPDI::updi_activate(bool)+0x6>
     6d0:	cd b7       	in	r28, 0x3d	; 61
     6d2:	de b7       	in	r29, 0x3e	; 62
     6d4:	8a 83       	std	Y+2, r24	; 0x02
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:668
  volatile uint8_t count = 4;
     6d6:	84 e0       	ldi	r24, 0x04	; 4
     6d8:	89 83       	std	Y+1, r24	; 0x01
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:669
  while (--count && bit_is_clear(UPDI_CONTROL, UPDI_PROG_bp)) {
     6da:	89 81       	ldd	r24, Y+1	; 0x01
     6dc:	81 50       	subi	r24, 0x01	; 1
     6de:	89 83       	std	Y+1, r24	; 0x01
     6e0:	88 23       	and	r24, r24
     6e2:	09 f4       	brne	.+2      	; 0x6e6 <UPDI::updi_activate(bool)+0x1c>
     6e4:	4c c0       	rjmp	.+152    	; 0x77e <UPDI::updi_activate(bool)+0xb4>
     6e6:	e1 99       	sbic	0x1c, 1	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:672
    /* For the second lap, forced HV control is enabled by the CMND_RESET parameter */
    /* For the third lap, forced HV control of JP short is allowed. */
    if ((count == 2 && hv_active)
     6e8:	4a c0       	rjmp	.+148    	; 0x77e <UPDI::updi_activate(bool)+0xb4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:673
     || (count == 1 && JTAG2::updi_desc.hvupdi_variant != '1' 
     6ea:	89 81       	ldd	r24, Y+1	; 0x01
     6ec:	82 30       	cpi	r24, 0x02	; 2
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:672
bool UPDI::updi_activate (bool hv_active) {
  volatile uint8_t count = 4;
  while (--count && bit_is_clear(UPDI_CONTROL, UPDI_PROG_bp)) {
    /* For the second lap, forced HV control is enabled by the CMND_RESET parameter */
    /* For the third lap, forced HV control of JP short is allowed. */
    if ((count == 2 && hv_active)
     6ee:	19 f4       	brne	.+6      	; 0x6f6 <UPDI::updi_activate(bool)+0x2c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:673
     || (count == 1 && JTAG2::updi_desc.hvupdi_variant != '1' 
     6f0:	2a 81       	ldd	r18, Y+2	; 0x02
     6f2:	21 11       	cpse	r18, r1
     6f4:	08 c0       	rjmp	.+16     	; 0x706 <UPDI::updi_activate(bool)+0x3c>
     6f6:	89 81       	ldd	r24, Y+1	; 0x01
     6f8:	81 30       	cpi	r24, 0x01	; 1
     6fa:	31 f4       	brne	.+12     	; 0x708 <UPDI::updi_activate(bool)+0x3e>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:674
                    && !digitalRead(JP_SENSE_PIN))) {
     6fc:	80 91 64 38 	lds	r24, 0x3864	; 0x803864 <JTAG2::updi_desc+0x2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:677
      bit_set(UPDI_CONTROL, UPDI_FCHV_bp);
    }
    if (setjmp(TIM::CONTEXT) == 0) {
     700:	81 33       	cpi	r24, 0x31	; 49
     702:	11 f0       	breq	.+4      	; 0x708 <UPDI::updi_activate(bool)+0x3e>
     704:	53 9b       	sbis	0x0a, 3	; 10
     706:	e4 9a       	sbi	0x1c, 4	; 28
     708:	86 e4       	ldi	r24, 0x46	; 70
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:50
     70a:	98 e3       	ldi	r25, 0x38	; 56
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:107
 * Timeout control
 */

void TIM::Timeout_Start (uint16_t _ms) {
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    TCB0_CNT = 0;
     70c:	1a d7       	rcall	.+3636   	; 0x1542 <setjmp>
     70e:	89 2b       	or	r24, r25
     710:	a1 f5       	brne	.+104    	; 0x77a <UPDI::updi_activate(bool)+0xb0>
Timeout_Start():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:108
    TCB0_CCMP = _ms >> 2;
     712:	8f b7       	in	r24, 0x3f	; 63
__iCliRetVal():
     714:	f8 94       	cli
Timeout_Start():
     716:	ea e8       	ldi	r30, 0x8A	; 138
     718:	fa e0       	ldi	r31, 0x0A	; 10
     71a:	10 82       	st	Z, r1
     71c:	11 82       	std	Z+1, r1	; 0x01
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:109
    TCB0_INTCTRL = TCB_CAPT_bm;
     71e:	2f e1       	ldi	r18, 0x1F	; 31
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	ec e8       	ldi	r30, 0x8C	; 140
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:110
    TCB0_INTFLAGS = TCB_CAPT_bm;
     724:	fa e0       	ldi	r31, 0x0A	; 10
     726:	20 83       	st	Z, r18
     728:	31 83       	std	Z+1, r19	; 0x01
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:111
    TCB0_CTRLA = TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
     72a:	21 e0       	ldi	r18, 0x01	; 1
     72c:	e5 e8       	ldi	r30, 0x85	; 133
     72e:	fa e0       	ldi	r31, 0x0A	; 10
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     730:	20 83       	st	Z, r18
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:563
 * UPDI control start *
 **********************/

bool UPDI::enter_updi (bool skip) {
  /* Release the physical reset */
  openDrainWrite(TRST_PIN, HIGH);
     732:	e6 e8       	ldi	r30, 0x86	; 134
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:567
  /* target reset deactive */
  if (!skip) {
    /* HV control forced permission */
    if (bit_is_set(UPDI_CONTROL, UPDI_FCHV_bp)) {
     734:	fa e0       	ldi	r31, 0x0A	; 10
     736:	20 83       	st	Z, r18
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:568
      HV_Pulse();
     738:	2f e0       	ldi	r18, 0x0F	; 15
     73a:	e0 e8       	ldi	r30, 0x80	; 128
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:569
      loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS, 500);
     73c:	fa e0       	ldi	r31, 0x0A	; 10
     73e:	20 83       	st	Z, r18
__iRestore():
     740:	8f bf       	out	0x3f, r24	; 63
enter_updi():
     742:	21 98       	cbi	0x04, 1	; 4
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:572

      /* send nvmprog_key */
      if (!set_nvmprog_key()) return false;
     744:	e4 9b       	sbis	0x1c, 4	; 28
     746:	23 c0       	rjmp	.+70     	; 0x78e <UPDI::updi_activate(bool)+0xc4>
     748:	65 df       	rcall	.-310    	; 0x614 <UPDI::HV_Pulse()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:575

      /* restart target : change mode */
      if (!updi_reset(true) || !updi_reset(false)) return false;
     74a:	64 ef       	ldi	r22, 0xF4	; 244
     74c:	71 e0       	ldi	r23, 0x01	; 1
     74e:	80 e2       	ldi	r24, 0x20	; 32
     750:	ec de       	rcall	.-552    	; 0x52a <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
     752:	c9 de       	rcall	.-622    	; 0x4e6 <UPDI::set_nvmprog_key()>
     754:	88 23       	and	r24, r24
     756:	89 f0       	breq	.+34     	; 0x77a <UPDI::updi_activate(bool)+0xb0>
     758:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:576
      loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
     75a:	d6 dd       	rcall	.-1108   	; 0x308 <UPDI::updi_reset(bool)>
     75c:	88 23       	and	r24, r24
     75e:	69 f0       	breq	.+26     	; 0x77a <UPDI::updi_activate(bool)+0xb0>
     760:	80 e0       	ldi	r24, 0x00	; 0
     762:	d2 dd       	rcall	.-1116   	; 0x308 <UPDI::updi_reset(bool)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:581
    }
    else
      BREAK();
  }
  if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) {
     764:	88 23       	and	r24, r24
     766:	49 f0       	breq	.+18     	; 0x77a <UPDI::updi_activate(bool)+0xb0>
     768:	70 e0       	ldi	r23, 0x00	; 0
     76a:	60 e0       	ldi	r22, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:679
                    && !digitalRead(JP_SENSE_PIN))) {
      bit_set(UPDI_CONTROL, UPDI_FCHV_bp);
    }
    if (setjmp(TIM::CONTEXT) == 0) {
      TIM::Timeout_Start(125);
      enter_updi(false) && enter_prog();
     76c:	80 e2       	ldi	r24, 0x20	; 32
     76e:	dd de       	rcall	.-582    	; 0x52a <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:681
    }
    TIM::Timeout_Stop();
     770:	e0 99       	sbic	0x1c, 0	; 28
     772:	0f c0       	rjmp	.+30     	; 0x792 <UPDI::updi_activate(bool)+0xc8>
     774:	f1 de       	rcall	.-542    	; 0x558 <UPDI::enter_updi(bool) [clone .part.12]>
_ZN4UPDI13updi_activateEb():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:683
  }
  return bit_is_set(UPDI_CONTROL, UPDI_PROG_bp);
     776:	81 11       	cpse	r24, r1
     778:	0c c0       	rjmp	.+24     	; 0x792 <UPDI::updi_activate(bool)+0xc8>
     77a:	f5 dd       	rcall	.-1046   	; 0x366 <TIM::Timeout_Stop()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:684
}
     77c:	ae cf       	rjmp	.-164    	; 0x6da <UPDI::updi_activate(bool)+0x10>
     77e:	8c b3       	in	r24, 0x1c	; 28
     780:	86 95       	lsr	r24
     782:	81 70       	andi	r24, 0x01	; 1
     784:	0f 90       	pop	r0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:579
      /* restart target : change mode */
      if (!updi_reset(true) || !updi_reset(false)) return false;
      loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
    }
    else
      BREAK();
     786:	0f 90       	pop	r0
     788:	df 91       	pop	r29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:646
/******************************
 * Programming control starts *
 ******************************/

bool UPDI::enter_prog (void) {
  if (bit_is_clear(UPDI_CONTROL, UPDI_PROG_bp)) {
     78a:	cf 91       	pop	r28
     78c:	08 95       	ret
enter_updi():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:647
    loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
     78e:	9d dd       	rcall	.-1222   	; 0x2ca <UPDI::BREAK()>
     790:	ef cf       	rjmp	.-34     	; 0x770 <UPDI::updi_activate(bool)+0xa6>
enter_prog():
     792:	e1 99       	sbic	0x1c, 1	; 28
     794:	f2 cf       	rjmp	.-28     	; 0x77a <UPDI::updi_activate(bool)+0xb0>
     796:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:648
    if (!(UPDI_LASTL & UPDI_SYS_NVMPROG)) {
     798:	60 e0       	ldi	r22, 0x00	; 0
     79a:	80 e2       	ldi	r24, 0x20	; 32
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:657
      }
      if (!updi_reset(true) || !updi_reset(false)) return false;
      loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
      loop_until_sys_stat_is_set(UPDI_SYS_NVMPROG);
    }
    bit_set(UPDI_CONTROL, UPDI_INFO_bp);
     79c:	c6 de       	rcall	.-628    	; 0x52a <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:658
    bit_set(UPDI_CONTROL, UPDI_PROG_bp);
     79e:	f3 9b       	sbis	0x1e, 3	; 30
     7a0:	03 c0       	rjmp	.+6      	; 0x7a8 <UPDI::updi_activate(bool)+0xde>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:649

bool UPDI::enter_prog (void) {
  if (bit_is_clear(UPDI_CONTROL, UPDI_PROG_bp)) {
    loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
    if (!(UPDI_LASTL & UPDI_SYS_NVMPROG)) {
      if (UPDI_LASTL & UPDI_SYS_LOCKSTATUS) return false;
     7a2:	e0 9a       	sbi	0x1c, 0	; 28
     7a4:	e1 9a       	sbi	0x1c, 1	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:295
  send_bytes(set_ptr, sizeof(set_ptr));
  return RECV();
}

bool UPDI::is_cs_stat (uint8_t code, uint8_t check) {
  return check == (get_cs_stat(code) & check);
     7a6:	e9 cf       	rjmp	.-46     	; 0x77a <UPDI::updi_activate(bool)+0xb0>
     7a8:	f0 99       	sbic	0x1e, 0	; 30
     7aa:	e7 cf       	rjmp	.-50     	; 0x77a <UPDI::updi_activate(bool)+0xb0>
is_cs_stat():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:650
bool UPDI::enter_prog (void) {
  if (bit_is_clear(UPDI_CONTROL, UPDI_PROG_bp)) {
    loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
    if (!(UPDI_LASTL & UPDI_SYS_NVMPROG)) {
      if (UPDI_LASTL & UPDI_SYS_LOCKSTATUS) return false;
      if (!is_key_stat(UPDI_KEY_NVMPROG)) {
     7ac:	87 e0       	ldi	r24, 0x07	; 7
     7ae:	26 dd       	rcall	.-1460   	; 0x1fc <UPDI::get_cs_stat(unsigned char)>
enter_prog():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:653
        if (!set_nvmprog_key()) return false;
      }
      if (!updi_reset(true) || !updi_reset(false)) return false;
     7b0:	84 ff       	sbrs	r24, 4
     7b2:	0f c0       	rjmp	.+30     	; 0x7d2 <UPDI::updi_activate(bool)+0x108>
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	a8 dd       	rcall	.-1200   	; 0x308 <UPDI::updi_reset(bool)>
     7b8:	88 23       	and	r24, r24
     7ba:	f9 f2       	breq	.-66     	; 0x77a <UPDI::updi_activate(bool)+0xb0>
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	a4 dd       	rcall	.-1208   	; 0x308 <UPDI::updi_reset(bool)>
     7c0:	88 23       	and	r24, r24
     7c2:	d9 f2       	breq	.-74     	; 0x77a <UPDI::updi_activate(bool)+0xb0>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:654
      loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
     7c4:	70 e0       	ldi	r23, 0x00	; 0
     7c6:	60 e0       	ldi	r22, 0x00	; 0
     7c8:	80 e2       	ldi	r24, 0x20	; 32
     7ca:	af de       	rcall	.-674    	; 0x52a <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
     7cc:	88 e0       	ldi	r24, 0x08	; 8
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:655
      loop_until_sys_stat_is_set(UPDI_SYS_NVMPROG);
     7ce:	95 de       	rcall	.-726    	; 0x4fa <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.23]>
     7d0:	e8 cf       	rjmp	.-48     	; 0x7a2 <UPDI::updi_activate(bool)+0xd8>
     7d2:	89 de       	rcall	.-750    	; 0x4e6 <UPDI::set_nvmprog_key()>
     7d4:	81 11       	cpse	r24, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:651
  if (bit_is_clear(UPDI_CONTROL, UPDI_PROG_bp)) {
    loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
    if (!(UPDI_LASTL & UPDI_SYS_NVMPROG)) {
      if (UPDI_LASTL & UPDI_SYS_LOCKSTATUS) return false;
      if (!is_key_stat(UPDI_KEY_NVMPROG)) {
        if (!set_nvmprog_key()) return false;
     7d6:	ee cf       	rjmp	.-36     	; 0x7b4 <UPDI::updi_activate(bool)+0xea>
     7d8:	d0 cf       	rjmp	.-96     	; 0x77a <UPDI::updi_activate(bool)+0xb0>

000007da <UPDI::runtime(unsigned char)>:
_ZN4UPDI7runtimeEh():
     7da:	af 92       	push	r10
     7dc:	bf 92       	push	r11
     7de:	cf 92       	push	r12
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:690

/************************
 * UPDI control process *
 ************************/

bool UPDI::runtime (uint8_t updi_cmd) {
     7e0:	df 92       	push	r13
     7e2:	ef 92       	push	r14
     7e4:	ff 92       	push	r15
     7e6:	0f 93       	push	r16
     7e8:	1f 93       	push	r17
     7ea:	cf 93       	push	r28
     7ec:	df 93       	push	r29
     7ee:	cd b7       	in	r28, 0x3d	; 61
     7f0:	de b7       	in	r29, 0x3e	; 62
     7f2:	26 97       	sbiw	r28, 0x06	; 6
     7f4:	cd bf       	out	0x3d, r28	; 61
     7f6:	de bf       	out	0x3e, r29	; 62
     7f8:	8e 83       	std	Y+6, r24	; 0x06
     7fa:	1d 82       	std	Y+5, r1	; 0x05
     7fc:	86 e4       	ldi	r24, 0x46	; 70
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:691
  volatile bool _result = false;
     7fe:	98 e3       	ldi	r25, 0x38	; 56
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:692
  if (setjmp(TIM::CONTEXT) == 0) {
     800:	a0 d6       	rcall	.+3392   	; 0x1542 <setjmp>
     802:	89 2b       	or	r24, r25
     804:	09 f0       	breq	.+2      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
     806:	f1 c0       	rjmp	.+482    	; 0x9ea <__DATA_REGION_LENGTH__+0x1ea>
Timeout_Start():
     808:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
     80a:	f8 94       	cli
Timeout_Start():
     80c:	10 92 8a 0a 	sts	0x0A8A, r1	; 0x800a8a <__RODATA_PM_OFFSET__+0x7f8a8a>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     810:	10 92 8b 0a 	sts	0x0A8B, r1	; 0x800a8b <__RODATA_PM_OFFSET__+0x7f8a8b>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:107
 * Timeout control
 */

void TIM::Timeout_Start (uint16_t _ms) {
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    TCB0_CNT = 0;
     814:	28 ec       	ldi	r18, 0xC8	; 200
     816:	30 e0       	ldi	r19, 0x00	; 0
     818:	20 93 8c 0a 	sts	0x0A8C, r18	; 0x800a8c <__RODATA_PM_OFFSET__+0x7f8a8c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:108
    TCB0_CCMP = _ms >> 2;
     81c:	30 93 8d 0a 	sts	0x0A8D, r19	; 0x800a8d <__RODATA_PM_OFFSET__+0x7f8a8d>
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	80 93 85 0a 	sts	0x0A85, r24	; 0x800a85 <__RODATA_PM_OFFSET__+0x7f8a85>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:109
    TCB0_INTCTRL = TCB_CAPT_bm;
     826:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__RODATA_PM_OFFSET__+0x7f8a86>
     82a:	8f e0       	ldi	r24, 0x0F	; 15
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:110
    TCB0_INTFLAGS = TCB_CAPT_bm;
     82c:	80 93 80 0a 	sts	0x0A80, r24	; 0x800a80 <__RODATA_PM_OFFSET__+0x7f8a80>
__iRestore():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:111
    TCB0_CTRLA = TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
     830:	9f bf       	out	0x3f, r25	; 63
_ZN4UPDI7runtimeEh():
     832:	8e 81       	ldd	r24, Y+6	; 0x06
     834:	83 30       	cpi	r24, 0x03	; 3
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     836:	09 f4       	brne	.+2      	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:694
    TIM::Timeout_Start(800);
    switch (updi_cmd) {
     838:	1f c2       	rjmp	.+1086   	; 0xc78 <__DATA_REGION_LENGTH__+0x478>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	09 f4       	brne	.+2      	; 0x840 <__DATA_REGION_LENGTH__+0x40>
     83e:	68 c2       	rjmp	.+1232   	; 0xd10 <__DATA_REGION_LENGTH__+0x510>
write_memory():
     840:	ec e8       	ldi	r30, 0x8C	; 140
     842:	f8 e3       	ldi	r31, 0x38	; 56
_ZN4UPDI7runtimeEh():
     844:	82 30       	cpi	r24, 0x02	; 2
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:275
/******************
 * NVM write core *
 ******************/

bool NVM::write_memory (void) {
  uint8_t mem_type = JTAG2::packet.body[JTAG2::MEM_TYPE];
     846:	09 f4       	brne	.+2      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
     848:	70 c0       	rjmp	.+224    	; 0x92a <__DATA_REGION_LENGTH__+0x12a>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:694
     84a:	22 85       	ldd	r18, Z+10	; 0x0a
     84c:	33 85       	ldd	r19, Z+11	; 0x0b
     84e:	66 85       	ldd	r22, Z+14	; 0x0e
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:696
      case UPDI_CMD_READ_MEMORY : {
        size_t byte_count = _CAPS16(JTAG2::packet.body[JTAG2::DATA_LENGTH])->word;
     850:	77 85       	ldd	r23, Z+15	; 0x0f
     852:	80 89       	ldd	r24, Z+16	; 0x10
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:697
        uint32_t start_addr = _CAPS32(JTAG2::packet.body[JTAG2::DATA_ADDRESS])->dword;
     854:	91 89       	ldd	r25, Z+17	; 0x11
read_memory():
     856:	42 e8       	ldi	r20, 0x82	; 130
     858:	40 87       	std	Z+8, r20	; 0x08
     85a:	a9 01       	movw	r20, r18
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:227
/***********************
 * Memory reading core *
 ***********************/

bool NVM::read_memory (uint32_t start_addr, size_t byte_count) {
  JTAG2::packet.body[JTAG2::MESSAGE_ID] = JTAG2::RSP_MEMORY;
     85c:	41 50       	subi	r20, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:231
  uint8_t *data = &JTAG2::packet.body[JTAG2::RSP_DATA];

  /* Reads from 1 to 256 bytes and even bytes 258 to 512 are allowed */
  if (byte_count == 0 || byte_count > 512 || (byte_count > 256 && byte_count & 1)) {
     85e:	51 09       	sbc	r21, r1
     860:	41 15       	cp	r20, r1
     862:	e2 e0       	ldi	r30, 0x02	; 2
     864:	5e 07       	cpc	r21, r30
     866:	30 f4       	brcc	.+12     	; 0x874 <__DATA_REGION_LENGTH__+0x74>
     868:	21 30       	cpi	r18, 0x01	; 1
     86a:	f1 e0       	ldi	r31, 0x01	; 1
     86c:	3f 07       	cpc	r19, r31
     86e:	40 f0       	brcs	.+16     	; 0x880 <__DATA_REGION_LENGTH__+0x80>
     870:	20 ff       	sbrs	r18, 0
     872:	06 c0       	rjmp	.+12     	; 0x880 <__DATA_REGION_LENGTH__+0x80>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:232
    set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
     874:	83 ea       	ldi	r24, 0xA3	; 163
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a4 dd       	rcall	.-1208   	; 0x3c2 <JTAG2::set_response(JTAG2::jtag_response_e)>
_ZN4UPDI7runtimeEh():
     87a:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:244
    #ifdef ENABLE_ADDFEATS_LOCK_SIG
    if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_PROG_bp)
      && JTAG2::packet.body[JTAG2::MEM_TYPE] == JTAG2::MTYPE_SIGN_JTAG) {
      /* Signature reading branches to special processing */
      JTAG2::packet.body[JTAG2::RSP_DATA] = JTAG2::updi_desc.signature[(uint8_t)start_addr & 3];
      return true;
     87c:	8d 83       	std	Y+5, r24	; 0x05
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:712
          _result = chip_erase();
        }
        break;
      }
      case UPDI_CMD_GO : {
        _result = Target_Reset(true) && Target_Reset(false);
     87e:	b5 c0       	rjmp	.+362    	; 0x9ea <__DATA_REGION_LENGTH__+0x1ea>
read_memory():
     880:	ac e8       	ldi	r26, 0x8C	; 140
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:235
  /* Reads from 1 to 256 bytes and even bytes 258 to 512 are allowed */
  if (byte_count == 0 || byte_count > 512 || (byte_count > 256 && byte_count & 1)) {
    set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
    return true;
  }
  JTAG2::packet.size_word[0] = byte_count + 1;
     882:	b8 e3       	ldi	r27, 0x38	; 56
     884:	f9 01       	movw	r30, r18
     886:	31 96       	adiw	r30, 0x01	; 1
     888:	13 96       	adiw	r26, 0x03	; 3
     88a:	ed 93       	st	X+, r30
     88c:	fc 93       	st	X, r31
     88e:	14 97       	sbiw	r26, 0x04	; 4
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:238

  /* Reading only 1 byte may be special */
  if (byte_count == 1) {
     890:	21 30       	cpi	r18, 0x01	; 1
     892:	31 05       	cpc	r19, r1
     894:	81 f4       	brne	.+32     	; 0x8b6 <__DATA_REGION_LENGTH__+0xb6>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:241
    #ifdef ENABLE_ADDFEATS_LOCK_SIG
    if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_PROG_bp)
      && JTAG2::packet.body[JTAG2::MEM_TYPE] == JTAG2::MTYPE_SIGN_JTAG) {
     896:	e1 99       	sbic	0x1c, 1	; 28
     898:	0e c0       	rjmp	.+28     	; 0x8b6 <__DATA_REGION_LENGTH__+0xb6>
     89a:	19 96       	adiw	r26, 0x09	; 9
     89c:	ec 91       	ld	r30, X
     89e:	19 97       	sbiw	r26, 0x09	; 9
     8a0:	e4 3b       	cpi	r30, 0xB4	; 180
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:243
      /* Signature reading branches to special processing */
      JTAG2::packet.body[JTAG2::RSP_DATA] = JTAG2::updi_desc.signature[(uint8_t)start_addr & 3];
     8a2:	49 f4       	brne	.+18     	; 0x8b6 <__DATA_REGION_LENGTH__+0xb6>
     8a4:	63 70       	andi	r22, 0x03	; 3
     8a6:	e6 2f       	mov	r30, r22
     8a8:	f0 e0       	ldi	r31, 0x00	; 0
     8aa:	ee 59       	subi	r30, 0x9E	; 158
     8ac:	f7 4c       	sbci	r31, 0xC7	; 199
     8ae:	87 81       	ldd	r24, Z+7	; 0x07
     8b0:	19 96       	adiw	r26, 0x09	; 9
     8b2:	8c 93       	st	X, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:258
      return true;
    }
    #endif
  }

  if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_PROG_bp)) {
     8b4:	e2 cf       	rjmp	.-60     	; 0x87a <__DATA_REGION_LENGTH__+0x7a>
     8b6:	e1 99       	sbic	0x1c, 1	; 28
     8b8:	08 c0       	rjmp	.+16     	; 0x8ca <__DATA_REGION_LENGTH__+0xca>
     8ba:	e5 e9       	ldi	r30, 0x95	; 149
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:260
    /* A normal read when the device is locked returns a dummy. */
    do { *data++ = 0xFF; } while (--byte_count);
     8bc:	f8 e3       	ldi	r31, 0x38	; 56
     8be:	8f ef       	ldi	r24, 0xFF	; 255
     8c0:	81 93       	st	Z+, r24
     8c2:	21 50       	subi	r18, 0x01	; 1
     8c4:	31 09       	sbc	r19, r1
     8c6:	e1 f7       	brne	.-8      	; 0x8c0 <__DATA_REGION_LENGTH__+0xc0>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:264
    return true;
  }

  if ((byte_count - 1) >> 8)
     8c8:	d8 cf       	rjmp	.-80     	; 0x87a <__DATA_REGION_LENGTH__+0x7a>
     8ca:	45 2f       	mov	r20, r21
     8cc:	55 27       	eor	r21, r21
     8ce:	45 2b       	or	r20, r21
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:274
  do { *data++ = RECV(); } while (--len);
  return UPDI_LASTH == 0;
}

bool UPDI::lds16 (uint32_t addr, uint8_t *data, size_t len) {
  uint8_t repeat = (uint16_t)len >> 1;
     8d0:	e1 f0       	breq	.+56     	; 0x90a <__DATA_REGION_LENGTH__+0x10a>
lds16():
     8d2:	36 95       	lsr	r19
     8d4:	27 95       	ror	r18
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:275
  if (!send_repeat_header(addr, UPDI_LD|UPDI_DATA2, repeat)) return false;
     8d6:	f2 2e       	mov	r15, r18
     8d8:	41 e2       	ldi	r20, 0x21	; 33
     8da:	b8 dc       	rcall	.-1680   	; 0x24c <UPDI::send_repeat_header(unsigned long, unsigned char, unsigned char)>
     8dc:	0c e8       	ldi	r16, 0x8C	; 140
     8de:	18 e3       	ldi	r17, 0x38	; 56
     8e0:	81 11       	cpse	r24, r1
     8e2:	02 c0       	rjmp	.+4      	; 0x8e8 <__DATA_REGION_LENGTH__+0xe8>
lds8():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:270
}

bool UPDI::lds8 (uint32_t addr, uint8_t *data, uint8_t len) {
  if (!send_repeat_header(addr, UPDI_LD|UPDI_DATA1, len)) return false;
  do { *data++ = RECV(); } while (--len);
  return UPDI_LASTH == 0;
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	ca cf       	rjmp	.-108    	; 0x87c <__DATA_REGION_LENGTH__+0x7c>
lds16():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:277

bool UPDI::lds16 (uint32_t addr, uint8_t *data, size_t len) {
  uint8_t repeat = (uint16_t)len >> 1;
  if (!send_repeat_header(addr, UPDI_LD|UPDI_DATA2, repeat)) return false;
  do {
    *data++ = RECV();
     8e8:	10 dc       	rcall	.-2016   	; 0x10a <UPDI::RECV()>
     8ea:	f8 01       	movw	r30, r16
     8ec:	81 87       	std	Z+9, r24	; 0x09
     8ee:	0d dc       	rcall	.-2022   	; 0x10a <UPDI::RECV()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:278
    *data++ = RECV();
     8f0:	f8 01       	movw	r30, r16
     8f2:	82 87       	std	Z+10, r24	; 0x0a
     8f4:	fa 94       	dec	r15
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:279
  } while (--repeat);
     8f6:	0e 5f       	subi	r16, 0xFE	; 254
     8f8:	1f 4f       	sbci	r17, 0xFF	; 255
     8fa:	f1 10       	cpse	r15, r1
     8fc:	f5 cf       	rjmp	.-22     	; 0x8e8 <__DATA_REGION_LENGTH__+0xe8>
lds8():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:270
}

bool UPDI::lds8 (uint32_t addr, uint8_t *data, uint8_t len) {
  if (!send_repeat_header(addr, UPDI_LD|UPDI_DATA1, len)) return false;
  do { *data++ = RECV(); } while (--len);
  return UPDI_LASTH == 0;
     8fe:	9f b3       	in	r25, 0x1f	; 31
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	99 23       	and	r25, r25
     904:	09 f4       	brne	.+2      	; 0x908 <__DATA_REGION_LENGTH__+0x108>
     906:	ba cf       	rjmp	.-140    	; 0x87c <__DATA_REGION_LENGTH__+0x7c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:267
    return UPDI::lds16(start_addr, data, byte_count);
  else
    return UPDI::lds8(start_addr, data, byte_count);
     908:	ed cf       	rjmp	.-38     	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
read_memory():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:268
  while (!send_bytes(set_ptr, sizeof(set_ptr) - 1)) BREAK();
  return RECV();
}

bool UPDI::lds8 (uint32_t addr, uint8_t *data, uint8_t len) {
  if (!send_repeat_header(addr, UPDI_LD|UPDI_DATA1, len)) return false;
     90a:	12 2f       	mov	r17, r18
lds8():
     90c:	40 e2       	ldi	r20, 0x20	; 32
     90e:	9e dc       	rcall	.-1732   	; 0x24c <UPDI::send_repeat_header(unsigned long, unsigned char, unsigned char)>
     910:	88 23       	and	r24, r24
     912:	41 f3       	breq	.-48     	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
     914:	65 e9       	ldi	r22, 0x95	; 149
     916:	e6 2e       	mov	r14, r22
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:269
  do { *data++ = RECV(); } while (--len);
     918:	68 e3       	ldi	r22, 0x38	; 56
     91a:	f6 2e       	mov	r15, r22
     91c:	f6 db       	rcall	.-2068   	; 0x10a <UPDI::RECV()>
     91e:	f7 01       	movw	r30, r14
     920:	81 93       	st	Z+, r24
     922:	7f 01       	movw	r14, r30
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:277
 ******************/

bool NVM::write_memory (void) {
  uint8_t mem_type = JTAG2::packet.body[JTAG2::MEM_TYPE];
  uint8_t *data = &JTAG2::packet.body[JTAG2::DATA_START];
  size_t byte_count = _CAPS16(JTAG2::packet.body[JTAG2::DATA_LENGTH])->word;
     924:	11 50       	subi	r17, 0x01	; 1
     926:	d1 f7       	brne	.-12     	; 0x91c <__DATA_REGION_LENGTH__+0x11c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:278
  uint32_t start_addr = _CAPS32(JTAG2::packet.body[JTAG2::DATA_ADDRESS])->dword;
     928:	ea cf       	rjmp	.-44     	; 0x8fe <__DATA_REGION_LENGTH__+0xfe>
write_memory():
     92a:	81 85       	ldd	r24, Z+9	; 0x09
     92c:	02 85       	ldd	r16, Z+10	; 0x0a
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:281

  /* Address specification outside the processing range is considered an IO area operation */
  if (start_addr >> 24) {
     92e:	13 85       	ldd	r17, Z+11	; 0x0b
     930:	c6 84       	ldd	r12, Z+14	; 0x0e
     932:	d7 84       	ldd	r13, Z+15	; 0x0f
     934:	e0 88       	ldd	r14, Z+16	; 0x10
     936:	f1 88       	ldd	r15, Z+17	; 0x11
     938:	4f 2d       	mov	r20, r15
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:282
    start_addr &= 0xFFFF;
     93a:	55 27       	eor	r21, r21
     93c:	66 27       	eor	r22, r22
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:283
    mem_type = JTAG2::MTYPE_SRAM;
     93e:	77 27       	eor	r23, r23
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:289
  }

  /* Can only be written to USERROW on locked devices */
  /* This write is only allowed in multiples of 32 bytes */
  if (bit_is_set(UPDI_CONTROL, UPDI::UPDI_INFO_bp)
   && mem_type == JTAG2::MTYPE_XMEGA_USERSIG) // 0xC5
     940:	45 2b       	or	r20, r21
     942:	46 2b       	or	r20, r22
     944:	47 2b       	or	r20, r23
     946:	19 f0       	breq	.+6      	; 0x94e <__DATA_REGION_LENGTH__+0x14e>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:469
 * USERROW region writing *
 *****************************************/

bool UPDI::write_userrow (const uint32_t start_addr, uint8_t *data, const size_t byte_count) {
  /* Only data lengths that are multiples of 32 bytes are allowed. */
  if (byte_count == 0 || byte_count & 0x1F) {
     948:	ee 24       	eor	r14, r14
     94a:	ff 24       	eor	r15, r15
_ZN4UPDI7runtimeEh():
     94c:	80 e2       	ldi	r24, 0x20	; 32
write_memory():
     94e:	e0 9b       	sbis	0x1c, 0	; 28
     950:	62 c0       	rjmp	.+196    	; 0xa16 <__DATA_REGION_LENGTH__+0x216>
     952:	85 3c       	cpi	r24, 0xC5	; 197
     954:	09 f0       	breq	.+2      	; 0x958 <__DATA_REGION_LENGTH__+0x158>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:470
    JTAG2::packet.body[JTAG2::MESSAGE_ID] = JTAG2::RSP_ILLEGAL_MEMORY_RANGE;
     956:	5f c0       	rjmp	.+190    	; 0xa16 <__DATA_REGION_LENGTH__+0x216>
write_userrow():
     958:	01 15       	cp	r16, r1
     95a:	11 05       	cpc	r17, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:326
  }

  /* Other writes are allowed from 1 to 256 bytes */
  if (byte_count == 0 || byte_count > 256) {
    set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
    return true;
     95c:	29 f0       	breq	.+10     	; 0x968 <__DATA_REGION_LENGTH__+0x168>
     95e:	c8 01       	movw	r24, r16
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:403
  return loop_until_key_stat_is_set(UPDI_KEY_CHIPERASE);
}

/* __attribute__((optimize("O0"))) */
bool UPDI::set_urowwrite_key (void) {
  if (!send_bytes(urowwrite_key, sizeof(urowwrite_key))) return false;
     960:	8f 71       	andi	r24, 0x1F	; 31
     962:	99 27       	eor	r25, r25
     964:	89 2b       	or	r24, r25
     966:	29 f0       	breq	.+10     	; 0x972 <__DATA_REGION_LENGTH__+0x172>
     968:	83 ea       	ldi	r24, 0xA3	; 163
     96a:	80 93 94 38 	sts	0x3894, r24	; 0x803894 <JTAG2::packet+0x8>
_ZN4UPDI7runtimeEh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:530
  if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) {
    HV_Pulse();
  }

  /* Transition to CHIPERASE mode by system reset */
  if (!set_erase_key()) return false;
     96e:	11 e0       	ldi	r17, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:404
}

/* __attribute__((optimize("O0"))) */
bool UPDI::set_urowwrite_key (void) {
  if (!send_bytes(urowwrite_key, sizeof(urowwrite_key))) return false;
  return loop_until_key_stat_is_set(UPDI_KEY_UROWWRITE);
     970:	3b c0       	rjmp	.+118    	; 0x9e8 <__DATA_REGION_LENGTH__+0x1e8>
set_urowwrite_key():
     972:	6a e0       	ldi	r22, 0x0A	; 10
     974:	80 e2       	ldi	r24, 0x20	; 32
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:475
    JTAG2::packet.body[JTAG2::MESSAGE_ID] = JTAG2::RSP_ILLEGAL_MEMORY_RANGE;
    return true;
  }

  /* Send the authentication key */
  if (!set_urowwrite_key()) return false;
     976:	98 e3       	ldi	r25, 0x38	; 56
     978:	ee db       	rcall	.-2084   	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:478

  /* Transition to USERROW mode by system reset */
  if (!updi_reset(true) || !updi_reset(false)) return false;
     97a:	81 11       	cpse	r24, r1
     97c:	02 c0       	rjmp	.+4      	; 0x982 <__DATA_REGION_LENGTH__+0x182>
_ZN4UPDI7runtimeEh():
     97e:	10 e0       	ldi	r17, 0x00	; 0
     980:	33 c0       	rjmp	.+102    	; 0x9e8 <__DATA_REGION_LENGTH__+0x1e8>
set_urowwrite_key():
     982:	80 e2       	ldi	r24, 0x20	; 32
     984:	98 dd       	rcall	.-1232   	; 0x4b6 <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.20]>
write_userrow():
     986:	88 23       	and	r24, r24
     988:	d1 f3       	breq	.-12     	; 0x97e <__DATA_REGION_LENGTH__+0x17e>
     98a:	81 e0       	ldi	r24, 0x01	; 1
     98c:	bd dc       	rcall	.-1670   	; 0x308 <UPDI::updi_reset(bool)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:481

  /* Wait for system reset to finish */
  loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
     98e:	88 23       	and	r24, r24
     990:	b1 f3       	breq	.-20     	; 0x97e <__DATA_REGION_LENGTH__+0x17e>
     992:	80 e0       	ldi	r24, 0x00	; 0
     994:	b9 dc       	rcall	.-1678   	; 0x308 <UPDI::updi_reset(bool)>
     996:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:484

  /* Make sure you are in USERROW mode */
  loop_until_sys_stat_is_set(UPDI_SYS_UROWPROG);
     998:	91 f3       	breq	.-28     	; 0x97e <__DATA_REGION_LENGTH__+0x17e>
     99a:	70 e0       	ldi	r23, 0x00	; 0
     99c:	60 e0       	ldi	r22, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:487

  /* Write data to buffer memory */
  sts8rsd(start_addr, data, byte_count);
     99e:	80 e2       	ldi	r24, 0x20	; 32
     9a0:	c4 dd       	rcall	.-1144   	; 0x52a <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
     9a2:	84 e0       	ldi	r24, 0x04	; 4
     9a4:	aa dd       	rcall	.-1196   	; 0x4fa <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.23]>
     9a6:	40 2f       	mov	r20, r16
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:491
  /* Ignore any errors here */

  /* After writing the memory, write the end flag */
  set_cs_stat(UPDI_CS_ASI_SYS_CTRLA, UPDI_SET_UROWDONE | UPDI_SET_CLKREQ);
     9a8:	c7 01       	movw	r24, r14
     9aa:	b6 01       	movw	r22, r12
     9ac:	ed db       	rcall	.-2086   	; 0x188 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.17]>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:496

  /* Wait for data to be transferred to USERROW */
  /* AVR_Dx requires at least 100 * 50us wait loops */
  /* AVR_Ex may not end forever, so give up midway */
  loop_until_sys_stat_is_clear(UPDI_SYS_UROWPROG, 200);
     9ae:	63 e0       	ldi	r22, 0x03	; 3
     9b0:	8a e0       	ldi	r24, 0x0A	; 10
     9b2:	e2 db       	rcall	.-2108   	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>
     9b4:	68 ec       	ldi	r22, 0xC8	; 200
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:500
  /* Ignore any errors here */

  /* Step completed */
  set_cs_stat(UPDI_CS_ASI_KEY_STATUS, UPDI_KEY_UROWWRITE);
     9b6:	70 e0       	ldi	r23, 0x00	; 0
     9b8:	84 e0       	ldi	r24, 0x04	; 4
     9ba:	b7 dd       	rcall	.-1170   	; 0x52a <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
     9bc:	60 e2       	ldi	r22, 0x20	; 32
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:503

  /* If previously in program mode, send unlock key */
  if (bit_is_set(UPDI_CONTROL, UPDI_PROG_bp)) {
     9be:	87 e0       	ldi	r24, 0x07	; 7
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:508
    set_nvmprog_key();
  }

  /* Exit USERROW mode */
  if (!updi_reset(true) || !updi_reset(false)) return false;
     9c0:	db db       	rcall	.-2122   	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>
     9c2:	e1 99       	sbic	0x1c, 1	; 28
     9c4:	26 c0       	rjmp	.+76     	; 0xa12 <__DATA_REGION_LENGTH__+0x212>
     9c6:	81 e0       	ldi	r24, 0x01	; 1
     9c8:	9f dc       	rcall	.-1730   	; 0x308 <UPDI::updi_reset(bool)>
     9ca:	88 23       	and	r24, r24
     9cc:	c1 f2       	breq	.-80     	; 0x97e <__DATA_REGION_LENGTH__+0x17e>
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	9b dc       	rcall	.-1738   	; 0x308 <UPDI::updi_reset(bool)>
     9d2:	18 2f       	mov	r17, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:509
  loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
     9d4:	88 23       	and	r24, r24
     9d6:	99 f2       	breq	.-90     	; 0x97e <__DATA_REGION_LENGTH__+0x17e>
     9d8:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:512

  /* Make sure you are in program mode if necessary */
  if (bit_is_set(UPDI_CONTROL, UPDI_PROG_bp)) {
     9da:	60 e0       	ldi	r22, 0x00	; 0
     9dc:	80 e2       	ldi	r24, 0x20	; 32
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:513
    loop_until_sys_stat_is_set(UPDI_SYS_NVMPROG);
     9de:	a5 dd       	rcall	.-1206   	; 0x52a <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
     9e0:	e1 9b       	sbis	0x1c, 1	; 28
     9e2:	02 c0       	rjmp	.+4      	; 0x9e8 <__DATA_REGION_LENGTH__+0x1e8>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:707
        _result = NVM::write_memory();
        break;
      }
      case UPDI_CMD_ERASE : {
        if (JTAG2::packet.body[JTAG2::MEM_TYPE] == JTAG2::XMEGA_ERASE_CHIP) {
          _result = chip_erase();
     9e4:	88 e0       	ldi	r24, 0x08	; 8
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:717
        _result = Target_Reset(true) && Target_Reset(false);
        break;
      }
    }
  }
  TIM::Timeout_Stop();
     9e6:	89 dd       	rcall	.-1262   	; 0x4fa <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.23]>
_ZN4UPDI7runtimeEh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:718
  UPDI_USART.CTRLB = UPDI_USART_ON;
     9e8:	1d 83       	std	Y+5, r17	; 0x05
     9ea:	bd dc       	rcall	.-1670   	; 0x366 <TIM::Timeout_Stop()>
     9ec:	88 ec       	ldi	r24, 0xC8	; 200
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:719
  wdt_reset();
     9ee:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__RODATA_PM_OFFSET__+0x7f8806>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:721
  return _result;
}
     9f2:	a8 95       	wdr
     9f4:	8d 81       	ldd	r24, Y+5	; 0x05
     9f6:	26 96       	adiw	r28, 0x06	; 6
     9f8:	cd bf       	out	0x3d, r28	; 61
     9fa:	de bf       	out	0x3e, r29	; 62
     9fc:	df 91       	pop	r29
     9fe:	cf 91       	pop	r28
     a00:	1f 91       	pop	r17
     a02:	0f 91       	pop	r16
     a04:	ff 90       	pop	r15
     a06:	ef 90       	pop	r14
     a08:	df 90       	pop	r13
     a0a:	cf 90       	pop	r12
     a0c:	bf 90       	pop	r11
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:504
  /* Step completed */
  set_cs_stat(UPDI_CS_ASI_KEY_STATUS, UPDI_KEY_UROWWRITE);

  /* If previously in program mode, send unlock key */
  if (bit_is_set(UPDI_CONTROL, UPDI_PROG_bp)) {
    set_nvmprog_key();
     a0e:	af 90       	pop	r10
     a10:	08 95       	ret
write_userrow():
     a12:	69 dd       	rcall	.-1326   	; 0x4e6 <UPDI::set_nvmprog_key()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:293
  if (bit_is_set(UPDI_CONTROL, UPDI::UPDI_INFO_bp)
   && mem_type == JTAG2::MTYPE_XMEGA_USERSIG) // 0xC5
    return UPDI::write_userrow(start_addr, data, byte_count);

  /* From this point on, only program mode is allowed. */
  if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_PROG_bp)) return false;
     a14:	d8 cf       	rjmp	.-80     	; 0x9c6 <__DATA_REGION_LENGTH__+0x1c6>
write_memory():
     a16:	e1 9b       	sbis	0x1c, 1	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:296

  /* About flash regions */
  switch (mem_type) {
     a18:	b2 cf       	rjmp	.-156    	; 0x97e <__DATA_REGION_LENGTH__+0x17e>
     a1a:	80 3b       	cpi	r24, 0xB0	; 176
     a1c:	39 f0       	breq	.+14     	; 0xa2c <__DATA_REGION_LENGTH__+0x22c>
     a1e:	08 f4       	brcc	.+2      	; 0xa22 <__DATA_REGION_LENGTH__+0x222>
     a20:	97 c0       	rjmp	.+302    	; 0xb50 <__DATA_REGION_LENGTH__+0x350>
     a22:	90 e4       	ldi	r25, 0x40	; 64
     a24:	98 0f       	add	r25, r24
     a26:	92 30       	cpi	r25, 0x02	; 2
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:302
    case JTAG2::MTYPE_FLASH_PAGE :            // 0xB0
    case JTAG2::MTYPE_XMEGA_APP_FLASH :       // 0xC0
    case JTAG2::MTYPE_XMEGA_BOOT_FLASH : {    // 0xC1

      /* Instructions with mismatched page sizes are rejected */
      if (!check_pagesize(JTAG2::updi_desc.flash_page_size, byte_count)) {
     a28:	08 f0       	brcs	.+2      	; 0xa2c <__DATA_REGION_LENGTH__+0x22c>
     a2a:	92 c0       	rjmp	.+292    	; 0xb50 <__DATA_REGION_LENGTH__+0x350>
     a2c:	80 91 66 38 	lds	r24, 0x3866	; 0x803866 <JTAG2::updi_desc+0x4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:28

  bool write_fuse (uint16_t addr, uint8_t data);
  uint32_t before_address;

  bool check_pagesize (uint16_t seed, uint16_t test) {
    while (test != seed) {
     a30:	90 91 67 38 	lds	r25, 0x3867	; 0x803867 <JTAG2::updi_desc+0x5>
     a34:	9c 01       	movw	r18, r24
check_pagesize():
     a36:	02 17       	cp	r16, r18
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:29
      seed >>= 1;
     a38:	13 07       	cpc	r17, r19
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:30
      if (seed < 2) return false;
     a3a:	09 f4       	brne	.+2      	; 0xa3e <__DATA_REGION_LENGTH__+0x23e>
     a3c:	71 c1       	rjmp	.+738    	; 0xd20 <__DATA_REGION_LENGTH__+0x520>
     a3e:	36 95       	lsr	r19
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:304
    case JTAG2::MTYPE_XMEGA_BOOT_FLASH : {    // 0xC1

      /* Instructions with mismatched page sizes are rejected */
      if (!check_pagesize(JTAG2::updi_desc.flash_page_size, byte_count)) {
        /* Kill the process with a strong error */
        set_response(JTAG2::RSP_FAILED);
     a40:	27 95       	ror	r18
     a42:	22 30       	cpi	r18, 0x02	; 2
     a44:	31 05       	cpc	r19, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:88
    return nvm_ctrl_change(nvmcmd);
  }

  /* NVMCTRL version 3,5 */
  bool nvm_ctrl_v3 (uint8_t nvmcmd) {
    nvm_wait_v3();
     a46:	b8 f7       	brcc	.-18     	; 0xa36 <__DATA_REGION_LENGTH__+0x236>
write_memory():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:89
    return nvm_ctrl_change(nvmcmd);
     a48:	80 ea       	ldi	r24, 0xA0	; 160
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:180
    }
    else if (!nvm_ctrl_v3(NVM_V3_CMD_FLPBCLR)) return false;
    nvm_wait_v3();

    if (byte_count == 1) UPDI::st8(start_addr, *data);
    else UPDI::sts8rsd(start_addr, data, byte_count);
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	8a c0       	rjmp	.+276    	; 0xb62 <__DATA_REGION_LENGTH__+0x362>
nvm_ctrl_v3():
     a4e:	21 de       	rcall	.-958    	; 0x692 <NVM::nvm_wait_v3()>
     a50:	8f e0       	ldi	r24, 0x0F	; 15
     a52:	94 c1       	rjmp	.+808    	; 0xd7c <__DATA_REGION_LENGTH__+0x57c>
write_flash_v3():
     a54:	40 2f       	mov	r20, r16
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:316
        && ((JTAG2::updi_desc.flash_page_size - 1) & (uint16_t)start_addr) == 0;
      before_address = start_addr;

      if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp))
        return write_flash_v3(start_addr, data, byte_count, is_bound);
      else if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN2_bp))
     a56:	c7 01       	movw	r24, r14
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:189

  bool write_flash_v2 (uint32_t start_addr, uint8_t *data, size_t byte_count, bool is_bound) {
    /* NVMCTRL version 2 or 4 */
    /* If the chip is not erased, erase the page. */
    /* However, only when the beginning of the page boundary is addressed */
    if (is_bound) {
     a58:	b6 01       	movw	r22, r12
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:82
    return true;
  }

  /* NVMCTRL version 2,4 */
  bool nvm_ctrl_v2 (uint8_t nvmcmd) {
    nvm_wait();
     a5a:	96 db       	rcall	.-2260   	; 0x188 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.17]>
     a5c:	9d c1       	rjmp	.+826    	; 0xd98 <__DATA_REGION_LENGTH__+0x598>
write_memory():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:83
    return nvm_ctrl_change(nvmcmd);
     a5e:	ee 9b       	sbis	0x1d, 6	; 29
     a60:	62 c0       	rjmp	.+196    	; 0xb26 <__DATA_REGION_LENGTH__+0x326>
write_flash_v2():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:193
    /* However, only when the beginning of the page boundary is addressed */
    if (is_bound) {
      if (!nvm_ctrl_v2(NVM_V2_CMD_FLPER)) return false;
      if (!UPDI::st8(start_addr, 0xFF)) return false;
    }
    if (!nvm_ctrl_v2(NVM_V2_CMD_FLWR)) return false;
     a62:	81 11       	cpse	r24, r1
     a64:	0f c0       	rjmp	.+30     	; 0xa84 <__DATA_REGION_LENGTH__+0x284>
nvm_ctrl_v2():
     a66:	23 de       	rcall	.-954    	; 0x6ae <NVM::nvm_wait()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:196

    /* This version allows bulk writes of 512 bytes */
    if (byte_count == 1) UPDI::st8(start_addr, *data);
     a68:	82 e0       	ldi	r24, 0x02	; 2
     a6a:	96 dc       	rcall	.-1748   	; 0x398 <NVM::nvm_ctrl_change(unsigned char)>
write_flash_v2():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:139
      set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
      return true;
    }
    if (!nvm_ctrl_v2(NVM_V2_CMD_EEERWR)) return false;

    if (byte_count == 1) UPDI::st8(start_addr, *data);
     a6c:	88 23       	and	r24, r24
     a6e:	09 f4       	brne	.+2      	; 0xa72 <__DATA_REGION_LENGTH__+0x272>
     a70:	86 cf       	rjmp	.-244    	; 0x97e <__DATA_REGION_LENGTH__+0x17e>
     a72:	01 30       	cpi	r16, 0x01	; 1
     a74:	11 05       	cpc	r17, r1
     a76:	99 f4       	brne	.+38     	; 0xa9e <__DATA_REGION_LENGTH__+0x29e>
write_eeprom_v2():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:82
    return true;
  }

  /* NVMCTRL version 2,4 */
  bool nvm_ctrl_v2 (uint8_t nvmcmd) {
    nvm_wait();
     a78:	40 91 9e 38 	lds	r20, 0x389E	; 0x80389e <JTAG2::packet+0x12>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:83
    return nvm_ctrl_change(nvmcmd);
     a7c:	c7 01       	movw	r24, r14
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:190
  bool write_flash_v2 (uint32_t start_addr, uint8_t *data, size_t byte_count, bool is_bound) {
    /* NVMCTRL version 2 or 4 */
    /* If the chip is not erased, erase the page. */
    /* However, only when the beginning of the page boundary is addressed */
    if (is_bound) {
      if (!nvm_ctrl_v2(NVM_V2_CMD_FLPER)) return false;
     a7e:	b6 01       	movw	r22, r12
     a80:	c5 db       	rcall	.-2166   	; 0x20c <UPDI::st8(unsigned long, unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:191
      if (!UPDI::st8(start_addr, 0xFF)) return false;
     a82:	49 c0       	rjmp	.+146    	; 0xb16 <__DATA_REGION_LENGTH__+0x316>
nvm_ctrl_v2():
     a84:	14 de       	rcall	.-984    	; 0x6ae <NVM::nvm_wait()>
     a86:	88 e0       	ldi	r24, 0x08	; 8
     a88:	87 dc       	rcall	.-1778   	; 0x398 <NVM::nvm_ctrl_change(unsigned char)>
write_flash_v2():
     a8a:	88 23       	and	r24, r24
     a8c:	09 f4       	brne	.+2      	; 0xa90 <__DATA_REGION_LENGTH__+0x290>
     a8e:	77 cf       	rjmp	.-274    	; 0x97e <__DATA_REGION_LENGTH__+0x17e>
     a90:	4f ef       	ldi	r20, 0xFF	; 255
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:197
    }
    if (!nvm_ctrl_v2(NVM_V2_CMD_FLWR)) return false;

    /* This version allows bulk writes of 512 bytes */
    if (byte_count == 1) UPDI::st8(start_addr, *data);
    else if ((byte_count - 1) >> 8) UPDI::sts16rsd(start_addr, data, byte_count);
     a92:	c7 01       	movw	r24, r14
     a94:	b6 01       	movw	r22, r12
     a96:	ba db       	rcall	.-2188   	; 0x20c <UPDI::st8(unsigned long, unsigned char)>
     a98:	81 11       	cpse	r24, r1
     a9a:	e5 cf       	rjmp	.-54     	; 0xa66 <__DATA_REGION_LENGTH__+0x266>
     a9c:	70 cf       	rjmp	.-288    	; 0x97e <__DATA_REGION_LENGTH__+0x17e>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:236
  if (!set_cs_ctra(UPDI_GTVAL)) return false;
  return true;
}

bool UPDI::sts16rsd (uint32_t addr, uint8_t *data, size_t len) {
  _CAPS32(_set_ptr_l[2])->dword = addr;
     a9e:	c8 01       	movw	r24, r16
     aa0:	01 97       	sbiw	r24, 0x01	; 1
     aa2:	89 2f       	mov	r24, r25
     aa4:	99 27       	eor	r25, r25
     aa6:	89 2b       	or	r24, r25
     aa8:	09 f4       	brne	.+2      	; 0xaac <__DATA_REGION_LENGTH__+0x2ac>
     aaa:	38 c0       	rjmp	.+112    	; 0xb1c <__DATA_REGION_LENGTH__+0x31c>
sts16rsd():
     aac:	c0 92 41 38 	sts	0x3841, r12	; 0x803841 <UPDI::_set_ptr_l+0x2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:237
  uint8_t repeat = len >> 1;
     ab0:	d0 92 42 38 	sts	0x3842, r13	; 0x803842 <UPDI::_set_ptr_l+0x3>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:238
  _set_repeat[2] = repeat - 1;
     ab4:	e0 92 43 38 	sts	0x3843, r14	; 0x803843 <UPDI::_set_ptr_l+0x4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:239
  _set_repeat[4] = UPDI_PTR_INC|UPDI_ST|UPDI_DATA2;
     ab8:	f0 92 44 38 	sts	0x3844, r15	; 0x803844 <UPDI::_set_ptr_l+0x5>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:240
  if (!send_bytes(_set_ptr_l, sizeof(_set_ptr_l) - 1)) return false;
     abc:	16 95       	lsr	r17
     abe:	07 95       	ror	r16
     ac0:	f0 2e       	mov	r15, r16
     ac2:	ea e3       	ldi	r30, 0x3A	; 58
     ac4:	f8 e3       	ldi	r31, 0x38	; 56
     ac6:	01 50       	subi	r16, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:241
  if (UPDI_ACK != RECV()) return false;
     ac8:	02 83       	std	Z+2, r16	; 0x02
     aca:	85 e6       	ldi	r24, 0x65	; 101
     acc:	84 83       	std	Z+4, r24	; 0x04
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:318
  set_ptr[2] = data;
  return send_bytes(set_ptr, sizeof(set_ptr));
}

bool UPDI::set_cs_ctra (uint8_t data) {
  return set_cs_stat(UPDI_CS_CTRLA, data);
     ace:	65 e0       	ldi	r22, 0x05	; 5
     ad0:	8f e3       	ldi	r24, 0x3F	; 63
     ad2:	98 e3       	ldi	r25, 0x38	; 56
     ad4:	40 db       	rcall	.-2432   	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:242
  uint8_t repeat = len >> 1;
  _set_repeat[2] = repeat - 1;
  _set_repeat[4] = UPDI_PTR_INC|UPDI_ST|UPDI_DATA2;
  if (!send_bytes(_set_ptr_l, sizeof(_set_ptr_l) - 1)) return false;
  if (UPDI_ACK != RECV()) return false;
  if (!set_cs_ctra(UPDI_SET_RSD|UPDI_GTVAL_RSD)) return false;
     ad6:	88 23       	and	r24, r24
     ad8:	f1 f0       	breq	.+60     	; 0xb16 <__DATA_REGION_LENGTH__+0x316>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:243
  if (!send_bytes(_set_repeat, sizeof(_set_repeat))) return false;
     ada:	17 db       	rcall	.-2514   	; 0x10a <UPDI::RECV()>
     adc:	80 34       	cpi	r24, 0x40	; 64
     ade:	d9 f4       	brne	.+54     	; 0xb16 <__DATA_REGION_LENGTH__+0x316>
set_cs_ctra():
     ae0:	6e e0       	ldi	r22, 0x0E	; 14
     ae2:	82 e0       	ldi	r24, 0x02	; 2
     ae4:	49 db       	rcall	.-2414   	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>
sts16rsd():
     ae6:	88 23       	and	r24, r24
     ae8:	b1 f0       	breq	.+44     	; 0xb16 <__DATA_REGION_LENGTH__+0x316>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:245
  do {              /* Repeat word send */
    SEND(*data++);  /* Submission errors must be ignored */
     aea:	65 e0       	ldi	r22, 0x05	; 5
     aec:	8a e3       	ldi	r24, 0x3A	; 58
     aee:	98 e3       	ldi	r25, 0x38	; 56
     af0:	32 db       	rcall	.-2460   	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:246
    SEND(*data++);  /* Submission errors must be ignored */
     af2:	88 23       	and	r24, r24
     af4:	81 f0       	breq	.+32     	; 0xb16 <__DATA_REGION_LENGTH__+0x316>
     af6:	0c e8       	ldi	r16, 0x8C	; 140
     af8:	18 e3       	ldi	r17, 0x38	; 56
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:247
  } while (--repeat);
     afa:	f8 01       	movw	r30, r16
     afc:	82 89       	ldd	r24, Z+18	; 0x12
     afe:	11 db       	rcall	.-2526   	; 0x122 <UPDI::SEND(unsigned char)>
     b00:	f8 01       	movw	r30, r16
     b02:	83 89       	ldd	r24, Z+19	; 0x13
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:318
  set_ptr[2] = data;
  return send_bytes(set_ptr, sizeof(set_ptr));
}

bool UPDI::set_cs_ctra (uint8_t data) {
  return set_cs_stat(UPDI_CS_CTRLA, data);
     b04:	0e db       	rcall	.-2532   	; 0x122 <UPDI::SEND(unsigned char)>
     b06:	fa 94       	dec	r15
     b08:	0e 5f       	subi	r16, 0xFE	; 254
     b0a:	1f 4f       	sbci	r17, 0xFF	; 255
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:82
    return true;
  }

  /* NVMCTRL version 2,4 */
  bool nvm_ctrl_v2 (uint8_t nvmcmd) {
    nvm_wait();
     b0c:	f1 10       	cpse	r15, r1
     b0e:	f5 cf       	rjmp	.-22     	; 0xafa <__DATA_REGION_LENGTH__+0x2fa>
set_cs_ctra():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:83
    return nvm_ctrl_change(nvmcmd);
     b10:	66 e0       	ldi	r22, 0x06	; 6
     b12:	82 e0       	ldi	r24, 0x02	; 2
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:198
    if (!nvm_ctrl_v2(NVM_V2_CMD_FLWR)) return false;

    /* This version allows bulk writes of 512 bytes */
    if (byte_count == 1) UPDI::st8(start_addr, *data);
    else if ((byte_count - 1) >> 8) UPDI::sts16rsd(start_addr, data, byte_count);
    else UPDI::sts8rsd(start_addr, data, byte_count);
     b14:	31 db       	rcall	.-2462   	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>
nvm_ctrl_v2():
     b16:	cb dd       	rcall	.-1130   	; 0x6ae <NVM::nvm_wait()>
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	40 c1       	rjmp	.+640    	; 0xd9c <__DATA_REGION_LENGTH__+0x59c>
write_flash_v2():
     b1c:	40 2f       	mov	r20, r16
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:207

  bool write_flash_v0 (uint32_t start_addr, uint8_t *data, size_t byte_count, bool is_bound) {
    /* NVMCTRL version 0 */
    /* This version does not require page erasure. */
    /* Just clearing the buffer buffer is sufficient. */
    if (is_bound) {
     b1e:	c7 01       	movw	r24, r14
     b20:	b6 01       	movw	r22, r12
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:153
    if (byte_count > 64) {
      /* If the limit is exceeded, it will fall back and force a Single-byte write */
      set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
      return true;
    }
    nvm_wait();
     b22:	32 db       	rcall	.-2460   	; 0x188 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.17]>
     b24:	f8 cf       	rjmp	.-16     	; 0xb16 <__DATA_REGION_LENGTH__+0x316>
write_flash_v0():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:155

    if (byte_count == 1) UPDI::st8(start_addr, *data);
     b26:	81 11       	cpse	r24, r1
     b28:	0d c0       	rjmp	.+26     	; 0xb44 <__DATA_REGION_LENGTH__+0x344>
write_eeprom_v0():
     b2a:	c1 dd       	rcall	.-1150   	; 0x6ae <NVM::nvm_wait()>
     b2c:	01 30       	cpi	r16, 0x01	; 1
     b2e:	11 05       	cpc	r17, r1
     b30:	09 f0       	breq	.+2      	; 0xb34 <__DATA_REGION_LENGTH__+0x334>
     b32:	9d c0       	rjmp	.+314    	; 0xc6e <__DATA_REGION_LENGTH__+0x46e>
     b34:	40 91 9e 38 	lds	r20, 0x389E	; 0x80389e <JTAG2::packet+0x12>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:158
    else UPDI::sts8rsd(start_addr, data, byte_count);

    return nvm_ctrl(NVM_CMD_ERWP);
     b38:	c7 01       	movw	r24, r14
     b3a:	b6 01       	movw	r22, r12
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:208
  bool write_flash_v0 (uint32_t start_addr, uint8_t *data, size_t byte_count, bool is_bound) {
    /* NVMCTRL version 0 */
    /* This version does not require page erasure. */
    /* Just clearing the buffer buffer is sufficient. */
    if (is_bound) {
      nvm_wait();
     b3c:	67 db       	rcall	.-2354   	; 0x20c <UPDI::st8(unsigned long, unsigned char)>
     b3e:	83 e0       	ldi	r24, 0x03	; 3
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:209
      if (!nvm_ctrl(NVM_CMD_PBC)) return false;
     b40:	25 dc       	rcall	.-1974   	; 0x38c <NVM::nvm_ctrl(unsigned char)>
     b42:	3c c0       	rjmp	.+120    	; 0xbbc <__DATA_REGION_LENGTH__+0x3bc>
write_flash_v0():
     b44:	b4 dd       	rcall	.-1176   	; 0x6ae <NVM::nvm_wait()>
     b46:	84 e0       	ldi	r24, 0x04	; 4
     b48:	21 dc       	rcall	.-1982   	; 0x38c <NVM::nvm_ctrl(unsigned char)>
     b4a:	81 11       	cpse	r24, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:324
        return write_flash_v0(start_addr, data, byte_count, is_bound);
    }
  }

  /* Other writes are allowed from 1 to 256 bytes */
  if (byte_count == 0 || byte_count > 256) {
     b4c:	ee cf       	rjmp	.-36     	; 0xb2a <__DATA_REGION_LENGTH__+0x32a>
     b4e:	17 cf       	rjmp	.-466    	; 0x97e <__DATA_REGION_LENGTH__+0x17e>
write_memory():
     b50:	98 01       	movw	r18, r16
     b52:	21 50       	subi	r18, 0x01	; 1
     b54:	31 09       	sbc	r19, r1
     b56:	2f 3f       	cpi	r18, 0xFF	; 255
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:325
    set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
     b58:	31 05       	cpc	r19, r1
     b5a:	29 f0       	breq	.+10     	; 0xb66 <__DATA_REGION_LENGTH__+0x366>
     b5c:	20 f0       	brcs	.+8      	; 0xb66 <__DATA_REGION_LENGTH__+0x366>
     b5e:	83 ea       	ldi	r24, 0xA3	; 163
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:329
    return true;
  }

  switch (mem_type) {
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	2f dc       	rcall	.-1954   	; 0x3c2 <JTAG2::set_response(JTAG2::jtag_response_e)>
     b64:	04 cf       	rjmp	.-504    	; 0x96e <__DATA_REGION_LENGTH__+0x16e>
     b66:	81 3b       	cpi	r24, 0xB1	; 177
     b68:	29 f0       	breq	.+10     	; 0xb74 <__DATA_REGION_LENGTH__+0x374>
     b6a:	d8 f4       	brcc	.+54     	; 0xba2 <__DATA_REGION_LENGTH__+0x3a2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:350
      /* FUSES in other implementations is equivalent to EEPROM */
    }
    case JTAG2::MTYPE_XMEGA_EEPROM :          // 0xC4
    case JTAG2::MTYPE_EEPROM_PAGE :           // 0xB1
    case JTAG2::MTYPE_EEPROM : {              // 0x22
      if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp))
     b6c:	80 32       	cpi	r24, 0x20	; 32
     b6e:	01 f1       	breq	.+64     	; 0xbb0 <__DATA_REGION_LENGTH__+0x3b0>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:115
   ***********************************/

  bool write_eeprom_v3 (uint32_t start_addr, uint8_t *data, size_t byte_count) {
    /* NVMCTRL version 3 or 5 */
    /* This version can write 8 bytes in bulk */
    if (byte_count > 8) {
     b70:	82 32       	cpi	r24, 0x22	; 34
     b72:	d9 f4       	brne	.+54     	; 0xbaa <__DATA_REGION_LENGTH__+0x3aa>
     b74:	ed 9b       	sbis	0x1d, 5	; 29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:88
    return nvm_ctrl_change(nvmcmd);
  }

  /* NVMCTRL version 3,5 */
  bool nvm_ctrl_v3 (uint8_t nvmcmd) {
    nvm_wait_v3();
     b76:	5f c0       	rjmp	.+190    	; 0xc36 <__DATA_REGION_LENGTH__+0x436>
write_eeprom_v3():
     b78:	09 30       	cpi	r16, 0x09	; 9
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:89
    return nvm_ctrl_change(nvmcmd);
     b7a:	11 05       	cpc	r17, r1
     b7c:	80 f7       	brcc	.-32     	; 0xb5e <__DATA_REGION_LENGTH__+0x35e>
nvm_ctrl_v3():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:120
    if (byte_count > 8) {
      /* If the limit is exceeded, it will fall back and force a Single-byte write */
      set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
      return true;
    }
    if (!nvm_ctrl_v3(NVM_V3_CMD_EEPBCLR)) return false;
     b7e:	89 dd       	rcall	.-1262   	; 0x692 <NVM::nvm_wait_v3()>
     b80:	8f e1       	ldi	r24, 0x1F	; 31
     b82:	0a dc       	rcall	.-2028   	; 0x398 <NVM::nvm_ctrl_change(unsigned char)>
write_eeprom_v3():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:122

    if (byte_count == 1) UPDI::st8(start_addr, *data);
     b84:	88 23       	and	r24, r24
     b86:	09 f4       	brne	.+2      	; 0xb8a <__DATA_REGION_LENGTH__+0x38a>
     b88:	fa ce       	rjmp	.-524    	; 0x97e <__DATA_REGION_LENGTH__+0x17e>
     b8a:	01 30       	cpi	r16, 0x01	; 1
     b8c:	11 05       	cpc	r17, r1
     b8e:	09 f0       	breq	.+2      	; 0xb92 <__DATA_REGION_LENGTH__+0x392>
     b90:	4b c0       	rjmp	.+150    	; 0xc28 <__DATA_REGION_LENGTH__+0x428>
     b92:	40 91 9e 38 	lds	r20, 0x389E	; 0x80389e <JTAG2::packet+0x12>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:88
    return nvm_ctrl_change(nvmcmd);
  }

  /* NVMCTRL version 3,5 */
  bool nvm_ctrl_v3 (uint8_t nvmcmd) {
    nvm_wait_v3();
     b96:	c7 01       	movw	r24, r14
     b98:	b6 01       	movw	r22, r12
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:89
    return nvm_ctrl_change(nvmcmd);
     b9a:	38 db       	rcall	.-2448   	; 0x20c <UPDI::st8(unsigned long, unsigned char)>
nvm_ctrl_v3():
     b9c:	7a dd       	rcall	.-1292   	; 0x692 <NVM::nvm_wait_v3()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:329
  if (byte_count == 0 || byte_count > 256) {
    set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
    return true;
  }

  switch (mem_type) {
     b9e:	85 e1       	ldi	r24, 0x15	; 21
     ba0:	fd c0       	rjmp	.+506    	; 0xd9c <__DATA_REGION_LENGTH__+0x59c>
write_memory():
     ba2:	84 3b       	cpi	r24, 0xB4	; 180
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:359
      else
        return write_eeprom_v0(start_addr, data, byte_count);
    }
    default :
      /* Other memory types are rejected */
      set_response(JTAG2::RSP_ILLEGAL_MEMORY_TYPE);
     ba4:	68 f0       	brcs	.+26     	; 0xbc0 <__DATA_REGION_LENGTH__+0x3c0>
     ba6:	84 3c       	cpi	r24, 0xC4	; 196
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:332
  }

  switch (mem_type) {
    /* Can write to the IO region as is */
    case JTAG2::MTYPE_SRAM : {                // 0x20
      return UPDI::sts8(start_addr, data, byte_count);
     ba8:	29 f3       	breq	.-54     	; 0xb74 <__DATA_REGION_LENGTH__+0x374>
     baa:	82 ea       	ldi	r24, 0xA2	; 162
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	d9 cf       	rjmp	.-78     	; 0xb62 <__DATA_REGION_LENGTH__+0x362>
     bb0:	20 2f       	mov	r18, r16
     bb2:	4e e9       	ldi	r20, 0x9E	; 158
     bb4:	58 e3       	ldi	r21, 0x38	; 56
     bb6:	c7 01       	movw	r24, r14
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:339
    /* EEPROM region */
    case JTAG2::MTYPE_LOCK_BITS :             // 0xB3
    case JTAG2::MTYPE_FUSE_BITS : {           // 0xB2
      /* The NVMCTRL version 0 implementation is special. */
      if (bit_is_clear(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp)
      && bit_is_clear(UPDI_NVMCTRL, UPDI::UPDI_GEN2_bp)) {
     bb8:	b6 01       	movw	r22, r12
     bba:	65 db       	rcall	.-2358   	; 0x286 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)>
enter_updi():
     bbc:	18 2f       	mov	r17, r24
     bbe:	14 cf       	rjmp	.-472    	; 0x9e8 <__DATA_REGION_LENGTH__+0x1e8>
write_memory():
     bc0:	ed 99       	sbic	0x1d, 5	; 29
     bc2:	d8 cf       	rjmp	.-80     	; 0xb74 <__DATA_REGION_LENGTH__+0x374>
     bc4:	ee 99       	sbic	0x1d, 6	; 29
     bc6:	d6 cf       	rjmp	.-84     	; 0xb74 <__DATA_REGION_LENGTH__+0x374>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:100

  bool write_fuse (uint16_t addr, uint8_t data) {
    /* Version 0 of FUSE can write one byte at a time in a special way */
    struct fuse_packet_t { uint16_t data; uint16_t addr; } fuse_packet;
    fuse_packet.data = data;
    fuse_packet.addr = addr;
     bc8:	c8 01       	movw	r24, r16
     bca:	84 57       	subi	r24, 0x74	; 116
     bcc:	97 4c       	sbci	r25, 0xC7	; 199
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:99
   **********************************************/

  bool write_fuse (uint16_t addr, uint8_t data) {
    /* Version 0 of FUSE can write one byte at a time in a special way */
    struct fuse_packet_t { uint16_t data; uint16_t addr; } fuse_packet;
    fuse_packet.data = data;
     bce:	5c 01       	movw	r10, r24
     bd0:	0c e8       	ldi	r16, 0x8C	; 140
     bd2:	18 e3       	ldi	r17, 0x38	; 56
write_fuse():
     bd4:	f6 01       	movw	r30, r12
     bd6:	ec 58       	subi	r30, 0x8C	; 140
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:100
    fuse_packet.addr = addr;
     bd8:	f8 43       	sbci	r31, 0x38	; 56
     bda:	6f 01       	movw	r12, r30
     bdc:	f8 01       	movw	r30, r16
     bde:	82 89       	ldd	r24, Z+18	; 0x12
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:101
    nvm_wait();
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	89 83       	std	Y+1, r24	; 0x01
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:102
    if (!UPDI::sts8(NVMCTRL_REG_DATA,
     be4:	9a 83       	std	Y+2, r25	; 0x02
     be6:	c6 01       	movw	r24, r12
     be8:	80 0f       	add	r24, r16
     bea:	91 1f       	adc	r25, r17
     bec:	8b 83       	std	Y+3, r24	; 0x03
     bee:	9c 83       	std	Y+4, r25	; 0x04
     bf0:	5e dd       	rcall	.-1348   	; 0x6ae <NVM::nvm_wait()>
     bf2:	24 e0       	ldi	r18, 0x04	; 4
     bf4:	ae 01       	movw	r20, r28
     bf6:	4f 5f       	subi	r20, 0xFF	; 255
     bf8:	5f 4f       	sbci	r21, 0xFF	; 255
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:104
      (uint8_t*)&fuse_packet, sizeof(fuse_packet))) return false;
    if (!nvm_ctrl(NVM_CMD_WFU)) return false;
     bfa:	66 e0       	ldi	r22, 0x06	; 6
     bfc:	70 e1       	ldi	r23, 0x10	; 16
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:105
    return ((nvm_wait() & 7) == 0);
     c02:	41 db       	rcall	.-2430   	; 0x286 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)>
     c04:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:341
    case JTAG2::MTYPE_FUSE_BITS : {           // 0xB2
      /* The NVMCTRL version 0 implementation is special. */
      if (bit_is_clear(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp)
      && bit_is_clear(UPDI_NVMCTRL, UPDI::UPDI_GEN2_bp)) {
        do {
          if (!write_fuse(start_addr++, *data++)) return false;
     c06:	09 f4       	brne	.+2      	; 0xc0a <__DATA_REGION_LENGTH__+0x40a>
     c08:	ba ce       	rjmp	.-652    	; 0x97e <__DATA_REGION_LENGTH__+0x17e>
     c0a:	87 e0       	ldi	r24, 0x07	; 7
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:342
        } while (--byte_count);
     c0c:	bf db       	rcall	.-2178   	; 0x38c <NVM::nvm_ctrl(unsigned char)>
     c0e:	88 23       	and	r24, r24
     c10:	09 f4       	brne	.+2      	; 0xc14 <__DATA_REGION_LENGTH__+0x414>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:123
      return true;
    }
    if (!nvm_ctrl_v3(NVM_V3_CMD_EEPBCLR)) return false;

    if (byte_count == 1) UPDI::st8(start_addr, *data);
    else UPDI::sts8(start_addr, data, byte_count);
     c12:	b5 ce       	rjmp	.-662    	; 0x97e <__DATA_REGION_LENGTH__+0x17e>
     c14:	4c dd       	rcall	.-1384   	; 0x6ae <NVM::nvm_wait()>
write_memory():
     c16:	87 70       	andi	r24, 0x07	; 7
     c18:	09 f0       	breq	.+2      	; 0xc1c <__DATA_REGION_LENGTH__+0x41c>
     c1a:	b1 ce       	rjmp	.-670    	; 0x97e <__DATA_REGION_LENGTH__+0x17e>
     c1c:	0f 5f       	subi	r16, 0xFF	; 255
     c1e:	1f 4f       	sbci	r17, 0xFF	; 255
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:352
    case JTAG2::MTYPE_XMEGA_EEPROM :          // 0xC4
    case JTAG2::MTYPE_EEPROM_PAGE :           // 0xB1
    case JTAG2::MTYPE_EEPROM : {              // 0x22
      if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp))
        return write_eeprom_v3(start_addr, data, byte_count);
      else if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN2_bp))
     c20:	a0 16       	cp	r10, r16
     c22:	b1 06       	cpc	r11, r17
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:132

  bool write_eeprom_v2 (uint32_t start_addr, uint8_t *data, size_t byte_count) {
    /* NVMCTRL version 2 or 4 */
    /* This version cannot be written in bulk transfer */
    /* Only 2 bytes (1 word) can be written at a time */
    if (byte_count > 2) {
     c24:	d9 f6       	brne	.-74     	; 0xbdc <__DATA_REGION_LENGTH__+0x3dc>
     c26:	a3 ce       	rjmp	.-698    	; 0x96e <__DATA_REGION_LENGTH__+0x16e>
write_eeprom_v3():
     c28:	20 2f       	mov	r18, r16
     c2a:	4e e9       	ldi	r20, 0x9E	; 158
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:82
    return true;
  }

  /* NVMCTRL version 2,4 */
  bool nvm_ctrl_v2 (uint8_t nvmcmd) {
    nvm_wait();
     c2c:	58 e3       	ldi	r21, 0x38	; 56
     c2e:	c7 01       	movw	r24, r14
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:83
    return nvm_ctrl_change(nvmcmd);
     c30:	b6 01       	movw	r22, r12
     c32:	29 db       	rcall	.-2478   	; 0x286 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)>
     c34:	b3 cf       	rjmp	.-154    	; 0xb9c <__DATA_REGION_LENGTH__+0x39c>
write_memory():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:137
    if (byte_count > 2) {
      /* If the limit is exceeded, it will fall back and force a Single-byte write */
      set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
      return true;
    }
    if (!nvm_ctrl_v2(NVM_V2_CMD_EEERWR)) return false;
     c36:	ee 9b       	sbis	0x1d, 6	; 29
     c38:	15 c0       	rjmp	.+42     	; 0xc64 <__DATA_REGION_LENGTH__+0x464>
write_eeprom_v2():
     c3a:	03 30       	cpi	r16, 0x03	; 3
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:139

    if (byte_count == 1) UPDI::st8(start_addr, *data);
     c3c:	11 05       	cpc	r17, r1
     c3e:	08 f0       	brcs	.+2      	; 0xc42 <__DATA_REGION_LENGTH__+0x442>
     c40:	8e cf       	rjmp	.-228    	; 0xb5e <__DATA_REGION_LENGTH__+0x35e>
nvm_ctrl_v2():
     c42:	35 dd       	rcall	.-1430   	; 0x6ae <NVM::nvm_wait()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:140
    else UPDI::sts8(start_addr, data, byte_count);
     c44:	83 e1       	ldi	r24, 0x13	; 19
     c46:	a8 db       	rcall	.-2224   	; 0x398 <NVM::nvm_ctrl_change(unsigned char)>
write_eeprom_v2():
     c48:	88 23       	and	r24, r24
     c4a:	09 f4       	brne	.+2      	; 0xc4e <__DATA_REGION_LENGTH__+0x44e>
     c4c:	98 ce       	rjmp	.-720    	; 0x97e <__DATA_REGION_LENGTH__+0x17e>
     c4e:	01 30       	cpi	r16, 0x01	; 1
     c50:	11 05       	cpc	r17, r1
     c52:	09 f4       	brne	.+2      	; 0xc56 <__DATA_REGION_LENGTH__+0x456>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:148
  }

  bool write_eeprom_v0 (uint32_t start_addr, uint8_t *data, size_t byte_count) {
    /* NVMCTRL version 0 */
    /* This version allows fast bulk writes of 32 or 64 bytes */
    if (byte_count > 64) {
     c54:	11 cf       	rjmp	.-478    	; 0xa78 <__DATA_REGION_LENGTH__+0x278>
     c56:	22 e0       	ldi	r18, 0x02	; 2
     c58:	4e e9       	ldi	r20, 0x9E	; 158
     c5a:	58 e3       	ldi	r21, 0x38	; 56
     c5c:	c7 01       	movw	r24, r14
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:156
      return true;
    }
    nvm_wait();

    if (byte_count == 1) UPDI::st8(start_addr, *data);
    else UPDI::sts8rsd(start_addr, data, byte_count);
     c5e:	b6 01       	movw	r22, r12
     c60:	12 db       	rcall	.-2524   	; 0x286 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)>
     c62:	59 cf       	rjmp	.-334    	; 0xb16 <__DATA_REGION_LENGTH__+0x316>
write_eeprom_v0():
     c64:	01 34       	cpi	r16, 0x41	; 65
     c66:	11 05       	cpc	r17, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:706
      case UPDI_CMD_WRITE_MEMORY : {
        _result = NVM::write_memory();
        break;
      }
      case UPDI_CMD_ERASE : {
        if (JTAG2::packet.body[JTAG2::MEM_TYPE] == JTAG2::XMEGA_ERASE_CHIP) {
     c68:	08 f4       	brcc	.+2      	; 0xc6c <__DATA_REGION_LENGTH__+0x46c>
     c6a:	5f cf       	rjmp	.-322    	; 0xb2a <__DATA_REGION_LENGTH__+0x32a>
     c6c:	78 cf       	rjmp	.-272    	; 0xb5e <__DATA_REGION_LENGTH__+0x35e>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:525
 ****************************/

// __attribute__((optimize("O0")))
bool UPDI::chip_erase (void) {
  /* If UPDI is prohibited, try HV control */
  if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) {
     c6e:	40 2f       	mov	r20, r16
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:397
  return loop_until_key_stat_is_set(UPDI_KEY_NVMPROG);
}

/* __attribute__((optimize("O0"))) */
bool UPDI::set_erase_key (void) {
  if (!send_bytes(erase_key, sizeof(erase_key))) return false;
     c70:	c7 01       	movw	r24, r14
     c72:	b6 01       	movw	r22, r12
     c74:	89 da       	rcall	.-2798   	; 0x188 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.17]>
     c76:	63 cf       	rjmp	.-314    	; 0xb3e <__DATA_REGION_LENGTH__+0x33e>
_ZN4UPDI7runtimeEh():
     c78:	80 91 95 38 	lds	r24, 0x3895	; 0x803895 <JTAG2::packet+0x9>
     c7c:	81 11       	cpse	r24, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:398
  return loop_until_key_stat_is_set(UPDI_KEY_CHIPERASE);
     c7e:	b5 ce       	rjmp	.-662    	; 0x9ea <__DATA_REGION_LENGTH__+0x1ea>
chip_erase():
     c80:	e0 9b       	sbis	0x1c, 0	; 28
     c82:	44 c0       	rjmp	.+136    	; 0xd0c <__DATA_REGION_LENGTH__+0x50c>
set_erase_key():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:530
  if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) {
    HV_Pulse();
  }

  /* Transition to CHIPERASE mode by system reset */
  if (!set_erase_key()) return false;
     c84:	6a e0       	ldi	r22, 0x0A	; 10
     c86:	8a e2       	ldi	r24, 0x2A	; 42
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:533

  /* Issue a system reset */
  if (!updi_reset(true) || !updi_reset(false)) return false;
     c88:	98 e3       	ldi	r25, 0x38	; 56
     c8a:	65 da       	rcall	.-2870   	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     c8c:	88 23       	and	r24, r24
     c8e:	09 f4       	brne	.+2      	; 0xc92 <__DATA_REGION_LENGTH__+0x492>
     c90:	76 ce       	rjmp	.-788    	; 0x97e <__DATA_REGION_LENGTH__+0x17e>
     c92:	88 e0       	ldi	r24, 0x08	; 8
     c94:	10 dc       	rcall	.-2016   	; 0x4b6 <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.20]>
chip_erase():
     c96:	88 23       	and	r24, r24
     c98:	09 f4       	brne	.+2      	; 0xc9c <__DATA_REGION_LENGTH__+0x49c>
     c9a:	71 ce       	rjmp	.-798    	; 0x97e <__DATA_REGION_LENGTH__+0x17e>
     c9c:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:536

  /* If LOCKSTATUS is clear, the chip is unlocked */
  loop_until_sys_stat_is_clear(UPDI_SYS_LOCKSTATUS);
     c9e:	34 db       	rcall	.-2456   	; 0x308 <UPDI::updi_reset(bool)>
     ca0:	88 23       	and	r24, r24
     ca2:	09 f4       	brne	.+2      	; 0xca6 <__DATA_REGION_LENGTH__+0x4a6>
     ca4:	6c ce       	rjmp	.-808    	; 0x97e <__DATA_REGION_LENGTH__+0x17e>
     ca6:	80 e0       	ldi	r24, 0x00	; 0
     ca8:	2f db       	rcall	.-2466   	; 0x308 <UPDI::updi_reset(bool)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:295
  send_bytes(set_ptr, sizeof(set_ptr));
  return RECV();
}

bool UPDI::is_cs_stat (uint8_t code, uint8_t check) {
  return check == (get_cs_stat(code) & check);
     caa:	88 23       	and	r24, r24
     cac:	09 f4       	brne	.+2      	; 0xcb0 <__DATA_REGION_LENGTH__+0x4b0>
     cae:	67 ce       	rjmp	.-818    	; 0x97e <__DATA_REGION_LENGTH__+0x17e>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:365
bool UPDI::loop_until_key_stat_is_clear (uint8_t bitmap, uint16_t limit) {
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  uint16_t _back = _send_ptr;
  #endif
  do {
    if (!is_key_stat(bitmap)) return true;
     cb0:	70 e0       	ldi	r23, 0x00	; 0
     cb2:	60 e0       	ldi	r22, 0x00	; 0
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.8/cores/megaAVR/api/delay_busywait.h:31
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	39 dc       	rcall	.-1934   	; 0x52a <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
     cb8:	10 e0       	ldi	r17, 0x00	; 0
     cba:	00 e0       	ldi	r16, 0x00	; 0
is_cs_stat():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:370
    #ifdef ENABLE_DEBUG_UPDI_SENDER
    _send_ptr = _back;
    #endif
    TIM::delay_50us();
  } while (--limit);
     cbc:	87 e0       	ldi	r24, 0x07	; 7
     cbe:	9e da       	rcall	.-2756   	; 0x1fc <UPDI::get_cs_stat(unsigned char)>
loop_until_key_stat_is_clear():
     cc0:	83 ff       	sbrs	r24, 3
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:542

  /* Make sure the CHER bit is cleared before next reset */
  loop_until_key_stat_is_clear(UPDI_KEY_CHIPERASE);

  /* Chip erasure was successful */
  bit_set(UPDI_CONTROL, UPDI_ERFM_bp);
     cc2:	07 c0       	rjmp	.+14     	; 0xcd2 <__DATA_REGION_LENGTH__+0x4d2>
delay_micros():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:546

  /* Once the HV control and device is successfully unlocked, */
  /* you should be able to enter program mode. */
  if (!set_nvmprog_key()) return false;
     cc4:	f6 ea       	ldi	r31, 0xA6	; 166
     cc6:	fa 95       	dec	r31
     cc8:	f1 f7       	brne	.-4      	; 0xcc6 <__DATA_REGION_LENGTH__+0x4c6>
     cca:	00 c0       	rjmp	.+0      	; 0xccc <__DATA_REGION_LENGTH__+0x4cc>
loop_until_key_stat_is_clear():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:547
  if (!updi_reset(true) || !updi_reset(false)) return false;
     ccc:	01 50       	subi	r16, 0x01	; 1
     cce:	11 09       	sbc	r17, r1
     cd0:	a9 f7       	brne	.-22     	; 0xcbc <__DATA_REGION_LENGTH__+0x4bc>
chip_erase():
     cd2:	e2 9a       	sbi	0x1c, 2	; 28
     cd4:	08 dc       	rcall	.-2032   	; 0x4e6 <UPDI::set_nvmprog_key()>
     cd6:	88 23       	and	r24, r24
     cd8:	09 f4       	brne	.+2      	; 0xcdc <__DATA_REGION_LENGTH__+0x4dc>
     cda:	51 ce       	rjmp	.-862    	; 0x97e <__DATA_REGION_LENGTH__+0x17e>
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	14 db       	rcall	.-2520   	; 0x308 <UPDI::updi_reset(bool)>
     ce0:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:548
  loop_until_sys_stat_is_clear(UPDI_SYS_LOCKSTATUS);
     ce2:	09 f4       	brne	.+2      	; 0xce6 <__DATA_REGION_LENGTH__+0x4e6>
     ce4:	4c ce       	rjmp	.-872    	; 0x97e <__DATA_REGION_LENGTH__+0x17e>
     ce6:	80 e0       	ldi	r24, 0x00	; 0
     ce8:	0f db       	rcall	.-2530   	; 0x308 <UPDI::updi_reset(bool)>
     cea:	18 2f       	mov	r17, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:549
  loop_until_sys_stat_is_set(UPDI_SYS_NVMPROG);
     cec:	88 23       	and	r24, r24
     cee:	09 f4       	brne	.+2      	; 0xcf2 <__DATA_REGION_LENGTH__+0x4f2>
     cf0:	46 ce       	rjmp	.-884    	; 0x97e <__DATA_REGION_LENGTH__+0x17e>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:552

  /* After performing HV control, it is necessary to obtain SIB */
  bit_clear(UPDI_CONTROL, UPDI_INFO_bp);
     cf2:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:553
  bit_set(UPDI_CONTROL, UPDI_PROG_bp);
     cf4:	60 e0       	ldi	r22, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:563
 * UPDI control start *
 **********************/

bool UPDI::enter_updi (bool skip) {
  /* Release the physical reset */
  openDrainWrite(TRST_PIN, HIGH);
     cf6:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:581
      loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
    }
    else
      BREAK();
  }
  if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) {
     cf8:	18 dc       	rcall	.-2000   	; 0x52a <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
     cfa:	88 e0       	ldi	r24, 0x08	; 8
     cfc:	fe db       	rcall	.-2052   	; 0x4fa <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.23]>
     cfe:	e0 98       	cbi	0x1c, 0	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:526

// __attribute__((optimize("O0")))
bool UPDI::chip_erase (void) {
  /* If UPDI is prohibited, try HV control */
  if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) {
    HV_Pulse();
     d00:	e1 9a       	sbi	0x1c, 1	; 28
enter_updi():
     d02:	21 98       	cbi	0x04, 1	; 4
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:712
          _result = chip_erase();
        }
        break;
      }
      case UPDI_CMD_GO : {
        _result = Target_Reset(true) && Target_Reset(false);
     d04:	e0 99       	sbic	0x1c, 0	; 28
     d06:	70 ce       	rjmp	.-800    	; 0x9e8 <__DATA_REGION_LENGTH__+0x1e8>
     d08:	27 dc       	rcall	.-1970   	; 0x558 <UPDI::enter_updi(bool) [clone .part.12]>
     d0a:	58 cf       	rjmp	.-336    	; 0xbbc <__DATA_REGION_LENGTH__+0x3bc>
chip_erase():
     d0c:	83 dc       	rcall	.-1786   	; 0x614 <UPDI::HV_Pulse()>
     d0e:	ba cf       	rjmp	.-140    	; 0xc84 <__DATA_REGION_LENGTH__+0x484>
_ZN4UPDI7runtimeEh():
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	ff da       	rcall	.-2562   	; 0x312 <UPDI::Target_Reset(bool)>
     d14:	88 23       	and	r24, r24
     d16:	09 f4       	brne	.+2      	; 0xd1a <__DATA_REGION_LENGTH__+0x51a>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:311
      }

      /* Page boundaries require special handling */
      const bool is_bound = bit_is_clear(UPDI_CONTROL, UPDI::UPDI_ERFM_bp)
        && before_address != start_addr
        && ((JTAG2::updi_desc.flash_page_size - 1) & (uint16_t)start_addr) == 0;
     d18:	b1 cd       	rjmp	.-1182   	; 0x87c <__DATA_REGION_LENGTH__+0x7c>
     d1a:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:310
        return true;
      }

      /* Page boundaries require special handling */
      const bool is_bound = bit_is_clear(UPDI_CONTROL, UPDI::UPDI_ERFM_bp)
        && before_address != start_addr
     d1c:	fa da       	rcall	.-2572   	; 0x312 <UPDI::Target_Reset(bool)>
     d1e:	ae cd       	rjmp	.-1188   	; 0x87c <__DATA_REGION_LENGTH__+0x7c>
write_memory():
     d20:	e2 99       	sbic	0x1c, 2	; 28
     d22:	14 c0       	rjmp	.+40     	; 0xd4c <__DATA_REGION_LENGTH__+0x54c>
     d24:	40 91 5d 38 	lds	r20, 0x385D	; 0x80385d <NVM::before_address>
     d28:	50 91 5e 38 	lds	r21, 0x385E	; 0x80385e <NVM::before_address+0x1>
     d2c:	60 91 5f 38 	lds	r22, 0x385F	; 0x80385f <NVM::before_address+0x2>
     d30:	70 91 60 38 	lds	r23, 0x3860	; 0x803860 <NVM::before_address+0x3>
     d34:	c4 16       	cp	r12, r20
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:311
        && ((JTAG2::updi_desc.flash_page_size - 1) & (uint16_t)start_addr) == 0;
     d36:	d5 06       	cpc	r13, r21
     d38:	e6 06       	cpc	r14, r22
     d3a:	f7 06       	cpc	r15, r23
     d3c:	39 f0       	breq	.+14     	; 0xd4c <__DATA_REGION_LENGTH__+0x54c>
     d3e:	01 97       	sbiw	r24, 0x01	; 1
     d40:	9c 01       	movw	r18, r24
     d42:	2c 21       	and	r18, r12
     d44:	3d 21       	and	r19, r13
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:312
      before_address = start_addr;
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	23 2b       	or	r18, r19
     d4a:	09 f0       	breq	.+2      	; 0xd4e <__DATA_REGION_LENGTH__+0x54e>
_ZN4UPDI7runtimeEh():
     d4c:	80 e0       	ldi	r24, 0x00	; 0
write_memory():
     d4e:	c0 92 5d 38 	sts	0x385D, r12	; 0x80385d <NVM::before_address>
     d52:	d0 92 5e 38 	sts	0x385E, r13	; 0x80385e <NVM::before_address+0x1>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:171

  bool write_flash_v3 (uint32_t start_addr, uint8_t *data, size_t byte_count, bool is_bound) {
    /* NVMCTRL version 3 or 5 */
    /* If the chip is not erased, erase the page. */
    /* However, only when the beginning of the page boundary is addressed */
    if (is_bound) {
     d56:	e0 92 5f 38 	sts	0x385F, r14	; 0x80385f <NVM::before_address+0x2>
     d5a:	f0 92 60 38 	sts	0x3860, r15	; 0x803860 <NVM::before_address+0x3>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:172
      nvm_wait_v3();
     d5e:	ed 9b       	sbis	0x1d, 5	; 29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:173
      if (!UPDI::st8(start_addr, 0xFF)) return false;
     d60:	7e ce       	rjmp	.-772    	; 0xa5e <__DATA_REGION_LENGTH__+0x25e>
write_flash_v3():
     d62:	88 23       	and	r24, r24
     d64:	09 f4       	brne	.+2      	; 0xd68 <__DATA_REGION_LENGTH__+0x568>
     d66:	73 ce       	rjmp	.-794    	; 0xa4e <__DATA_REGION_LENGTH__+0x24e>
     d68:	94 dc       	rcall	.-1752   	; 0x692 <NVM::nvm_wait_v3()>
     d6a:	4f ef       	ldi	r20, 0xFF	; 255
     d6c:	c7 01       	movw	r24, r14
     d6e:	b6 01       	movw	r22, r12
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:88
    return nvm_ctrl_change(nvmcmd);
  }

  /* NVMCTRL version 3,5 */
  bool nvm_ctrl_v3 (uint8_t nvmcmd) {
    nvm_wait_v3();
     d70:	4d da       	rcall	.-2918   	; 0x20c <UPDI::st8(unsigned long, unsigned char)>
     d72:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:89
    return nvm_ctrl_change(nvmcmd);
     d74:	09 f4       	brne	.+2      	; 0xd78 <__DATA_REGION_LENGTH__+0x578>
     d76:	03 ce       	rjmp	.-1018   	; 0x97e <__DATA_REGION_LENGTH__+0x17e>
nvm_ctrl_v3():
     d78:	8c dc       	rcall	.-1768   	; 0x692 <NVM::nvm_wait_v3()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:176
    if (is_bound) {
      nvm_wait_v3();
      if (!UPDI::st8(start_addr, 0xFF)) return false;
      if (!nvm_ctrl_v3(NVM_V3_CMD_FLPER)) return false;
    }
    else if (!nvm_ctrl_v3(NVM_V3_CMD_FLPBCLR)) return false;
     d7a:	88 e0       	ldi	r24, 0x08	; 8
     d7c:	0d db       	rcall	.-2534   	; 0x398 <NVM::nvm_ctrl_change(unsigned char)>
write_flash_v3():
     d7e:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:177
    nvm_wait_v3();
     d80:	09 f4       	brne	.+2      	; 0xd84 <__DATA_REGION_LENGTH__+0x584>
     d82:	fd cd       	rjmp	.-1030   	; 0x97e <__DATA_REGION_LENGTH__+0x17e>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:179

    if (byte_count == 1) UPDI::st8(start_addr, *data);
     d84:	86 dc       	rcall	.-1780   	; 0x692 <NVM::nvm_wait_v3()>
     d86:	01 30       	cpi	r16, 0x01	; 1
     d88:	11 05       	cpc	r17, r1
     d8a:	09 f0       	breq	.+2      	; 0xd8e <__DATA_REGION_LENGTH__+0x58e>
     d8c:	63 ce       	rjmp	.-826    	; 0xa54 <__DATA_REGION_LENGTH__+0x254>
     d8e:	40 91 9e 38 	lds	r20, 0x389E	; 0x80389e <JTAG2::packet+0x12>
     d92:	c7 01       	movw	r24, r14
     d94:	b6 01       	movw	r22, r12
     d96:	3a da       	rcall	.-2956   	; 0x20c <UPDI::st8(unsigned long, unsigned char)>
nvm_ctrl_v3():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:88
    return nvm_ctrl_change(nvmcmd);
  }

  /* NVMCTRL version 3,5 */
  bool nvm_ctrl_v3 (uint8_t nvmcmd) {
    nvm_wait_v3();
     d98:	7c dc       	rcall	.-1800   	; 0x692 <NVM::nvm_wait_v3()>
     d9a:	84 e0       	ldi	r24, 0x04	; 4
nvm_ctrl_v2():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:89
    return nvm_ctrl_change(nvmcmd);
     d9c:	fd da       	rcall	.-2566   	; 0x398 <NVM::nvm_ctrl_change(unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:83
  }

  /* NVMCTRL version 2,4 */
  bool nvm_ctrl_v2 (uint8_t nvmcmd) {
    nvm_wait();
    return nvm_ctrl_change(nvmcmd);
     d9e:	0e cf       	rjmp	.-484    	; 0xbbc <__DATA_REGION_LENGTH__+0x3bc>

00000da0 <__vector_13>:
__vector_13():
     da0:	11 24       	eor	r1, r1
     da2:	10 92 80 0a 	sts	0x0A80, r1	; 0x800a80 <__RODATA_PM_OFFSET__+0x7f8a80>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:262
  /***
    This interrupt is a global escape due to timeout.
    There is no return to the source of the interrupt.
  ***/
  __asm__ __volatile__ ("EOR R1,R1");
  TCB0_CTRLA = 0;
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__RODATA_PM_OFFSET__+0x7f8a86>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:263
  TCB0_INTFLAGS = TCB_CAPT_bm;
     dac:	62 e0       	ldi	r22, 0x02	; 2
     dae:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:264
  longjmp(TIM::CONTEXT, 2);
     db0:	86 e4       	ldi	r24, 0x46	; 70
     db2:	98 e3       	ldi	r25, 0x38	; 56
     db4:	e6 d3       	rcall	.+1996   	; 0x1582 <longjmp>

00000db6 <__vector_6>:
__vector_6():
     db6:	1f 92       	push	r1
     db8:	0f 92       	push	r0
     dba:	0f b6       	in	r0, 0x3f	; 63
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:232

/*
 * RTS monitoring upper and lower end interrupts
 */

ISR(portIntrruptVector(RTS_SENSE_PIN)) {
     dbc:	0f 92       	push	r0
     dbe:	11 24       	eor	r1, r1
     dc0:	2f 93       	push	r18
     dc2:	3f 93       	push	r19
     dc4:	4f 93       	push	r20
     dc6:	5f 93       	push	r21
     dc8:	6f 93       	push	r22
     dca:	7f 93       	push	r23
     dcc:	8f 93       	push	r24
     dce:	9f 93       	push	r25
     dd0:	af 93       	push	r26
     dd2:	bf 93       	push	r27
     dd4:	ef 93       	push	r30
     dd6:	ff 93       	push	r31
     dd8:	a8 95       	wdr
WDT_Short():
     dda:	86 e0       	ldi	r24, 0x06	; 6
     ddc:	ce da       	rcall	.-2660   	; 0x37a <SYS::WDT_SET(unsigned char)>
RTS_Disable():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:241
    the timeout limit, the system will be reset. Typically this is the
    signal that starts the Arduino bootloader. Therefore, the time limit
    is set to approximately 250ms.
  ***/

  wdt_reset();
     dde:	88 e0       	ldi	r24, 0x08	; 8
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:168

void SYS::WDT_OFF (void) { WDT_SET(WDT_PERIOD_OFF_gc); }

void SYS::WDT_ON (void) { WDT_SET(WDT_PERIOD_8KCLK_gc); }

void SYS::WDT_Short (void) { WDT_SET(WDT_PERIOD_256CLK_gc); }
     de0:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <__RODATA_PM_OFFSET__+0x7f8412>
__vector_6():
     de4:	e0 e0       	ldi	r30, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:108
void SYS::RTS_Enable (void) {
  pinControlRegister(RTS_SENSE_PIN) = RTS_SENSE_CONFIG;
}

void SYS::RTS_Disable (void) {
  pinControlRegister(RTS_SENSE_PIN) = RTS_SENSE_DISABLE;
     de6:	f4 e0       	ldi	r31, 0x04	; 4
     de8:	81 85       	ldd	r24, Z+9	; 0x09
     dea:	81 87       	std	Z+9, r24	; 0x09
PG_Enable():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:245
  SYS::WDT_Short();
  SYS::RTS_Disable();
  portRegister(RTS_SENSE_PIN).INTFLAGS =
  portRegister(RTS_SENSE_PIN).INTFLAGS;
     dec:	48 9a       	sbi	0x09, 0	; 9
__vector_6():
     dee:	a3 da       	rcall	.-2746   	; 0x336 <TIM::LED_Flash()>
     df0:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:244
  ***/

  wdt_reset();
  SYS::WDT_Short();
  SYS::RTS_Disable();
  portRegister(RTS_SENSE_PIN).INTFLAGS =
     df2:	8f da       	rcall	.-2786   	; 0x312 <UPDI::Target_Reset(bool)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:96
/******************
 * Various ON/OFF *
 ******************/

void SYS::PG_Enable (void) {
  digitalWrite(PGEN_PIN, HIGH);
     df4:	21 9a       	sbi	0x04, 1	; 4
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:247
  portRegister(RTS_SENSE_PIN).INTFLAGS;
  SYS::PG_Enable();
  TIM::LED_Flash();
     df6:	ff 91       	pop	r31
     df8:	ef 91       	pop	r30
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:248
  UPDI::Target_Reset(true);
     dfa:	bf 91       	pop	r27
     dfc:	af 91       	pop	r26
     dfe:	9f 91       	pop	r25
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:249
  openDrainWrite(TRST_PIN, LOW);
     e00:	8f 91       	pop	r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:250
}
     e02:	7f 91       	pop	r23
     e04:	6f 91       	pop	r22
     e06:	5f 91       	pop	r21
     e08:	4f 91       	pop	r20
     e0a:	3f 91       	pop	r19
     e0c:	2f 91       	pop	r18
     e0e:	0f 90       	pop	r0
     e10:	0f be       	out	0x3f, r0	; 63
     e12:	0f 90       	pop	r0
     e14:	1f 90       	pop	r1
     e16:	18 95       	reti

00000e18 <__vector_7>:
__vector_7():
     e18:	a8 95       	wdr
WDT_Short():
     e1a:	86 e0       	ldi	r24, 0x06	; 6
     e1c:	ae da       	rcall	.-2724   	; 0x37a <SYS::WDT_SET(unsigned char)>
__vector_7():
     e1e:	8b da       	rcall	.-2794   	; 0x336 <TIM::LED_Flash()>
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	77 da       	rcall	.-2834   	; 0x312 <UPDI::Target_Reset(bool)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:213
    This interrupt keeps the target device in reset as long as
    the low level signal continues. Since the interrupt exits
    with a system reset, it does not return to main operation.
  ***/

  wdt_reset();
     e24:	88 e0       	ldi	r24, 0x08	; 8
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:168

void SYS::WDT_OFF (void) { WDT_SET(WDT_PERIOD_OFF_gc); }

void SYS::WDT_ON (void) { WDT_SET(WDT_PERIOD_8KCLK_gc); }

void SYS::WDT_Short (void) { WDT_SET(WDT_PERIOD_256CLK_gc); }
     e26:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__RODATA_PM_OFFSET__+0x7f8806>
delay_micros():
     e2a:	8f ec       	ldi	r24, 0xCF	; 207
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:215
  SYS::WDT_Short();
  TIM::LED_Flash();
     e2c:	97 e0       	ldi	r25, 0x07	; 7
     e2e:	01 97       	sbiw	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:216
  UPDI::Target_Reset(true);
     e30:	f1 f7       	brne	.-4      	; 0xe2e <__vector_7+0x16>
     e32:	00 c0       	rjmp	.+0      	; 0xe34 <__vector_7+0x1c>
     e34:	00 00       	nop
__vector_7():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:217
  UPDI_USART.CTRLB = UPDI_USART_OFF;
     e36:	01 9a       	sbi	0x00, 1	; 0
     e38:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <__RODATA_PM_OFFSET__+0x7f8411>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.8/cores/megaAVR/api/delay_busywait.h:31
     e3c:	09 98       	cbi	0x01, 1	; 1
     e3e:	21 9a       	sbi	0x04, 1	; 4
LED_TCB1():
     e40:	80 91 61 38 	lds	r24, 0x3861	; 0x803861 <TIM::mode>
     e44:	83 30       	cpi	r24, 0x03	; 3
     e46:	99 f0       	breq	.+38     	; 0xe6e <__vector_7+0x56>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:219
  delay_micros(800);
  pinMode(UPDI_TDAT_PIN, OUTPUT);
     e48:	83 e0       	ldi	r24, 0x03	; 3
     e4a:	80 93 61 38 	sts	0x3861, r24	; 0x803861 <TIM::mode>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:220
  digitalWrite(UPDI_TDAT_PIN, LOW);
     e4e:	89 ea       	ldi	r24, 0xA9	; 169
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:221
  openDrainWrite(TRST_PIN, LOW);
     e50:	95 e5       	ldi	r25, 0x55	; 85
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:139
    LEDG_EVOUT = EVSYS_USER_CHANNEL2_gc;
  }
}

void LED_TCB1 (uint8_t mode, uint16_t ccmp) {
  if (TIM::mode != mode) {
     e52:	80 93 9c 0a 	sts	0x0A9C, r24	; 0x800a9c <__RODATA_PM_OFFSET__+0x7f8a9c>
     e56:	90 93 9d 0a 	sts	0x0A9D, r25	; 0x800a9d <__RODATA_PM_OFFSET__+0x7f8a9d>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:140
    TIM::mode = mode;
     e5a:	10 92 9a 0a 	sts	0x0A9A, r1	; 0x800a9a <__RODATA_PM_OFFSET__+0x7f8a9a>
     e5e:	10 92 9b 0a 	sts	0x0A9B, r1	; 0x800a9b <__RODATA_PM_OFFSET__+0x7f8a9b>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:141
    TCB1_CCMP = ccmp;
     e62:	8f e4       	ldi	r24, 0x4F	; 79
     e64:	80 93 90 0a 	sts	0x0A90, r24	; 0x800a90 <__RODATA_PM_OFFSET__+0x7f8a90>
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <__RODATA_PM_OFFSET__+0x7f81a9>
WDT_OFF():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:142
    TCB1_CNT = 0;
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	84 da       	rcall	.-2808   	; 0x37a <SYS::WDT_SET(unsigned char)>
__vector_7():
     e72:	30 9b       	sbis	0x06, 0	; 6
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:143
    TCB1_CTRLA = TCB_RUNSTDBY_bm | TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
     e74:	fe cf       	rjmp	.-4      	; 0xe72 <__vector_7+0x5a>
WDT_REBOOT():
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	80 da       	rcall	.-2816   	; 0x37a <SYS::WDT_SET(unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:144
    LEDG_EVOUT = EVSYS_USER_CHANNEL0_gc;
     e7a:	ff cf       	rjmp	.-2      	; 0xe7a <__vector_7+0x62>

00000e7c <main>:
main():
     e7c:	cf 93       	push	r28
     e7e:	df 93       	push	r29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:164
void SYS::WDT_SET (uint8_t _wdt_period) {
  loop_until_bit_is_clear(WDT_STATUS, WDT_SYNCBUSY_bp);
  _PROTECTED_WRITE(WDT_CTRLA, _wdt_period);
}

void SYS::WDT_OFF (void) { WDT_SET(WDT_PERIOD_OFF_gc); }
     e80:	00 d0       	rcall	.+0      	; 0xe82 <main+0x6>
     e82:	cd b7       	in	r28, 0x3d	; 61
     e84:	de b7       	in	r29, 0x3e	; 62
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:224
  pinMode(UPDI_TDAT_PIN, OUTPUT);
  digitalWrite(UPDI_TDAT_PIN, LOW);
  openDrainWrite(TRST_PIN, LOW);
  TIM::LED_Blink();
  SYS::WDT_OFF();
  while (!digitalRead(SW_SENSE_PIN));
     e86:	f8 94       	cli
initVariant():
     e88:	24 e0       	ldi	r18, 0x04	; 4
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:173
void SYS::WDT_Short (void) { WDT_SET(WDT_PERIOD_256CLK_gc); }

void SYS::WDT_Long (void) { WDT_SET(WDT_PERIOD_512CLK_gc); }

void SYS::WDT_REBOOT (void) {
  WDT_SET(WDT_PERIOD_8CLK_gc);
     e8a:	e0 e1       	ldi	r30, 0x10	; 16
     e8c:	f4 e0       	ldi	r31, 0x04	; 4
     e8e:	83 e0       	ldi	r24, 0x03	; 3
     e90:	98 e0       	ldi	r25, 0x08	; 8
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.8/variants/tinyAVR2_20/variant.h:281
    "   DEC  R24     \n"
    "   BRNE 2b        " /* 3 loop PORTA to PORTC */
    : : "z" ((register8_t*)&PORTA_PIN0CTRL),
        "r" ((uint8_t)PORT_ISC_INPUT_DISABLE_gc)
      : "r24", "r25"
  );
     e92:	21 93       	st	Z+, r18
     e94:	9a 95       	dec	r25
     e96:	e9 f7       	brne	.-6      	; 0xe92 <main+0x16>
     e98:	78 96       	adiw	r30, 0x18	; 24
     e9a:	8a 95       	dec	r24
     e9c:	c9 f7       	brne	.-14     	; 0xe90 <main+0x14>
_CLKCTRL_SETUP():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.8/cores/megaAVR/api/CLKCTRL_megaAVR.h:127
  // _PROTECTED_WRITE(CLKCTRL.MCLKCTRLA, CLKCTRL_CLKSEL_OSC20M_gc);

#else

  #if defined(_CLKCTRL_PDIV_)
  _PROTECTED_WRITE(CLKCTRL_MCLKCTRLB, _CLKCTRL_PDIV_ | CLKCTRL_PEN_bm);
     e9e:	88 ed       	ldi	r24, 0xD8	; 216
     ea0:	41 e0       	ldi	r20, 0x01	; 1
     ea2:	50 e0       	ldi	r21, 0x00	; 0
     ea4:	84 bf       	out	0x34, r24	; 52
     ea6:	40 93 61 00 	sts	0x0061, r20	; 0x800061 <__RODATA_PM_OFFSET__+0x7f8061>
setup():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:17
#include <avr/io.h>

void SYS::setup (void) {

  /* Target reset release */
  pinControlRegister(TRST_PIN) = TRST_PIN_CONFIG;
     eaa:	8c e0       	ldi	r24, 0x0C	; 12
     eac:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <__RODATA_PM_OFFSET__+0x7f8431>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:20

  /* Outgoing port */
  PORTA_DIRSET = _BV(pinPosition(HVP1_PIN))
     eb0:	88 ef       	ldi	r24, 0xF8	; 248
     eb2:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <__RODATA_PM_OFFSET__+0x7f8401>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:25
               | _BV(pinPosition(HVP2_PIN))
               | _BV(pinPosition(HV12_PIN))
               | _BV(pinPosition(LEDG_PIN))
               | _BV(pinPosition(LEDY_PIN));
  PORTB_DIRSET = _BV(pinPosition(HV8_PIN));
     eb6:	80 e2       	ldi	r24, 0x20	; 32
     eb8:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__RODATA_PM_OFFSET__+0x7f8421>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:28

  /* USART switching LOW=Target opening (PG_Disable) */
  PORTC_DIRSET = _BV(pinPosition(PGEN_PIN));
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <__RODATA_PM_OFFSET__+0x7f8441>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:31

  /* LED output */
  LEDG_EVOUT_MUX = LEDG_EVOUT_ALT;          /* OUT:PA7 */
     ec2:	80 93 e0 05 	sts	0x05E0, r24	; 0x8005e0 <__RODATA_PM_OFFSET__+0x7f85e0>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:32
  PORTMUX_CCLROUTEA = PORTMUX_LUT3_ALT1_gc; /* OUT:PA5 IN:PC0,PC1,PC2 */
     ec6:	98 e0       	ldi	r25, 0x08	; 8
     ec8:	90 93 e1 05 	sts	0x05E1, r25	; 0x8005e1 <__RODATA_PM_OFFSET__+0x7f85e1>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:33
  PORTA_OUTSET = _BV(pinPosition(LEDG_PIN))
     ecc:	30 ea       	ldi	r19, 0xA0	; 160
     ece:	30 93 05 04 	sts	0x0405, r19	; 0x800405 <__RODATA_PM_OFFSET__+0x7f8405>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:37
               | _BV(pinPosition(LEDY_PIN));

  /* USART Alternative Selection */
  PORTMUX_USARTROUTEA = JTAG_PMUX_ALT | UPDI_PMUX_ALT;
     ed2:	45 e0       	ldi	r20, 0x05	; 5
     ed4:	40 93 e2 05 	sts	0x05E2, r20	; 0x8005e2 <__RODATA_PM_OFFSET__+0x7f85e2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:40

  /* JTAG port */
  pinControlRegister(JTAG_TXD_PIN) = JTAG_TXD_CONFIG;
     ed8:	90 93 52 04 	sts	0x0452, r25	; 0x800452 <__RODATA_PM_OFFSET__+0x7f8452>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:41
  pinControlRegister(JTAG_RXD_PIN) = JTAG_RXD_CONFIG;
     edc:	90 93 51 04 	sts	0x0451, r25	; 0x800451 <__RODATA_PM_OFFSET__+0x7f8451>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:44

  /* UPDI port */
  pinControlRegister(UPDI_TDAT_PIN) = UPDI_TDAT_CONFIG;
     ee0:	90 93 11 04 	sts	0x0411, r25	; 0x800411 <__RODATA_PM_OFFSET__+0x7f8411>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:47

  /* HV generator */
  pinControlRegister(HVP1_PIN) = HVP1_PIN_CONFIG;
     ee4:	20 93 13 04 	sts	0x0413, r18	; 0x800413 <__RODATA_PM_OFFSET__+0x7f8413>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:48
  pinControlRegister(HVP2_PIN) = HVP2_PIN_CONFIG;
     ee8:	34 e8       	ldi	r19, 0x84	; 132
     eea:	30 93 14 04 	sts	0x0414, r19	; 0x800414 <__RODATA_PM_OFFSET__+0x7f8414>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:51

  /* SW1 Interrupt permission */
  pinControlRegister(SW_SENSE_PIN) = SW_SENSE_CONFIG;
     eee:	3d e0       	ldi	r19, 0x0D	; 13
     ef0:	30 93 30 04 	sts	0x0430, r19	; 0x800430 <__RODATA_PM_OFFSET__+0x7f8430>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:54

  /* RTS monitor */
  pinControlRegister(RTS_SENSE_PIN) = RTS_SENSE_CONFIG;
     ef4:	39 e0       	ldi	r19, 0x09	; 9
     ef6:	30 93 12 04 	sts	0x0412, r19	; 0x800412 <__RODATA_PM_OFFSET__+0x7f8412>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:57

  /* JP1 monitor */
  pinControlRegister(JP_SENSE_PIN) = JP_SENSE_CONFIG;
     efa:	90 93 53 04 	sts	0x0453, r25	; 0x800453 <__RODATA_PM_OFFSET__+0x7f8453>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:60

  /* Initialize state variables */
  UPDI_CONTROL = 0;
     efe:	1c ba       	out	0x1c, r1	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:61
  UPDI_NVMCTRL = 0;
     f00:	1d ba       	out	0x1d, r1	; 29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:46

void TIM::setup (void) {

  /* EVSYS signal distribution */

  EVSYS_CHANNEL0 = EVSYS_CHANNEL0_CCL_LUT0_gc;
     f02:	90 e1       	ldi	r25, 0x10	; 16
     f04:	90 93 90 01 	sts	0x0190, r25	; 0x800190 <__RODATA_PM_OFFSET__+0x7f8190>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:47
  EVSYS_CHANNEL1 = EVSYS_CHANNEL1_RTC_PIT_DIV128_gc;
     f08:	3a e0       	ldi	r19, 0x0A	; 10
     f0a:	30 93 91 01 	sts	0x0191, r19	; 0x800191 <__RODATA_PM_OFFSET__+0x7f8191>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:48
  EVSYS_CHANNEL2 = EVSYS_CHANNEL2_CCL_LUT1_gc;
     f0e:	91 e1       	ldi	r25, 0x11	; 17
     f10:	90 93 92 01 	sts	0x0192, r25	; 0x800192 <__RODATA_PM_OFFSET__+0x7f8192>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:49
  EVSYS_CHANNEL3 = EVSYS_CHANNEL3_PORTA_PIN5_gc;  /* <- PA5:LEDY */
     f14:	9d e4       	ldi	r25, 0x4D	; 77
     f16:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <__RODATA_PM_OFFSET__+0x7f8193>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:50
  EVSYS_USERTCB0COUNT = EVSYS_USER_CHANNEL1_gc;
     f1a:	92 e0       	ldi	r25, 0x02	; 2
     f1c:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <__RODATA_PM_OFFSET__+0x7f81b1>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:51
  EVSYS_USERTCB1COUNT = EVSYS_USER_CHANNEL1_gc;
     f20:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <__RODATA_PM_OFFSET__+0x7f81b3>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:52
  EVSYS_USERCCLLUT0A  = EVSYS_USER_CHANNEL3_gc;   /* <- PA5:LEDY */
     f24:	20 93 a0 01 	sts	0x01A0, r18	; 0x8001a0 <__RODATA_PM_OFFSET__+0x7f81a0>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:53
  EVSYS_USERCCLLUT1A  = EVSYS_USER_CHANNEL3_gc;   /* <- PA5:LEDY */
     f28:	20 93 a2 01 	sts	0x01A2, r18	; 0x8001a2 <__RODATA_PM_OFFSET__+0x7f81a2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:60
  /* When PA5:LEDY of CCL3 is used, the signal output of CCL0 and CCL1 is stopped. */

  /* CCL/LUT construction */

  /* TRUTH0: 010 is ON */
  CCL_TRUTH0    = CCL_TRUTH_2_bm;
     f2c:	20 93 cb 01 	sts	0x01CB, r18	; 0x8001cb <__RODATA_PM_OFFSET__+0x7f81cb>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:61
  CCL_LUT0CTRLC = CCL_INSEL2_EVENTA_gc;           /* <- IN2:PA5 */
     f30:	93 e0       	ldi	r25, 0x03	; 3
     f32:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <__RODATA_PM_OFFSET__+0x7f81ca>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:62
  CCL_LUT0CTRLB = CCL_INSEL1_TCB1_gc;             /* <- IN1:POS */
     f36:	20 ec       	ldi	r18, 0xC0	; 192
     f38:	20 93 c9 01 	sts	0x01C9, r18	; 0x8001c9 <__RODATA_PM_OFFSET__+0x7f81c9>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:63
  CCL_LUT0CTRLA = CCL_ENABLE_bm;
     f3c:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <__RODATA_PM_OFFSET__+0x7f81c8>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:66

  /* TRUTH1: 001 010 is ON */
  CCL_TRUTH1    = CCL_TRUTH_1_bm | CCL_TRUTH_2_bm;
     f40:	26 e0       	ldi	r18, 0x06	; 6
     f42:	20 93 cf 01 	sts	0x01CF, r18	; 0x8001cf <__RODATA_PM_OFFSET__+0x7f81cf>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:67
  CCL_LUT1CTRLC = CCL_INSEL2_EVENTA_gc;           /* <- IN2:PA5 */
     f46:	90 93 ce 01 	sts	0x01CE, r25	; 0x8001ce <__RODATA_PM_OFFSET__+0x7f81ce>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:68
  CCL_LUT1CTRLB = CCL_INSEL0_TCA0_gc | CCL_INSEL1_TCB1_gc;  /* <- IN0:POS IN1:POS */
     f4a:	2a ec       	ldi	r18, 0xCA	; 202
     f4c:	20 93 cd 01 	sts	0x01CD, r18	; 0x8001cd <__RODATA_PM_OFFSET__+0x7f81cd>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:69
  CCL_LUT1CTRLA = CCL_ENABLE_bm;
     f50:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <__RODATA_PM_OFFSET__+0x7f81cc>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:75

  /* TRUTH3: 001 010 is ON */
  /* CCL_INSEL0_USART0_gc : USART0TX normal HIGH */
  /* CCL_INSEL1_IO_gc     : USART1RX normal HIGH */
  /* CCL_INSEL2_IO_gc     : USART1TX normal HIGH */
  CCL_TRUTH3    = (uint8_t) ~CCL_TRUTH_7_bm;
     f54:	2f e7       	ldi	r18, 0x7F	; 127
     f56:	20 93 d7 01 	sts	0x01D7, r18	; 0x8001d7 <__RODATA_PM_OFFSET__+0x7f81d7>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:76
  CCL_LUT3CTRLC = CCL_INSEL2_IO_gc;
     f5a:	40 93 d6 01 	sts	0x01D6, r20	; 0x8001d6 <__RODATA_PM_OFFSET__+0x7f81d6>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:77
  CCL_LUT3CTRLB = CCL_INSEL0_USART0_gc | CCL_INSEL1_IO_gc;
     f5e:	28 e5       	ldi	r18, 0x58	; 88
     f60:	20 93 d5 01 	sts	0x01D5, r18	; 0x8001d5 <__RODATA_PM_OFFSET__+0x7f81d5>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:78
  CCL_LUT3CTRLA = CCL_ENABLE_bm | CCL_OUTEN_bm;
     f64:	21 e4       	ldi	r18, 0x41	; 65
     f66:	20 93 d4 01 	sts	0x01D4, r18	; 0x8001d4 <__RODATA_PM_OFFSET__+0x7f81d4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:81

  /* CCL enable */
  CCL_CTRLA = CCL_RUNSTDBY_bm | CCL_ENABLE_bm;
     f6a:	20 93 c0 01 	sts	0x01C0, r18	; 0x8001c0 <__RODATA_PM_OFFSET__+0x7f81c0>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:84

  /* RTC_PIT enable */
  RTC_PITCTRLA = RTC_PITEN_bm;
     f6e:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__RODATA_PM_OFFSET__+0x7f8150>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:89

  /* Timer */

  /* TCA0 */
  TCA0_SPLIT_CTRLD = TCA_SPLIT_SPLITM_bm;
     f72:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <__RODATA_PM_OFFSET__+0x7f8a03>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:90
  TCA0_SPLIT_LPER  = TCA0_STEP - 2;
     f76:	29 e8       	ldi	r18, 0x89	; 137
     f78:	20 93 26 0a 	sts	0x0A26, r18	; 0x800a26 <__RODATA_PM_OFFSET__+0x7f8a26>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:91
  TCA0_SPLIT_LCMP0 = TCA0_STEP / 2;
     f7c:	25 e4       	ldi	r18, 0x45	; 69
     f7e:	20 93 28 0a 	sts	0x0A28, r18	; 0x800a28 <__RODATA_PM_OFFSET__+0x7f8a28>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:92
  TCA0_SPLIT_HPER  = 1;
     f82:	80 93 27 0a 	sts	0x0A27, r24	; 0x800a27 <__RODATA_PM_OFFSET__+0x7f8a27>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:93
  TCA0_SPLIT_HCMP0 = 1;     /* WOA3=PA3 */
     f86:	80 93 29 0a 	sts	0x0A29, r24	; 0x800a29 <__RODATA_PM_OFFSET__+0x7f8a29>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:94
  TCA0_SPLIT_HCMP1 = 1;     /* WOA4=PA4 */
     f8a:	80 93 2b 0a 	sts	0x0A2B, r24	; 0x800a2b <__RODATA_PM_OFFSET__+0x7f8a2b>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:95
  TCA0_SPLIT_CTRLA = TCA_SPLIT_RUNSTDBY_bm | TCA_SPLIT_ENABLE_bm | TCA_SPLIT_CLKSEL_DIV1024_gc;
     f8e:	8f e8       	ldi	r24, 0x8F	; 143
     f90:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__RODATA_PM_OFFSET__+0x7f8a00>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:98

  /* TCB1 */
  TCB1_CTRLB = TCB_CNTMODE_PWM8_gc;
     f94:	87 e0       	ldi	r24, 0x07	; 7
     f96:	80 93 91 0a 	sts	0x0A91, r24	; 0x800a91 <__RODATA_PM_OFFSET__+0x7f8a91>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:460
/******************
 * Initialization *
 ******************/

void JTAG2::setup (void) {
  JTAG_USART.BAUD = pgm_read_word( &BAUD_TABLE[BAUD_19200] );
     f9a:	ed e9       	ldi	r30, 0x9D	; 157
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	45 91       	lpm	r20, Z+
     fa0:	54 91       	lpm	r21, Z
     fa2:	40 93 28 08 	sts	0x0828, r20	; 0x800828 <__RODATA_PM_OFFSET__+0x7f8828>
     fa6:	50 93 29 08 	sts	0x0829, r21	; 0x800829 <__RODATA_PM_OFFSET__+0x7f8829>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:461
  JTAG_USART.CTRLA = JTAG_USART_CTRLA;
     faa:	10 92 25 08 	sts	0x0825, r1	; 0x800825 <__RODATA_PM_OFFSET__+0x7f8825>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:462
  JTAG_USART.CTRLC = JTAG_USART_CTRLC;
     fae:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__RODATA_PM_OFFSET__+0x7f8827>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:463
  JTAG_USART.CTRLB = JTAG_USART_OFF;
     fb2:	88 e8       	ldi	r24, 0x88	; 136
     fb4:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__RODATA_PM_OFFSET__+0x7f8826>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:70
  }
  #endif
}

void UPDI::setup (void) {
  UPDI_USART.BAUD  = UPDI_BAUD_CALC;
     fb8:	80 eb       	ldi	r24, 0xB0	; 176
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__RODATA_PM_OFFSET__+0x7f8808>
     fc0:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__RODATA_PM_OFFSET__+0x7f8809>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:71
  UPDI_USART.CTRLA = UPDI_USART_CTRLA;
     fc4:	30 93 05 08 	sts	0x0805, r19	; 0x800805 <__RODATA_PM_OFFSET__+0x7f8805>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:72
  UPDI_USART.CTRLC = UPDI_USART_CTRLC;
     fc8:	8b e2       	ldi	r24, 0x2B	; 43
     fca:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <__RODATA_PM_OFFSET__+0x7f8807>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:73
  UPDI_USART.CTRLB = UPDI_USART_ON;
     fce:	88 ec       	ldi	r24, 0xC8	; 200
     fd0:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__RODATA_PM_OFFSET__+0x7f8806>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:74
  bit_clear(UPDI_CONTROL, UPDI_CLKU_bp);
     fd4:	e6 98       	cbi	0x1c, 6	; 28
ready():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:121
 * Run at the end of the boot sequence *
 ***************************************/

void SYS::ready (void) {
  /* Release target from reset state after resetting WDT timeout */
  if (bit_is_set(RSTCTRL_RSTFR, RSTCTRL_WDRF_bp))
     fd6:	80 91 40 00 	lds	r24, 0x0040	; 0x800040 <__RODATA_PM_OFFSET__+0x7f8040>
     fda:	83 ff       	sbrs	r24, 3
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <main+0x166>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:122
    UPDI::Target_Reset(false);
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	98 d9       	rcall	.-3280   	; 0x312 <UPDI::Target_Reset(bool)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:125

  /* Clears the reset state flag. */
  RSTCTRL_RSTFR = RSTCTRL_RSTFR;
     fe2:	80 91 40 00 	lds	r24, 0x0040	; 0x800040 <__RODATA_PM_OFFSET__+0x7f8040>
     fe6:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__RODATA_PM_OFFSET__+0x7f8040>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:128

  /*** Hibernation mode ***/
  set_sleep_mode(SLEEP_MODE_STANDBY);
     fea:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <__RODATA_PM_OFFSET__+0x7f8050>
     fee:	89 7f       	andi	r24, 0xF9	; 249
     ff0:	82 60       	ori	r24, 0x02	; 2
     ff2:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__RODATA_PM_OFFSET__+0x7f8050>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:131

  /* Clear asynchronous interrupts detected during initialization */
  while (portRegister(RTS_SENSE_PIN).INTFLAGS) {
     ff6:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__RODATA_PM_OFFSET__+0x7f8409>
     ffa:	88 23       	and	r24, r24
     ffc:	29 f0       	breq	.+10     	; 0x1008 <main+0x18c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:133
    portRegister(RTS_SENSE_PIN).INTFLAGS =
    portRegister(RTS_SENSE_PIN).INTFLAGS;
     ffe:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__RODATA_PM_OFFSET__+0x7f8409>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:132
  /*** Hibernation mode ***/
  set_sleep_mode(SLEEP_MODE_STANDBY);

  /* Clear asynchronous interrupts detected during initialization */
  while (portRegister(RTS_SENSE_PIN).INTFLAGS) {
    portRegister(RTS_SENSE_PIN).INTFLAGS =
    1002:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <__RODATA_PM_OFFSET__+0x7f8409>
    1006:	f7 cf       	rjmp	.-18     	; 0xff6 <main+0x17a>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:137
    portRegister(RTS_SENSE_PIN).INTFLAGS;
  }

  /* Interrupt permission */
  sei();
    1008:	78 94       	sei
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:142

  /* Keeps the LED flashing while the RTS maintains a low signal level. */
  /* This usually indicates that the serial console is still open.      */
  /* After completion, the system will be reset. */
  if (!digitalRead(RTS_SENSE_PIN)) {
    100a:	12 99       	sbic	0x02, 2	; 2
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:143
    TIM::LED_Flash();
    100c:	0c c0       	rjmp	.+24     	; 0x1026 <main+0x1aa>
    100e:	93 d9       	rcall	.-3290   	; 0x336 <TIM::LED_Flash()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:144
    while (!digitalRead(RTS_SENSE_PIN)) {
    1010:	12 99       	sbic	0x02, 2	; 2
    1012:	06 c0       	rjmp	.+12     	; 0x1020 <main+0x1a4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:145
      sleep_enable();
    1014:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <__RODATA_PM_OFFSET__+0x7f8050>
    1018:	81 60       	ori	r24, 0x01	; 1
    101a:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__RODATA_PM_OFFSET__+0x7f8050>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:173
void SYS::WDT_Short (void) { WDT_SET(WDT_PERIOD_256CLK_gc); }

void SYS::WDT_Long (void) { WDT_SET(WDT_PERIOD_512CLK_gc); }

void SYS::WDT_REBOOT (void) {
  WDT_SET(WDT_PERIOD_8CLK_gc);
    101e:	f8 cf       	rjmp	.-16     	; 0x1010 <main+0x194>
WDT_REBOOT():
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	ab d9       	rcall	.-3242   	; 0x37a <SYS::WDT_SET(unsigned char)>
    1024:	ff cf       	rjmp	.-2      	; 0x1024 <main+0x1a8>
LED_HeartBeat():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:129
 * LED operation switching
 */

/* Heartbeat (waiting) */
void TIM::LED_HeartBeat (void) {
  if (TIM::mode != 1) {
    1026:	80 91 61 38 	lds	r24, 0x3861	; 0x803861 <TIM::mode>
    102a:	81 30       	cpi	r24, 0x01	; 1
    102c:	99 f0       	breq	.+38     	; 0x1054 <main+0x1d8>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:130
    TIM::mode = 1;
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	80 93 61 38 	sts	0x3861, r24	; 0x803861 <TIM::mode>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:131
    TCB1_CCMP = TCB1_HBEAT;
    1034:	8a e8       	ldi	r24, 0x8A	; 138
    1036:	95 e4       	ldi	r25, 0x45	; 69
    1038:	80 93 9c 0a 	sts	0x0A9C, r24	; 0x800a9c <__RODATA_PM_OFFSET__+0x7f8a9c>
    103c:	90 93 9d 0a 	sts	0x0A9D, r25	; 0x800a9d <__RODATA_PM_OFFSET__+0x7f8a9d>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:132
    TCB1_CNT = 0;
    1040:	10 92 9a 0a 	sts	0x0A9A, r1	; 0x800a9a <__RODATA_PM_OFFSET__+0x7f8a9a>
    1044:	10 92 9b 0a 	sts	0x0A9B, r1	; 0x800a9b <__RODATA_PM_OFFSET__+0x7f8a9b>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:133
    TCB1_CTRLA = TCB_RUNSTDBY_bm | TCB_ENABLE_bm | TCB_CLKSEL_TCA0_gc;
    1048:	85 e4       	ldi	r24, 0x45	; 69
    104a:	80 93 90 0a 	sts	0x0A90, r24	; 0x800a90 <__RODATA_PM_OFFSET__+0x7f8a90>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:134
    LEDG_EVOUT = EVSYS_USER_CHANNEL2_gc;
    104e:	83 e0       	ldi	r24, 0x03	; 3
    1050:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <__RODATA_PM_OFFSET__+0x7f81a9>
ready():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:152
    SYS::WDT_REBOOT();
  }
  TIM::LED_HeartBeat();

  /* It stays in a low power state until the first interrupt occurs. */
  sleep_enable();
    1054:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <__RODATA_PM_OFFSET__+0x7f8050>
    1058:	81 60       	ori	r24, 0x01	; 1
    105a:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__RODATA_PM_OFFSET__+0x7f8050>
get_parameter():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:264
        packet.size_word[0] = 2;
        break;
      }
      case PAR_VTARGET : {
        _CAPS16(packet.body[1])->word = SYS::get_vcc();
        packet.size_word[0] = 3;
    105e:	f3 e0       	ldi	r31, 0x03	; 3
    1060:	2f 2e       	mov	r2, r31
    1062:	31 2c       	mov	r3, r1
sign_on_response():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:168
  /********************
   * SIGN_ON Response *
   ********************/

  void sign_on_response (void) {
    NVM::before_address = -1;
    1064:	44 24       	eor	r4, r4
    1066:	4a 94       	dec	r4
    1068:	54 2c       	mov	r5, r4
    106a:	32 01       	movw	r6, r4
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:169
    packet.size = sizeof(sign_on_resp);
    106c:	bd e1       	ldi	r27, 0x1D	; 29
    106e:	8b 2e       	mov	r8, r27
    1070:	91 2c       	mov	r9, r1
    1072:	a1 2c       	mov	r10, r1
    1074:	b1 2c       	mov	r11, r1
get():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:86
  /*******************
   * Local functions *
   *******************/

  uint8_t get (void) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_RXCIF_bp);
    1076:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
    107a:	87 ff       	sbrs	r24, 7
    107c:	fc cf       	rjmp	.-8      	; 0x1076 <main+0x1fa>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:87
    return JTAG_USART.RXDATAL;
    107e:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__RODATA_PM_OFFSET__+0x7f8820>
packet_receive():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:126
    uint16_t _crc = ~0;
    uint8_t *p = (uint8_t*) &packet.soh;
    uint8_t *q = (uint8_t*) &packet.soh;

    /* Waiting for reception (infinite loop) */
    while (get() != MESSAGE_START);
    1082:	8b 31       	cpi	r24, 0x1B	; 27
    1084:	c1 f7       	brne	.-16     	; 0x1076 <main+0x1fa>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:127
    (*p++) = MESSAGE_START;
    1086:	80 93 8c 38 	sts	0x388C, r24	; 0x80388c <JTAG2::packet>
    108a:	ed e8       	ldi	r30, 0x8D	; 141
    108c:	f8 e3       	ldi	r31, 0x38	; 56
get():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:86
  /*******************
   * Local functions *
   *******************/

  uint8_t get (void) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_RXCIF_bp);
    108e:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
    1092:	87 ff       	sbrs	r24, 7
    1094:	fc cf       	rjmp	.-8      	; 0x108e <main+0x212>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:87
    return JTAG_USART.RXDATAL;
    1096:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__RODATA_PM_OFFSET__+0x7f8820>
packet_receive():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:130
    /* Waiting for reception (infinite loop) */
    while (get() != MESSAGE_START);
    (*p++) = MESSAGE_START;

    /* First 7bytes */
    for (int8_t i = 0; i < 7; i++) *p++ = get();
    109a:	81 93       	st	Z+, r24
    109c:	28 e3       	ldi	r18, 0x38	; 56
    109e:	e4 39       	cpi	r30, 0x94	; 148
    10a0:	f2 07       	cpc	r31, r18
    10a2:	a9 f7       	brne	.-22     	; 0x108e <main+0x212>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:133

    /* STX confirmation */
    if (packet.stx != TOKEN) return false;
    10a4:	80 91 93 38 	lds	r24, 0x3893	; 0x803893 <JTAG2::packet+0x7>
    10a8:	8e 30       	cpi	r24, 0x0E	; 14
    10aa:	29 f7       	brne	.-54     	; 0x1076 <main+0x1fa>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:136

    /* Check packet length */
    if (packet.size > sizeof(packet.body)) return false;
    10ac:	80 91 8f 38 	lds	r24, 0x388F	; 0x80388f <JTAG2::packet+0x3>
    10b0:	90 91 90 38 	lds	r25, 0x3890	; 0x803890 <JTAG2::packet+0x4>
    10b4:	a0 91 91 38 	lds	r26, 0x3891	; 0x803891 <JTAG2::packet+0x5>
    10b8:	b0 91 92 38 	lds	r27, 0x3892	; 0x803892 <JTAG2::packet+0x6>
    10bc:	85 31       	cpi	r24, 0x15	; 21
    10be:	92 40       	sbci	r25, 0x02	; 2
    10c0:	a1 05       	cpc	r26, r1
    10c2:	b1 05       	cpc	r27, r1
    10c4:	c0 f6       	brcc	.-80     	; 0x1076 <main+0x1fa>
    10c6:	04 e9       	ldi	r16, 0x94	; 148
    10c8:	18 e3       	ldi	r17, 0x38	; 56
    10ca:	68 01       	movw	r12, r16
main():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:139

    /* receive the rest */
    for (int16_t j = -2; j < packet.size_word[0]; j++) *p++ = get();
    10cc:	8e ef       	ldi	r24, 0xFE	; 254
    10ce:	9f ef       	ldi	r25, 0xFF	; 255
packet_receive():
    10d0:	20 91 8f 38 	lds	r18, 0x388F	; 0x80388f <JTAG2::packet+0x3>
    10d4:	30 91 90 38 	lds	r19, 0x3890	; 0x803890 <JTAG2::packet+0x4>
    10d8:	82 17       	cp	r24, r18
    10da:	93 07       	cpc	r25, r19
    10dc:	5c f4       	brge	.+22     	; 0x10f4 <main+0x278>
get():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:86
  /*******************
   * Local functions *
   *******************/

  uint8_t get (void) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_RXCIF_bp);
    10de:	20 91 24 08 	lds	r18, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
    10e2:	27 ff       	sbrs	r18, 7
    10e4:	fc cf       	rjmp	.-8      	; 0x10de <main+0x262>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:87
    return JTAG_USART.RXDATAL;
    10e6:	20 91 20 08 	lds	r18, 0x0820	; 0x800820 <__RODATA_PM_OFFSET__+0x7f8820>
packet_receive():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:139

    /* Check packet length */
    if (packet.size > sizeof(packet.body)) return false;

    /* receive the rest */
    for (int16_t j = -2; j < packet.size_word[0]; j++) *p++ = get();
    10ea:	d6 01       	movw	r26, r12
    10ec:	2d 93       	st	X+, r18
    10ee:	6d 01       	movw	r12, r26
    10f0:	01 96       	adiw	r24, 0x01	; 1
    10f2:	ee cf       	rjmp	.-36     	; 0x10d0 <main+0x254>
    10f4:	ec e8       	ldi	r30, 0x8C	; 140
    10f6:	ee 2e       	mov	r14, r30
    10f8:	e8 e3       	ldi	r30, 0x38	; 56
    10fa:	fe 2e       	mov	r15, r30
main():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:121
  /****************
   * JTAG Receive *
   ****************/

  bool packet_receive (void) {
    uint16_t _crc = ~0;
    10fc:	8f ef       	ldi	r24, 0xFF	; 255
    10fe:	9f ef       	ldi	r25, 0xFF	; 255
packet_receive():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:142

    /* receive the rest */
    for (int16_t j = -2; j < packet.size_word[0]; j++) *p++ = get();

    /* CRC check when receive buffer is filled */
    while (p != q) _crc = crc16_update(_crc, *q++);
    1100:	ec 14       	cp	r14, r12
    1102:	fd 04       	cpc	r15, r13
    1104:	29 f0       	breq	.+10     	; 0x1110 <main+0x294>
    1106:	f7 01       	movw	r30, r14
    1108:	61 91       	ld	r22, Z+
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:101
  void flush (void) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_TXCIF_bp);
  }

  uint16_t crc16_update(uint16_t _crc, uint8_t _data) {
    return _crc_ccitt_update(_crc, _data);
    110a:	7f 01       	movw	r14, r30
crc16_update():
    110c:	6c d9       	rcall	.-3368   	; 0x3e6 <_crc_ccitt_update(unsigned int, unsigned char)>
    110e:	f8 cf       	rjmp	.-16     	; 0x1100 <main+0x284>
wakeup_jtag():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:486
 * Main loop *
 *************/

void JTAG2::wakeup_jtag (void) {
  for (;;) {
    if (packet_receive()) process_command();
    1110:	89 2b       	or	r24, r25
    1112:	09 f0       	breq	.+2      	; 0x1116 <main+0x29a>
    1114:	b0 cf       	rjmp	.-160    	; 0x1076 <main+0x1fa>
process_command():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:331
  /****************
   * JTAG Process *
   ****************/

  inline void process_command (void) {
    wdt_reset();
    1116:	a8 95       	wdr
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:335
    #ifdef ENABLE_DEBUG_UPDI_SENDER
    UPDI::_send_buf_clear();
    #endif
    uint8_t message_id = packet.body[MESSAGE_ID];
    1118:	80 91 94 38 	lds	r24, 0x3894	; 0x803894 <JTAG2::packet+0x8>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:336
    packet.size = 1;
    111c:	21 e0       	ldi	r18, 0x01	; 1
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	40 e0       	ldi	r20, 0x00	; 0
    1122:	50 e0       	ldi	r21, 0x00	; 0
    1124:	20 93 8f 38 	sts	0x388F, r18	; 0x80388f <JTAG2::packet+0x3>
    1128:	30 93 90 38 	sts	0x3890, r19	; 0x803890 <JTAG2::packet+0x4>
    112c:	40 93 91 38 	sts	0x3891, r20	; 0x803891 <JTAG2::packet+0x5>
    1130:	50 93 92 38 	sts	0x3892, r21	; 0x803892 <JTAG2::packet+0x6>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:337
    packet.body[MESSAGE_ID] = RSP_OK;
    1134:	90 e8       	ldi	r25, 0x80	; 128
    1136:	90 93 94 38 	sts	0x3894, r25	; 0x803894 <JTAG2::packet+0x8>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:338
    switch (message_id) {
    113a:	8b 30       	cpi	r24, 0x0B	; 11
    113c:	09 f4       	brne	.+2      	; 0x1140 <main+0x2c4>
    113e:	54 c1       	rjmp	.+680    	; 0x13e8 <main+0x56c>
    1140:	08 f0       	brcs	.+2      	; 0x1144 <main+0x2c8>
    1142:	4c c0       	rjmp	.+152    	; 0x11dc <main+0x360>
    1144:	83 30       	cpi	r24, 0x03	; 3
    1146:	09 f4       	brne	.+2      	; 0x114a <main+0x2ce>
    1148:	cd c0       	rjmp	.+410    	; 0x12e4 <main+0x468>
    114a:	08 f0       	brcs	.+2      	; 0x114e <main+0x2d2>
    114c:	3d c0       	rjmp	.+122    	; 0x11c8 <main+0x34c>
    114e:	81 30       	cpi	r24, 0x01	; 1
    1150:	09 f4       	brne	.+2      	; 0x1154 <main+0x2d8>
    1152:	68 c0       	rjmp	.+208    	; 0x1224 <main+0x3a8>
    1154:	08 f4       	brcc	.+2      	; 0x1158 <main+0x2dc>
    1156:	e5 c1       	rjmp	.+970    	; 0x1522 <main+0x6a6>
set_parameter():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:191
   * CMND_SET_PARAMETER *
   **********************/

  bool set_parameter (void) {
    uint8_t param_val = packet.body[RSP_DATA + 1];
    switch ( packet.body[RSP_DATA] ) {
    1158:	80 91 95 38 	lds	r24, 0x3895	; 0x803895 <JTAG2::packet+0x9>
    115c:	85 30       	cpi	r24, 0x05	; 5
    115e:	09 f0       	breq	.+2      	; 0x1162 <main+0x2e6>
    1160:	46 c0       	rjmp	.+140    	; 0x11ee <main+0x372>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:190
  /**********************
   * CMND_SET_PARAMETER *
   **********************/

  bool set_parameter (void) {
    uint8_t param_val = packet.body[RSP_DATA + 1];
    1162:	d0 90 96 38 	lds	r13, 0x3896	; 0x803896 <JTAG2::packet+0xa>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:195
    switch ( packet.body[RSP_DATA] ) {
      /* JTAG interface speed */
      case PAR_BAUD_RATE : {
        /* Compatible range confirmation */
        if ((param_val >= BAUD_LOWER) && (param_val <= BAUD_UPPER)) {
    1166:	8e ef       	ldi	r24, 0xFE	; 254
    1168:	8d 0d       	add	r24, r13
    116a:	88 31       	cpi	r24, 0x18	; 24
    116c:	08 f0       	brcs	.+2      	; 0x1170 <main+0x2f4>
    116e:	b6 c0       	rjmp	.+364    	; 0x12dc <main+0x460>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:196
          uint16_t baud = pgm_read_word( &BAUD_TABLE[param_val] );
    1170:	8d 2d       	mov	r24, r13
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	fc 01       	movw	r30, r24
    1176:	ee 0f       	add	r30, r30
    1178:	ff 1f       	adc	r31, r31
    117a:	eb 56       	subi	r30, 0x6B	; 107
    117c:	ff 4f       	sbci	r31, 0xFF	; 255
    117e:	05 91       	lpm	r16, Z+
    1180:	14 91       	lpm	r17, Z
    1182:	78 01       	movw	r14, r16
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:197
          if (baud) {
    1184:	01 15       	cp	r16, r1
    1186:	11 05       	cpc	r17, r1
    1188:	09 f4       	brne	.+2      	; 0x118c <main+0x310>
    118a:	a8 c0       	rjmp	.+336    	; 0x12dc <main+0x460>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:199
            /* If normal, respond and then change speed */
            param_baud_rate_val = (jtag_baud_rate_e) param_val;
    118c:	80 93 36 38 	sts	0x3836, r24	; 0x803836 <JTAG2::param_baud_rate_val>
    1190:	90 93 37 38 	sts	0x3837, r25	; 0x803837 <JTAG2::param_baud_rate_val+0x1>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:200
            answer_transfer();
    1194:	3a d9       	rcall	.-3468   	; 0x40a <JTAG2::answer_transfer()>
flush():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:97
    JTAG_USART.STATUS = USART_TXCIF_bm;
    return JTAG_USART.TXDATAL = _data;
  }

  void flush (void) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_TXCIF_bp);
    1196:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
    119a:	86 ff       	sbrs	r24, 6
    119c:	fc cf       	rjmp	.-8      	; 0x1196 <main+0x31a>
set_parameter():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:203
            /* If normal, respond and then change speed */
            param_baud_rate_val = (jtag_baud_rate_e) param_val;
            answer_transfer();
            flush();
            /* If the division ratio is too small, change to double speed mode */
            if (baud < 64) {
    119e:	00 34       	cpi	r16, 0x40	; 64
    11a0:	11 05       	cpc	r17, r1
    11a2:	30 f4       	brcc	.+12     	; 0x11b0 <main+0x334>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:204
              JTAG_USART.CTRLB = JTAG_USART_DBLON;
    11a4:	8a ec       	ldi	r24, 0xCA	; 202
    11a6:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__RODATA_PM_OFFSET__+0x7f8826>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:205
              baud <<= 1;
    11aa:	78 01       	movw	r14, r16
    11ac:	ee 0c       	add	r14, r14
    11ae:	ff 1c       	adc	r15, r15
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:207
            }
            JTAG_USART.BAUD = baud;
    11b0:	e0 92 28 08 	sts	0x0828, r14	; 0x800828 <__RODATA_PM_OFFSET__+0x7f8828>
    11b4:	f0 92 29 08 	sts	0x0829, r15	; 0x800829 <__RODATA_PM_OFFSET__+0x7f8829>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:209
            /* Speed to allow terminal mode */
            if (param_val == BAUD_38400 || param_val == BAUD_666666)
    11b8:	35 e0       	ldi	r19, 0x05	; 5
    11ba:	d3 16       	cp	r13, r19
    11bc:	19 f0       	breq	.+6      	; 0x11c4 <main+0x348>
    11be:	48 e1       	ldi	r20, 0x18	; 24
    11c0:	d4 12       	cpse	r13, r20
    11c2:	59 cf       	rjmp	.-334    	; 0x1076 <main+0x1fa>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:210
              bit_set(UPDI_CONTROL, UPDI::UPDI_TERM_bp);
    11c4:	e5 9a       	sbi	0x1c, 5	; 28
    11c6:	57 cf       	rjmp	.-338    	; 0x1076 <main+0x1fa>
process_command():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:338
    UPDI::_send_buf_clear();
    #endif
    uint8_t message_id = packet.body[MESSAGE_ID];
    packet.size = 1;
    packet.body[MESSAGE_ID] = RSP_OK;
    switch (message_id) {
    11c8:	85 30       	cpi	r24, 0x05	; 5
    11ca:	09 f4       	brne	.+2      	; 0x11ce <main+0x352>
    11cc:	50 c1       	rjmp	.+672    	; 0x146e <main+0x5f2>
    11ce:	08 f4       	brcc	.+2      	; 0x11d2 <main+0x356>
    11d0:	55 c1       	rjmp	.+682    	; 0x147c <main+0x600>
    11d2:	88 30       	cpi	r24, 0x08	; 8
    11d4:	61 f0       	breq	.+24     	; 0x11ee <main+0x372>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:448
        // SYS::WDT_REBOOT();
        SYS::System_Reset();
      }
      /* Returns negation for unknown commands */
      default : {
        set_response(RSP_FAILED);
    11d6:	80 ea       	ldi	r24, 0xA0	; 160
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	82 c0       	rjmp	.+260    	; 0x12e0 <main+0x464>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:338
    UPDI::_send_buf_clear();
    #endif
    uint8_t message_id = packet.body[MESSAGE_ID];
    packet.size = 1;
    packet.body[MESSAGE_ID] = RSP_OK;
    switch (message_id) {
    11dc:	86 31       	cpi	r24, 0x16	; 22
    11de:	48 f4       	brcc	.+18     	; 0x11f2 <main+0x376>
    11e0:	84 31       	cpi	r24, 0x14	; 20
    11e2:	28 f4       	brcc	.+10     	; 0x11ee <main+0x372>
    11e4:	8c 30       	cpi	r24, 0x0C	; 12
    11e6:	09 f4       	brne	.+2      	; 0x11ea <main+0x36e>
    11e8:	65 c1       	rjmp	.+714    	; 0x14b4 <main+0x638>
    11ea:	8f 30       	cpi	r24, 0x0F	; 15
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:451
      /* Returns negation for unknown commands */
      default : {
        set_response(RSP_FAILED);
      }
    }
    answer_transfer();
    11ec:	a1 f7       	brne	.-24     	; 0x11d6 <main+0x35a>
    11ee:	0d d9       	rcall	.-3558   	; 0x40a <JTAG2::answer_transfer()>
    11f0:	42 cf       	rjmp	.-380    	; 0x1076 <main+0x1fa>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:338
    UPDI::_send_buf_clear();
    #endif
    uint8_t message_id = packet.body[MESSAGE_ID];
    packet.size = 1;
    packet.body[MESSAGE_ID] = RSP_OK;
    switch (message_id) {
    11f2:	86 33       	cpi	r24, 0x36	; 54
    11f4:	e1 f3       	breq	.-8      	; 0x11ee <main+0x372>
    11f6:	85 35       	cpi	r24, 0x55	; 85
    11f8:	09 f4       	brne	.+2      	; 0x11fc <main+0x380>
    11fa:	79 c1       	rjmp	.+754    	; 0x14ee <main+0x672>
    11fc:	84 33       	cpi	r24, 0x34	; 52
    11fe:	59 f7       	brne	.-42     	; 0x11d6 <main+0x35a>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:412
        #endif
        break;
      }
      case CMND_XMEGA_ERASE : {
        /* Received packet error retransmission exception */
        if (before_seqnum == packet.number) break;
    1200:	20 91 8d 38 	lds	r18, 0x388D	; 0x80388d <JTAG2::packet+0x1>
    1204:	30 91 8e 38 	lds	r19, 0x388E	; 0x80388e <JTAG2::packet+0x2>
    1208:	80 91 38 38 	lds	r24, 0x3838	; 0x803838 <JTAG2::before_seqnum>
    120c:	90 91 39 38 	lds	r25, 0x3839	; 0x803839 <JTAG2::before_seqnum+0x1>
    1210:	28 17       	cp	r18, r24
    1212:	39 07       	cpc	r19, r25
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:413
        if (UPDI::runtime(UPDI::UPDI_CMD_ERASE)) {
    1214:	61 f3       	breq	.-40     	; 0x11ee <main+0x372>
    1216:	83 e0       	ldi	r24, 0x03	; 3
    1218:	e0 da       	rcall	.-2624   	; 0x7da <UPDI::runtime(unsigned char)>
    121a:	81 11       	cpse	r24, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:418
          /* Keep the sequence number if completed successfully */
          before_seqnum = packet.number;
        }
        else {
          set_response(RSP_ILLEGAL_POWER_STATE);
    121c:	3f c1       	rjmp	.+638    	; 0x149c <main+0x620>
    121e:	8d ea       	ldi	r24, 0xAD	; 173
    1220:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:166
  _PROTECTED_WRITE(WDT_CTRLA, _wdt_period);
}

void SYS::WDT_OFF (void) { WDT_SET(WDT_PERIOD_OFF_gc); }

void SYS::WDT_ON (void) { WDT_SET(WDT_PERIOD_8KCLK_gc); }
    1222:	5e c0       	rjmp	.+188    	; 0x12e0 <main+0x464>
WDT_ON():
    1224:	8b e0       	ldi	r24, 0x0B	; 11
    1226:	a9 d8       	rcall	.-3758   	; 0x37a <SYS::WDT_SET(unsigned char)>
RTS_Disable():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:108
void SYS::RTS_Enable (void) {
  pinControlRegister(RTS_SENSE_PIN) = RTS_SENSE_CONFIG;
}

void SYS::RTS_Disable (void) {
  pinControlRegister(RTS_SENSE_PIN) = RTS_SENSE_DISABLE;
    1228:	88 e0       	ldi	r24, 0x08	; 8
    122a:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <__RODATA_PM_OFFSET__+0x7f8412>
LED_Stop():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:166
}

/* Suspension (before UPDI approval) */
/* TCA0 changed to charge pump drive speed */
void TIM::LED_Stop (void) {
  if (TIM::mode != 0) {
    122e:	80 91 61 38 	lds	r24, 0x3861	; 0x803861 <TIM::mode>
    1232:	88 23       	and	r24, r24
    1234:	41 f0       	breq	.+16     	; 0x1246 <main+0x3ca>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:167
    TIM::mode = 0;
    1236:	10 92 61 38 	sts	0x3861, r1	; 0x803861 <TIM::mode>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:168
    TCA0_SPLIT_CTRLA = TCA_SPLIT_RUNSTDBY_bm | TCA_SPLIT_ENABLE_bm | TCA_SPLIT_CLKSEL_DIV1_gc;
    123a:	81 e8       	ldi	r24, 0x81	; 129
    123c:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__RODATA_PM_OFFSET__+0x7f8a00>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:169
    LEDG_EVOUT = EVSYS_USER_OFF_gc;
    1240:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <__RODATA_PM_OFFSET__+0x7f81a9>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:343
    switch (message_id) {
      case CMND_GET_SIGN_ON : {
        SYS::WDT_ON();
        SYS::RTS_Disable();
        TIM::LED_Stop();
        UPDI::Target_Reset(true);
    1244:	0f 98       	cbi	0x01, 7	; 1
process_command():
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	64 d8       	rcall	.-3896   	; 0x312 <UPDI::Target_Reset(bool)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:344
        openDrainWrite(TRST_PIN, LOW);
    124a:	21 9a       	sbi	0x04, 1	; 4
PG_Enable():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:96
/******************
 * Various ON/OFF *
 ******************/

void SYS::PG_Enable (void) {
  digitalWrite(PGEN_PIN, HIGH);
    124c:	48 9a       	sbi	0x09, 0	; 9
transfer_enable():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:106
    return _crc_ccitt_update(_crc, _data);
  }

  void transfer_enable (void) {
    SYS::PG_Enable();
    pinMode(JTAG_TXD_PIN, OUTPUT);
    124e:	42 9a       	sbi	0x08, 2	; 8
    1250:	10 92 52 04 	sts	0x0452, r1	; 0x800452 <__RODATA_PM_OFFSET__+0x7f8452>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:107
    JTAG_USART.CTRLB = JTAG_USART_ON;
    1254:	88 ec       	ldi	r24, 0xC8	; 200
    1256:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__RODATA_PM_OFFSET__+0x7f8826>
sign_on_response():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:168
  /********************
   * SIGN_ON Response *
   ********************/

  void sign_on_response (void) {
    NVM::before_address = -1;
    125a:	40 92 5d 38 	sts	0x385D, r4	; 0x80385d <NVM::before_address>
    125e:	50 92 5e 38 	sts	0x385E, r5	; 0x80385e <NVM::before_address+0x1>
    1262:	60 92 5f 38 	sts	0x385F, r6	; 0x80385f <NVM::before_address+0x2>
    1266:	70 92 60 38 	sts	0x3860, r7	; 0x803860 <NVM::before_address+0x3>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:169
    packet.size = sizeof(sign_on_resp);
    126a:	80 92 8f 38 	sts	0x388F, r8	; 0x80388f <JTAG2::packet+0x3>
    126e:	90 92 90 38 	sts	0x3890, r9	; 0x803890 <JTAG2::packet+0x4>
    1272:	a0 92 91 38 	sts	0x3891, r10	; 0x803891 <JTAG2::packet+0x5>
    1276:	b0 92 92 38 	sts	0x3892, r11	; 0x803892 <JTAG2::packet+0x6>
    127a:	e8 e7       	ldi	r30, 0x78	; 120
    127c:	f0 e0       	ldi	r31, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:171
    for (uint8_t i = 0; i < sizeof(sign_on_resp); i++)
      packet.body[i] = pgm_read_byte( &sign_on_resp[i] );
    127e:	84 91       	lpm	r24, Z
    1280:	d8 01       	movw	r26, r16
    1282:	8d 93       	st	X+, r24
    1284:	8d 01       	movw	r16, r26
    1286:	31 96       	adiw	r30, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:170
   ********************/

  void sign_on_response (void) {
    NVM::before_address = -1;
    packet.size = sizeof(sign_on_resp);
    for (uint8_t i = 0; i < sizeof(sign_on_resp); i++)
    1288:	21 eb       	ldi	r18, 0xB1	; 177
    128a:	38 e3       	ldi	r19, 0x38	; 56
    128c:	2a 17       	cp	r18, r26
    128e:	3b 07       	cpc	r19, r27
    1290:	b1 f7       	brne	.-20     	; 0x127e <main+0x402>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:176
      packet.body[i] = pgm_read_byte( &sign_on_resp[i] );
    /* Generate version information from SERNUM */
    uint8_t* p = (uint8_t*) &SIGROW_SERNUM0;
    uint8_t* q = (uint8_t*) &SIGROW_SERNUM4;
    uint8_t* r = (uint8_t*) &packet.body[10];
      *r++ = *q++ ^ *p++ ^ *p++;
    1292:	80 91 07 11 	lds	r24, 0x1107	; 0x801107 <__RODATA_PM_OFFSET__+0x7f9107>
    1296:	90 91 03 11 	lds	r25, 0x1103	; 0x801103 <__RODATA_PM_OFFSET__+0x7f9103>
    129a:	89 27       	eor	r24, r25
    129c:	90 91 04 11 	lds	r25, 0x1104	; 0x801104 <__RODATA_PM_OFFSET__+0x7f9104>
    12a0:	89 27       	eor	r24, r25
    12a2:	80 93 9e 38 	sts	0x389E, r24	; 0x80389e <JTAG2::packet+0x12>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:177
      *r++ = *q++ ^ *p++ ^ *p++;
    12a6:	80 91 08 11 	lds	r24, 0x1108	; 0x801108 <__RODATA_PM_OFFSET__+0x7f9108>
    12aa:	90 91 05 11 	lds	r25, 0x1105	; 0x801105 <__RODATA_PM_OFFSET__+0x7f9105>
    12ae:	89 27       	eor	r24, r25
    12b0:	90 91 06 11 	lds	r25, 0x1106	; 0x801106 <__RODATA_PM_OFFSET__+0x7f9106>
    12b4:	89 27       	eor	r24, r25
    12b6:	80 93 9f 38 	sts	0x389F, r24	; 0x80389f <JTAG2::packet+0x13>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:178
      *r++ = *q++;
    12ba:	80 91 09 11 	lds	r24, 0x1109	; 0x801109 <__RODATA_PM_OFFSET__+0x7f9109>
    12be:	80 93 a0 38 	sts	0x38A0, r24	; 0x8038a0 <JTAG2::packet+0x14>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:179
      *r++ = *q++;
    12c2:	80 91 0a 11 	lds	r24, 0x110A	; 0x80110a <__RODATA_PM_OFFSET__+0x7f910a>
    12c6:	80 93 a1 38 	sts	0x38A1, r24	; 0x8038a1 <JTAG2::packet+0x15>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:180
      *r++ = *q++;
    12ca:	80 91 0b 11 	lds	r24, 0x110B	; 0x80110b <__RODATA_PM_OFFSET__+0x7f910b>
    12ce:	80 93 a2 38 	sts	0x38A2, r24	; 0x8038a2 <JTAG2::packet+0x16>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:181
      *r++ = *q++;
    12d2:	80 91 0c 11 	lds	r24, 0x110C	; 0x80110c <__RODATA_PM_OFFSET__+0x7f910c>
    12d6:	80 93 a3 38 	sts	0x38A3, r24	; 0x8038a3 <JTAG2::packet+0x17>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:215
              bit_set(UPDI_CONTROL, UPDI::UPDI_TERM_bp);
            return false;
          }
        }
        /* Range violation results in failure response */
        set_response(RSP_ILLEGAL_VALUE);
    12da:	89 cf       	rjmp	.-238    	; 0x11ee <main+0x372>
set_parameter():
    12dc:	86 ea       	ldi	r24, 0xA6	; 166
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:448
        // SYS::WDT_REBOOT();
        SYS::System_Reset();
      }
      /* Returns negation for unknown commands */
      default : {
        set_response(RSP_FAILED);
    12de:	90 e0       	ldi	r25, 0x00	; 0
process_command():
    12e0:	70 d8       	rcall	.-3872   	; 0x3c2 <JTAG2::set_response(JTAG2::jtag_response_e)>
    12e2:	85 cf       	rjmp	.-246    	; 0x11ee <main+0x372>
get_parameter():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:235
  /**********************
   * CMND_GET_PARAMETER *
   **********************/

  void get_parameter (void) {
    switch ( packet.body[RSP_DATA] ) {
    12e4:	80 91 95 38 	lds	r24, 0x3895	; 0x803895 <JTAG2::packet+0x9>
    12e8:	83 30       	cpi	r24, 0x03	; 3
    12ea:	d1 f1       	breq	.+116    	; 0x1360 <main+0x4e4>
    12ec:	38 f4       	brcc	.+14     	; 0x12fc <main+0x480>
    12ee:	81 30       	cpi	r24, 0x01	; 1
    12f0:	b9 f0       	breq	.+46     	; 0x1320 <main+0x4a4>
    12f2:	82 30       	cpi	r24, 0x02	; 2
    12f4:	f9 f0       	breq	.+62     	; 0x1334 <main+0x4b8>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:282
          packet.size_word[0] = 1 + sizeof(updi_desc.sib);
          break;
        }
      }
      default : {
        set_response(RSP_ILLEGAL_PARAMETER);
    12f6:	81 ea       	ldi	r24, 0xA1	; 161
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	f2 cf       	rjmp	.-28     	; 0x12e0 <main+0x464>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:235
  /**********************
   * CMND_GET_PARAMETER *
   **********************/

  void get_parameter (void) {
    switch ( packet.body[RSP_DATA] ) {
    12fc:	86 30       	cpi	r24, 0x06	; 6
    12fe:	d1 f1       	breq	.+116    	; 0x1374 <main+0x4f8>
    1300:	8d 31       	cpi	r24, 0x1D	; 29
    1302:	09 f4       	brne	.+2      	; 0x1306 <main+0x48a>
    1304:	5d c0       	rjmp	.+186    	; 0x13c0 <main+0x544>
    1306:	85 30       	cpi	r24, 0x05	; 5
    1308:	b1 f7       	brne	.-20     	; 0x12f6 <main+0x47a>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:258
        packet.body[1] = 0x55;
        packet.size_word[0] = 2;
        break;
      }
      case PAR_BAUD_RATE : {
        packet.body[1] = param_baud_rate_val;
    130a:	80 91 36 38 	lds	r24, 0x3836	; 0x803836 <JTAG2::param_baud_rate_val>
    130e:	80 93 95 38 	sts	0x3895, r24	; 0x803895 <JTAG2::packet+0x9>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:259
        packet.size_word[0] = 2;
    1312:	e2 e0       	ldi	r30, 0x02	; 2
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	e0 93 8f 38 	sts	0x388F, r30	; 0x80388f <JTAG2::packet+0x3>
    131a:	f0 93 90 38 	sts	0x3890, r31	; 0x803890 <JTAG2::packet+0x4>
    131e:	1c c0       	rjmp	.+56     	; 0x1358 <main+0x4dc>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:237
   **********************/

  void get_parameter (void) {
    switch ( packet.body[RSP_DATA] ) {
      case PAR_HW_VER : {
        packet.body[1] = sign_on_resp[5];
    1320:	82 e0       	ldi	r24, 0x02	; 2
    1322:	80 93 95 38 	sts	0x3895, r24	; 0x803895 <JTAG2::packet+0x9>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:238
        packet.body[2] = sign_on_resp[9];
    1326:	80 93 96 38 	sts	0x3896, r24	; 0x803896 <JTAG2::packet+0xa>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:264
        packet.size_word[0] = 2;
        break;
      }
      case PAR_VTARGET : {
        _CAPS16(packet.body[1])->word = SYS::get_vcc();
        packet.size_word[0] = 3;
    132a:	20 92 8f 38 	sts	0x388F, r2	; 0x80388f <JTAG2::packet+0x3>
    132e:	30 92 90 38 	sts	0x3890, r3	; 0x803890 <JTAG2::packet+0x4>
    1332:	12 c0       	rjmp	.+36     	; 0x1358 <main+0x4dc>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:243
        packet.body[2] = sign_on_resp[9];
        packet.size_word[0] = 3;
        break;
      }
      case PAR_FW_VER : {
        packet.body[1] = sign_on_resp[3];
    1334:	85 e3       	ldi	r24, 0x35	; 53
    1336:	80 93 95 38 	sts	0x3895, r24	; 0x803895 <JTAG2::packet+0x9>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:244
        packet.body[2] = sign_on_resp[4];
    133a:	87 e0       	ldi	r24, 0x07	; 7
    133c:	80 93 96 38 	sts	0x3896, r24	; 0x803896 <JTAG2::packet+0xa>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:245
        packet.body[3] = sign_on_resp[7];
    1340:	82 e2       	ldi	r24, 0x22	; 34
    1342:	80 93 97 38 	sts	0x3897, r24	; 0x803897 <JTAG2::packet+0xb>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:246
        packet.body[4] = sign_on_resp[8];
    1346:	86 e0       	ldi	r24, 0x06	; 6
    1348:	80 93 98 38 	sts	0x3898, r24	; 0x803898 <JTAG2::packet+0xc>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:247
        packet.size_word[0] = 5;
    134c:	85 e0       	ldi	r24, 0x05	; 5
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	80 93 8f 38 	sts	0x388F, r24	; 0x80388f <JTAG2::packet+0x3>
    1354:	90 93 90 38 	sts	0x3890, r25	; 0x803890 <JTAG2::packet+0x4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:286
      default : {
        set_response(RSP_ILLEGAL_PARAMETER);
        return;
      }
    }
    packet.body[MESSAGE_ID] = RSP_PARAMETER;
    1358:	81 e8       	ldi	r24, 0x81	; 129
    135a:	80 93 94 38 	sts	0x3894, r24	; 0x803894 <JTAG2::packet+0x8>
    135e:	47 cf       	rjmp	.-370    	; 0x11ee <main+0x372>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:253
        break;
      }
      case PAR_EMU_MODE : {
        /* This response code indicates an UPDI-only implementation */
        /* In normal JTAGICEmkII this is never queried */
        packet.body[1] = 0x55;
    1360:	85 e5       	ldi	r24, 0x55	; 85
    1362:	80 93 95 38 	sts	0x3895, r24	; 0x803895 <JTAG2::packet+0x9>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:254
        packet.size_word[0] = 2;
    1366:	a2 e0       	ldi	r26, 0x02	; 2
    1368:	b0 e0       	ldi	r27, 0x00	; 0
    136a:	a0 93 8f 38 	sts	0x388F, r26	; 0x80388f <JTAG2::packet+0x3>
    136e:	b0 93 90 38 	sts	0x3890, r27	; 0x803890 <JTAG2::packet+0x4>
    1372:	f2 cf       	rjmp	.-28     	; 0x1358 <main+0x4dc>
get_vcc():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:70
 * Self VCC measurement *
 ************************/

/*** This routine is exclusive to the tinyAVR-2 series. ***/
uint16_t SYS::get_vcc (void) {
  ADC0_CTRLA = ADC_ENABLE_bm;
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__RODATA_PM_OFFSET__+0x7f8600>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:71
  ADC0_CTRLB = ADC_PRESC_DIV2_gc;
    137a:	10 92 01 06 	sts	0x0601, r1	; 0x800601 <__RODATA_PM_OFFSET__+0x7f8601>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:72
  ADC0_CTRLC = ADC_REFSEL_1024MV_gc | ((F_CPU / 1000000UL) << ADC_TIMEBASE_gp);
    137e:	84 e5       	ldi	r24, 0x54	; 84
    1380:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__RODATA_PM_OFFSET__+0x7f8602>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:73
  ADC0_CTRLE = 17; /* (SAMPDUR + 0.5) * fCLK_ADC = 10.5 µs sample duration */
    1384:	81 e1       	ldi	r24, 0x11	; 17
    1386:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__RODATA_PM_OFFSET__+0x7f8608>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:74
  ADC0_MUXPOS = ADC_MUXPOS_VDDDIV10_gc; /* ADC channel VDD/10 */
    138a:	91 e3       	ldi	r25, 0x31	; 49
    138c:	90 93 0c 06 	sts	0x060C, r25	; 0x80060c <__RODATA_PM_OFFSET__+0x7f860c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:75
  ADC0_COMMAND = ADC_MODE_SINGLE_12BIT_gc | ADC_START_IMMEDIATE_gc;
    1390:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <__RODATA_PM_OFFSET__+0x7f860a>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:76
  loop_until_bit_is_set(ADC0_INTFLAGS, ADC_SAMPRDY_bp);
    1394:	80 91 05 06 	lds	r24, 0x0605	; 0x800605 <__RODATA_PM_OFFSET__+0x7f8605>
    1398:	81 ff       	sbrs	r24, 1
    139a:	fc cf       	rjmp	.-8      	; 0x1394 <main+0x518>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:77
  uint16_t adc_reading = ADC0_SAMPLE;
    139c:	80 91 14 06 	lds	r24, 0x0614	; 0x800614 <__RODATA_PM_OFFSET__+0x7f8614>
    13a0:	90 91 15 06 	lds	r25, 0x0615	; 0x800615 <__RODATA_PM_OFFSET__+0x7f8615>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:78
  adc_reading += adc_reading + (adc_reading >> 1);  /* x2.5 */
    13a4:	9c 01       	movw	r18, r24
    13a6:	36 95       	lsr	r19
    13a8:	27 95       	ror	r18
    13aa:	88 0f       	add	r24, r24
    13ac:	99 1f       	adc	r25, r25
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:79
  ADC0_CTRLA = 0;
    13ae:	10 92 00 06 	sts	0x0600, r1	; 0x800600 <__RODATA_PM_OFFSET__+0x7f8600>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:78
  ADC0_CTRLE = 17; /* (SAMPDUR + 0.5) * fCLK_ADC = 10.5 µs sample duration */
  ADC0_MUXPOS = ADC_MUXPOS_VDDDIV10_gc; /* ADC channel VDD/10 */
  ADC0_COMMAND = ADC_MODE_SINGLE_12BIT_gc | ADC_START_IMMEDIATE_gc;
  loop_until_bit_is_set(ADC0_INTFLAGS, ADC_SAMPRDY_bp);
  uint16_t adc_reading = ADC0_SAMPLE;
  adc_reading += adc_reading + (adc_reading >> 1);  /* x2.5 */
    13b2:	82 0f       	add	r24, r18
    13b4:	93 1f       	adc	r25, r19
get_parameter():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:263
        packet.body[1] = param_baud_rate_val;
        packet.size_word[0] = 2;
        break;
      }
      case PAR_VTARGET : {
        _CAPS16(packet.body[1])->word = SYS::get_vcc();
    13b6:	80 93 95 38 	sts	0x3895, r24	; 0x803895 <JTAG2::packet+0x9>
    13ba:	90 93 96 38 	sts	0x3896, r25	; 0x803896 <JTAG2::packet+0xa>
    13be:	b5 cf       	rjmp	.-150    	; 0x132a <main+0x4ae>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:273
      case PAR_TARGET_SIGNATURE : {
        /* SIB information can be returned as an extended signature. */
        /* Responds correctly only during programming mode.          */
        /* otherwise an error will be returned.                      */
        /* Silicon revision (REVID) can be read as normal IO memory. */
        if (bit_is_set(UPDI_CONTROL, UPDI::UPDI_INFO_bp)) {
    13c0:	e0 9b       	sbis	0x1c, 0	; 28
    13c2:	99 cf       	rjmp	.-206    	; 0x12f6 <main+0x47a>
    13c4:	ec e6       	ldi	r30, 0x6C	; 108
    13c6:	f8 e3       	ldi	r31, 0x38	; 56
    13c8:	a5 e9       	ldi	r26, 0x95	; 149
    13ca:	b8 e3       	ldi	r27, 0x38	; 56
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:276
          uint8_t *q = &packet.body[RSP_DATA];
          uint8_t *p = &updi_desc.sib[0];
          for (uint8_t i = 0; i < sizeof(updi_desc.sib); i++) *q++ = *p++;
    13cc:	81 91       	ld	r24, Z+
    13ce:	8d 93       	st	X+, r24
    13d0:	2c e8       	ldi	r18, 0x8C	; 140
    13d2:	38 e3       	ldi	r19, 0x38	; 56
    13d4:	2e 17       	cp	r18, r30
    13d6:	3f 07       	cpc	r19, r31
    13d8:	c9 f7       	brne	.-14     	; 0x13cc <main+0x550>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:277
          packet.size_word[0] = 1 + sizeof(updi_desc.sib);
    13da:	41 e2       	ldi	r20, 0x21	; 33
    13dc:	50 e0       	ldi	r21, 0x00	; 0
    13de:	40 93 8f 38 	sts	0x388F, r20	; 0x80388f <JTAG2::packet+0x3>
    13e2:	50 93 90 38 	sts	0x3890, r21	; 0x803890 <JTAG2::packet+0x4>
    13e6:	b8 cf       	rjmp	.-144    	; 0x1358 <main+0x4dc>
process_command():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:360
        get_parameter();
        break;
      }
      case CMND_RESET : {
        /* Run only the first time */
        if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_INIT_bp)) {
    13e8:	e7 99       	sbic	0x1c, 7	; 28
    13ea:	01 cf       	rjmp	.-510    	; 0x11ee <main+0x372>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:361
          uint8_t hv_control = packet.body[RSP_DATA];
    13ec:	90 91 95 38 	lds	r25, 0x3895	; 0x803895 <JTAG2::packet+0x9>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:363
          bool hv_active = false;
          if ((hv_control & '0') == '0') {
    13f0:	89 2f       	mov	r24, r25
    13f2:	80 73       	andi	r24, 0x30	; 48
    13f4:	80 33       	cpi	r24, 0x30	; 48
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:367
            /* If the general reset setting is neither 0 nor 1. */
            /* Accepts special extension settings.              */
            /* This forces HV control.                          */
            updi_desc.hvupdi_variant = hv_control;
    13f6:	29 f4       	brne	.+10     	; 0x1402 <main+0x586>
    13f8:	90 93 64 38 	sts	0x3864, r25	; 0x803864 <JTAG2::updi_desc+0x2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:369
            /* '1' must be passed for automatic HV control to be inhibited */
            if (hv_control != '1') hv_active = true;
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	91 33       	cpi	r25, 0x31	; 49
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:362
      }
      case CMND_RESET : {
        /* Run only the first time */
        if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_INIT_bp)) {
          uint8_t hv_control = packet.body[RSP_DATA];
          bool hv_active = false;
    1400:	09 f4       	brne	.+2      	; 0x1404 <main+0x588>
main():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:372
            updi_desc.hvupdi_variant = hv_control;
            /* '1' must be passed for automatic HV control to be inhibited */
            if (hv_control != '1') hv_active = true;
          }
          /* Here UPDI control is tried */
          UPDI::updi_activate(hv_active);
    1402:	80 e0       	ldi	r24, 0x00	; 0
process_command():
    1404:	62 d9       	rcall	.-3388   	; 0x6ca <UPDI::updi_activate(bool)>
    1406:	80 91 61 38 	lds	r24, 0x3861	; 0x803861 <TIM::mode>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:373
          if (bit_is_set(UPDI_CONTROL, UPDI::UPDI_TERM_bp)) {
    140a:	e5 9b       	sbis	0x1c, 5	; 28
    140c:	1a c0       	rjmp	.+52     	; 0x1442 <main+0x5c6>
LED_TCB1():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:139
    LEDG_EVOUT = EVSYS_USER_CHANNEL2_gc;
  }
}

void LED_TCB1 (uint8_t mode, uint16_t ccmp) {
  if (TIM::mode != mode) {
    140e:	83 30       	cpi	r24, 0x03	; 3
    1410:	99 f0       	breq	.+38     	; 0x1438 <main+0x5bc>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:140
    TIM::mode = mode;
    1412:	83 e0       	ldi	r24, 0x03	; 3
    1414:	80 93 61 38 	sts	0x3861, r24	; 0x803861 <TIM::mode>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:141
    TCB1_CCMP = ccmp;
    1418:	89 ea       	ldi	r24, 0xA9	; 169
    141a:	95 e5       	ldi	r25, 0x55	; 85
    141c:	80 93 9c 0a 	sts	0x0A9C, r24	; 0x800a9c <__RODATA_PM_OFFSET__+0x7f8a9c>
    1420:	90 93 9d 0a 	sts	0x0A9D, r25	; 0x800a9d <__RODATA_PM_OFFSET__+0x7f8a9d>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:142
    TCB1_CNT = 0;
    1424:	10 92 9a 0a 	sts	0x0A9A, r1	; 0x800a9a <__RODATA_PM_OFFSET__+0x7f8a9a>
    1428:	10 92 9b 0a 	sts	0x0A9B, r1	; 0x800a9b <__RODATA_PM_OFFSET__+0x7f8a9b>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:143
    TCB1_CTRLA = TCB_RUNSTDBY_bm | TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
    142c:	8f e4       	ldi	r24, 0x4F	; 79
    142e:	80 93 90 0a 	sts	0x0A90, r24	; 0x800a90 <__RODATA_PM_OFFSET__+0x7f8a90>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:144
    LEDG_EVOUT = EVSYS_USER_CHANNEL0_gc;
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <__RODATA_PM_OFFSET__+0x7f81a9>
WDT_OFF():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:164
void SYS::WDT_SET (uint8_t _wdt_period) {
  loop_until_bit_is_clear(WDT_STATUS, WDT_SYNCBUSY_bp);
  _PROTECTED_WRITE(WDT_CTRLA, _wdt_period);
}

void SYS::WDT_OFF (void) { WDT_SET(WDT_PERIOD_OFF_gc); }
    1438:	80 e0       	ldi	r24, 0x00	; 0
    143a:	0e 94 bd 01 	call	0x37a	; 0x37a <SYS::WDT_SET(unsigned char)>
process_command():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:382
          }
          else {
            /* If not set to interactive mode, the LED will flash rapidly */
            TIM::LED_Fast();
          }
          bit_set(UPDI_CONTROL, UPDI::UPDI_INIT_bp);
    143e:	e7 9a       	sbi	0x1c, 7	; 28
    1440:	d6 ce       	rjmp	.-596    	; 0x11ee <main+0x372>
LED_TCB1():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:139
    LEDG_EVOUT = EVSYS_USER_CHANNEL2_gc;
  }
}

void LED_TCB1 (uint8_t mode, uint16_t ccmp) {
  if (TIM::mode != mode) {
    1442:	84 30       	cpi	r24, 0x04	; 4
    1444:	e1 f3       	breq	.-8      	; 0x143e <main+0x5c2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:140
    TIM::mode = mode;
    1446:	84 e0       	ldi	r24, 0x04	; 4
    1448:	80 93 61 38 	sts	0x3861, r24	; 0x803861 <TIM::mode>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:141
    TCB1_CCMP = ccmp;
    144c:	a5 e1       	ldi	r26, 0x15	; 21
    144e:	b4 e0       	ldi	r27, 0x04	; 4
    1450:	a0 93 9c 0a 	sts	0x0A9C, r26	; 0x800a9c <__RODATA_PM_OFFSET__+0x7f8a9c>
    1454:	b0 93 9d 0a 	sts	0x0A9D, r27	; 0x800a9d <__RODATA_PM_OFFSET__+0x7f8a9d>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:142
    TCB1_CNT = 0;
    1458:	10 92 9a 0a 	sts	0x0A9A, r1	; 0x800a9a <__RODATA_PM_OFFSET__+0x7f8a9a>
    145c:	10 92 9b 0a 	sts	0x0A9B, r1	; 0x800a9b <__RODATA_PM_OFFSET__+0x7f8a9b>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:143
    TCB1_CTRLA = TCB_RUNSTDBY_bm | TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
    1460:	8f e4       	ldi	r24, 0x4F	; 79
    1462:	80 93 90 0a 	sts	0x0A90, r24	; 0x800a90 <__RODATA_PM_OFFSET__+0x7f8a90>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:144
    LEDG_EVOUT = EVSYS_USER_CHANNEL0_gc;
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <__RODATA_PM_OFFSET__+0x7f81a9>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:390
        UPDI::_send_buf_copy();
        #endif
        break;
      }
      case CMND_READ_MEMORY : {
        if (!UPDI::runtime(UPDI::UPDI_CMD_READ_MEMORY)) {
    146c:	e8 cf       	rjmp	.-48     	; 0x143e <main+0x5c2>
process_command():
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	b4 d9       	rcall	.-3224   	; 0x7da <UPDI::runtime(unsigned char)>
    1472:	81 11       	cpse	r24, r1
    1474:	bc ce       	rjmp	.-648    	; 0x11ee <main+0x372>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:391
          set_response(RSP_NO_TARGET_POWER);
    1476:	8b ea       	ldi	r24, 0xAB	; 171
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	32 cf       	rjmp	.-412    	; 0x12e0 <main+0x464>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:397
        }
        break;
      }
      case CMND_WRITE_MEMORY : {
        /* Received packet error retransmission exception */
        if (before_seqnum == packet.number) break;
    147c:	20 91 8d 38 	lds	r18, 0x388D	; 0x80388d <JTAG2::packet+0x1>
    1480:	30 91 8e 38 	lds	r19, 0x388E	; 0x80388e <JTAG2::packet+0x2>
    1484:	80 91 38 38 	lds	r24, 0x3838	; 0x803838 <JTAG2::before_seqnum>
    1488:	90 91 39 38 	lds	r25, 0x3839	; 0x803839 <JTAG2::before_seqnum+0x1>
    148c:	28 17       	cp	r18, r24
    148e:	39 07       	cpc	r19, r25
    1490:	09 f4       	brne	.+2      	; 0x1494 <main+0x618>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:398
        if (UPDI::runtime(UPDI::UPDI_CMD_WRITE_MEMORY)) {
    1492:	ad ce       	rjmp	.-678    	; 0x11ee <main+0x372>
    1494:	82 e0       	ldi	r24, 0x02	; 2
    1496:	a1 d9       	rcall	.-3262   	; 0x7da <UPDI::runtime(unsigned char)>
    1498:	88 23       	and	r24, r24
    149a:	49 f0       	breq	.+18     	; 0x14ae <main+0x632>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:415
      case CMND_XMEGA_ERASE : {
        /* Received packet error retransmission exception */
        if (before_seqnum == packet.number) break;
        if (UPDI::runtime(UPDI::UPDI_CMD_ERASE)) {
          /* Keep the sequence number if completed successfully */
          before_seqnum = packet.number;
    149c:	80 91 8d 38 	lds	r24, 0x388D	; 0x80388d <JTAG2::packet+0x1>
    14a0:	90 91 8e 38 	lds	r25, 0x388E	; 0x80388e <JTAG2::packet+0x2>
    14a4:	80 93 38 38 	sts	0x3838, r24	; 0x803838 <JTAG2::before_seqnum>
    14a8:	90 93 39 38 	sts	0x3839, r25	; 0x803839 <JTAG2::before_seqnum+0x1>
    14ac:	a0 ce       	rjmp	.-704    	; 0x11ee <main+0x372>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:403
        if (UPDI::runtime(UPDI::UPDI_CMD_WRITE_MEMORY)) {
          /* Keep the sequence number if completed successfully */
          before_seqnum = packet.number;
        }
        else {
          set_response(RSP_ILLEGAL_MCU_STATE);
    14ae:	85 ea       	ldi	r24, 0xA5	; 165
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	16 cf       	rjmp	.-468    	; 0x12e0 <main+0x464>
set_descripter():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:297

  void set_descripter (uint8_t type) {
    if (type == CMND_SET_DEVICE_DESC) {
      const struct jtag_device_descriptor *desc =
           (struct jtag_device_descriptor*)&packet.body[RSP_DATA];
      updi_desc.flash_page_size = *(uint16_t*)(&desc->uiFlashPageSize[0]);
    14b4:	80 91 88 39 	lds	r24, 0x3988	; 0x803988 <JTAG2::packet+0xfc>
    14b8:	90 91 89 39 	lds	r25, 0x3989	; 0x803989 <JTAG2::packet+0xfd>
    14bc:	80 93 66 38 	sts	0x3866, r24	; 0x803866 <JTAG2::updi_desc+0x4>
    14c0:	90 93 67 38 	sts	0x3867, r25	; 0x803867 <JTAG2::updi_desc+0x5>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:298
      updi_desc.eeprom_page_size = desc->ucEepromPageSize;
    14c4:	80 91 8a 39 	lds	r24, 0x398A	; 0x80398a <JTAG2::packet+0xfe>
    14c8:	80 93 68 38 	sts	0x3868, r24	; 0x803868 <JTAG2::updi_desc+0x6>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:299
      if ((desc->ucIDRAddress & '0') == '0') {
    14cc:	90 91 85 39 	lds	r25, 0x3985	; 0x803985 <JTAG2::packet+0xf9>
    14d0:	29 2f       	mov	r18, r25
    14d2:	20 73       	andi	r18, 0x30	; 48
    14d4:	20 33       	cpi	r18, 0x30	; 48
    14d6:	19 f4       	brne	.+6      	; 0x14de <main+0x662>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:303
        /* Accepts special extension settings. */
        /* 0x31 must be passed for automatic HV control to be inhibited. */
        /* This parameter can be specified in the `idr` descriptor in the `part` section. */
        updi_desc.hvupdi_variant = desc->ucIDRAddress;  // Valid value 0x30,0x31 or 0x32
    14d8:	90 93 64 38 	sts	0x3864, r25	; 0x803864 <JTAG2::updi_desc+0x2>
    14dc:	88 ce       	rjmp	.-752    	; 0x11ee <main+0x372>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:308
      }
      else {
        /* If the EEPROM page size is 32 or more, it is considered a HV=12V system. */
        /* This setting will be referenced when automatic HV control is requested.  */
        updi_desc.hvupdi_variant = updi_desc.eeprom_page_size >= 32 ? '0' : '2';
    14de:	80 32       	cpi	r24, 0x20	; 32
    14e0:	20 f4       	brcc	.+8      	; 0x14ea <main+0x66e>
main():
    14e2:	82 e3       	ldi	r24, 0x32	; 50
set_descripter():
    14e4:	80 93 64 38 	sts	0x3864, r24	; 0x803864 <JTAG2::updi_desc+0x2>
    14e8:	82 ce       	rjmp	.-764    	; 0x11ee <main+0x372>
main():
    14ea:	80 e3       	ldi	r24, 0x30	; 48
    14ec:	fb cf       	rjmp	.-10     	; 0x14e4 <main+0x668>
set_descripter():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:316
    else if (type == CMND_SET_UPDI_PARAMS) {
      /* This structure is used instead of CMND_SET_DEVICE_DESC after */
      /* answering 0x55 ('U') to PAR_EMU_MODE of CMND_GET_PARAMETER.  */
      /* Once you have confirmed the magic number and data length,    */
      /* you can simply clone it into your internal structure.        */
      const struct updi_device_descriptor *desc =
    14ee:	e5 e9       	ldi	r30, 0x95	; 149
    14f0:	f8 e3       	ldi	r31, 0x38	; 56
    14f2:	e9 83       	std	Y+1, r30	; 0x01
    14f4:	fa 83       	std	Y+2, r31	; 0x02
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:318
           (struct updi_device_descriptor*)&packet.body[RSP_DATA];
      if (desc->magicnumber == 'U' && desc->length <= sizeof(updi_desc) - 2) {
    14f6:	80 91 95 38 	lds	r24, 0x3895	; 0x803895 <JTAG2::packet+0x9>
    14fa:	85 35       	cpi	r24, 0x55	; 85
    14fc:	09 f0       	breq	.+2      	; 0x1500 <main+0x684>
    14fe:	77 ce       	rjmp	.-786    	; 0x11ee <main+0x372>
    1500:	90 91 96 38 	lds	r25, 0x3896	; 0x803896 <JTAG2::packet+0xa>
    1504:	99 32       	cpi	r25, 0x29	; 41
    1506:	08 f0       	brcs	.+2      	; 0x150a <main+0x68e>
    1508:	72 ce       	rjmp	.-796    	; 0x11ee <main+0x372>
    150a:	de 01       	movw	r26, r28
    150c:	13 96       	adiw	r26, 0x03	; 3
    150e:	e4 e6       	ldi	r30, 0x64	; 100
    1510:	f8 e3       	ldi	r31, 0x38	; 56
main():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:321
        uint8_t *q = 2 + (uint8_t*)&updi_desc;
        uint8_t *p = 2 + (uint8_t*)&desc;
        for (int8_t i = 0; i < desc->length; i++) *q++ = *p++;
    1512:	80 e0       	ldi	r24, 0x00	; 0
set_descripter():
    1514:	89 17       	cp	r24, r25
    1516:	09 f4       	brne	.+2      	; 0x151a <main+0x69e>
    1518:	6a ce       	rjmp	.-812    	; 0x11ee <main+0x372>
    151a:	2d 91       	ld	r18, X+
    151c:	21 93       	st	Z+, r18
    151e:	8f 5f       	subi	r24, 0xFF	; 255
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:438
      case CMND_GO :
      case CMND_GET_SYNC : {
        break;
      }
      case CMND_SIGN_OFF : {
        answer_transfer();
    1520:	f9 cf       	rjmp	.-14     	; 0x1514 <main+0x698>
process_command():
    1522:	0e 94 05 02 	call	0x40a	; 0x40a <JTAG2::answer_transfer()>
flush():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:97
    JTAG_USART.STATUS = USART_TXCIF_bm;
    return JTAG_USART.TXDATAL = _data;
  }

  void flush (void) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_TXCIF_bp);
    1526:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
    152a:	86 ff       	sbrs	r24, 6
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:440
        break;
      }
      case CMND_SIGN_OFF : {
        answer_transfer();
        flush();
        if (bit_is_set(UPDI_CONTROL, UPDI::UPDI_PROG_bp))
    152c:	fc cf       	rjmp	.-8      	; 0x1526 <main+0x6aa>
process_command():
    152e:	e1 9b       	sbis	0x1c, 1	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:441
          UPDI::runtime(UPDI::UPDI_CMD_GO);
    1530:	02 c0       	rjmp	.+4      	; 0x1536 <main+0x6ba>
    1532:	84 e0       	ldi	r24, 0x04	; 4
    1534:	52 d9       	rcall	.-3420   	; 0x7da <UPDI::runtime(unsigned char)>
System_Reset():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:88
/*************
 * Self reset *
 *************/

void SYS::System_Reset (void) {
  _PROTECTED_WRITE(RSTCTRL_SWRR, RSTCTRL_SWRE_bm);
    1536:	88 ed       	ldi	r24, 0xD8	; 216
    1538:	91 e0       	ldi	r25, 0x01	; 1
    153a:	84 bf       	out	0x34, r24	; 52
    153c:	90 93 41 00 	sts	0x0041, r25	; 0x800041 <__RODATA_PM_OFFSET__+0x7f8041>
    1540:	4a ce       	rjmp	.-876    	; 0x11d6 <main+0x35a>

00001542 <setjmp>:
setjmp():
    1542:	dc 01       	movw	r26, r24
    1544:	2d 92       	st	X+, r2
    1546:	3d 92       	st	X+, r3
    1548:	4d 92       	st	X+, r4
    154a:	5d 92       	st	X+, r5
    154c:	6d 92       	st	X+, r6
    154e:	7d 92       	st	X+, r7
    1550:	8d 92       	st	X+, r8
    1552:	9d 92       	st	X+, r9
    1554:	ad 92       	st	X+, r10
    1556:	bd 92       	st	X+, r11
    1558:	cd 92       	st	X+, r12
    155a:	dd 92       	st	X+, r13
    155c:	ed 92       	st	X+, r14
    155e:	fd 92       	st	X+, r15
    1560:	0d 93       	st	X+, r16
    1562:	1d 93       	st	X+, r17
    1564:	cd 93       	st	X+, r28
    1566:	dd 93       	st	X+, r29
    1568:	ff 91       	pop	r31
    156a:	ef 91       	pop	r30
    156c:	8d b7       	in	r24, 0x3d	; 61
    156e:	8d 93       	st	X+, r24
    1570:	8e b7       	in	r24, 0x3e	; 62
    1572:	8d 93       	st	X+, r24
    1574:	8f b7       	in	r24, 0x3f	; 63
    1576:	8d 93       	st	X+, r24
    1578:	ed 93       	st	X+, r30
    157a:	fd 93       	st	X+, r31
    157c:	88 27       	eor	r24, r24
    157e:	99 27       	eor	r25, r25
    1580:	09 94       	ijmp

00001582 <longjmp>:
longjmp():
    1582:	dc 01       	movw	r26, r24
    1584:	cb 01       	movw	r24, r22
    1586:	81 30       	cpi	r24, 0x01	; 1
    1588:	91 05       	cpc	r25, r1
    158a:	81 1d       	adc	r24, r1
    158c:	2d 90       	ld	r2, X+
    158e:	3d 90       	ld	r3, X+
    1590:	4d 90       	ld	r4, X+
    1592:	5d 90       	ld	r5, X+
    1594:	6d 90       	ld	r6, X+
    1596:	7d 90       	ld	r7, X+
    1598:	8d 90       	ld	r8, X+
    159a:	9d 90       	ld	r9, X+
    159c:	ad 90       	ld	r10, X+
    159e:	bd 90       	ld	r11, X+
    15a0:	cd 90       	ld	r12, X+
    15a2:	dd 90       	ld	r13, X+
    15a4:	ed 90       	ld	r14, X+
    15a6:	fd 90       	ld	r15, X+
    15a8:	0d 91       	ld	r16, X+
    15aa:	1d 91       	ld	r17, X+
    15ac:	cd 91       	ld	r28, X+
    15ae:	dd 91       	ld	r29, X+
    15b0:	ed 91       	ld	r30, X+
    15b2:	fd 91       	ld	r31, X+
    15b4:	0d 90       	ld	r0, X+
    15b6:	0f be       	out	0x3f, r0	; 63
    15b8:	ed bf       	out	0x3d, r30	; 61
    15ba:	fe bf       	out	0x3e, r31	; 62
    15bc:	ed 91       	ld	r30, X+
    15be:	fd 91       	ld	r31, X+
    15c0:	09 94       	ijmp

000015c2 <_exit>:
exit():
    15c2:	f8 94       	cli

000015c4 <__stop_program>:
__stop_program():
    15c4:	ff cf       	rjmp	.-2      	; 0x15c4 <__stop_program>

Disassembly of section .nvmem:

0000160c <.nvmem>:
	...
