
/var/folders/mz/_z9vt_y13rdf9tt_4qkvv0k40000gn/T/arduino_build_518893/UPDI4AVR_FW634B.ino.elf:     file format elf32-avr


Disassembly of section .data:

00803800 <__data_start>:
__data_start():
  803800:	55 c8       	rjmp	.-3926   	; 0x8028ac <__RODATA_PM_OFFSET__+0x7fa8ac>
  803802:	59 55       	subi	r21, 0x59	; 89
  803804:	c3 08       	sbc	r12, r3

00803806 <UPDI::Target_Reset(bool)::set_ptr_off>:
  803806:	55 c8 00 55 c3 04                                   U..U..

0080380c <UPDI::st8(unsigned long, unsigned char)::set_ptr>:
  80380c:	55 48 00 00 00 00                                   UH....

00803812 <UPDI::ld8(unsigned long)::set_ptr>:
  803812:	55 08 00 00 00 00                                   U.....

00803818 <UPDI::get_cs_stat(unsigned char)::set_ptr>:
  803818:	55 00                                               U.

0080381a <UPDI::set_cs_stat(unsigned char, unsigned char)::set_ptr>:
  80381a:	55 00 00                                            U..

0080381d <UPDI::nvmprog_key>:
  80381d:	55 e0 20 67 6f 72 50 4d 56 4e                       U. gorPMVN

00803827 <UPDI::read_sib(unsigned char*)::set_ptr>:
  803827:	55 e6                                               U.

00803829 <UPDI::urowwrite_key>:
  803829:	55 e0 65 74 26 73 55 4d 56 4e                       U.et&sUMVN

00803833 <NVM::before_addr>:
  803833:	ff ff                                               ..

00803835 <UPDI::erase_key>:
  803835:	55 e0 65 73 61 72 45 4d 56 4e                       U.esarEMVN

0080383f <JTAG2::param_baud_rate_val>:
  80383f:	04 00                                               ..

00803841 <JTAG2::before_seqnum>:
  803841:	ff ff                                               ..

00803843 <UPDI::_set_repeat>:
  803843:	55 a0 00 55 04                                      U..U.

00803848 <UPDI::_set_ptr_l>:
  803848:	55 6a 00 00 00 00                                   Uj....

Disassembly of section .text:

00000000 <__vectors>:
__vectors():
../../../../crt1/gcrt1.S:61
       0:	67 c0       	rjmp	.+206    	; 0xd0 <__ctors_end>
       2:	00 00       	nop
../../../../crt1/gcrt1.S:67
       4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
       6:	00 00       	nop
../../../../crt1/gcrt1.S:68
       8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
       a:	00 00       	nop
../../../../crt1/gcrt1.S:69
       c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
       e:	00 00       	nop
../../../../crt1/gcrt1.S:70
      10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
      12:	00 00       	nop
../../../../crt1/gcrt1.S:71
      14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
      16:	00 00       	nop
../../../../crt1/gcrt1.S:72
      18:	c5 c7       	rjmp	.+3978   	; 0xfa4 <__vector_6>
      1a:	00 00       	nop
../../../../crt1/gcrt1.S:73
      1c:	f6 c7       	rjmp	.+4076   	; 0x100a <__vector_7>
      1e:	00 00       	nop
../../../../crt1/gcrt1.S:74
      20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
      22:	00 00       	nop
../../../../crt1/gcrt1.S:75
      24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
      26:	00 00       	nop
../../../../crt1/gcrt1.S:76
      28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
      2a:	00 00       	nop
../../../../crt1/gcrt1.S:77
      2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
      2e:	00 00       	nop
../../../../crt1/gcrt1.S:78
      30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
      32:	00 00       	nop
../../../../crt1/gcrt1.S:79
      34:	ac c7       	rjmp	.+3928   	; 0xf8e <__vector_13>
      36:	00 00       	nop
../../../../crt1/gcrt1.S:80
      38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
      3a:	00 00       	nop
../../../../crt1/gcrt1.S:81
      3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
      3e:	00 00       	nop
../../../../crt1/gcrt1.S:82
      40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
      42:	00 00       	nop
../../../../crt1/gcrt1.S:83
      44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
      46:	00 00       	nop
../../../../crt1/gcrt1.S:84
      48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
      4a:	00 00       	nop
../../../../crt1/gcrt1.S:85
      4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
      4e:	00 00       	nop
../../../../crt1/gcrt1.S:86
      50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
      52:	00 00       	nop
../../../../crt1/gcrt1.S:87
      54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
      56:	00 00       	nop
../../../../crt1/gcrt1.S:88
      58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
      5a:	00 00       	nop
../../../../crt1/gcrt1.S:89
      5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
      5e:	00 00       	nop
../../../../crt1/gcrt1.S:90
      60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
      62:	00 00       	nop
../../../../crt1/gcrt1.S:91
      64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
      66:	00 00       	nop
../../../../crt1/gcrt1.S:92
      68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
      6a:	00 00       	nop
../../../../crt1/gcrt1.S:93
      6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
      6e:	00 00       	nop
../../../../crt1/gcrt1.S:94
      70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
      72:	00 00       	nop
../../../../crt1/gcrt1.S:95
      74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
	...

00000078 <__trampolines_end>:
__trampolines_start():
      78:	86 01       	movw	r16, r12
      7a:	02 35       	cpi	r16, 0x52	; 82
      7c:	07 02       	muls	r16, r23
      7e:	02 22       	and	r0, r18
      80:	06 02       	muls	r16, r22
      82:	00 00       	nop
      84:	00 00       	nop
      86:	00 00       	nop
      88:	55 50       	subi	r21, 0x05	; 5
      8a:	44 49       	sbci	r20, 0x94	; 148
      8c:	34 41       	sbci	r19, 0x14	; 20
      8e:	56 52       	subi	r21, 0x26	; 38
      90:	00 00       	nop
      92:	00 00       	nop
	...

00000095 <JTAG2::BAUD_TABLE>:
      95:	00 00 1b 41 8d 20 47 10 23 08 12 04 b6 02 5b 01     ...A. G.#.....[.
      a5:	da 0a 04 01 ae 00 57 00 2b 00 39 01 9c 00 00 00     ......W.+.9.....
      b5:	00 00 0b 01 c8 00 a0 00 85 00 64 00 50 00 43 00     ..........d.P.C.
      c5:	3c 00 28 00 1b 00 14 00 0d 00 00                    <.(........

000000d0 <__ctors_end>:
__dtors_end():
../../../../crt1/gcrt1.S:230
      d0:	11 24       	eor	r1, r1
../../../../crt1/gcrt1.S:231
      d2:	1f be       	out	0x3f, r1	; 63
../../../../crt1/gcrt1.S:232
      d4:	cf ef       	ldi	r28, 0xFF	; 255
../../../../crt1/gcrt1.S:234
      d6:	cd bf       	out	0x3d, r28	; 61
../../../../crt1/gcrt1.S:236
      d8:	df e3       	ldi	r29, 0x3F	; 63
../../../../crt1/gcrt1.S:237
      da:	de bf       	out	0x3e, r29	; 62

000000dc <__do_copy_data>:
__do_copy_data():
      dc:	18 e3       	ldi	r17, 0x38	; 56
      de:	a0 e0       	ldi	r26, 0x00	; 0
      e0:	b8 e3       	ldi	r27, 0x38	; 56
      e2:	e2 e3       	ldi	r30, 0x32	; 50
      e4:	f7 e1       	ldi	r31, 0x17	; 23
      e6:	02 c0       	rjmp	.+4      	; 0xec <__do_copy_data+0x10>
      e8:	05 90       	lpm	r0, Z+
      ea:	0d 92       	st	X+, r0
      ec:	ae 34       	cpi	r26, 0x4E	; 78
      ee:	b1 07       	cpc	r27, r17
      f0:	d9 f7       	brne	.-10     	; 0xe8 <__do_copy_data+0xc>

000000f2 <__do_clear_bss>:
__do_clear_bss():
      f2:	2a e3       	ldi	r18, 0x3A	; 58
      f4:	ae e4       	ldi	r26, 0x4E	; 78
      f6:	b8 e3       	ldi	r27, 0x38	; 56
      f8:	01 c0       	rjmp	.+2      	; 0xfc <.do_clear_bss_start>

000000fa <.do_clear_bss_loop>:
      fa:	1d 92       	st	X+, r1

000000fc <.do_clear_bss_start>:
      fc:	ae 3a       	cpi	r26, 0xAE	; 174
      fe:	b2 07       	cpc	r27, r18
     100:	e1 f7       	brne	.-8      	; 0xfa <.do_clear_bss_loop>
.do_clear_bss_start():
../../../../crt1/gcrt1.S:314
     102:	a8 d7       	rcall	.+3920   	; 0x1054 <main>
../../../../crt1/gcrt1.S:315
     104:	0c 94 97 0b 	jmp	0x172e	; 0x172e <_exit>

00000108 <__bad_interrupt>:
__vector_22():
../../../../crt1/gcrt1.S:209
     108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <UPDI::RECV()>:
_ZN4UPDI4RECVEv():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:126
    }
  } while (--j);
}

uint8_t UPDI::RECV (void) {
  loop_until_bit_is_set(UPDI_USART.STATUS, USART_RXCIF_bp);
     10a:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
     10e:	87 ff       	sbrs	r24, 7
     110:	fc cf       	rjmp	.-8      	; 0x10a <UPDI::RECV()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:127
  UPDI_LASTH = UPDI_USART.RXDATAH ^ 0x80;
     112:	80 91 01 08 	lds	r24, 0x0801	; 0x800801 <__RODATA_PM_OFFSET__+0x7f8801>
     116:	80 58       	subi	r24, 0x80	; 128
     118:	8f bb       	out	0x1f, r24	; 31
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:133
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  UPDI_LASTL = UPDI_USART.RXDATAL;
  _send_buf_push(UPDI_LASTL);
  return UPDI_LASTL;
  #else
  return UPDI_LASTL = UPDI_USART.RXDATAL;
     11a:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__RODATA_PM_OFFSET__+0x7f8800>
     11e:	8e bb       	out	0x1e, r24	; 30
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:135
  #endif
}
     120:	08 95       	ret

00000122 <UPDI::SEND(unsigned char)>:
_ZN4UPDI4SENDEh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:141

/*
 * UPDI transmission : Verify transmitted value with loopback reception
 */

bool UPDI::SEND (uint8_t _data) {
     122:	cf 93       	push	r28
     124:	c8 2f       	mov	r28, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:146
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  _send_buf_push(_data);
  #endif
  bool _r;
  loop_until_bit_is_set(UPDI_USART.STATUS, USART_DREIF_bp);
     126:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
     12a:	85 ff       	sbrs	r24, 5
     12c:	fc cf       	rjmp	.-8      	; 0x126 <UPDI::SEND(unsigned char)+0x4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:147
  UPDI_USART.STATUS = USART_TXCIF_bm;
     12e:	80 e4       	ldi	r24, 0x40	; 64
     130:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:148
  UPDI_USART.TXDATAL = _data;
     134:	c0 93 02 08 	sts	0x0802, r28	; 0x800802 <__RODATA_PM_OFFSET__+0x7f8802>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:149
  loop_until_bit_is_set(UPDI_USART.STATUS, USART_TXCIF_bp);
     138:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
     13c:	86 ff       	sbrs	r24, 6
     13e:	fc cf       	rjmp	.-8      	; 0x138 <UPDI::SEND(unsigned char)+0x16>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:150
  _r = _data == RECV();
     140:	e4 df       	rcall	.-56     	; 0x10a <UPDI::RECV()>
     142:	98 2f       	mov	r25, r24
     144:	81 e0       	ldi	r24, 0x01	; 1
     146:	9c 13       	cpse	r25, r28
     148:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:151
  if (!_r) bit_set(UPDI_LASTH, 0x20);
     14a:	9c 17       	cp	r25, r28
     14c:	11 f0       	breq	.+4      	; 0x152 <UPDI::SEND(unsigned char)+0x30>
     14e:	9f b3       	in	r25, 0x1f	; 31
     150:	9f bb       	out	0x1f, r25	; 31
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:153
  return _r;
}
     152:	cf 91       	pop	r28
     154:	08 95       	ret

00000156 <UPDI::send_bytes(unsigned char*, unsigned char)>:
_ZN4UPDI10send_bytesEPhh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:179
/*
 * Send byte chunks
 */

/* __attribute__((optimize("O0"))) */
bool UPDI::send_bytes (uint8_t *data, uint8_t len) {
     156:	0f 93       	push	r16
     158:	1f 93       	push	r17
     15a:	cf 93       	push	r28
     15c:	c6 2f       	mov	r28, r22
     15e:	8c 01       	movw	r16, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:181
  do {
    if (!SEND(*data++)) return false;
     160:	f8 01       	movw	r30, r16
     162:	81 91       	ld	r24, Z+
     164:	8f 01       	movw	r16, r30
     166:	dd df       	rcall	.-70     	; 0x122 <UPDI::SEND(unsigned char)>
     168:	88 23       	and	r24, r24
     16a:	11 f0       	breq	.+4      	; 0x170 <UPDI::send_bytes(unsigned char*, unsigned char)+0x1a>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:182
  } while (--len);
     16c:	c1 50       	subi	r28, 0x01	; 1
     16e:	c1 f7       	brne	.-16     	; 0x160 <UPDI::send_bytes(unsigned char*, unsigned char)+0xa>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:184
  return true;
}
     170:	cf 91       	pop	r28
     172:	1f 91       	pop	r17
     174:	0f 91       	pop	r16
     176:	08 95       	ret

00000178 <UPDI::set_cs_stat(unsigned char, unsigned char)>:
_ZN4UPDI11set_cs_statEhh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:336
 * Control status transmission
 */

bool UPDI::set_cs_stat (uint8_t code, uint8_t data) {
  static uint8_t set_ptr[] = { UPDI_SYNCH, 0, 0 };
  set_ptr[1] = UPDI_STCS | code;
     178:	ea e1       	ldi	r30, 0x1A	; 26
     17a:	f8 e3       	ldi	r31, 0x38	; 56
     17c:	80 6c       	ori	r24, 0xC0	; 192
     17e:	81 83       	std	Z+1, r24	; 0x01
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:337
  set_ptr[2] = data;
     180:	62 83       	std	Z+2, r22	; 0x02
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:338
  return send_bytes(set_ptr, sizeof(set_ptr));
     182:	63 e0       	ldi	r22, 0x03	; 3
     184:	cf 01       	movw	r24, r30
     186:	e7 cf       	rjmp	.-50     	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>

00000188 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.21]>:
_ZN4UPDI7sts8rsdEmPhh.constprop.21():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:244
    } while (--repeat);
  }
  return len == 0;
}

bool UPDI::sts8rsd (uint32_t addr, uint8_t *data, uint8_t len) {
     188:	0f 93       	push	r16
     18a:	1f 93       	push	r17
     18c:	cf 93       	push	r28
     18e:	c4 2f       	mov	r28, r20
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:245
  _CAPS32(_set_ptr_l[2])->dword = addr;
     190:	60 93 4a 38 	sts	0x384A, r22	; 0x80384a <UPDI::_set_ptr_l+0x2>
     194:	70 93 4b 38 	sts	0x384B, r23	; 0x80384b <UPDI::_set_ptr_l+0x3>
     198:	80 93 4c 38 	sts	0x384C, r24	; 0x80384c <UPDI::_set_ptr_l+0x4>
     19c:	90 93 4d 38 	sts	0x384D, r25	; 0x80384d <UPDI::_set_ptr_l+0x5>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:246
  _set_repeat[2] = len - 1;
     1a0:	8f ef       	ldi	r24, 0xFF	; 255
     1a2:	84 0f       	add	r24, r20
     1a4:	80 93 45 38 	sts	0x3845, r24	; 0x803845 <UPDI::_set_repeat+0x2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:247
  _set_repeat[4] = UPDI_PTR_INC|UPDI_ST|UPDI_DATA1;
     1a8:	84 e6       	ldi	r24, 0x64	; 100
     1aa:	80 93 47 38 	sts	0x3847, r24	; 0x803847 <UPDI::_set_repeat+0x4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:248
  if (!send_bytes(_set_ptr_l, sizeof(_set_ptr_l) - 1)) return false;
     1ae:	65 e0       	ldi	r22, 0x05	; 5
     1b0:	88 e4       	ldi	r24, 0x48	; 72
     1b2:	98 e3       	ldi	r25, 0x38	; 56
     1b4:	d0 df       	rcall	.-96     	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     1b6:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:249
  if (UPDI_ACK != RECV()) return false;
     1b8:	e1 f0       	breq	.+56     	; 0x1f2 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.21]+0x6a>
     1ba:	a7 df       	rcall	.-178    	; 0x10a <UPDI::RECV()>
     1bc:	80 34       	cpi	r24, 0x40	; 64
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:342
  set_ptr[2] = data;
  return send_bytes(set_ptr, sizeof(set_ptr));
}

bool UPDI::set_cs_ctra (uint8_t data) {
  return set_cs_stat(UPDI_CS_CTRLA, data);
     1be:	c9 f4       	brne	.+50     	; 0x1f2 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.21]+0x6a>
set_cs_ctra():
     1c0:	6b e0       	ldi	r22, 0x0B	; 11
     1c2:	82 e0       	ldi	r24, 0x02	; 2
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:250
  _CAPS32(_set_ptr_l[2])->dword = addr;
  _set_repeat[2] = len - 1;
  _set_repeat[4] = UPDI_PTR_INC|UPDI_ST|UPDI_DATA1;
  if (!send_bytes(_set_ptr_l, sizeof(_set_ptr_l) - 1)) return false;
  if (UPDI_ACK != RECV()) return false;
  if (!set_cs_ctra(UPDI_GTVAL_RSD)) return false;
     1c4:	d9 df       	rcall	.-78     	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>
_ZN4UPDI7sts8rsdEmPhh.constprop.21():
     1c6:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:251
  if (!send_bytes(_set_repeat, sizeof(_set_repeat))) return false;
     1c8:	a1 f0       	breq	.+40     	; 0x1f2 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.21]+0x6a>
     1ca:	65 e0       	ldi	r22, 0x05	; 5
     1cc:	83 e4       	ldi	r24, 0x43	; 67
     1ce:	98 e3       	ldi	r25, 0x38	; 56
     1d0:	c2 df       	rcall	.-124    	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     1d2:	88 23       	and	r24, r24
     1d4:	71 f0       	breq	.+28     	; 0x1f2 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.21]+0x6a>
     1d6:	02 ea       	ldi	r16, 0xA2	; 162
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:253
  do {              /* Repeat byte send */
    SEND(*data++);  /* Submission errors must be ignored */
     1d8:	18 e3       	ldi	r17, 0x38	; 56
     1da:	f8 01       	movw	r30, r16
     1dc:	81 91       	ld	r24, Z+
     1de:	8f 01       	movw	r16, r30
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:254
  } while (--len);
     1e0:	a0 df       	rcall	.-192    	; 0x122 <UPDI::SEND(unsigned char)>
     1e2:	c1 50       	subi	r28, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:342
  set_ptr[2] = data;
  return send_bytes(set_ptr, sizeof(set_ptr));
}

bool UPDI::set_cs_ctra (uint8_t data) {
  return set_cs_stat(UPDI_CS_CTRLA, data);
     1e4:	d1 f7       	brne	.-12     	; 0x1da <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.21]+0x52>
set_cs_ctra():
     1e6:	63 e0       	ldi	r22, 0x03	; 3
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:257
  do {              /* Repeat byte send */
    SEND(*data++);  /* Submission errors must be ignored */
  } while (--len);
  if (!set_cs_ctra(UPDI_GTVAL)) return false;
  return true;
}
     1e8:	82 e0       	ldi	r24, 0x02	; 2
_ZN4UPDI7sts8rsdEmPhh.constprop.21():
     1ea:	cf 91       	pop	r28
     1ec:	1f 91       	pop	r17
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:342
  set_ptr[2] = data;
  return send_bytes(set_ptr, sizeof(set_ptr));
}

bool UPDI::set_cs_ctra (uint8_t data) {
  return set_cs_stat(UPDI_CS_CTRLA, data);
     1ee:	0f 91       	pop	r16
set_cs_ctra():
     1f0:	c3 cf       	rjmp	.-122    	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>
_ZN4UPDI7sts8rsdEmPhh.constprop.21():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:257
  do {              /* Repeat byte send */
    SEND(*data++);  /* Submission errors must be ignored */
  } while (--len);
  if (!set_cs_ctra(UPDI_GTVAL)) return false;
  return true;
}
     1f2:	80 e0       	ldi	r24, 0x00	; 0
     1f4:	cf 91       	pop	r28
     1f6:	1f 91       	pop	r17
     1f8:	0f 91       	pop	r16
     1fa:	08 95       	ret

000001fc <UPDI::sts16rsd(unsigned long, unsigned char*, unsigned int) [clone .constprop.11]>:
_ZN4UPDI8sts16rsdEmPhj.constprop.11():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:259

bool UPDI::sts16rsd (uint32_t addr, uint8_t *data, size_t len) {
     1fc:	1f 93       	push	r17
     1fe:	cf 93       	push	r28
     200:	df 93       	push	r29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:260
  _CAPS32(_set_ptr_l[2])->dword = addr;
     202:	60 93 4a 38 	sts	0x384A, r22	; 0x80384a <UPDI::_set_ptr_l+0x2>
     206:	70 93 4b 38 	sts	0x384B, r23	; 0x80384b <UPDI::_set_ptr_l+0x3>
     20a:	80 93 4c 38 	sts	0x384C, r24	; 0x80384c <UPDI::_set_ptr_l+0x4>
     20e:	90 93 4d 38 	sts	0x384D, r25	; 0x80384d <UPDI::_set_ptr_l+0x5>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:261
  uint8_t repeat = len >> 1;
     212:	56 95       	lsr	r21
     214:	47 95       	ror	r20
     216:	14 2f       	mov	r17, r20
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:262
  _set_repeat[2] = repeat - 1;
     218:	41 50       	subi	r20, 0x01	; 1
     21a:	40 93 45 38 	sts	0x3845, r20	; 0x803845 <UPDI::_set_repeat+0x2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:263
  _set_repeat[4] = UPDI_PTR_INC|UPDI_ST|UPDI_DATA2;
     21e:	85 e6       	ldi	r24, 0x65	; 101
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:264
  if (!send_bytes(_set_ptr_l, sizeof(_set_ptr_l) - 1)) return false;
     220:	80 93 47 38 	sts	0x3847, r24	; 0x803847 <UPDI::_set_repeat+0x4>
     224:	65 e0       	ldi	r22, 0x05	; 5
     226:	88 e4       	ldi	r24, 0x48	; 72
     228:	98 e3       	ldi	r25, 0x38	; 56
     22a:	95 df       	rcall	.-214    	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:265
  if (UPDI_ACK != RECV()) return false;
     22c:	88 23       	and	r24, r24
     22e:	f1 f0       	breq	.+60     	; 0x26c <UPDI::sts16rsd(unsigned long, unsigned char*, unsigned int) [clone .constprop.11]+0x70>
     230:	6c df       	rcall	.-296    	; 0x10a <UPDI::RECV()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:342
  set_ptr[2] = data;
  return send_bytes(set_ptr, sizeof(set_ptr));
}

bool UPDI::set_cs_ctra (uint8_t data) {
  return set_cs_stat(UPDI_CS_CTRLA, data);
     232:	80 34       	cpi	r24, 0x40	; 64
     234:	d9 f4       	brne	.+54     	; 0x26c <UPDI::sts16rsd(unsigned long, unsigned char*, unsigned int) [clone .constprop.11]+0x70>
set_cs_ctra():
     236:	6b e0       	ldi	r22, 0x0B	; 11
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:266
  uint8_t repeat = len >> 1;
  _set_repeat[2] = repeat - 1;
  _set_repeat[4] = UPDI_PTR_INC|UPDI_ST|UPDI_DATA2;
  if (!send_bytes(_set_ptr_l, sizeof(_set_ptr_l) - 1)) return false;
  if (UPDI_ACK != RECV()) return false;
  if (!set_cs_ctra(UPDI_GTVAL_RSD)) return false;
     238:	82 e0       	ldi	r24, 0x02	; 2
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:267
  if (!send_bytes(_set_repeat, sizeof(_set_repeat))) return false;
     23a:	9e df       	rcall	.-196    	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>
_ZN4UPDI8sts16rsdEmPhj.constprop.11():
     23c:	88 23       	and	r24, r24
     23e:	b1 f0       	breq	.+44     	; 0x26c <UPDI::sts16rsd(unsigned long, unsigned char*, unsigned int) [clone .constprop.11]+0x70>
     240:	65 e0       	ldi	r22, 0x05	; 5
     242:	83 e4       	ldi	r24, 0x43	; 67
     244:	98 e3       	ldi	r25, 0x38	; 56
     246:	87 df       	rcall	.-242    	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     248:	88 23       	and	r24, r24
     24a:	81 f0       	breq	.+32     	; 0x26c <UPDI::sts16rsd(unsigned long, unsigned char*, unsigned int) [clone .constprop.11]+0x70>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:269
  do {              /* Repeat word send */
    SEND(*data++);  /* Submission errors must be ignored */
     24c:	c0 e9       	ldi	r28, 0x90	; 144
     24e:	d8 e3       	ldi	r29, 0x38	; 56
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:270
    SEND(*data++);  /* Submission errors must be ignored */
     250:	8a 89       	ldd	r24, Y+18	; 0x12
     252:	67 df       	rcall	.-306    	; 0x122 <UPDI::SEND(unsigned char)>
     254:	8b 89       	ldd	r24, Y+19	; 0x13
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:271
  } while (--repeat);
     256:	65 df       	rcall	.-310    	; 0x122 <UPDI::SEND(unsigned char)>
     258:	11 50       	subi	r17, 0x01	; 1
     25a:	22 96       	adiw	r28, 0x02	; 2
     25c:	11 11       	cpse	r17, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:342
  set_ptr[2] = data;
  return send_bytes(set_ptr, sizeof(set_ptr));
}

bool UPDI::set_cs_ctra (uint8_t data) {
  return set_cs_stat(UPDI_CS_CTRLA, data);
     25e:	f8 cf       	rjmp	.-16     	; 0x250 <UPDI::sts16rsd(unsigned long, unsigned char*, unsigned int) [clone .constprop.11]+0x54>
set_cs_ctra():
     260:	63 e0       	ldi	r22, 0x03	; 3
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:274
    SEND(*data++);  /* Submission errors must be ignored */
    SEND(*data++);  /* Submission errors must be ignored */
  } while (--repeat);
  if (!set_cs_ctra(UPDI_GTVAL)) return false;
  return true;
}
     262:	82 e0       	ldi	r24, 0x02	; 2
_ZN4UPDI8sts16rsdEmPhj.constprop.11():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:342
  set_ptr[2] = data;
  return send_bytes(set_ptr, sizeof(set_ptr));
}

bool UPDI::set_cs_ctra (uint8_t data) {
  return set_cs_stat(UPDI_CS_CTRLA, data);
     264:	df 91       	pop	r29
     266:	cf 91       	pop	r28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:274
    SEND(*data++);  /* Submission errors must be ignored */
    SEND(*data++);  /* Submission errors must be ignored */
  } while (--repeat);
  if (!set_cs_ctra(UPDI_GTVAL)) return false;
  return true;
}
     268:	1f 91       	pop	r17
set_cs_ctra():
     26a:	86 cf       	rjmp	.-244    	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>
_ZN4UPDI8sts16rsdEmPhj.constprop.11():
     26c:	80 e0       	ldi	r24, 0x00	; 0
     26e:	df 91       	pop	r29
     270:	cf 91       	pop	r28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:313
 * Control status reception
 */

uint8_t UPDI::get_cs_stat (uint8_t code) {
  static uint8_t set_ptr[] = { UPDI_SYNCH, 0 };
  set_ptr[1] = UPDI_LDCS | code;
     272:	1f 91       	pop	r17
     274:	08 95       	ret

00000276 <UPDI::get_cs_stat(unsigned char)>:
_ZN4UPDI11get_cs_statEh():
     276:	80 68       	ori	r24, 0x80	; 128
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:314
  send_bytes(set_ptr, sizeof(set_ptr));
     278:	80 93 19 38 	sts	0x3819, r24	; 0x803819 <UPDI::get_cs_stat(unsigned char)::set_ptr+0x1>
     27c:	62 e0       	ldi	r22, 0x02	; 2
     27e:	88 e1       	ldi	r24, 0x18	; 24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:315
  return RECV();
     280:	98 e3       	ldi	r25, 0x38	; 56
     282:	69 df       	rcall	.-302    	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:204

/*
 * Single byte transmission
 */

bool UPDI::st8 (uint32_t addr, uint8_t data) {
     284:	42 cf       	rjmp	.-380    	; 0x10a <UPDI::RECV()>

00000286 <UPDI::st8(unsigned long, unsigned char)>:
_ZN4UPDI3st8Emh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:210
  static uint8_t set_ptr[] = {
      UPDI_SYNCH
    , UPDI_STS | UPDI_ADDR3 | UPDI_DATA1
    , 0, 0, 0, 0    // 24bit address
  };
  _CAPS32(set_ptr[2])->dword = addr;
     286:	cf 93       	push	r28
     288:	c4 2f       	mov	r28, r20
     28a:	60 93 0e 38 	sts	0x380E, r22	; 0x80380e <UPDI::st8(unsigned long, unsigned char)::set_ptr+0x2>
     28e:	70 93 0f 38 	sts	0x380F, r23	; 0x80380f <UPDI::st8(unsigned long, unsigned char)::set_ptr+0x3>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:211
  if (!send_bytes(set_ptr, sizeof(set_ptr) - 1)) return false;
     292:	80 93 10 38 	sts	0x3810, r24	; 0x803810 <UPDI::st8(unsigned long, unsigned char)::set_ptr+0x4>
     296:	90 93 11 38 	sts	0x3811, r25	; 0x803811 <UPDI::st8(unsigned long, unsigned char)::set_ptr+0x5>
     29a:	65 e0       	ldi	r22, 0x05	; 5
     29c:	8c e0       	ldi	r24, 0x0C	; 12
     29e:	98 e3       	ldi	r25, 0x38	; 56
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:214
  if (UPDI_ACK != RECV()) return false;
  if (!SEND(data)) return false;
  return UPDI_ACK == RECV();
     2a0:	5a df       	rcall	.-332    	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     2a2:	81 11       	cpse	r24, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:212
    , UPDI_STS | UPDI_ADDR3 | UPDI_DATA1
    , 0, 0, 0, 0    // 24bit address
  };
  _CAPS32(set_ptr[2])->dword = addr;
  if (!send_bytes(set_ptr, sizeof(set_ptr) - 1)) return false;
  if (UPDI_ACK != RECV()) return false;
     2a4:	02 c0       	rjmp	.+4      	; 0x2aa <UPDI::st8(unsigned long, unsigned char)+0x24>
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	0b c0       	rjmp	.+22     	; 0x2c0 <UPDI::st8(unsigned long, unsigned char)+0x3a>
     2aa:	2f df       	rcall	.-418    	; 0x10a <UPDI::RECV()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:213
  if (!SEND(data)) return false;
     2ac:	80 34       	cpi	r24, 0x40	; 64
     2ae:	d9 f7       	brne	.-10     	; 0x2a6 <UPDI::st8(unsigned long, unsigned char)+0x20>
     2b0:	8c 2f       	mov	r24, r28
     2b2:	37 df       	rcall	.-402    	; 0x122 <UPDI::SEND(unsigned char)>
     2b4:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:214
  return UPDI_ACK == RECV();
     2b6:	b9 f3       	breq	.-18     	; 0x2a6 <UPDI::st8(unsigned long, unsigned char)+0x20>
     2b8:	28 df       	rcall	.-432    	; 0x10a <UPDI::RECV()>
     2ba:	91 e0       	ldi	r25, 0x01	; 1
     2bc:	80 34       	cpi	r24, 0x40	; 64
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:215
}
     2be:	99 f7       	brne	.-26     	; 0x2a6 <UPDI::st8(unsigned long, unsigned char)+0x20>
     2c0:	89 2f       	mov	r24, r25
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:192
 * Repeat header transmission
 */

/* __attribute__((optimize("O0"))) */
bool UPDI::send_repeat_header (uint32_t addr, uint8_t cmd, uint8_t len) {
  _CAPS32(_set_ptr_l[2])->dword = addr;
     2c2:	cf 91       	pop	r28
     2c4:	08 95       	ret

000002c6 <UPDI::send_repeat_header(unsigned long, unsigned char, unsigned char)>:
_ZN4UPDI18send_repeat_headerEmhh():
     2c6:	60 93 4a 38 	sts	0x384A, r22	; 0x80384a <UPDI::_set_ptr_l+0x2>
     2ca:	70 93 4b 38 	sts	0x384B, r23	; 0x80384b <UPDI::_set_ptr_l+0x3>
     2ce:	80 93 4c 38 	sts	0x384C, r24	; 0x80384c <UPDI::_set_ptr_l+0x4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:193
  _set_repeat[2] = len - 1;
     2d2:	90 93 4d 38 	sts	0x384D, r25	; 0x80384d <UPDI::_set_ptr_l+0x5>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:194
  _set_repeat[4] = UPDI_PTR_INC | cmd;  // ST,LD + DATA1,DATA2
     2d6:	21 50       	subi	r18, 0x01	; 1
     2d8:	20 93 45 38 	sts	0x3845, r18	; 0x803845 <UPDI::_set_repeat+0x2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:195
  if (!send_bytes(_set_ptr_l, sizeof(_set_ptr_l) - 1)) return false;
     2dc:	44 60       	ori	r20, 0x04	; 4
     2de:	40 93 47 38 	sts	0x3847, r20	; 0x803847 <UPDI::_set_repeat+0x4>
     2e2:	65 e0       	ldi	r22, 0x05	; 5
     2e4:	88 e4       	ldi	r24, 0x48	; 72
     2e6:	98 e3       	ldi	r25, 0x38	; 56
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:196
  if (UPDI_ACK != RECV()) return false;
     2e8:	36 df       	rcall	.-404    	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     2ea:	88 23       	and	r24, r24
     2ec:	39 f0       	breq	.+14     	; 0x2fc <UPDI::send_repeat_header(unsigned long, unsigned char, unsigned char)+0x36>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:197
  return send_bytes(_set_repeat, sizeof(_set_repeat));
     2ee:	0d df       	rcall	.-486    	; 0x10a <UPDI::RECV()>
     2f0:	80 34       	cpi	r24, 0x40	; 64
     2f2:	21 f4       	brne	.+8      	; 0x2fc <UPDI::send_repeat_header(unsigned long, unsigned char, unsigned char)+0x36>
     2f4:	65 e0       	ldi	r22, 0x05	; 5
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:198
}
     2f6:	83 e4       	ldi	r24, 0x43	; 67
     2f8:	98 e3       	ldi	r25, 0x38	; 56
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:221

/*
 * Transmission
 */

bool UPDI::sts8 (uint32_t addr, uint8_t *data, uint8_t len) {
     2fa:	2d cf       	rjmp	.-422    	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	08 95       	ret

00000300 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)>:
_ZN4UPDI4sts8EmPhh():
     300:	ff 92       	push	r15
     302:	0f 93       	push	r16
     304:	1f 93       	push	r17
     306:	cf 93       	push	r28
     308:	df 93       	push	r29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:222
  if (send_repeat_header(addr, UPDI_ST|UPDI_DATA1, len)) {
     30a:	f4 2e       	mov	r15, r20
     30c:	d5 2f       	mov	r29, r21
     30e:	c2 2f       	mov	r28, r18
     310:	40 e6       	ldi	r20, 0x60	; 96
     312:	d9 df       	rcall	.-78     	; 0x2c6 <UPDI::send_repeat_header(unsigned long, unsigned char, unsigned char)>
     314:	88 23       	and	r24, r24
     316:	69 f0       	breq	.+26     	; 0x332 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)+0x32>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:224
    do {
      if (!SEND(*data++)) break;
     318:	0f 2d       	mov	r16, r15
     31a:	1d 2f       	mov	r17, r29
     31c:	f8 01       	movw	r30, r16
     31e:	81 91       	ld	r24, Z+
     320:	8f 01       	movw	r16, r30
     322:	ff de       	rcall	.-514    	; 0x122 <UPDI::SEND(unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:225
      if (UPDI_ACK != RECV()) break;
     324:	88 23       	and	r24, r24
     326:	29 f0       	breq	.+10     	; 0x332 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)+0x32>
     328:	f0 de       	rcall	.-544    	; 0x10a <UPDI::RECV()>
     32a:	80 34       	cpi	r24, 0x40	; 64
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:226
    } while (--len);
     32c:	11 f4       	brne	.+4      	; 0x332 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)+0x32>
     32e:	c1 50       	subi	r28, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:228
  }
  return len == 0;
     330:	a9 f7       	brne	.-22     	; 0x31c <UPDI::sts8(unsigned long, unsigned char*, unsigned char)+0x1c>
     332:	81 e0       	ldi	r24, 0x01	; 1
     334:	c1 11       	cpse	r28, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:229
}
     336:	80 e0       	ldi	r24, 0x00	; 0
     338:	df 91       	pop	r29
     33a:	cf 91       	pop	r28
     33c:	1f 91       	pop	r17
     33e:	0f 91       	pop	r16
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:157
  return _r;
}

/* BREAK character : Generated by slowing down the sending speed */
void UPDI::BREAK (void) {
  loop_until_bit_is_set(UPDI_USART.STATUS, USART_DREIF_bp);
     340:	ff 90       	pop	r15
     342:	08 95       	ret

00000344 <UPDI::BREAK()>:
_ZN4UPDI5BREAKEv():
     344:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:158
  UPDI_USART.BAUD = UPDI_BAUD_BREAK;
     348:	85 ff       	sbrs	r24, 5
     34a:	fc cf       	rjmp	.-8      	; 0x344 <UPDI::BREAK()>
     34c:	80 ec       	ldi	r24, 0xC0	; 192
     34e:	94 e4       	ldi	r25, 0x44	; 68
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:160
  /* Maintains low level signal at least 768bit long */
  SEND(UPDI_NOP);
     350:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__RODATA_PM_OFFSET__+0x7f8808>
     354:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__RODATA_PM_OFFSET__+0x7f8809>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:161
  UPDI_USART.BAUD = UPDI_BAUD_CALC;
     358:	80 e0       	ldi	r24, 0x00	; 0
     35a:	e3 de       	rcall	.-570    	; 0x122 <UPDI::SEND(unsigned char)>
     35c:	80 eb       	ldi	r24, 0xB0	; 176
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__RODATA_PM_OFFSET__+0x7f8808>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:163
  bit_clear(UPDI_CONTROL, UPDI_CLKU_bp);
}
     364:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__RODATA_PM_OFFSET__+0x7f8809>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:286
  static uint8_t set_ptr[] = {
      UPDI_SYNCH
    , UPDI_LDS|UPDI_ADDR3|UPDI_DATA1
    , 0, 0, 0, 0  // 24bit address
  };
  _CAPS16(set_ptr[2])->word = (uint16_t)addr;
     368:	e6 98       	cbi	0x1c, 6	; 28
     36a:	08 95       	ret

0000036c <UPDI::ld8(unsigned long)>:
_ZN4UPDI3ld8Em():
     36c:	60 93 14 38 	sts	0x3814, r22	; 0x803814 <UPDI::ld8(unsigned long)::set_ptr+0x2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:287
  while (!send_bytes(set_ptr, sizeof(set_ptr) - 1)) BREAK();
     370:	70 93 15 38 	sts	0x3815, r23	; 0x803815 <UPDI::ld8(unsigned long)::set_ptr+0x3>
     374:	65 e0       	ldi	r22, 0x05	; 5
     376:	82 e1       	ldi	r24, 0x12	; 18
     378:	98 e3       	ldi	r25, 0x38	; 56
     37a:	ed de       	rcall	.-550    	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     37c:	81 11       	cpse	r24, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:288
  return RECV();
     37e:	02 c0       	rjmp	.+4      	; 0x384 <UPDI::ld8(unsigned long)+0x18>
     380:	e1 df       	rcall	.-62     	; 0x344 <UPDI::BREAK()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:115
/*
 * UPDI reception
 */

void UPDI::drain (void) {
  uint8_t j = 0;
     382:	f8 cf       	rjmp	.-16     	; 0x374 <UPDI::ld8(unsigned long)+0x8>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:117
  do {
    if (bit_is_set(UPDI_USART.STATUS, USART_RXCIF_bp)) {
     384:	c2 ce       	rjmp	.-636    	; 0x10a <UPDI::RECV()>

00000386 <UPDI::drain()>:
_ZN4UPDI5drainEv():
     386:	80 e0       	ldi	r24, 0x00	; 0
     388:	90 91 04 08 	lds	r25, 0x0804	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:118
      UPDI_LASTH = UPDI_USART.RXDATAH ^ 0x80;
     38c:	97 ff       	sbrs	r25, 7
     38e:	08 c0       	rjmp	.+16     	; 0x3a0 <UPDI::drain()+0x1a>
     390:	80 91 01 08 	lds	r24, 0x0801	; 0x800801 <__RODATA_PM_OFFSET__+0x7f8801>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:119
      UPDI_LASTL = UPDI_USART.RXDATAL;
     394:	80 58       	subi	r24, 0x80	; 128
     396:	8f bb       	out	0x1f, r24	; 31
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:120
      j = 0;
     398:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__RODATA_PM_OFFSET__+0x7f8800>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:122
    }
  } while (--j);
     39c:	8e bb       	out	0x1e, r24	; 30
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:123
}
     39e:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:105
    return send_bytes(set_ptr_off, sizeof(set_ptr_off));
}

/* This only does a system reset */
bool UPDI::updi_reset (bool logic) {
  return set_cs_stat(
     3a0:	81 50       	subi	r24, 0x01	; 1
     3a2:	91 f7       	brne	.-28     	; 0x388 <UPDI::drain()+0x2>
     3a4:	08 95       	ret

000003a6 <UPDI::updi_reset(bool)>:
_ZN4UPDI10updi_resetEb():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:107
    UPDI_CS_ASI_RESET_REQ,
    (logic ? UPDI_RSTREQ : UPDI_NOP));
     3a6:	60 e0       	ldi	r22, 0x00	; 0
     3a8:	81 11       	cpse	r24, r1
     3aa:	69 e5       	ldi	r22, 0x59	; 89
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:78
  UPDI_USART.CTRLB = UPDI_USART_ON;
  bit_clear(UPDI_CONTROL, UPDI_CLKU_bp);
}

/* This special system reset will log you out of UPDI */
bool UPDI::Target_Reset (bool _enable) {
     3ac:	88 e0       	ldi	r24, 0x08	; 8
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:95
    , UPDI_NOP
    , UPDI_SYNCH
    , UPDI_STCS | UPDI_CS_CTRLB
    , UPDI_SET_UPDIDIS
  };
  if (!digitalRead(UPDI_TDAT_PIN)) return false;
     3ae:	e4 ce       	rjmp	.-568    	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>

000003b0 <UPDI::Target_Reset(bool)>:
_ZN4UPDI12Target_ResetEb():
     3b0:	cf 93       	push	r28
     3b2:	11 9b       	sbis	0x02, 1	; 2
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:96
  BREAK();
     3b4:	0b c0       	rjmp	.+22     	; 0x3cc <UPDI::Target_Reset(bool)+0x1c>
     3b6:	c8 2f       	mov	r28, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:98
  if (_enable) 
    return send_bytes(set_ptr_on, sizeof(set_ptr_on));
     3b8:	c5 df       	rcall	.-118    	; 0x344 <UPDI::BREAK()>
     3ba:	66 e0       	ldi	r22, 0x06	; 6
     3bc:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:97
    , UPDI_STCS | UPDI_CS_CTRLB
    , UPDI_SET_UPDIDIS
  };
  if (!digitalRead(UPDI_TDAT_PIN)) return false;
  BREAK();
  if (_enable) 
     3be:	98 e3       	ldi	r25, 0x38	; 56
     3c0:	c1 11       	cpse	r28, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:100
    return send_bytes(set_ptr_on, sizeof(set_ptr_on));
  else
    return send_bytes(set_ptr_off, sizeof(set_ptr_off));
     3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <UPDI::Target_Reset(bool)+0x18>
     3c4:	86 e0       	ldi	r24, 0x06	; 6
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:101
}
     3c6:	98 e3       	ldi	r25, 0x38	; 56
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:100
  if (!digitalRead(UPDI_TDAT_PIN)) return false;
  BREAK();
  if (_enable) 
    return send_bytes(set_ptr_on, sizeof(set_ptr_on));
  else
    return send_bytes(set_ptr_off, sizeof(set_ptr_off));
     3c8:	cf 91       	pop	r28
     3ca:	c5 ce       	rjmp	.-630    	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:101
}
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	cf 91       	pop	r28
     3d0:	08 95       	ret

000003d2 <LED_TCB1(unsigned char, unsigned int)>:
_Z8LED_TCB1hj():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:139
    LEDG_EVOUT = EVSYS_USER_CHANNEL2_gc;
  }
}

void LED_TCB1 (uint8_t mode, uint16_t ccmp) {
  if (TIM::mode != mode) {
     3d2:	90 91 65 38 	lds	r25, 0x3865	; 0x803865 <TIM::mode>
     3d6:	98 17       	cp	r25, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:140
    TIM::mode = mode;
     3d8:	81 f0       	breq	.+32     	; 0x3fa <LED_TCB1(unsigned char, unsigned int)+0x28>
     3da:	80 93 65 38 	sts	0x3865, r24	; 0x803865 <TIM::mode>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:141
    TCB1_CCMP = ccmp;
     3de:	60 93 9c 0a 	sts	0x0A9C, r22	; 0x800a9c <__RODATA_PM_OFFSET__+0x7f8a9c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:142
    TCB1_CNT = 0;
     3e2:	70 93 9d 0a 	sts	0x0A9D, r23	; 0x800a9d <__RODATA_PM_OFFSET__+0x7f8a9d>
     3e6:	10 92 9a 0a 	sts	0x0A9A, r1	; 0x800a9a <__RODATA_PM_OFFSET__+0x7f8a9a>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:143
    TCB1_CTRLA = TCB_RUNSTDBY_bm | TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
     3ea:	10 92 9b 0a 	sts	0x0A9B, r1	; 0x800a9b <__RODATA_PM_OFFSET__+0x7f8a9b>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:144
    LEDG_EVOUT = EVSYS_USER_CHANNEL0_gc;
     3ee:	8f e4       	ldi	r24, 0x4F	; 79
     3f0:	80 93 90 0a 	sts	0x0A90, r24	; 0x800a90 <__RODATA_PM_OFFSET__+0x7f8a90>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:146
  }
}
     3f4:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:116
    TCB0_CTRLA = TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
  }
}

void TIM::Timeout_Stop (void) {
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     3f6:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <__RODATA_PM_OFFSET__+0x7f81a9>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:117
    TCB0_CTRLA = 0;
     3fa:	08 95       	ret

000003fc <TIM::Timeout_Stop()>:
_ZN3TIM12Timeout_StopEv():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:118
    TCB0_INTFLAGS = TCB_CAPT_bm;
     3fc:	8f b7       	in	r24, 0x3f	; 63
__iCliRetVal():
     3fe:	f8 94       	cli
_ZN3TIM12Timeout_StopEv():
     400:	10 92 80 0a 	sts	0x0A80, r1	; 0x800a80 <__RODATA_PM_OFFSET__+0x7f8a80>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:120
  }
  reti();
     404:	91 e0       	ldi	r25, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:121
}
     406:	90 93 86 0a 	sts	0x0A86, r25	; 0x800a86 <__RODATA_PM_OFFSET__+0x7f8a86>
__iRestore():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:69
    return UPDI_LASTL;
  }

  /* NVMCTRL version 0,2,3,4,5 */
  bool nvm_ctrl (uint8_t nvmcmd) {
    return UPDI::st8(NVMCTRL_REG_CTRLA, nvmcmd);
     40a:	8f bf       	out	0x3f, r24	; 63
_ZN3TIM12Timeout_StopEv():
     40c:	18 95       	reti
     40e:	08 95       	ret

00000410 <NVM::nvm_ctrl(unsigned char)>:
_ZN3NVM8nvm_ctrlEh():
     410:	48 2f       	mov	r20, r24
     412:	60 e0       	ldi	r22, 0x00	; 0
     414:	70 e1       	ldi	r23, 0x10	; 16
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:73
  }

  /* NVMCTRL version 2,3,4,5 */
  bool nvm_ctrl_change (uint8_t nvmcmd) {
     416:	80 e0       	ldi	r24, 0x00	; 0
     418:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:74
    if (UPDI::ld8(NVMCTRL_REG_CTRLA) == nvmcmd) return true;
     41a:	35 cf       	rjmp	.-406    	; 0x286 <UPDI::st8(unsigned long, unsigned char)>

0000041c <NVM::nvm_ctrl_change(unsigned char)>:
_ZN3NVM15nvm_ctrl_changeEh():
     41c:	cf 93       	push	r28
     41e:	c8 2f       	mov	r28, r24
     420:	60 e0       	ldi	r22, 0x00	; 0
     422:	70 e1       	ldi	r23, 0x10	; 16
     424:	80 e0       	ldi	r24, 0x00	; 0
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	a1 df       	rcall	.-190    	; 0x36c <UPDI::ld8(unsigned long)>
     42a:	8c 13       	cpse	r24, r28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:78
    if (!nvm_ctrl(NVM_CMD_NOCMD)) return false;
    if (NVM_CMD_NOCMD != nvmcmd) return nvm_ctrl(nvmcmd);
    return true;
  }
     42c:	03 c0       	rjmp	.+6      	; 0x434 <NVM::nvm_ctrl_change(unsigned char)+0x18>
     42e:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:75
  }

  /* NVMCTRL version 2,3,4,5 */
  bool nvm_ctrl_change (uint8_t nvmcmd) {
    if (UPDI::ld8(NVMCTRL_REG_CTRLA) == nvmcmd) return true;
    if (!nvm_ctrl(NVM_CMD_NOCMD)) return false;
     430:	cf 91       	pop	r28
     432:	08 95       	ret
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	ec df       	rcall	.-40     	; 0x410 <NVM::nvm_ctrl(unsigned char)>
     438:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:76
    if (NVM_CMD_NOCMD != nvmcmd) return nvm_ctrl(nvmcmd);
     43a:	d1 f3       	breq	.-12     	; 0x430 <NVM::nvm_ctrl_change(unsigned char)+0x14>
     43c:	cc 23       	and	r28, r28
     43e:	b9 f3       	breq	.-18     	; 0x42e <NVM::nvm_ctrl_change(unsigned char)+0x12>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:78
    return true;
  }
     440:	8c 2f       	mov	r24, r28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:76

  /* NVMCTRL version 2,3,4,5 */
  bool nvm_ctrl_change (uint8_t nvmcmd) {
    if (UPDI::ld8(NVMCTRL_REG_CTRLA) == nvmcmd) return true;
    if (!nvm_ctrl(NVM_CMD_NOCMD)) return false;
    if (NVM_CMD_NOCMD != nvmcmd) return nvm_ctrl(nvmcmd);
     442:	cf 91       	pop	r28
     444:	e5 cf       	rjmp	.-54     	; 0x410 <NVM::nvm_ctrl(unsigned char)>

00000446 <JTAG2::set_response(JTAG2::jtag_response_e)>:
_ZN5JTAG212set_responseENS_15jtag_response_eE():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:470
/*****************
 * JTAG Response *
 *****************/

void JTAG2::set_response (jtag_response_e response_code) {
  packet.size_word[0] = 4;
     446:	e0 e9       	ldi	r30, 0x90	; 144
     448:	f8 e3       	ldi	r31, 0x38	; 56
     44a:	24 e0       	ldi	r18, 0x04	; 4
     44c:	30 e0       	ldi	r19, 0x00	; 0
     44e:	23 83       	std	Z+3, r18	; 0x03
     450:	34 83       	std	Z+4, r19	; 0x04
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:472
  /* response number */
  packet.body[MESSAGE_ID] = response_code;
     452:	80 87       	std	Z+8, r24	; 0x08
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:474
  /* Internal status flag */
  packet.body[RSP_DATA    ] = UPDI_CONTROL;
     454:	8c b3       	in	r24, 0x1c	; 28
     456:	81 87       	std	Z+9, r24	; 0x09
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:475
  packet.body[RSP_DATA + 1] = UPDI_NVMCTRL;
     458:	8d b3       	in	r24, 0x1d	; 29
     45a:	82 87       	std	Z+10, r24	; 0x0a
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:476
  packet.body[RSP_DATA + 2] = updi_desc.hvupdi_variant;
     45c:	80 91 68 38 	lds	r24, 0x3868	; 0x803868 <JTAG2::updi_desc+0x2>
     460:	83 87       	std	Z+11, r24	; 0x0b
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:477
}
     462:	08 95       	ret

00000464 <_crc_ccitt_update(unsigned int, unsigned char)>:
_ZL17_crc_ccitt_updatejh():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/crc16.h:285
        "eor    %A0,__tmp_reg__"

        : "=d" (__ret)
        : "r" (__data), "0" (__crc)
        : "r0"
    );
     464:	86 27       	eor	r24, r22
     466:	08 2e       	mov	r0, r24
     468:	82 95       	swap	r24
     46a:	80 7f       	andi	r24, 0xF0	; 240
     46c:	80 25       	eor	r24, r0
     46e:	09 2e       	mov	r0, r25
     470:	98 2f       	mov	r25, r24
     472:	82 95       	swap	r24
     474:	8f 70       	andi	r24, 0x0F	; 15
     476:	08 26       	eor	r0, r24
     478:	86 95       	lsr	r24
     47a:	98 27       	eor	r25, r24
     47c:	89 27       	eor	r24, r25
     47e:	88 0f       	add	r24, r24
     480:	88 0f       	add	r24, r24
     482:	88 0f       	add	r24, r24
     484:	80 25       	eor	r24, r0
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/crc16.h:287
    return __ret;
}
     486:	08 95       	ret

00000488 <JTAG2::answer_transfer()>:
_ZN5JTAG215answer_transferEv():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:150

  /***************
   * JTAG Answer *
   ***************/

  void answer_transfer (void) {
     488:	af 92       	push	r10
     48a:	bf 92       	push	r11
     48c:	cf 92       	push	r12
     48e:	df 92       	push	r13
     490:	ef 92       	push	r14
     492:	ff 92       	push	r15
     494:	0f 93       	push	r16
     496:	1f 93       	push	r17
     498:	cf 93       	push	r28
     49a:	df 93       	push	r29
     49c:	00 d0       	rcall	.+0      	; 0x49e <JTAG2::answer_transfer()+0x16>
     49e:	cd b7       	in	r28, 0x3d	; 61
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:151
    uint16_t _crc = ~0;
     4a0:	de b7       	in	r29, 0x3e	; 62
     4a2:	8f ef       	ldi	r24, 0xFF	; 255
     4a4:	9f ef       	ldi	r25, 0xFF	; 255
     4a6:	89 83       	std	Y+1, r24	; 0x01
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:152
    int16_t _len = packet.size_word[0] + 8;
     4a8:	9a 83       	std	Y+2, r25	; 0x02
     4aa:	e0 90 93 38 	lds	r14, 0x3893	; 0x803893 <JTAG2::packet+0x3>
     4ae:	f0 90 94 38 	lds	r15, 0x3894	; 0x803894 <JTAG2::packet+0x4>
     4b2:	87 01       	movw	r16, r14
     4b4:	08 5f       	subi	r16, 0xF8	; 248
     4b6:	1f 4f       	sbci	r17, 0xFF	; 255
     4b8:	80 e9       	ldi	r24, 0x90	; 144
     4ba:	c8 2e       	mov	r12, r24
     4bc:	88 e3       	ldi	r24, 0x38	; 56
     4be:	d8 2e       	mov	r13, r24
     4c0:	56 01       	movw	r10, r12
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	e8 1a       	sub	r14, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:155
    uint8_t *_p = (uint8_t*) &packet.soh;
    uint8_t *_q = (uint8_t*) &packet.soh;
    while (_len--) _crc = crc16_update(_crc, *_q++);
     4c6:	f1 08       	sbc	r15, r1
     4c8:	a7 ef       	ldi	r26, 0xF7	; 247
     4ca:	ea 16       	cp	r14, r26
     4cc:	af ef       	ldi	r26, 0xFF	; 255
     4ce:	fa 06       	cpc	r15, r26
     4d0:	49 f0       	breq	.+18     	; 0x4e4 <JTAG2::answer_transfer()+0x5c>
     4d2:	f5 01       	movw	r30, r10
     4d4:	61 91       	ld	r22, Z+
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:101
  void flush (void) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_TXCIF_bp);
  }

  uint16_t crc16_update(uint16_t _crc, uint8_t _data) {
    return _crc_ccitt_update(_crc, _data);
     4d6:	5f 01       	movw	r10, r30
crc16_update():
     4d8:	89 81       	ldd	r24, Y+1	; 0x01
     4da:	9a 81       	ldd	r25, Y+2	; 0x02
     4dc:	c3 df       	rcall	.-122    	; 0x464 <_crc_ccitt_update(unsigned int, unsigned char)>
_ZN5JTAG215answer_transferEv():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:155
  void answer_transfer (void) {
    uint16_t _crc = ~0;
    int16_t _len = packet.size_word[0] + 8;
    uint8_t *_p = (uint8_t*) &packet.soh;
    uint8_t *_q = (uint8_t*) &packet.soh;
    while (_len--) _crc = crc16_update(_crc, *_q++);
     4de:	89 83       	std	Y+1, r24	; 0x01
     4e0:	9a 83       	std	Y+2, r25	; 0x02
     4e2:	ef cf       	rjmp	.-34     	; 0x4c2 <JTAG2::answer_transfer()+0x3a>
     4e4:	f8 01       	movw	r30, r16
     4e6:	e0 57       	subi	r30, 0x70	; 112
     4e8:	f7 4c       	sbci	r31, 0xC7	; 199
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:156
    (*_q++) = _CAPS16(_crc)->bytes[0];
     4ea:	89 81       	ldd	r24, Y+1	; 0x01
     4ec:	80 83       	st	Z, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:157
    (*_q++) = _CAPS16(_crc)->bytes[1];
     4ee:	8a 81       	ldd	r24, Y+2	; 0x02
     4f0:	81 83       	std	Z+1, r24	; 0x01
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     4f2:	2f b7       	in	r18, 0x3f	; 63
__iCliRetVal():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:157
     4f4:	f8 94       	cli
_ZN5JTAG215answer_transferEv():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:92
    return JTAG_USART.RXDATAL;
  }

  uint8_t put (uint8_t _data) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_DREIF_bp);
    JTAG_USART.STATUS = USART_TXCIF_bm;
     4f6:	32 96       	adiw	r30, 0x02	; 2
put():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:159
    uint8_t *_q = (uint8_t*) &packet.soh;
    while (_len--) _crc = crc16_update(_crc, *_q++);
    (*_q++) = _CAPS16(_crc)->bytes[0];
    (*_q++) = _CAPS16(_crc)->bytes[1];
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
      while (_p != _q) put(*_p++);
     4f8:	90 e4       	ldi	r25, 0x40	; 64
_ZN5JTAG215answer_transferEv():
     4fa:	ce 16       	cp	r12, r30
     4fc:	df 06       	cpc	r13, r31
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     4fe:	71 f4       	brne	.+28     	; 0x51c <JTAG2::answer_transfer()+0x94>
__iRestore():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:161
    }
  }
     500:	2f bf       	out	0x3f, r18	; 63
_ZN5JTAG215answer_transferEv():
     502:	0f 90       	pop	r0
     504:	0f 90       	pop	r0
     506:	df 91       	pop	r29
     508:	cf 91       	pop	r28
     50a:	1f 91       	pop	r17
     50c:	0f 91       	pop	r16
     50e:	ff 90       	pop	r15
     510:	ef 90       	pop	r14
     512:	df 90       	pop	r13
     514:	cf 90       	pop	r12
     516:	bf 90       	pop	r11
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:159
    uint8_t *_q = (uint8_t*) &packet.soh;
    while (_len--) _crc = crc16_update(_crc, *_q++);
    (*_q++) = _CAPS16(_crc)->bytes[0];
    (*_q++) = _CAPS16(_crc)->bytes[1];
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
      while (_p != _q) put(*_p++);
     518:	af 90       	pop	r10
     51a:	08 95       	ret
     51c:	d6 01       	movw	r26, r12
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:91
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_RXCIF_bp);
    return JTAG_USART.RXDATAL;
  }

  uint8_t put (uint8_t _data) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_DREIF_bp);
     51e:	8d 91       	ld	r24, X+
     520:	6d 01       	movw	r12, r26
put():
     522:	30 91 24 08 	lds	r19, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:92
    JTAG_USART.STATUS = USART_TXCIF_bm;
     526:	35 ff       	sbrs	r19, 5
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:93
    return JTAG_USART.TXDATAL = _data;
     528:	fc cf       	rjmp	.-8      	; 0x522 <JTAG2::answer_transfer()+0x9a>
     52a:	90 93 24 08 	sts	0x0824, r25	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:403
  } while (--limit);
  return false;
}

/* __attribute__((optimize("O0"))) */
bool UPDI::loop_until_key_stat_is_set (uint8_t bitmap, uint16_t limit) {
     52e:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <__RODATA_PM_OFFSET__+0x7f8822>
     532:	e3 cf       	rjmp	.-58     	; 0x4fa <JTAG2::answer_transfer()+0x72>

00000534 <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.27]>:
_ZN4UPDI26loop_until_key_stat_is_setEhj.constprop.27():
     534:	1f 93       	push	r17
     536:	cf 93       	push	r28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:319
  send_bytes(set_ptr, sizeof(set_ptr));
  return RECV();
}

bool UPDI::is_cs_stat (uint8_t code, uint8_t check) {
  return check == (get_cs_stat(code) & check);
     538:	df 93       	push	r29
     53a:	18 2f       	mov	r17, r24
     53c:	d0 e0       	ldi	r29, 0x00	; 0
     53e:	c0 e0       	ldi	r28, 0x00	; 0
is_cs_stat():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:408
bool UPDI::loop_until_key_stat_is_set (uint8_t bitmap, uint16_t limit) {
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  uint16_t _back = _send_ptr;
  #endif
  do {
    if (is_key_stat(bitmap)) return true;
     540:	87 e0       	ldi	r24, 0x07	; 7
     542:	99 de       	rcall	.-718    	; 0x276 <UPDI::get_cs_stat(unsigned char)>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.10/cores/megaAVR/api/delay_busywait.h:31
static __inline__ __attribute__((__always_inline__)) void delay_micros (uint32_t _us);
static __inline__ __attribute__((__always_inline__)) void delay_millis (uint32_t _ms);

void delay_micros (uint32_t _us) {
  if (F_CPU >= 1000000L) {
    __builtin_avr_delay_cycles((F_CPU / 1000000L) * _us);
     544:	81 23       	and	r24, r17
_ZN4UPDI26loop_until_key_stat_is_setEhj.constprop.27():
     546:	18 17       	cp	r17, r24
     548:	59 f0       	breq	.+22     	; 0x560 <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.27]+0x2c>
delay_micros():
     54a:	86 ea       	ldi	r24, 0xA6	; 166
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:413
    #ifdef ENABLE_DEBUG_UPDI_SENDER
    _send_ptr = _back;
    #endif
    TIM::delay_50us();
  } while (--limit);
     54c:	8a 95       	dec	r24
     54e:	f1 f7       	brne	.-4      	; 0x54c <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.27]+0x18>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:414
  return false;
     550:	00 c0       	rjmp	.+0      	; 0x552 <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.27]+0x1e>
_ZN4UPDI26loop_until_key_stat_is_setEhj.constprop.27():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:415
}
     552:	21 97       	sbiw	r28, 0x01	; 1
     554:	a9 f7       	brne	.-22     	; 0x540 <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.27]+0xc>
     556:	80 e0       	ldi	r24, 0x00	; 0
     558:	df 91       	pop	r29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:408
bool UPDI::loop_until_key_stat_is_set (uint8_t bitmap, uint16_t limit) {
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  uint16_t _back = _send_ptr;
  #endif
  do {
    if (is_key_stat(bitmap)) return true;
     55a:	cf 91       	pop	r28
     55c:	1f 91       	pop	r17
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:419
  return false;
}

/* __attribute__((optimize("O0"))) */
bool UPDI::set_nvmprog_key (void) {
  if (!send_bytes(nvmprog_key, sizeof(nvmprog_key))) return false;
     55e:	08 95       	ret
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	fa cf       	rjmp	.-12     	; 0x558 <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.27]+0x24>

00000564 <UPDI::set_nvmprog_key()>:
_ZN4UPDI15set_nvmprog_keyEv():
     564:	6a e0       	ldi	r22, 0x0A	; 10
     566:	8d e1       	ldi	r24, 0x1D	; 29
     568:	98 e3       	ldi	r25, 0x38	; 56
     56a:	f5 dd       	rcall	.-1046   	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:420
  return loop_until_key_stat_is_set(UPDI_KEY_NVMPROG);
     56c:	88 23       	and	r24, r24
     56e:	11 f0       	breq	.+4      	; 0x574 <UPDI::set_nvmprog_key()+0x10>
     570:	80 e1       	ldi	r24, 0x10	; 16
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:421
}
     572:	e0 cf       	rjmp	.-64     	; 0x534 <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.27]>
     574:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:373
  } while (--limit);
  return false;
}

/* __attribute__((optimize("O0"))) */
bool UPDI::loop_until_sys_stat_is_set (uint8_t bitmap, uint16_t limit) {
     576:	08 95       	ret

00000578 <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.26]>:
_ZN4UPDI26loop_until_sys_stat_is_setEhj.constprop.26():
     578:	1f 93       	push	r17
     57a:	cf 93       	push	r28
     57c:	df 93       	push	r29
     57e:	18 2f       	mov	r17, r24
     580:	d0 e0       	ldi	r29, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:319
  send_bytes(set_ptr, sizeof(set_ptr));
  return RECV();
}

bool UPDI::is_cs_stat (uint8_t code, uint8_t check) {
  return check == (get_cs_stat(code) & check);
     582:	c0 e0       	ldi	r28, 0x00	; 0
is_cs_stat():
     584:	8b e0       	ldi	r24, 0x0B	; 11
     586:	77 de       	rcall	.-786    	; 0x276 <UPDI::get_cs_stat(unsigned char)>
     588:	81 23       	and	r24, r17
_ZN4UPDI26loop_until_sys_stat_is_setEhj.constprop.26():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:378
bool UPDI::loop_until_sys_stat_is_set (uint8_t bitmap, uint16_t limit) {
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  uint16_t _back = _send_ptr;
  #endif
  do {
    if (is_sys_stat(bitmap)) return true;
     58a:	18 17       	cp	r17, r24
     58c:	59 f0       	breq	.+22     	; 0x5a4 <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.26]+0x2c>
delay_micros():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.10/cores/megaAVR/api/delay_busywait.h:31
     58e:	86 ea       	ldi	r24, 0xA6	; 166
     590:	8a 95       	dec	r24
     592:	f1 f7       	brne	.-4      	; 0x590 <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.26]+0x18>
     594:	00 c0       	rjmp	.+0      	; 0x596 <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.26]+0x1e>
_ZN4UPDI26loop_until_sys_stat_is_setEhj.constprop.26():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:383
    #ifdef ENABLE_DEBUG_UPDI_SENDER
    _send_ptr = _back;
    #endif
    TIM::delay_50us();
  } while (--limit);
     596:	21 97       	sbiw	r28, 0x01	; 1
     598:	a9 f7       	brne	.-22     	; 0x584 <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.26]+0xc>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:384
  return false;
     59a:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:385
}
     59c:	df 91       	pop	r29
     59e:	cf 91       	pop	r28
     5a0:	1f 91       	pop	r17
     5a2:	08 95       	ret
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:378
bool UPDI::loop_until_sys_stat_is_set (uint8_t bitmap, uint16_t limit) {
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  uint16_t _back = _send_ptr;
  #endif
  do {
    if (is_sys_stat(bitmap)) return true;
     5a4:	81 e0       	ldi	r24, 0x01	; 1
     5a6:	fa cf       	rjmp	.-12     	; 0x59c <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.26]+0x24>

000005a8 <UPDI::HV_Pulse()>:
_ZN4UPDI8HV_PulseEv():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:451

void UPDI::HV_Pulse (void) {
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  UPDI::_send_buf_push(JTAG2::updi_desc.hvupdi_variant);
  #endif
  if (JTAG2::updi_desc.hvupdi_variant != '0'
     5a8:	80 91 68 38 	lds	r24, 0x3868	; 0x803868 <JTAG2::updi_desc+0x2>
     5ac:	8d 7f       	andi	r24, 0xFD	; 253
     5ae:	80 33       	cpi	r24, 0x30	; 48
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:179
/*
 * HV charge pump drive control
 */

void TIM::HV_Pulse_ON (void) {
  TCA0_SPLIT_CTRLB = TCA_SPLIT_HCMP0EN_bm | TCA_SPLIT_HCMP1EN_bm;
     5b0:	81 f5       	brne	.+96     	; 0x612 <UPDI::HV_Pulse()+0x6a>
HV_Pulse_ON():
     5b2:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__RODATA_PM_OFFSET__+0x7f8a01>
_ZN4UPDI8HV_PulseEv():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.10/cores/megaAVR/api/delay_busywait.h:31
     5b6:	21 9a       	sbi	0x04, 1	; 4
delay_micros():
     5b8:	86 ea       	ldi	r24, 0xA6	; 166
     5ba:	8a 95       	dec	r24
     5bc:	f1 f7       	brne	.-4      	; 0x5ba <UPDI::HV_Pulse()+0x12>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:460
  TIM::HV_Pulse_ON();

  /* Perform a hardware reset (if wired) */
  openDrainWrite(TRST_PIN, LOW);
  TIM::delay_50us();
  openDrainWrite(TRST_PIN, HIGH);
     5be:	00 c0       	rjmp	.+0      	; 0x5c0 <UPDI::HV_Pulse()+0x18>
_ZN4UPDI8HV_PulseEv():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.10/cores/megaAVR/api/delay_busywait.h:31
     5c0:	21 98       	cbi	0x04, 1	; 4
delay_micros():
     5c2:	8f ec       	ldi	r24, 0xCF	; 207
     5c4:	97 e0       	ldi	r25, 0x07	; 7
     5c6:	01 97       	sbiw	r24, 0x01	; 1
     5c8:	f1 f7       	brne	.-4      	; 0x5c6 <UPDI::HV_Pulse()+0x1e>
     5ca:	00 c0       	rjmp	.+0      	; 0x5cc <UPDI::HV_Pulse()+0x24>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:464
  TIM::delay_800us();
  /* During this time, raise the circuit to sufficient voltage */

  if (JTAG2::updi_desc.hvupdi_variant == '0')
     5cc:	00 00       	nop
_ZN4UPDI8HV_PulseEv():
     5ce:	80 91 68 38 	lds	r24, 0x3868	; 0x803868 <JTAG2::updi_desc+0x2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:465
    digitalWrite(HV12_PIN, HIGH);
     5d2:	80 33       	cpi	r24, 0x30	; 48
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.10/cores/megaAVR/api/delay_busywait.h:31
     5d4:	f9 f4       	brne	.+62     	; 0x614 <UPDI::HV_Pulse()+0x6c>
     5d6:	0e 9a       	sbi	0x01, 6	; 1
delay_micros():
     5d8:	8f ec       	ldi	r24, 0xCF	; 207
     5da:	97 e0       	ldi	r25, 0x07	; 7
     5dc:	01 97       	sbiw	r24, 0x01	; 1
     5de:	f1 f7       	brne	.-4      	; 0x5dc <UPDI::HV_Pulse()+0x34>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:472
    digitalWrite(HV8_PIN, HIGH);

  /* Apply high voltage only for the required time */
  TIM::delay_800us();

  if (JTAG2::updi_desc.hvupdi_variant == '0')
     5e0:	00 c0       	rjmp	.+0      	; 0x5e2 <UPDI::HV_Pulse()+0x3a>
     5e2:	00 00       	nop
_ZN4UPDI8HV_PulseEv():
     5e4:	80 91 68 38 	lds	r24, 0x3868	; 0x803868 <JTAG2::updi_desc+0x2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:473
    digitalWrite(HV12_PIN, LOW);
     5e8:	80 33       	cpi	r24, 0x30	; 48
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:183
}

void TIM::HV_Pulse_OFF (void) {
  TCA0_SPLIT_CTRLB = 0;
     5ea:	b1 f4       	brne	.+44     	; 0x618 <UPDI::HV_Pulse()+0x70>
     5ec:	0e 98       	cbi	0x01, 6	; 1
HV_Pulse_OFF():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:481

  TIM::HV_Pulse_OFF();

  /* Keep the UPDI signal low for as long as necessary */
  // UPDI_USART.BAUD = UPDI_BAUD_SHORT_BREAK;
  UPDI_USART.BAUD = UPDI_BAUD_BREAK;
     5ee:	10 92 01 0a 	sts	0x0A01, r1	; 0x800a01 <__RODATA_PM_OFFSET__+0x7f8a01>
_ZN4UPDI8HV_PulseEv():
     5f2:	80 ec       	ldi	r24, 0xC0	; 192
     5f4:	94 e4       	ldi	r25, 0x44	; 68
     5f6:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__RODATA_PM_OFFSET__+0x7f8808>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:482
  SEND(UPDI_NOP);
     5fa:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__RODATA_PM_OFFSET__+0x7f8809>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:483
  UPDI_USART.BAUD = UPDI_BAUD_CALC;
     5fe:	80 e0       	ldi	r24, 0x00	; 0
     600:	90 dd       	rcall	.-1248   	; 0x122 <UPDI::SEND(unsigned char)>
     602:	80 eb       	ldi	r24, 0xB0	; 176
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__RODATA_PM_OFFSET__+0x7f8808>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:486

  bit_clear(UPDI_CONTROL, UPDI_CLKU_bp);
  bit_set(UPDI_CONTROL, UPDI_ERHV_bp);
     60a:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__RODATA_PM_OFFSET__+0x7f8809>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:467
  /* During this time, raise the circuit to sufficient voltage */

  if (JTAG2::updi_desc.hvupdi_variant == '0')
    digitalWrite(HV12_PIN, HIGH);
  else
    digitalWrite(HV8_PIN, HIGH);
     60e:	e6 98       	cbi	0x1c, 6	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:475
  TIM::delay_800us();

  if (JTAG2::updi_desc.hvupdi_variant == '0')
    digitalWrite(HV12_PIN, LOW);
  else
    digitalWrite(HV8_PIN, LOW);
     610:	e3 9a       	sbi	0x1c, 3	; 28
     612:	08 95       	ret
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:358
uint8_t UPDI::get_cs_asi_ctra (void) {
  return get_cs_stat(UPDI_CS_ASI_CTRLA);
}

/* __attribute__((optimize("O0"))) */
bool UPDI::loop_until_sys_stat_is_clear (uint8_t bitmap, uint16_t limit) {
     614:	2d 9a       	sbi	0x05, 5	; 5
     616:	e0 cf       	rjmp	.-64     	; 0x5d8 <UPDI::HV_Pulse()+0x30>
     618:	2d 98       	cbi	0x05, 5	; 5
     61a:	e9 cf       	rjmp	.-46     	; 0x5ee <UPDI::HV_Pulse()+0x46>

0000061c <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>:
_ZN4UPDI28loop_until_sys_stat_is_clearEhj():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:319
  send_bytes(set_ptr, sizeof(set_ptr));
  return RECV();
}

bool UPDI::is_cs_stat (uint8_t code, uint8_t check) {
  return check == (get_cs_stat(code) & check);
     61c:	1f 93       	push	r17
     61e:	cf 93       	push	r28
     620:	df 93       	push	r29
     622:	18 2f       	mov	r17, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:363
bool UPDI::loop_until_sys_stat_is_clear (uint8_t bitmap, uint16_t limit) {
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  uint16_t _back = _send_ptr;
  #endif
  do {
    if (!is_sys_stat(bitmap)) return true;
     624:	eb 01       	movw	r28, r22
is_cs_stat():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.10/cores/megaAVR/api/delay_busywait.h:31
     626:	8b e0       	ldi	r24, 0x0B	; 11
     628:	26 de       	rcall	.-948    	; 0x276 <UPDI::get_cs_stat(unsigned char)>
     62a:	81 23       	and	r24, r17
_ZN4UPDI28loop_until_sys_stat_is_clearEhj():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:368
    #ifdef ENABLE_DEBUG_UPDI_SENDER
    _send_ptr = _back;
    #endif
    TIM::delay_50us();
  } while (--limit);
     62c:	18 13       	cpse	r17, r24
     62e:	0b c0       	rjmp	.+22     	; 0x646 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)+0x2a>
delay_micros():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:369
  return false;
     630:	86 ea       	ldi	r24, 0xA6	; 166
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:370
}
     632:	8a 95       	dec	r24
     634:	f1 f7       	brne	.-4      	; 0x632 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)+0x16>
     636:	00 c0       	rjmp	.+0      	; 0x638 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)+0x1c>
_ZN4UPDI28loop_until_sys_stat_is_clearEhj():
     638:	21 97       	sbiw	r28, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:363
bool UPDI::loop_until_sys_stat_is_clear (uint8_t bitmap, uint16_t limit) {
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  uint16_t _back = _send_ptr;
  #endif
  do {
    if (!is_sys_stat(bitmap)) return true;
     63a:	a9 f7       	brne	.-22     	; 0x626 <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)+0xa>
     63c:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:713

/******************************
 * Programming control starts *
 ******************************/

bool UPDI::enter_prog (void) {
     63e:	df 91       	pop	r29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:714
  if (bit_is_clear(UPDI_CONTROL, UPDI_PROG_bp)) {
     640:	cf 91       	pop	r28
     642:	1f 91       	pop	r17
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:715
    if (!loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS, 500)) return false;
     644:	08 95       	ret
     646:	81 e0       	ldi	r24, 0x01	; 1
     648:	fa cf       	rjmp	.-12     	; 0x63e <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)+0x22>

0000064a <UPDI::enter_prog()>:
_ZN4UPDI10enter_progEv():
     64a:	cf 93       	push	r28
     64c:	e1 99       	sbic	0x1c, 1	; 28
     64e:	25 c0       	rjmp	.+74     	; 0x69a <UPDI::enter_prog()+0x50>
     650:	64 ef       	ldi	r22, 0xF4	; 244
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:726
    }
    bit_set(UPDI_CONTROL, UPDI_INFO_bp);
    bit_set(UPDI_CONTROL, UPDI_PROG_bp);
  }
  return true;
}
     652:	71 e0       	ldi	r23, 0x01	; 1
     654:	80 e2       	ldi	r24, 0x20	; 32
     656:	e2 df       	rcall	.-60     	; 0x61c <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:319
  send_bytes(set_ptr, sizeof(set_ptr));
  return RECV();
}

bool UPDI::is_cs_stat (uint8_t code, uint8_t check) {
  return check == (get_cs_stat(code) & check);
     658:	c8 2f       	mov	r28, r24
     65a:	81 11       	cpse	r24, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:716
 ******************************/

bool UPDI::enter_prog (void) {
  if (bit_is_clear(UPDI_CONTROL, UPDI_PROG_bp)) {
    if (!loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS, 500)) return false;
    if (!is_sys_stat(UPDI_SYS_NVMPROG)) {
     65c:	04 c0       	rjmp	.+8      	; 0x666 <UPDI::enter_prog()+0x1c>
     65e:	c0 e0       	ldi	r28, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:717
      if (!set_nvmprog_key()) return false;
     660:	8c 2f       	mov	r24, r28
     662:	cf 91       	pop	r28
     664:	08 95       	ret
is_cs_stat():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:718
      if (!updi_reset(true) || !updi_reset(false)) return false;
     666:	8b e0       	ldi	r24, 0x0B	; 11
     668:	06 de       	rcall	.-1012   	; 0x276 <UPDI::get_cs_stat(unsigned char)>
_ZN4UPDI10enter_progEv():
     66a:	83 fd       	sbrc	r24, 3
     66c:	13 c0       	rjmp	.+38     	; 0x694 <UPDI::enter_prog()+0x4a>
     66e:	7a df       	rcall	.-268    	; 0x564 <UPDI::set_nvmprog_key()>
     670:	88 23       	and	r24, r24
     672:	a9 f3       	breq	.-22     	; 0x65e <UPDI::enter_prog()+0x14>
     674:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:719
      if (!loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS, 500)) return false;
     676:	97 de       	rcall	.-722    	; 0x3a6 <UPDI::updi_reset(bool)>
     678:	88 23       	and	r24, r24
     67a:	89 f3       	breq	.-30     	; 0x65e <UPDI::enter_prog()+0x14>
     67c:	80 e0       	ldi	r24, 0x00	; 0
     67e:	93 de       	rcall	.-730    	; 0x3a6 <UPDI::updi_reset(bool)>
     680:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:720
      loop_until_sys_stat_is_set(UPDI_SYS_NVMPROG);
     682:	69 f3       	breq	.-38     	; 0x65e <UPDI::enter_prog()+0x14>
     684:	64 ef       	ldi	r22, 0xF4	; 244
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:722
    }
    bit_set(UPDI_CONTROL, UPDI_INFO_bp);
     686:	71 e0       	ldi	r23, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:723
    bit_set(UPDI_CONTROL, UPDI_PROG_bp);
     688:	80 e2       	ldi	r24, 0x20	; 32
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:725
  }
  return true;
     68a:	c8 df       	rcall	.-112    	; 0x61c <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
     68c:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:608

/**********************
 * UPDI control start *
 **********************/

bool UPDI::enter_updi (bool skip) {
     68e:	39 f3       	breq	.-50     	; 0x65e <UPDI::enter_prog()+0x14>
     690:	88 e0       	ldi	r24, 0x08	; 8
     692:	72 df       	rcall	.-284    	; 0x578 <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.26]>
     694:	e0 9a       	sbi	0x1c, 0	; 28
     696:	e1 9a       	sbi	0x1c, 1	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:613
  #ifdef ENABLE_UPDI_DOUBLESPEED
  const bool hv_val = SYS::get_vcc() >= 4250;
  #endif
  /* Release the physical reset */
  openDrainWrite(TRST_PIN, HIGH);
     698:	e3 cf       	rjmp	.-58     	; 0x660 <UPDI::enter_prog()+0x16>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:615
  /* target reset deactive */
  if (!skip) {
     69a:	c1 e0       	ldi	r28, 0x01	; 1
     69c:	e1 cf       	rjmp	.-62     	; 0x660 <UPDI::enter_prog()+0x16>

0000069e <UPDI::enter_updi(bool)>:
_ZN4UPDI10enter_updiEb():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:617
    /* HV control forced permission */
    if (bit_is_set(UPDI_CONTROL, UPDI_FCHV_bp)) {
     69e:	ef 92       	push	r14
     6a0:	ff 92       	push	r15
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:618
      HV_Pulse();
     6a2:	0f 93       	push	r16
     6a4:	1f 93       	push	r17
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:619
      if (!loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS, 500)) return false;
     6a6:	cf 93       	push	r28
     6a8:	21 98       	cbi	0x04, 1	; 4
     6aa:	81 11       	cpse	r24, r1
     6ac:	21 c0       	rjmp	.+66     	; 0x6f0 <UPDI::enter_updi(bool)+0x52>
     6ae:	e4 9b       	sbis	0x1c, 4	; 28
     6b0:	69 c0       	rjmp	.+210    	; 0x784 <UPDI::enter_updi(bool)+0xe6>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:692
        }
        bit_set(UPDI_NVMCTRL, UPDI_GEN2_bp);
        break;
      }
      default : {
        return false;
     6b2:	7a df       	rcall	.-268    	; 0x5a8 <UPDI::HV_Pulse()>
     6b4:	64 ef       	ldi	r22, 0xF4	; 244
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:346
bool UPDI::set_cs_ctra (uint8_t data) {
  return set_cs_stat(UPDI_CS_CTRLA, data);
}

bool UPDI::set_cs_ctrb (uint8_t data) {
  return set_cs_stat(UPDI_CS_CTRLB, data);
     6b6:	71 e0       	ldi	r23, 0x01	; 1
     6b8:	80 e2       	ldi	r24, 0x20	; 32
     6ba:	b0 df       	rcall	.-160    	; 0x61c <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
     6bc:	81 11       	cpse	r24, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:620
  if (!skip) {
    /* HV control forced permission */
    if (bit_is_set(UPDI_CONTROL, UPDI_FCHV_bp)) {
      HV_Pulse();
      if (!loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS, 500)) return false;
      if (!set_cs_ctrb(UPDI_SET_CCDETDIS)) return false;
     6be:	02 c0       	rjmp	.+4      	; 0x6c4 <UPDI::enter_updi(bool)+0x26>
     6c0:	c0 e0       	ldi	r28, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:623

      /* send nvmprog_key */
      if (!set_nvmprog_key()) return false;
     6c2:	71 c0       	rjmp	.+226    	; 0x7a6 <UPDI::enter_updi(bool)+0x108>
set_cs_ctrb():
     6c4:	68 e0       	ldi	r22, 0x08	; 8
     6c6:	83 e0       	ldi	r24, 0x03	; 3
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:626

      /* restart target : change mode */
      if (!updi_reset(true) || !updi_reset(false)) return false;
     6c8:	57 dd       	rcall	.-1362   	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>
_ZN4UPDI10enter_updiEb():
     6ca:	88 23       	and	r24, r24
     6cc:	c9 f3       	breq	.-14     	; 0x6c0 <UPDI::enter_updi(bool)+0x22>
     6ce:	4a df       	rcall	.-364    	; 0x564 <UPDI::set_nvmprog_key()>
     6d0:	88 23       	and	r24, r24
     6d2:	b1 f3       	breq	.-20     	; 0x6c0 <UPDI::enter_updi(bool)+0x22>
     6d4:	81 e0       	ldi	r24, 0x01	; 1
     6d6:	67 de       	rcall	.-818    	; 0x3a6 <UPDI::updi_reset(bool)>
     6d8:	88 23       	and	r24, r24
     6da:	91 f3       	breq	.-28     	; 0x6c0 <UPDI::enter_updi(bool)+0x22>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:627
      if (!loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS, 500)) return false;
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	63 de       	rcall	.-826    	; 0x3a6 <UPDI::updi_reset(bool)>
     6e0:	88 23       	and	r24, r24
     6e2:	71 f3       	breq	.-36     	; 0x6c0 <UPDI::enter_updi(bool)+0x22>
     6e4:	64 ef       	ldi	r22, 0xF4	; 244
     6e6:	71 e0       	ldi	r23, 0x01	; 1
     6e8:	80 e2       	ldi	r24, 0x20	; 32
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:632
    }
    else
      BREAK();
  }
  if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) {
     6ea:	98 df       	rcall	.-208    	; 0x61c <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
     6ec:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:346
bool UPDI::set_cs_ctra (uint8_t data) {
  return set_cs_stat(UPDI_CS_CTRLA, data);
}

bool UPDI::set_cs_ctrb (uint8_t data) {
  return set_cs_stat(UPDI_CS_CTRLB, data);
     6ee:	41 f3       	breq	.-48     	; 0x6c0 <UPDI::enter_updi(bool)+0x22>
     6f0:	e0 99       	sbic	0x1c, 0	; 28
     6f2:	6b c0       	rjmp	.+214    	; 0x7ca <UPDI::enter_updi(bool)+0x12c>
set_cs_ctrb():
     6f4:	68 e0       	ldi	r22, 0x08	; 8
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:634
    else
      BREAK();
  }
  if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) {
    /* Minimize guard time */
    if (!set_cs_ctrb(UPDI_SET_CCDETDIS)) return false;
     6f6:	83 e0       	ldi	r24, 0x03	; 3
     6f8:	3f dd       	rcall	.-1410   	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>
_ZN4UPDI10enter_updiEb():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:342
  set_ptr[2] = data;
  return send_bytes(set_ptr, sizeof(set_ptr));
}

bool UPDI::set_cs_ctra (uint8_t data) {
  return set_cs_stat(UPDI_CS_CTRLA, data);
     6fa:	88 23       	and	r24, r24
     6fc:	09 f3       	breq	.-62     	; 0x6c0 <UPDI::enter_updi(bool)+0x22>
set_cs_ctra():
     6fe:	63 e0       	ldi	r22, 0x03	; 3
     700:	82 e0       	ldi	r24, 0x02	; 2
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:635
      BREAK();
  }
  if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) {
    /* Minimize guard time */
    if (!set_cs_ctrb(UPDI_SET_CCDETDIS)) return false;
    if (!set_cs_ctra(UPDI_GTVAL)) return false;
     702:	3a dd       	rcall	.-1420   	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>
_ZN4UPDI10enter_updiEb():
     704:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:636
    _CAPS32(JTAG2::updi_desc.signature[0])->dword = -1;
     706:	e1 f2       	breq	.-72     	; 0x6c0 <UPDI::enter_updi(bool)+0x22>
     708:	8f ef       	ldi	r24, 0xFF	; 255
     70a:	9f ef       	ldi	r25, 0xFF	; 255
     70c:	dc 01       	movw	r26, r24
     70e:	80 93 6d 38 	sts	0x386D, r24	; 0x80386d <JTAG2::updi_desc+0x7>
     712:	90 93 6e 38 	sts	0x386E, r25	; 0x80386e <JTAG2::updi_desc+0x8>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:319
  send_bytes(set_ptr, sizeof(set_ptr));
  return RECV();
}

bool UPDI::is_cs_stat (uint8_t code, uint8_t check) {
  return check == (get_cs_stat(code) & check);
     716:	a0 93 6f 38 	sts	0x386F, r26	; 0x80386f <JTAG2::updi_desc+0x9>
     71a:	b0 93 70 38 	sts	0x3870, r27	; 0x803870 <JTAG2::updi_desc+0xa>
is_cs_stat():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:642

    #ifdef ENABLE_UPDI_DOUBLESPEED
    if (hv_val && !set_cs_asi_ctra(UPDI_SET_UPDICLKSEL_8M)) return false;
    #endif

    if (is_sys_stat(UPDI_SYS_RSTSYS)) {
     71e:	8b e0       	ldi	r24, 0x0B	; 11
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:438
}

bool UPDI::read_sib (uint8_t *s_ptr) {
  static uint8_t set_ptr[] = { UPDI_SYNCH, UPDI_SIB_256 };
  uint8_t _len = 32;
  if (!send_bytes(set_ptr, sizeof(set_ptr))) return false;
     720:	aa dd       	rcall	.-1196   	; 0x276 <UPDI::get_cs_stat(unsigned char)>
_ZN4UPDI10enter_updiEb():
     722:	85 fd       	sbrc	r24, 5
     724:	31 c0       	rjmp	.+98     	; 0x788 <UPDI::enter_updi(bool)+0xea>
read_sib():
     726:	62 e0       	ldi	r22, 0x02	; 2
     728:	87 e2       	ldi	r24, 0x27	; 39
     72a:	98 e3       	ldi	r25, 0x38	; 56
     72c:	14 dd       	rcall	.-1496   	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     72e:	c8 2f       	mov	r28, r24
     730:	00 e7       	ldi	r16, 0x70	; 112
     732:	18 e3       	ldi	r17, 0x38	; 56
     734:	80 e9       	ldi	r24, 0x90	; 144
     736:	e8 2e       	mov	r14, r24
     738:	88 e3       	ldi	r24, 0x38	; 56
     73a:	f8 2e       	mov	r15, r24
     73c:	cc 23       	and	r28, r28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:439
  do { *s_ptr++ = RECV(); } while (--_len);
     73e:	09 f4       	brne	.+2      	; 0x742 <UPDI::enter_updi(bool)+0xa4>
     740:	bf cf       	rjmp	.-130    	; 0x6c0 <UPDI::enter_updi(bool)+0x22>
     742:	e3 dc       	rcall	.-1594   	; 0x10a <UPDI::RECV()>
     744:	f8 01       	movw	r30, r16
     746:	81 93       	st	Z+, r24
     748:	8f 01       	movw	r16, r30
     74a:	ee 16       	cp	r14, r30
     74c:	ff 06       	cpc	r15, r31
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:651

    /*** Get System Information Block ***/
    /* Determine system requirements not announced by host control here */
    uint8_t* _p = &JTAG2::updi_desc.sib[0];
    if (!read_sib(_p)) return false;
    JTAG2::updi_desc.nvmctrl_version = _p[10];
     74e:	c9 f7       	brne	.-14     	; 0x742 <UPDI::enter_updi(bool)+0xa4>
_ZN4UPDI10enter_updiEb():
     750:	90 91 7a 38 	lds	r25, 0x387A	; 0x80387a <JTAG2::updi_desc+0x14>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:652
    JTAG2::updi_desc.signature[0] = 0x1e;
     754:	90 93 69 38 	sts	0x3869, r25	; 0x803869 <JTAG2::updi_desc+0x3>
     758:	8e e1       	ldi	r24, 0x1E	; 30
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:653
    JTAG2::updi_desc.signature[1] = _p[0];
     75a:	80 93 6d 38 	sts	0x386D, r24	; 0x80386d <JTAG2::updi_desc+0x7>
     75e:	80 91 70 38 	lds	r24, 0x3870	; 0x803870 <JTAG2::updi_desc+0xa>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:654
    JTAG2::updi_desc.signature[2] = _p[10];
     762:	80 93 6e 38 	sts	0x386E, r24	; 0x80386e <JTAG2::updi_desc+0x8>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:655
    switch (_p[0]) {
     766:	90 93 6f 38 	sts	0x386F, r25	; 0x80386f <JTAG2::updi_desc+0x9>
     76a:	81 34       	cpi	r24, 0x41	; 65
     76c:	39 f0       	breq	.+14     	; 0x77c <UPDI::enter_updi(bool)+0xde>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:668
        /* tinyAVR SIB = 'tinyAVR P:0D:1-3' */
        /* always vesrion 0 */
        break;
      }
      case ' ' :                // 'AVR_DA' Regacy
        JTAG2::updi_desc.signature[1] = 'A';
     76e:	a8 f4       	brcc	.+42     	; 0x79a <UPDI::enter_updi(bool)+0xfc>
     770:	80 32       	cpi	r24, 0x20	; 32
     772:	09 f0       	breq	.+2      	; 0x776 <UPDI::enter_updi(bool)+0xd8>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:675
        /* AVR Dx SIB = 'AVR     P:2D:1-3' */
        /* AVR DA SIB = '    AVR P:2D:1-3' (Regacy) */
        /* AVR EA SIB = 'AVR     P:3D:1-3' */
        /* AVR DU SIB = 'AVR     P:4D:1-3' */
        /* AVR EB SIB = 'AVR     P:5D:1-3' */
        if (JTAG2::updi_desc.nvmctrl_version == '3') {
     774:	a5 cf       	rjmp	.-182    	; 0x6c0 <UPDI::enter_updi(bool)+0x22>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:686
          bit_set(UPDI_NVMCTRL, UPDI_GEN4_bp);
        }
        else if (JTAG2::updi_desc.nvmctrl_version == '5') {
          // 'AVR_EB' series
          bit_set(UPDI_NVMCTRL, UPDI_GEN5_bp);
          bit_set(UPDI_NVMCTRL, UPDI_GEN3_bp);
     776:	81 e4       	ldi	r24, 0x41	; 65
     778:	80 93 6e 38 	sts	0x386E, r24	; 0x80386e <JTAG2::updi_desc+0x8>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:630
      /* restart target : change mode */
      if (!updi_reset(true) || !updi_reset(false)) return false;
      if (!loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS, 500)) return false;
    }
    else
      BREAK();
     77c:	93 33       	cpi	r25, 0x33	; 51
     77e:	e1 f4       	brne	.+56     	; 0x7b8 <UPDI::enter_updi(bool)+0x11a>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:643
    #ifdef ENABLE_UPDI_DOUBLESPEED
    if (hv_val && !set_cs_asi_ctra(UPDI_SET_UPDICLKSEL_8M)) return false;
    #endif

    if (is_sys_stat(UPDI_SYS_RSTSYS)) {
      updi_reset(false);
     780:	ed 9a       	sbi	0x1d, 5	; 29
     782:	1d c0       	rjmp	.+58     	; 0x7be <UPDI::enter_updi(bool)+0x120>
     784:	df dd       	rcall	.-1090   	; 0x344 <UPDI::BREAK()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:644
      if (!loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS, 500)) return false;
     786:	b4 cf       	rjmp	.-152    	; 0x6f0 <UPDI::enter_updi(bool)+0x52>
     788:	80 e0       	ldi	r24, 0x00	; 0
     78a:	0d de       	rcall	.-998    	; 0x3a6 <UPDI::updi_reset(bool)>
     78c:	64 ef       	ldi	r22, 0xF4	; 244
     78e:	71 e0       	ldi	r23, 0x01	; 1
     790:	80 e2       	ldi	r24, 0x20	; 32
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:655
    if (!read_sib(_p)) return false;
    JTAG2::updi_desc.nvmctrl_version = _p[10];
    JTAG2::updi_desc.signature[0] = 0x1e;
    JTAG2::updi_desc.signature[1] = _p[0];
    JTAG2::updi_desc.signature[2] = _p[10];
    switch (_p[0]) {
     792:	44 df       	rcall	.-376    	; 0x61c <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
     794:	81 11       	cpse	r24, r1
     796:	c7 cf       	rjmp	.-114    	; 0x726 <UPDI::enter_updi(bool)+0x88>
     798:	93 cf       	rjmp	.-218    	; 0x6c0 <UPDI::enter_updi(bool)+0x22>
     79a:	8d 36       	cpi	r24, 0x6D	; 109
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:695
      }
      default : {
        return false;
      }
    }
    bit_set(UPDI_CONTROL, UPDI_INFO_bp);
     79c:	59 f0       	breq	.+22     	; 0x7b4 <UPDI::enter_updi(bool)+0x116>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:707
    bit_set(UPDI_CONTROL, UPDI_CLKU_bp);
    do { TIM::delay_50us(); } while (tval != get_cs_asi_ctra());
  }
  #endif
  return true;
}
     79e:	84 37       	cpi	r24, 0x74	; 116
     7a0:	09 f0       	breq	.+2      	; 0x7a4 <UPDI::enter_updi(bool)+0x106>
     7a2:	8e cf       	rjmp	.-228    	; 0x6c0 <UPDI::enter_updi(bool)+0x22>
     7a4:	e0 9a       	sbi	0x1c, 0	; 28
     7a6:	8c 2f       	mov	r24, r28
     7a8:	cf 91       	pop	r28
     7aa:	1f 91       	pop	r17
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:659
    JTAG2::updi_desc.signature[2] = _p[10];
    switch (_p[0]) {
      case 'm' : {              // 'megaAVR' series
        /* megaAVR SIB = 'megaAVR P:0D:1-3' */
        /* always vesrion 0 */
        bit_set(UPDI_NVMCTRL, UPDI_LOWF_bp);
     7ac:	0f 91       	pop	r16
     7ae:	ff 90       	pop	r15
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:679
        /* AVR EB SIB = 'AVR     P:5D:1-3' */
        if (JTAG2::updi_desc.nvmctrl_version == '3') {
          // 'AVR_Ex' series
          bit_set(UPDI_NVMCTRL, UPDI_GEN3_bp);
        }
        else if (JTAG2::updi_desc.nvmctrl_version == '4') {
     7b0:	ef 90       	pop	r14
     7b2:	08 95       	ret
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:681
          // 'AVR_DU' series
          bit_set(UPDI_NVMCTRL, UPDI_GEN4_bp);
     7b4:	ef 9a       	sbi	0x1d, 7	; 29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:688
        else if (JTAG2::updi_desc.nvmctrl_version == '5') {
          // 'AVR_EB' series
          bit_set(UPDI_NVMCTRL, UPDI_GEN5_bp);
          bit_set(UPDI_NVMCTRL, UPDI_GEN3_bp);
        }
        bit_set(UPDI_NVMCTRL, UPDI_GEN2_bp);
     7b6:	f6 cf       	rjmp	.-20     	; 0x7a4 <UPDI::enter_updi(bool)+0x106>
     7b8:	94 33       	cpi	r25, 0x34	; 52
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:683
        }
        else if (JTAG2::updi_desc.nvmctrl_version == '4') {
          // 'AVR_DU' series
          bit_set(UPDI_NVMCTRL, UPDI_GEN4_bp);
        }
        else if (JTAG2::updi_desc.nvmctrl_version == '5') {
     7ba:	19 f4       	brne	.+6      	; 0x7c2 <UPDI::enter_updi(bool)+0x124>
     7bc:	ec 9a       	sbi	0x1d, 4	; 29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:685
          // 'AVR_EB' series
          bit_set(UPDI_NVMCTRL, UPDI_GEN5_bp);
     7be:	ee 9a       	sbi	0x1d, 6	; 29
     7c0:	f1 cf       	rjmp	.-30     	; 0x7a4 <UPDI::enter_updi(bool)+0x106>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:706
    UPDI_USART.CTRLB = UPDI_USART_ON | USART_RXMODE_CLK2X_gc;
    bit_set(UPDI_CONTROL, UPDI_CLKU_bp);
    do { TIM::delay_50us(); } while (tval != get_cs_asi_ctra());
  }
  #endif
  return true;
     7c2:	95 33       	cpi	r25, 0x35	; 53
     7c4:	e1 f7       	brne	.-8      	; 0x7be <UPDI::enter_updi(bool)+0x120>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:58
  /* NVMCTRL version 3,4,5 */
  uint8_t nvm_wait_v3 (void) {
    #ifdef ENABLE_DEBUG_UPDI_SENDER
    uint16_t _back = UPDI::_send_ptr;
    #endif
    while (UPDI::ld8(NVMCTRL_V3_REG_STATUS) & 3) {
     7c6:	eb 9a       	sbi	0x1d, 3	; 29
     7c8:	db cf       	rjmp	.-74     	; 0x780 <UPDI::enter_updi(bool)+0xe2>
     7ca:	c1 e0       	ldi	r28, 0x01	; 1
     7cc:	ec cf       	rjmp	.-40     	; 0x7a6 <UPDI::enter_updi(bool)+0x108>

000007ce <NVM::nvm_wait_v3()>:
_ZN3NVM11nvm_wait_v3Ev():
     7ce:	66 e0       	ldi	r22, 0x06	; 6
     7d0:	70 e1       	ldi	r23, 0x10	; 16
     7d2:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.10/cores/megaAVR/api/delay_busywait.h:31
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	ca dd       	rcall	.-1132   	; 0x36c <UPDI::ld8(unsigned long)>
     7d8:	83 70       	andi	r24, 0x03	; 3
     7da:	29 f0       	breq	.+10     	; 0x7e6 <NVM::nvm_wait_v3()+0x18>
delay_micros():
     7dc:	86 ea       	ldi	r24, 0xA6	; 166
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:64
      #ifdef ENABLE_DEBUG_UPDI_SENDER
      UPDI::_send_ptr = _back;
      #endif
      TIM::delay_50us();
    }
    return UPDI_LASTL;
     7de:	8a 95       	dec	r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:65
  }
     7e0:	f1 f7       	brne	.-4      	; 0x7de <NVM::nvm_wait_v3()+0x10>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:87
    nvm_wait();
    return nvm_ctrl_change(nvmcmd);
  }

  /* NVMCTRL version 3,4,5 */
  bool nvm_ctrl_v3 (uint8_t nvmcmd) {
     7e2:	00 c0       	rjmp	.+0      	; 0x7e4 <NVM::nvm_wait_v3()+0x16>
     7e4:	f4 cf       	rjmp	.-24     	; 0x7ce <NVM::nvm_wait_v3()>
_ZN3NVM11nvm_wait_v3Ev():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:88
    nvm_wait_v3();
     7e6:	8e b3       	in	r24, 0x1e	; 30
     7e8:	08 95       	ret

000007ea <NVM::nvm_ctrl_v3(unsigned char)>:
_ZN3NVM11nvm_ctrl_v3Eh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:89
    return nvm_ctrl_change(nvmcmd);
     7ea:	cf 93       	push	r28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:90
  }
     7ec:	c8 2f       	mov	r28, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:89
  }

  /* NVMCTRL version 3,4,5 */
  bool nvm_ctrl_v3 (uint8_t nvmcmd) {
    nvm_wait_v3();
    return nvm_ctrl_change(nvmcmd);
     7ee:	ef df       	rcall	.-34     	; 0x7ce <NVM::nvm_wait_v3()>
     7f0:	8c 2f       	mov	r24, r28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:44
  /* NVMCTRL version 0,2 */
  uint8_t nvm_wait (void) {
    #ifdef ENABLE_DEBUG_UPDI_SENDER
    uint16_t _back = UPDI::_send_ptr;
    #endif
    while (UPDI::ld8(NVMCTRL_REG_STATUS) & 3) {
     7f2:	cf 91       	pop	r28
     7f4:	13 ce       	rjmp	.-986    	; 0x41c <NVM::nvm_ctrl_change(unsigned char)>

000007f6 <NVM::nvm_wait()>:
_ZN3NVM8nvm_waitEv():
     7f6:	62 e0       	ldi	r22, 0x02	; 2
     7f8:	70 e1       	ldi	r23, 0x10	; 16
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	b6 dd       	rcall	.-1172   	; 0x36c <UPDI::ld8(unsigned long)>
     800:	83 70       	andi	r24, 0x03	; 3
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.10/cores/megaAVR/api/delay_busywait.h:31
     802:	29 f0       	breq	.+10     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
delay_micros():
     804:	86 ea       	ldi	r24, 0xA6	; 166
     806:	8a 95       	dec	r24
     808:	f1 f7       	brne	.-4      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     80a:	00 c0       	rjmp	.+0      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:50
      #ifdef ENABLE_DEBUG_UPDI_SENDER
      UPDI::_send_ptr = _back;
      #endif
      TIM::delay_50us();
    }
    return UPDI_LASTL;
     80c:	f4 cf       	rjmp	.-24     	; 0x7f6 <NVM::nvm_wait()>
_ZN3NVM8nvm_waitEv():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:51
  }
     80e:	8e b3       	in	r24, 0x1e	; 30
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:81
    if (NVM_CMD_NOCMD != nvmcmd) return nvm_ctrl(nvmcmd);
    return true;
  }

  /* NVMCTRL version 2 */
  bool nvm_ctrl_v2 (uint8_t nvmcmd) {
     810:	08 95       	ret

00000812 <NVM::nvm_ctrl_v2(unsigned char)>:
_ZN3NVM11nvm_ctrl_v2Eh():
     812:	cf 93       	push	r28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:82
    nvm_wait();
     814:	c8 2f       	mov	r28, r24
     816:	ef df       	rcall	.-34     	; 0x7f6 <NVM::nvm_wait()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:83
    return nvm_ctrl_change(nvmcmd);
     818:	8c 2f       	mov	r24, r28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:84
  }
     81a:	cf 91       	pop	r28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:83
  }

  /* NVMCTRL version 2 */
  bool nvm_ctrl_v2 (uint8_t nvmcmd) {
    nvm_wait();
    return nvm_ctrl_change(nvmcmd);
     81c:	ff cd       	rjmp	.-1026   	; 0x41c <NVM::nvm_ctrl_change(unsigned char)>

0000081e <SYS::WDT_SET(unsigned char)>:
_ZN3SYS7WDT_SETEh():
     81e:	a8 95       	wdr
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:160
/*****************
 * WDT operation *
 *****************/

void SYS::WDT_SET (uint8_t _wdt_period) {
  wdt_reset();
     820:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__RODATA_PM_OFFSET__+0x7f8101>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:161
  loop_until_bit_is_clear(WDT_STATUS, WDT_SYNCBUSY_bp);
     824:	90 fd       	sbrc	r25, 0
     826:	fc cf       	rjmp	.-8      	; 0x820 <SYS::WDT_SET(unsigned char)+0x2>
     828:	98 ed       	ldi	r25, 0xD8	; 216
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:162
  _PROTECTED_WRITE(WDT_CTRLA, _wdt_period);
     82a:	94 bf       	out	0x34, r25	; 52
     82c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__RODATA_PM_OFFSET__+0x7f8100>
     830:	08 95       	ret

00000832 <UPDI::runtime(unsigned char)>:
_ZN4UPDI7runtimeEh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:163
}
     832:	af 92       	push	r10
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:755

/************************
 * UPDI control process *
 ************************/

bool UPDI::runtime (uint8_t updi_cmd) {
     834:	bf 92       	push	r11
     836:	cf 92       	push	r12
     838:	df 92       	push	r13
     83a:	ef 92       	push	r14
     83c:	ff 92       	push	r15
     83e:	0f 93       	push	r16
     840:	1f 93       	push	r17
     842:	cf 93       	push	r28
     844:	df 93       	push	r29
     846:	cd b7       	in	r28, 0x3d	; 61
     848:	de b7       	in	r29, 0x3e	; 62
     84a:	26 97       	sbiw	r28, 0x06	; 6
     84c:	cd bf       	out	0x3d, r28	; 61
     84e:	de bf       	out	0x3e, r29	; 62
     850:	8e 83       	std	Y+6, r24	; 0x06
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:756
  volatile bool _result = false;
     852:	1d 82       	std	Y+5, r1	; 0x05
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:757
  if (setjmp(TIM::CONTEXT) == 0) {
     854:	8e e4       	ldi	r24, 0x4E	; 78
     856:	98 e3       	ldi	r25, 0x38	; 56
     858:	2a d7       	rcall	.+3668   	; 0x16ae <setjmp>
     85a:	89 2b       	or	r24, r25
     85c:	09 f0       	breq	.+2      	; 0x860 <UPDI::runtime(unsigned char)+0x2e>
     85e:	ff c0       	rjmp	.+510    	; 0xa5e <UPDI::runtime(unsigned char)+0x22c>
Timeout_Start():
     860:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:106
/*
 * Timeout control
 */

void TIM::Timeout_Start (uint16_t _ms) {
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     862:	f8 94       	cli
Timeout_Start():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     864:	10 92 8a 0a 	sts	0x0A8A, r1	; 0x800a8a <__RODATA_PM_OFFSET__+0x7f8a8a>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:107
    TCB0_CNT = 0;
     868:	10 92 8b 0a 	sts	0x0A8B, r1	; 0x800a8b <__RODATA_PM_OFFSET__+0x7f8a8b>
     86c:	28 ec       	ldi	r18, 0xC8	; 200
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:108
    TCB0_CCMP = _ms >> 2;
     86e:	30 e0       	ldi	r19, 0x00	; 0
     870:	20 93 8c 0a 	sts	0x0A8C, r18	; 0x800a8c <__RODATA_PM_OFFSET__+0x7f8a8c>
     874:	30 93 8d 0a 	sts	0x0A8D, r19	; 0x800a8d <__RODATA_PM_OFFSET__+0x7f8a8d>
     878:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:109
    TCB0_INTCTRL = TCB_CAPT_bm;
     87a:	80 93 85 0a 	sts	0x0A85, r24	; 0x800a85 <__RODATA_PM_OFFSET__+0x7f8a85>
     87e:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__RODATA_PM_OFFSET__+0x7f8a86>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:110
    TCB0_INTFLAGS = TCB_CAPT_bm;
     882:	8f e0       	ldi	r24, 0x0F	; 15
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:111
    TCB0_CTRLA = TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
     884:	80 93 80 0a 	sts	0x0A80, r24	; 0x800a80 <__RODATA_PM_OFFSET__+0x7f8a80>
__iRestore():
     888:	9f bf       	out	0x3f, r25	; 63
_ZN4UPDI7runtimeEh():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     88a:	8e 81       	ldd	r24, Y+6	; 0x06
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:759
    TIM::Timeout_Start(800);
    switch (updi_cmd) {
     88c:	83 30       	cpi	r24, 0x03	; 3
     88e:	09 f4       	brne	.+2      	; 0x892 <UPDI::runtime(unsigned char)+0x60>
     890:	8d c2       	rjmp	.+1306   	; 0xdac <UPDI::runtime(unsigned char)+0x57a>
     892:	84 30       	cpi	r24, 0x04	; 4
     894:	09 f4       	brne	.+2      	; 0x898 <UPDI::runtime(unsigned char)+0x66>
     896:	22 c3       	rjmp	.+1604   	; 0xedc <UPDI::runtime(unsigned char)+0x6aa>
write_memory():
     898:	e0 e9       	ldi	r30, 0x90	; 144
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:341
/******************
 * NVM write core *
 ******************/

bool NVM::write_memory (void) {
  uint8_t mem_type = JTAG2::packet.body[JTAG2::MEM_TYPE];
     89a:	f8 e3       	ldi	r31, 0x38	; 56
_ZN4UPDI7runtimeEh():
     89c:	82 30       	cpi	r24, 0x02	; 2
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:759
     89e:	09 f4       	brne	.+2      	; 0x8a2 <UPDI::runtime(unsigned char)+0x70>
     8a0:	70 c0       	rjmp	.+224    	; 0x982 <UPDI::runtime(unsigned char)+0x150>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:761
      case UPDI_CMD_READ_MEMORY : {
        size_t byte_count = _CAPS16(JTAG2::packet.body[JTAG2::DATA_LENGTH])->word;
     8a2:	22 85       	ldd	r18, Z+10	; 0x0a
     8a4:	33 85       	ldd	r19, Z+11	; 0x0b
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:762
        uint32_t start_addr = _CAPS32(JTAG2::packet.body[JTAG2::DATA_ADDRESS])->dword;
     8a6:	66 85       	ldd	r22, Z+14	; 0x0e
     8a8:	77 85       	ldd	r23, Z+15	; 0x0f
     8aa:	80 89       	ldd	r24, Z+16	; 0x10
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:293
/***********************
 * Memory reading core *
 ***********************/

bool NVM::read_memory (uint32_t start_addr, size_t byte_count) {
  JTAG2::packet.body[JTAG2::MESSAGE_ID] = JTAG2::RSP_MEMORY;
     8ac:	91 89       	ldd	r25, Z+17	; 0x11
read_memory():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:297
  uint8_t *data = &JTAG2::packet.body[JTAG2::RSP_DATA];

  /* Reads from 1 to 256 bytes and even bytes 258 to 512 are allowed */
  if (byte_count == 0 || byte_count > 512 || (byte_count > 256 && byte_count & 1)) {
     8ae:	42 e8       	ldi	r20, 0x82	; 130
     8b0:	40 87       	std	Z+8, r20	; 0x08
     8b2:	a9 01       	movw	r20, r18
     8b4:	41 50       	subi	r20, 0x01	; 1
     8b6:	51 09       	sbc	r21, r1
     8b8:	41 15       	cp	r20, r1
     8ba:	e2 e0       	ldi	r30, 0x02	; 2
     8bc:	5e 07       	cpc	r21, r30
     8be:	30 f4       	brcc	.+12     	; 0x8cc <UPDI::runtime(unsigned char)+0x9a>
     8c0:	21 30       	cpi	r18, 0x01	; 1
     8c2:	f1 e0       	ldi	r31, 0x01	; 1
     8c4:	3f 07       	cpc	r19, r31
     8c6:	40 f0       	brcs	.+16     	; 0x8d8 <UPDI::runtime(unsigned char)+0xa6>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:298
    set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
     8c8:	20 ff       	sbrs	r18, 0
     8ca:	06 c0       	rjmp	.+12     	; 0x8d8 <UPDI::runtime(unsigned char)+0xa6>
     8cc:	83 ea       	ldi	r24, 0xA3	; 163
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:310
    #ifdef ENABLE_ADDFEATS_LOCK_SIG
    if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_PROG_bp)
      && JTAG2::packet.body[JTAG2::MEM_TYPE] == JTAG2::MTYPE_SIGN_JTAG) {
      /* Signature reading branches to special processing */
      JTAG2::packet.body[JTAG2::RSP_DATA] = JTAG2::updi_desc.signature[(uint8_t)start_addr & 3];
      return true;
     8ce:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:781
          #endif
        }
        break;
      }
      case UPDI_CMD_GO : {
        _result = Target_Reset(true) && Target_Reset(false);
     8d0:	ba dd       	rcall	.-1164   	; 0x446 <JTAG2::set_response(JTAG2::jtag_response_e)>
_ZN4UPDI7runtimeEh():
     8d2:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:301
  /* Reads from 1 to 256 bytes and even bytes 258 to 512 are allowed */
  if (byte_count == 0 || byte_count > 512 || (byte_count > 256 && byte_count & 1)) {
    set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
    return true;
  }
  JTAG2::packet.size_word[0] = byte_count + 1;
     8d4:	8d 83       	std	Y+5, r24	; 0x05
     8d6:	c3 c0       	rjmp	.+390    	; 0xa5e <UPDI::runtime(unsigned char)+0x22c>
read_memory():
     8d8:	a0 e9       	ldi	r26, 0x90	; 144
     8da:	b8 e3       	ldi	r27, 0x38	; 56
     8dc:	f9 01       	movw	r30, r18
     8de:	31 96       	adiw	r30, 0x01	; 1
     8e0:	13 96       	adiw	r26, 0x03	; 3
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:304

  /* Reading only 1 byte may be special */
  if (byte_count == 1) {
     8e2:	ed 93       	st	X+, r30
     8e4:	fc 93       	st	X, r31
     8e6:	14 97       	sbiw	r26, 0x04	; 4
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:307
    #ifdef ENABLE_ADDFEATS_LOCK_SIG
    if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_PROG_bp)
      && JTAG2::packet.body[JTAG2::MEM_TYPE] == JTAG2::MTYPE_SIGN_JTAG) {
     8e8:	21 30       	cpi	r18, 0x01	; 1
     8ea:	31 05       	cpc	r19, r1
     8ec:	81 f4       	brne	.+32     	; 0x90e <UPDI::runtime(unsigned char)+0xdc>
     8ee:	e1 99       	sbic	0x1c, 1	; 28
     8f0:	0e c0       	rjmp	.+28     	; 0x90e <UPDI::runtime(unsigned char)+0xdc>
     8f2:	19 96       	adiw	r26, 0x09	; 9
     8f4:	ec 91       	ld	r30, X
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:309
      /* Signature reading branches to special processing */
      JTAG2::packet.body[JTAG2::RSP_DATA] = JTAG2::updi_desc.signature[(uint8_t)start_addr & 3];
     8f6:	19 97       	sbiw	r26, 0x09	; 9
     8f8:	e4 3b       	cpi	r30, 0xB4	; 180
     8fa:	49 f4       	brne	.+18     	; 0x90e <UPDI::runtime(unsigned char)+0xdc>
     8fc:	63 70       	andi	r22, 0x03	; 3
     8fe:	e6 2f       	mov	r30, r22
     900:	f0 e0       	ldi	r31, 0x00	; 0
     902:	ea 59       	subi	r30, 0x9A	; 154
     904:	f7 4c       	sbci	r31, 0xC7	; 199
     906:	87 81       	ldd	r24, Z+7	; 0x07
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:324
      return true;
    }
    #endif
  }

  if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_PROG_bp)) {
     908:	19 96       	adiw	r26, 0x09	; 9
     90a:	8c 93       	st	X, r24
     90c:	e2 cf       	rjmp	.-60     	; 0x8d2 <UPDI::runtime(unsigned char)+0xa0>
     90e:	e1 99       	sbic	0x1c, 1	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:326
    /* A normal read when the device is locked returns a dummy. */
    do { *data++ = 0xFF; } while (--byte_count);
     910:	08 c0       	rjmp	.+16     	; 0x922 <UPDI::runtime(unsigned char)+0xf0>
     912:	e9 e9       	ldi	r30, 0x99	; 153
     914:	f8 e3       	ldi	r31, 0x38	; 56
     916:	8f ef       	ldi	r24, 0xFF	; 255
     918:	81 93       	st	Z+, r24
     91a:	21 50       	subi	r18, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:330
    return true;
  }

  if ((byte_count - 1) >> 8)
     91c:	31 09       	sbc	r19, r1
     91e:	e1 f7       	brne	.-8      	; 0x918 <UPDI::runtime(unsigned char)+0xe6>
     920:	d8 cf       	rjmp	.-80     	; 0x8d2 <UPDI::runtime(unsigned char)+0xa0>
     922:	45 2f       	mov	r20, r21
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:298
  do { *data++ = RECV(); } while (--len);
  return UPDI_LASTH == 0;
}

bool UPDI::lds16 (uint32_t addr, uint8_t *data, size_t len) {
  uint8_t repeat = (uint16_t)len >> 1;
     924:	55 27       	eor	r21, r21
     926:	45 2b       	or	r20, r21
     928:	e1 f0       	breq	.+56     	; 0x962 <UPDI::runtime(unsigned char)+0x130>
lds16():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:299
  if (!send_repeat_header(addr, UPDI_LD|UPDI_DATA2, repeat)) return false;
     92a:	36 95       	lsr	r19
     92c:	27 95       	ror	r18
     92e:	f2 2e       	mov	r15, r18
     930:	41 e2       	ldi	r20, 0x21	; 33
     932:	c9 dc       	rcall	.-1646   	; 0x2c6 <UPDI::send_repeat_header(unsigned long, unsigned char, unsigned char)>
     934:	00 e9       	ldi	r16, 0x90	; 144
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:266
bool NVM::chip_erase (void) {
  /* NVMCTRL processing steps vary depending on the version. */
  if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN4_bp)
    || bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp)) {
    /* version 3,4,5 */
    if (!nvm_ctrl_v3(NVM_V2_CMD_CHER)) return false;
     936:	18 e3       	ldi	r17, 0x38	; 56
     938:	81 11       	cpse	r24, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:301
  do {
    *data++ = RECV();
     93a:	02 c0       	rjmp	.+4      	; 0x940 <UPDI::runtime(unsigned char)+0x10e>
_ZN4UPDI7runtimeEh():
     93c:	80 e0       	ldi	r24, 0x00	; 0
     93e:	ca cf       	rjmp	.-108    	; 0x8d4 <UPDI::runtime(unsigned char)+0xa2>
lds16():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:302
    *data++ = RECV();
     940:	e4 db       	rcall	.-2104   	; 0x10a <UPDI::RECV()>
     942:	f8 01       	movw	r30, r16
     944:	81 87       	std	Z+9, r24	; 0x09
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:303
  } while (--repeat);
     946:	e1 db       	rcall	.-2110   	; 0x10a <UPDI::RECV()>
     948:	f8 01       	movw	r30, r16
     94a:	82 87       	std	Z+10, r24	; 0x0a
     94c:	fa 94       	dec	r15
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:294
}

bool UPDI::lds8 (uint32_t addr, uint8_t *data, uint8_t len) {
  if (!send_repeat_header(addr, UPDI_LD|UPDI_DATA1, len)) return false;
  do { *data++ = RECV(); } while (--len);
  return UPDI_LASTH == 0;
     94e:	0e 5f       	subi	r16, 0xFE	; 254
     950:	1f 4f       	sbci	r17, 0xFF	; 255
     952:	f1 10       	cpse	r15, r1
     954:	f5 cf       	rjmp	.-22     	; 0x940 <UPDI::runtime(unsigned char)+0x10e>
lds8():
     956:	9f b3       	in	r25, 0x1f	; 31
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:292
  while (!send_bytes(set_ptr, sizeof(set_ptr) - 1)) BREAK();
  return RECV();
}

bool UPDI::lds8 (uint32_t addr, uint8_t *data, uint8_t len) {
  if (!send_repeat_header(addr, UPDI_LD|UPDI_DATA1, len)) return false;
     958:	81 e0       	ldi	r24, 0x01	; 1
     95a:	99 23       	and	r25, r25
     95c:	09 f4       	brne	.+2      	; 0x960 <UPDI::runtime(unsigned char)+0x12e>
     95e:	ba cf       	rjmp	.-140    	; 0x8d4 <UPDI::runtime(unsigned char)+0xa2>
     960:	ed cf       	rjmp	.-38     	; 0x93c <UPDI::runtime(unsigned char)+0x10a>
read_memory():
     962:	12 2f       	mov	r17, r18
lds8():
     964:	40 e2       	ldi	r20, 0x20	; 32
     966:	af dc       	rcall	.-1698   	; 0x2c6 <UPDI::send_repeat_header(unsigned long, unsigned char, unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:293
  do { *data++ = RECV(); } while (--len);
     968:	88 23       	and	r24, r24
     96a:	41 f3       	breq	.-48     	; 0x93c <UPDI::runtime(unsigned char)+0x10a>
     96c:	f9 e9       	ldi	r31, 0x99	; 153
     96e:	ef 2e       	mov	r14, r31
     970:	f8 e3       	ldi	r31, 0x38	; 56
     972:	ff 2e       	mov	r15, r31
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:341
/******************
 * NVM write core *
 ******************/

bool NVM::write_memory (void) {
  uint8_t mem_type = JTAG2::packet.body[JTAG2::MEM_TYPE];
     974:	ca db       	rcall	.-2156   	; 0x10a <UPDI::RECV()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:343
  uint8_t *data = &JTAG2::packet.body[JTAG2::DATA_START];
  size_t byte_count = _CAPS16(JTAG2::packet.body[JTAG2::DATA_LENGTH])->word;
     976:	f7 01       	movw	r30, r14
     978:	81 93       	st	Z+, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:344
  uint32_t start_addr = _CAPS32(JTAG2::packet.body[JTAG2::DATA_ADDRESS])->dword;
     97a:	7f 01       	movw	r14, r30
     97c:	11 50       	subi	r17, 0x01	; 1
     97e:	d1 f7       	brne	.-12     	; 0x974 <UPDI::runtime(unsigned char)+0x142>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:347

  /* Address specification outside the processing range is considered an IO area operation */
  if (start_addr >> 24) {
     980:	ea cf       	rjmp	.-44     	; 0x956 <UPDI::runtime(unsigned char)+0x124>
write_memory():
     982:	b1 84       	ldd	r11, Z+9	; 0x09
     984:	02 85       	ldd	r16, Z+10	; 0x0a
     986:	13 85       	ldd	r17, Z+11	; 0x0b
     988:	c6 84       	ldd	r12, Z+14	; 0x0e
     98a:	d7 84       	ldd	r13, Z+15	; 0x0f
     98c:	e0 88       	ldd	r14, Z+16	; 0x10
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:348
    start_addr &= 0xFFFF;
     98e:	f1 88       	ldd	r15, Z+17	; 0x11
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:349
    mem_type = JTAG2::MTYPE_SRAM;
     990:	8f 2d       	mov	r24, r15
     992:	99 27       	eor	r25, r25
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:355
  }

  /* Can only be written to USERROW on locked devices */
  /* This write is only allowed in multiples of 32 bytes */
  if (bit_is_set(UPDI_CONTROL, UPDI::UPDI_INFO_bp)
   && mem_type == JTAG2::MTYPE_XMEGA_USERSIG) // 0xC5
     994:	aa 27       	eor	r26, r26
     996:	bb 27       	eor	r27, r27
     998:	89 2b       	or	r24, r25
     99a:	8a 2b       	or	r24, r26
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:495
 * USERROW region writing *
 *****************************************/

bool UPDI::write_userrow (const uint32_t start_addr, uint8_t *data, const size_t byte_count) {
  /* If UPDI is not accessible, the operation cannot continue. */
  if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_INFO_bp)) return false;
     99c:	8b 2b       	or	r24, r27
     99e:	21 f0       	breq	.+8      	; 0x9a8 <UPDI::runtime(unsigned char)+0x176>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:366
      /* If you are instructed to write to the fuse, try High-Voltage control. */
      case JTAG2::MTYPE_LOCK_BITS :           // 0xB3
      case JTAG2::MTYPE_FUSE_BITS : {         // 0xB2
        if (UPDI::enter_updi(false) && UPDI::enter_prog()) break;
      }
      default : return false;
     9a0:	ee 24       	eor	r14, r14
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:498

  /* Only data lengths that are multiples of 32 bytes are allowed. */
  if (byte_count == 0 || byte_count & 0x1F) {
     9a2:	ff 24       	eor	r15, r15
_ZN4UPDI7runtimeEh():
     9a4:	70 e2       	ldi	r23, 0x20	; 32
     9a6:	b7 2e       	mov	r11, r23
write_memory():
     9a8:	e0 9b       	sbis	0x1c, 0	; 28
     9aa:	73 c0       	rjmp	.+230    	; 0xa92 <UPDI::runtime(unsigned char)+0x260>
     9ac:	f5 ec       	ldi	r31, 0xC5	; 197
     9ae:	bf 12       	cpse	r11, r31
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:499
    JTAG2::packet.body[JTAG2::MESSAGE_ID] = JTAG2::RSP_ILLEGAL_MEMORY_RANGE;
     9b0:	70 c0       	rjmp	.+224    	; 0xa92 <UPDI::runtime(unsigned char)+0x260>
write_userrow():
     9b2:	e0 99       	sbic	0x1c, 0	; 28
     9b4:	02 c0       	rjmp	.+4      	; 0x9ba <UPDI::runtime(unsigned char)+0x188>
_ZN4UPDI7runtimeEh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:409
  }

  /* Other writes are allowed from 1 to 256 bytes */
  if (byte_count == 0 || byte_count > 256) {
    set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
    return true;
     9b6:	10 e0       	ldi	r17, 0x00	; 0
     9b8:	51 c0       	rjmp	.+162    	; 0xa5c <UPDI::runtime(unsigned char)+0x22a>
write_userrow():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:502
    return true;
  }
  drain();
     9ba:	01 15       	cp	r16, r1
     9bc:	11 05       	cpc	r17, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:503
  if (!loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS, 500)) return false;
     9be:	29 f0       	breq	.+10     	; 0x9ca <UPDI::runtime(unsigned char)+0x198>
     9c0:	c8 01       	movw	r24, r16
     9c2:	8f 71       	andi	r24, 0x1F	; 31
     9c4:	99 27       	eor	r25, r25
     9c6:	89 2b       	or	r24, r25
     9c8:	29 f0       	breq	.+10     	; 0x9d4 <UPDI::runtime(unsigned char)+0x1a2>
     9ca:	83 ea       	ldi	r24, 0xA3	; 163
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:431
  return loop_until_key_stat_is_set(UPDI_KEY_CHIPERASE);
}

/* __attribute__((optimize("O0"))) */
bool UPDI::set_urowwrite_key (void) {
  if (!send_bytes(urowwrite_key, sizeof(urowwrite_key))) return false;
     9cc:	80 93 98 38 	sts	0x3898, r24	; 0x803898 <JTAG2::packet+0x8>
_ZN4UPDI7runtimeEh():
     9d0:	11 e0       	ldi	r17, 0x01	; 1
     9d2:	44 c0       	rjmp	.+136    	; 0xa5c <UPDI::runtime(unsigned char)+0x22a>
write_userrow():
     9d4:	d8 dc       	rcall	.-1616   	; 0x386 <UPDI::drain()>
     9d6:	64 ef       	ldi	r22, 0xF4	; 244
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:432
  return loop_until_key_stat_is_set(UPDI_KEY_UROWWRITE);
     9d8:	71 e0       	ldi	r23, 0x01	; 1
     9da:	80 e2       	ldi	r24, 0x20	; 32
     9dc:	1f de       	rcall	.-962    	; 0x61c <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:506
  }
  drain();
  if (!loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS, 500)) return false;

  /* Send the authentication key */
  if (!set_urowwrite_key()) return false;
     9de:	88 23       	and	r24, r24
     9e0:	51 f3       	breq	.-44     	; 0x9b6 <UPDI::runtime(unsigned char)+0x184>
set_urowwrite_key():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:509

  /* Transition to USERROW mode by system reset */
  if (!updi_reset(true) || !updi_reset(false)) return false;
     9e2:	6a e0       	ldi	r22, 0x0A	; 10
     9e4:	89 e2       	ldi	r24, 0x29	; 41
     9e6:	98 e3       	ldi	r25, 0x38	; 56
     9e8:	b6 db       	rcall	.-2196   	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     9ea:	88 23       	and	r24, r24
     9ec:	21 f3       	breq	.-56     	; 0x9b6 <UPDI::runtime(unsigned char)+0x184>
     9ee:	80 e2       	ldi	r24, 0x20	; 32
     9f0:	a1 dd       	rcall	.-1214   	; 0x534 <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.27]>
write_userrow():
     9f2:	88 23       	and	r24, r24
     9f4:	01 f3       	breq	.-64     	; 0x9b6 <UPDI::runtime(unsigned char)+0x184>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:512

  /* Wait for system reset to finish */
  if (!loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS, 500)) return false;
     9f6:	81 e0       	ldi	r24, 0x01	; 1
     9f8:	d6 dc       	rcall	.-1620   	; 0x3a6 <UPDI::updi_reset(bool)>
     9fa:	88 23       	and	r24, r24
     9fc:	e1 f2       	breq	.-72     	; 0x9b6 <UPDI::runtime(unsigned char)+0x184>
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	d2 dc       	rcall	.-1628   	; 0x3a6 <UPDI::updi_reset(bool)>
     a02:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:515

  /* Make sure you are in USERROW mode */
  loop_until_sys_stat_is_set(UPDI_SYS_UROWPROG);
     a04:	c1 f2       	breq	.-80     	; 0x9b6 <UPDI::runtime(unsigned char)+0x184>
     a06:	64 ef       	ldi	r22, 0xF4	; 244
     a08:	71 e0       	ldi	r23, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:518

  /* Write data to buffer memory */
  sts8rsd(start_addr, data, byte_count);
     a0a:	80 e2       	ldi	r24, 0x20	; 32
     a0c:	07 de       	rcall	.-1010   	; 0x61c <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
     a0e:	88 23       	and	r24, r24
     a10:	91 f2       	breq	.-92     	; 0x9b6 <UPDI::runtime(unsigned char)+0x184>
     a12:	84 e0       	ldi	r24, 0x04	; 4
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:522
  /* Ignore any errors here */

  /* After writing the memory, write the end flag */
  set_cs_stat(UPDI_CS_ASI_SYS_CTRLA, UPDI_SET_UROWDONE | UPDI_SET_CLKREQ);
     a14:	b1 dd       	rcall	.-1182   	; 0x578 <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.26]>
     a16:	40 2f       	mov	r20, r16
     a18:	c7 01       	movw	r24, r14
     a1a:	b6 01       	movw	r22, r12
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:527

  /* Wait for data to be transferred to USERROW */
  /* AVR_Dx requires at least 100 * 50us wait loops */
  /* AVR_Ex may not end forever, so give up midway */
  loop_until_sys_stat_is_clear(UPDI_SYS_UROWPROG, 200);
     a1c:	b5 db       	rcall	.-2198   	; 0x188 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.21]>
     a1e:	63 e0       	ldi	r22, 0x03	; 3
     a20:	8a e0       	ldi	r24, 0x0A	; 10
     a22:	aa db       	rcall	.-2220   	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:531
  /* Ignore any errors here */

  /* Step completed */
  set_cs_stat(UPDI_CS_ASI_KEY_STATUS, UPDI_KEY_UROWWRITE);
     a24:	68 ec       	ldi	r22, 0xC8	; 200
     a26:	70 e0       	ldi	r23, 0x00	; 0
     a28:	84 e0       	ldi	r24, 0x04	; 4
     a2a:	f8 dd       	rcall	.-1040   	; 0x61c <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:534

  /* If previously in program mode, send unlock key */
  if (bit_is_set(UPDI_CONTROL, UPDI_PROG_bp)) {
     a2c:	60 e2       	ldi	r22, 0x20	; 32
     a2e:	87 e0       	ldi	r24, 0x07	; 7
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:539
    set_nvmprog_key();
  }

  /* Exit USERROW mode */
  if (!updi_reset(true) || !updi_reset(false)) return false;
     a30:	a3 db       	rcall	.-2234   	; 0x178 <UPDI::set_cs_stat(unsigned char, unsigned char)>
     a32:	e1 99       	sbic	0x1c, 1	; 28
     a34:	2c c0       	rjmp	.+88     	; 0xa8e <UPDI::runtime(unsigned char)+0x25c>
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	b6 dc       	rcall	.-1684   	; 0x3a6 <UPDI::updi_reset(bool)>
     a3a:	88 23       	and	r24, r24
     a3c:	09 f4       	brne	.+2      	; 0xa40 <UPDI::runtime(unsigned char)+0x20e>
     a3e:	bb cf       	rjmp	.-138    	; 0x9b6 <UPDI::runtime(unsigned char)+0x184>
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	b1 dc       	rcall	.-1694   	; 0x3a6 <UPDI::updi_reset(bool)>
     a44:	18 2f       	mov	r17, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:540
  loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
     a46:	88 23       	and	r24, r24
     a48:	09 f4       	brne	.+2      	; 0xa4c <UPDI::runtime(unsigned char)+0x21a>
     a4a:	b5 cf       	rjmp	.-150    	; 0x9b6 <UPDI::runtime(unsigned char)+0x184>
     a4c:	70 e0       	ldi	r23, 0x00	; 0
     a4e:	60 e0       	ldi	r22, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:543

  /* Make sure you are in program mode if necessary */
  if (bit_is_set(UPDI_CONTROL, UPDI_PROG_bp)) {
     a50:	80 e2       	ldi	r24, 0x20	; 32
     a52:	e4 dd       	rcall	.-1080   	; 0x61c <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:544
    loop_until_sys_stat_is_set(UPDI_SYS_NVMPROG);
     a54:	e1 9b       	sbis	0x1c, 1	; 28
     a56:	02 c0       	rjmp	.+4      	; 0xa5c <UPDI::runtime(unsigned char)+0x22a>
     a58:	88 e0       	ldi	r24, 0x08	; 8
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:767
        uint32_t start_addr = _CAPS32(JTAG2::packet.body[JTAG2::DATA_ADDRESS])->dword;
        _result = NVM::read_memory(start_addr, byte_count);
        break;
      }
      case UPDI_CMD_WRITE_MEMORY : {
        _result = NVM::write_memory();
     a5a:	8e dd       	rcall	.-1252   	; 0x578 <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.26]>
_ZN4UPDI7runtimeEh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:786
        _result = Target_Reset(true) && Target_Reset(false);
        break;
      }
    }
  }
  TIM::Timeout_Stop();
     a5c:	1d 83       	std	Y+5, r17	; 0x05
     a5e:	ce dc       	rcall	.-1636   	; 0x3fc <TIM::Timeout_Stop()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:787
  UPDI_USART.CTRLB = UPDI_USART_ON;
     a60:	88 ec       	ldi	r24, 0xC8	; 200
     a62:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__RODATA_PM_OFFSET__+0x7f8806>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:788
  wdt_reset();
     a66:	a8 95       	wdr
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:789
  if (!_result) drain();
     a68:	8d 81       	ldd	r24, Y+5	; 0x05
     a6a:	88 23       	and	r24, r24
     a6c:	09 f4       	brne	.+2      	; 0xa70 <UPDI::runtime(unsigned char)+0x23e>
     a6e:	3e c2       	rjmp	.+1148   	; 0xeec <UPDI::runtime(unsigned char)+0x6ba>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:790
  return _result;
     a70:	8d 81       	ldd	r24, Y+5	; 0x05
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:791
}
     a72:	26 96       	adiw	r28, 0x06	; 6
     a74:	cd bf       	out	0x3d, r28	; 61
     a76:	de bf       	out	0x3e, r29	; 62
     a78:	df 91       	pop	r29
     a7a:	cf 91       	pop	r28
     a7c:	1f 91       	pop	r17
     a7e:	0f 91       	pop	r16
     a80:	ff 90       	pop	r15
     a82:	ef 90       	pop	r14
     a84:	df 90       	pop	r13
     a86:	cf 90       	pop	r12
     a88:	bf 90       	pop	r11
     a8a:	af 90       	pop	r10
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:535
  /* Step completed */
  set_cs_stat(UPDI_CS_ASI_KEY_STATUS, UPDI_KEY_UROWWRITE);

  /* If previously in program mode, send unlock key */
  if (bit_is_set(UPDI_CONTROL, UPDI_PROG_bp)) {
    set_nvmprog_key();
     a8c:	08 95       	ret
write_userrow():
     a8e:	6a dd       	rcall	.-1324   	; 0x564 <UPDI::set_nvmprog_key()>
     a90:	d2 cf       	rjmp	.-92     	; 0xa36 <UPDI::runtime(unsigned char)+0x204>
write_memory():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:359
  if (bit_is_set(UPDI_CONTROL, UPDI::UPDI_INFO_bp)
   && mem_type == JTAG2::MTYPE_XMEGA_USERSIG) // 0xC5
    return UPDI::write_userrow(start_addr, data, byte_count);

  /* From this point on, only program mode is allowed. */
  if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_PROG_bp)) {
     a92:	e1 9b       	sbis	0x1c, 1	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:371
      default : return false;
    }
  }

  /* About flash regions */
  switch (mem_type) {
     a94:	28 c0       	rjmp	.+80     	; 0xae6 <UPDI::runtime(unsigned char)+0x2b4>
     a96:	81 ec       	ldi	r24, 0xC1	; 193
     a98:	8b 15       	cp	r24, r11
     a9a:	b8 f0       	brcs	.+46     	; 0xaca <UPDI::runtime(unsigned char)+0x298>
     a9c:	90 ec       	ldi	r25, 0xC0	; 192
     a9e:	b9 16       	cp	r11, r25
     aa0:	18 f4       	brcc	.+6      	; 0xaa8 <UPDI::runtime(unsigned char)+0x276>
     aa2:	e0 eb       	ldi	r30, 0xB0	; 176
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:378
    case JTAG2::MTYPE_XMEGA_APP_FLASH :       // 0xC0
    case JTAG2::MTYPE_XMEGA_BOOT_FLASH :      // 0xC1
    case JTAG2::MTYPE_XMEGA_USERSIG : {       // 0xC5

      /* Instructions with mismatched page sizes are rejected */
      if (!check_pagesize(JTAG2::updi_desc.flash_page_size, byte_count)) {
     aa4:	be 12       	cpse	r11, r30
     aa6:	14 c0       	rjmp	.+40     	; 0xad0 <UPDI::runtime(unsigned char)+0x29e>
     aa8:	80 91 6a 38 	lds	r24, 0x386A	; 0x80386a <JTAG2::updi_desc+0x4>
     aac:	90 91 6b 38 	lds	r25, 0x386B	; 0x80386b <JTAG2::updi_desc+0x5>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:28

  bool write_fuse (uint16_t addr, uint8_t data);
  uint16_t before_addr = ~0;

  bool check_pagesize (uint16_t seed, uint16_t test) {
    while (test != seed) {
     ab0:	9c 01       	movw	r18, r24
check_pagesize():
     ab2:	02 17       	cp	r16, r18
     ab4:	13 07       	cpc	r17, r19
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:29
      seed >>= 1;
     ab6:	09 f4       	brne	.+2      	; 0xaba <UPDI::runtime(unsigned char)+0x288>
     ab8:	1b c2       	rjmp	.+1078   	; 0xef0 <UPDI::runtime(unsigned char)+0x6be>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:30
      if (seed < 2) return false;
     aba:	36 95       	lsr	r19
     abc:	27 95       	ror	r18
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:380
    case JTAG2::MTYPE_XMEGA_USERSIG : {       // 0xC5

      /* Instructions with mismatched page sizes are rejected */
      if (!check_pagesize(JTAG2::updi_desc.flash_page_size, byte_count)) {
        /* Kill the process with a strong error */
        set_response(JTAG2::RSP_FAILED);
     abe:	22 30       	cpi	r18, 0x02	; 2
     ac0:	31 05       	cpc	r19, r1
     ac2:	b8 f7       	brcc	.-18     	; 0xab2 <UPDI::runtime(unsigned char)+0x280>
write_memory():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:371
      default : return false;
    }
  }

  /* About flash regions */
  switch (mem_type) {
     ac4:	80 ea       	ldi	r24, 0xA0	; 160
     ac6:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:407
        return write_flash_v0(start_addr, data, byte_count, is_bound);
    }
  }

  /* Other writes are allowed from 1 to 256 bytes */
  if (byte_count == 0 || byte_count > 256) {
     ac8:	0c c0       	rjmp	.+24     	; 0xae2 <UPDI::runtime(unsigned char)+0x2b0>
     aca:	f5 ec       	ldi	r31, 0xC5	; 197
     acc:	bf 16       	cp	r11, r31
     ace:	61 f3       	breq	.-40     	; 0xaa8 <UPDI::runtime(unsigned char)+0x276>
     ad0:	c8 01       	movw	r24, r16
     ad2:	01 97       	sbiw	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:408
    set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
     ad4:	8f 3f       	cpi	r24, 0xFF	; 255
     ad6:	91 05       	cpc	r25, r1
     ad8:	09 f0       	breq	.+2      	; 0xadc <UPDI::runtime(unsigned char)+0x2aa>
     ada:	08 f4       	brcc	.+2      	; 0xade <UPDI::runtime(unsigned char)+0x2ac>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:360
   && mem_type == JTAG2::MTYPE_XMEGA_USERSIG) // 0xC5
    return UPDI::write_userrow(start_addr, data, byte_count);

  /* From this point on, only program mode is allowed. */
  if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_PROG_bp)) {
    switch (mem_type) {
     adc:	c5 c0       	rjmp	.+394    	; 0xc68 <UPDI::runtime(unsigned char)+0x436>
     ade:	83 ea       	ldi	r24, 0xA3	; 163
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	b1 dc       	rcall	.-1694   	; 0x446 <JTAG2::set_response(JTAG2::jtag_response_e)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:364
      /* If you are instructed to write to the fuse, try High-Voltage control. */
      case JTAG2::MTYPE_LOCK_BITS :           // 0xB3
      case JTAG2::MTYPE_FUSE_BITS : {         // 0xB2
        if (UPDI::enter_updi(false) && UPDI::enter_prog()) break;
     ae4:	75 cf       	rjmp	.-278    	; 0x9d0 <UPDI::runtime(unsigned char)+0x19e>
     ae6:	8e e4       	ldi	r24, 0x4E	; 78
     ae8:	8b 0d       	add	r24, r11
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	08 f0       	brcs	.+2      	; 0xaf0 <UPDI::runtime(unsigned char)+0x2be>
     aee:	63 cf       	rjmp	.-314    	; 0x9b6 <UPDI::runtime(unsigned char)+0x184>
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	d5 dd       	rcall	.-1110   	; 0x69e <UPDI::enter_updi(bool)>
     af4:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:389
      /* A page block must be erased before writing to a new page block.
         The new AVRDUDE splits large page blocks into multiple queries to read-modify-write.
         This prevents atomic operations and requires special handling. */
      bool is_bound = bit_is_clear(UPDI_CONTROL, UPDI::UPDI_ERFM_bp);
      if (is_bound) {
        uint16_t block_addr = (start_addr >> 1) & ~((JTAG2::updi_desc.flash_page_size - 1) >> 1);
     af6:	09 f4       	brne	.+2      	; 0xafa <UPDI::runtime(unsigned char)+0x2c8>
     af8:	5e cf       	rjmp	.-324    	; 0x9b6 <UPDI::runtime(unsigned char)+0x184>
     afa:	a7 dd       	rcall	.-1202   	; 0x64a <UPDI::enter_prog()>
     afc:	81 11       	cpse	r24, r1
     afe:	cb cf       	rjmp	.-106    	; 0xa96 <UPDI::runtime(unsigned char)+0x264>
     b00:	5a cf       	rjmp	.-332    	; 0x9b6 <UPDI::runtime(unsigned char)+0x184>
     b02:	01 97       	sbiw	r24, 0x01	; 1
     b04:	96 95       	lsr	r25
     b06:	87 95       	ror	r24
     b08:	9c 01       	movw	r18, r24
     b0a:	20 95       	com	r18
     b0c:	30 95       	com	r19
     b0e:	d7 01       	movw	r26, r14
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:390
        is_bound = before_addr != block_addr;
     b10:	c6 01       	movw	r24, r12
     b12:	b6 95       	lsr	r27
     b14:	a7 95       	ror	r26
     b16:	97 95       	ror	r25
     b18:	87 95       	ror	r24
     b1a:	82 23       	and	r24, r18
     b1c:	93 23       	and	r25, r19
     b1e:	21 e0       	ldi	r18, 0x01	; 1
     b20:	40 91 33 38 	lds	r20, 0x3833	; 0x803833 <NVM::before_addr>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:391
        before_addr = block_addr;
     b24:	50 91 34 38 	lds	r21, 0x3834	; 0x803834 <NVM::before_addr+0x1>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:395
      }

      /* NVMCTRL processing steps vary depending on the version. */
      if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN4_bp))
     b28:	48 17       	cp	r20, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:188

  bool write_flash_v4 (uint32_t start_addr, uint8_t *data, size_t byte_count, bool is_bound) {
    /* NVMCTRL version 4 */
    /* If the chip is not erased, erase the page. */
    /* However, only when the beginning of the page boundary is addressed */
    if (is_bound) {
     b2a:	59 07       	cpc	r21, r25
     b2c:	09 f4       	brne	.+2      	; 0xb30 <UPDI::runtime(unsigned char)+0x2fe>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:192
      if (!nvm_ctrl_v3(NVM_V2_CMD_FLPER)) return false;
      if (!UPDI::st8(start_addr, 0xFF)) return false;
    }
    if (!nvm_ctrl_v3(NVM_V2_CMD_FLWR)) return false;
     b2e:	20 e0       	ldi	r18, 0x00	; 0
     b30:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <NVM::before_addr>
     b34:	90 93 34 38 	sts	0x3834, r25	; 0x803834 <NVM::before_addr+0x1>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:195

    /* This version allows bulk writes of 512 bytes */
    if (byte_count == 1) UPDI::st8(start_addr, *data);
     b38:	ec 9b       	sbis	0x1d, 4	; 29
     b3a:	2d c0       	rjmp	.+90     	; 0xb96 <UPDI::runtime(unsigned char)+0x364>
write_flash_v4():
     b3c:	21 11       	cpse	r18, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:123
      set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
      return true;
    }
    if (!nvm_ctrl_v3(NVM_V2_CMD_EEERWR)) return false;

    if (byte_count == 1) UPDI::st8(start_addr, *data);
     b3e:	0e c0       	rjmp	.+28     	; 0xb5c <UPDI::runtime(unsigned char)+0x32a>
     b40:	82 e0       	ldi	r24, 0x02	; 2
     b42:	53 de       	rcall	.-858    	; 0x7ea <NVM::nvm_ctrl_v3(unsigned char)>
     b44:	88 23       	and	r24, r24
     b46:	09 f4       	brne	.+2      	; 0xb4a <UPDI::runtime(unsigned char)+0x318>
     b48:	36 cf       	rjmp	.-404    	; 0x9b6 <UPDI::runtime(unsigned char)+0x184>
     b4a:	01 30       	cpi	r16, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:189
  bool write_flash_v4 (uint32_t start_addr, uint8_t *data, size_t byte_count, bool is_bound) {
    /* NVMCTRL version 4 */
    /* If the chip is not erased, erase the page. */
    /* However, only when the beginning of the page boundary is addressed */
    if (is_bound) {
      if (!nvm_ctrl_v3(NVM_V2_CMD_FLPER)) return false;
     b4c:	11 05       	cpc	r17, r1
     b4e:	91 f4       	brne	.+36     	; 0xb74 <UPDI::runtime(unsigned char)+0x342>
write_eeprom_v4():
     b50:	40 91 a2 38 	lds	r20, 0x38A2	; 0x8038a2 <JTAG2::packet+0x12>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:190
      if (!UPDI::st8(start_addr, 0xFF)) return false;
     b54:	c7 01       	movw	r24, r14
     b56:	b6 01       	movw	r22, r12
     b58:	96 db       	rcall	.-2260   	; 0x286 <UPDI::st8(unsigned long, unsigned char)>
     b5a:	16 c0       	rjmp	.+44     	; 0xb88 <UPDI::runtime(unsigned char)+0x356>
write_flash_v4():
     b5c:	88 e0       	ldi	r24, 0x08	; 8
     b5e:	45 de       	rcall	.-886    	; 0x7ea <NVM::nvm_ctrl_v3(unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:196
    }
    if (!nvm_ctrl_v3(NVM_V2_CMD_FLWR)) return false;

    /* This version allows bulk writes of 512 bytes */
    if (byte_count == 1) UPDI::st8(start_addr, *data);
    else if ((byte_count - 1) >> 8) UPDI::sts16rsd(start_addr, data, byte_count);
     b60:	88 23       	and	r24, r24
     b62:	09 f4       	brne	.+2      	; 0xb66 <UPDI::runtime(unsigned char)+0x334>
     b64:	28 cf       	rjmp	.-432    	; 0x9b6 <UPDI::runtime(unsigned char)+0x184>
     b66:	4f ef       	ldi	r20, 0xFF	; 255
     b68:	c7 01       	movw	r24, r14
     b6a:	b6 01       	movw	r22, r12
     b6c:	8c db       	rcall	.-2280   	; 0x286 <UPDI::st8(unsigned long, unsigned char)>
     b6e:	81 11       	cpse	r24, r1
     b70:	e7 cf       	rjmp	.-50     	; 0xb40 <UPDI::runtime(unsigned char)+0x30e>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:126
    if (!nvm_ctrl_v3(NVM_V2_CMD_EEERWR)) return false;

    if (byte_count == 1) UPDI::st8(start_addr, *data);
    else UPDI::sts8(start_addr, data, byte_count);

    return nvm_ctrl_v3(NVM_V2_CMD_NOCMD);
     b72:	21 cf       	rjmp	.-446    	; 0x9b6 <UPDI::runtime(unsigned char)+0x184>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:197
    if (!nvm_ctrl_v3(NVM_V2_CMD_FLWR)) return false;

    /* This version allows bulk writes of 512 bytes */
    if (byte_count == 1) UPDI::st8(start_addr, *data);
    else if ((byte_count - 1) >> 8) UPDI::sts16rsd(start_addr, data, byte_count);
    else UPDI::sts8rsd(start_addr, data, byte_count);
     b74:	c8 01       	movw	r24, r16
     b76:	01 97       	sbiw	r24, 0x01	; 1
     b78:	89 2f       	mov	r24, r25
     b7a:	99 27       	eor	r25, r25
     b7c:	89 2b       	or	r24, r25
     b7e:	31 f0       	breq	.+12     	; 0xb8c <UPDI::runtime(unsigned char)+0x35a>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:397
      }

      /* NVMCTRL processing steps vary depending on the version. */
      if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN4_bp))
        return write_flash_v4(start_addr, data, byte_count, is_bound);
      else if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp))
     b80:	a8 01       	movw	r20, r16
     b82:	c7 01       	movw	r24, r14
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:206

  bool write_flash_v3 (uint32_t start_addr, uint8_t *data, size_t byte_count, bool is_bound) {
    /* NVMCTRL version 3 or 5 */
    /* If the chip is not erased, erase the page. */
    /* However, only when the beginning of the page boundary is addressed */
    if (is_bound) {
     b84:	b6 01       	movw	r22, r12
     b86:	3a db       	rcall	.-2444   	; 0x1fc <UPDI::sts16rsd(unsigned long, unsigned char*, unsigned int) [clone .constprop.11]>
write_eeprom_v4():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:207
      nvm_wait_v3();
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	20 c0       	rjmp	.+64     	; 0xbcc <UPDI::runtime(unsigned char)+0x39a>
write_flash_v4():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:208
      if (!UPDI::st8(start_addr, 0xFF)) return false;
     b8c:	40 2f       	mov	r20, r16
     b8e:	c7 01       	movw	r24, r14
     b90:	b6 01       	movw	r22, r12
     b92:	fa da       	rcall	.-2572   	; 0x188 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.21]>
     b94:	f9 cf       	rjmp	.-14     	; 0xb88 <UPDI::runtime(unsigned char)+0x356>
write_memory():
     b96:	ed 9b       	sbis	0x1d, 5	; 29
     b98:	22 c0       	rjmp	.+68     	; 0xbde <UPDI::runtime(unsigned char)+0x3ac>
write_flash_v3():
     b9a:	22 23       	and	r18, r18
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:209
      if (!nvm_ctrl_v3(NVM_V3_CMD_FLPER)) return false;
     b9c:	c9 f0       	breq	.+50     	; 0xbd0 <UPDI::runtime(unsigned char)+0x39e>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:211
    }
    else if (!nvm_ctrl_v3(NVM_V3_CMD_FLPBCLR)) return false;
     b9e:	17 de       	rcall	.-978    	; 0x7ce <NVM::nvm_wait_v3()>
     ba0:	4f ef       	ldi	r20, 0xFF	; 255
     ba2:	c7 01       	movw	r24, r14
     ba4:	b6 01       	movw	r22, r12
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:212
    nvm_wait_v3();
     ba6:	6f db       	rcall	.-2338   	; 0x286 <UPDI::st8(unsigned long, unsigned char)>
     ba8:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:214

    if (byte_count == 1) UPDI::st8(start_addr, *data);
     baa:	09 f4       	brne	.+2      	; 0xbae <UPDI::runtime(unsigned char)+0x37c>
     bac:	04 cf       	rjmp	.-504    	; 0x9b6 <UPDI::runtime(unsigned char)+0x184>
     bae:	88 e0       	ldi	r24, 0x08	; 8
     bb0:	1c de       	rcall	.-968    	; 0x7ea <NVM::nvm_ctrl_v3(unsigned char)>
     bb2:	88 23       	and	r24, r24
     bb4:	09 f4       	brne	.+2      	; 0xbb8 <UPDI::runtime(unsigned char)+0x386>
     bb6:	ff ce       	rjmp	.-514    	; 0x9b6 <UPDI::runtime(unsigned char)+0x184>
     bb8:	0a de       	rcall	.-1004   	; 0x7ce <NVM::nvm_wait_v3()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:217
    else UPDI::sts8rsd(start_addr, data, byte_count);

    return nvm_ctrl_v3(NVM_V3_CMD_FLPW);
     bba:	01 30       	cpi	r16, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:142
    if (!nvm_ctrl_v3(NVM_V3_CMD_EEPBCLR)) return false;

    if (byte_count == 1) UPDI::st8(start_addr, *data);
    else UPDI::sts8(start_addr, data, byte_count);

    return nvm_ctrl_v3(NVM_V3_CMD_EEPERW);
     bbc:	11 05       	cpc	r17, r1
     bbe:	51 f4       	brne	.+20     	; 0xbd4 <UPDI::runtime(unsigned char)+0x3a2>
     bc0:	40 91 a2 38 	lds	r20, 0x38A2	; 0x8038a2 <JTAG2::packet+0x12>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:211
    if (is_bound) {
      nvm_wait_v3();
      if (!UPDI::st8(start_addr, 0xFF)) return false;
      if (!nvm_ctrl_v3(NVM_V3_CMD_FLPER)) return false;
    }
    else if (!nvm_ctrl_v3(NVM_V3_CMD_FLPBCLR)) return false;
     bc4:	c7 01       	movw	r24, r14
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:215
    nvm_wait_v3();

    if (byte_count == 1) UPDI::st8(start_addr, *data);
    else UPDI::sts8rsd(start_addr, data, byte_count);
     bc6:	b6 01       	movw	r22, r12
     bc8:	5e db       	rcall	.-2372   	; 0x286 <UPDI::st8(unsigned long, unsigned char)>
     bca:	84 e0       	ldi	r24, 0x04	; 4
write_eeprom_v3():
     bcc:	0e de       	rcall	.-996    	; 0x7ea <NVM::nvm_ctrl_v3(unsigned char)>
     bce:	7c c0       	rjmp	.+248    	; 0xcc8 <UPDI::runtime(unsigned char)+0x496>
write_flash_v3():
     bd0:	8f e0       	ldi	r24, 0x0F	; 15
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:399
      /* NVMCTRL processing steps vary depending on the version. */
      if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN4_bp))
        return write_flash_v4(start_addr, data, byte_count, is_bound);
      else if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp))
        return write_flash_v3(start_addr, data, byte_count, is_bound);
      else if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN2_bp))
     bd2:	ee cf       	rjmp	.-36     	; 0xbb0 <UPDI::runtime(unsigned char)+0x37e>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:224

  bool write_flash_v2 (uint32_t start_addr, uint8_t *data, size_t byte_count, bool is_bound) {
    /* NVMCTRL version 2 */
    /* If the chip is not erased, erase the page. */
    /* However, only when the beginning of the page boundary is addressed */
    if (is_bound) {
     bd4:	40 2f       	mov	r20, r16
     bd6:	c7 01       	movw	r24, r14
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:228
      if (!nvm_ctrl_v2(NVM_V2_CMD_FLPER)) return false;
      if (!UPDI::st8(start_addr, 0xFF)) return false;
    }
    if (!nvm_ctrl_v2(NVM_V2_CMD_FLWR)) return false;
     bd8:	b6 01       	movw	r22, r12
     bda:	d6 da       	rcall	.-2644   	; 0x188 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.21]>
     bdc:	f6 cf       	rjmp	.-20     	; 0xbca <UPDI::runtime(unsigned char)+0x398>
write_memory():
     bde:	ee 9b       	sbis	0x1d, 6	; 29
     be0:	2e c0       	rjmp	.+92     	; 0xc3e <UPDI::runtime(unsigned char)+0x40c>
write_flash_v2():
     be2:	21 11       	cpse	r18, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:231

    /* This version allows bulk writes of 512 bytes */
    if (byte_count == 1) UPDI::st8(start_addr, *data);
     be4:	0e c0       	rjmp	.+28     	; 0xc02 <UPDI::runtime(unsigned char)+0x3d0>
     be6:	82 e0       	ldi	r24, 0x02	; 2
     be8:	14 de       	rcall	.-984    	; 0x812 <NVM::nvm_ctrl_v2(unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:156
      set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
      return true;
    }
    if (!nvm_ctrl_v2(NVM_V2_CMD_EEERWR)) return false;

    if (byte_count == 1) UPDI::st8(start_addr, *data);
     bea:	88 23       	and	r24, r24
     bec:	09 f4       	brne	.+2      	; 0xbf0 <UPDI::runtime(unsigned char)+0x3be>
     bee:	e3 ce       	rjmp	.-570    	; 0x9b6 <UPDI::runtime(unsigned char)+0x184>
     bf0:	01 30       	cpi	r16, 0x01	; 1
     bf2:	11 05       	cpc	r17, r1
     bf4:	91 f4       	brne	.+36     	; 0xc1a <UPDI::runtime(unsigned char)+0x3e8>
write_eeprom_v2():
     bf6:	40 91 a2 38 	lds	r20, 0x38A2	; 0x8038a2 <JTAG2::packet+0x12>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:225
  bool write_flash_v2 (uint32_t start_addr, uint8_t *data, size_t byte_count, bool is_bound) {
    /* NVMCTRL version 2 */
    /* If the chip is not erased, erase the page. */
    /* However, only when the beginning of the page boundary is addressed */
    if (is_bound) {
      if (!nvm_ctrl_v2(NVM_V2_CMD_FLPER)) return false;
     bfa:	c7 01       	movw	r24, r14
     bfc:	b6 01       	movw	r22, r12
     bfe:	43 db       	rcall	.-2426   	; 0x286 <UPDI::st8(unsigned long, unsigned char)>
     c00:	16 c0       	rjmp	.+44     	; 0xc2e <UPDI::runtime(unsigned char)+0x3fc>
write_flash_v2():
     c02:	88 e0       	ldi	r24, 0x08	; 8
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:226
      if (!UPDI::st8(start_addr, 0xFF)) return false;
     c04:	06 de       	rcall	.-1012   	; 0x812 <NVM::nvm_ctrl_v2(unsigned char)>
     c06:	88 23       	and	r24, r24
     c08:	09 f4       	brne	.+2      	; 0xc0c <UPDI::runtime(unsigned char)+0x3da>
     c0a:	d5 ce       	rjmp	.-598    	; 0x9b6 <UPDI::runtime(unsigned char)+0x184>
     c0c:	4f ef       	ldi	r20, 0xFF	; 255
     c0e:	c7 01       	movw	r24, r14
     c10:	b6 01       	movw	r22, r12
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:232
    }
    if (!nvm_ctrl_v2(NVM_V2_CMD_FLWR)) return false;

    /* This version allows bulk writes of 512 bytes */
    if (byte_count == 1) UPDI::st8(start_addr, *data);
    else if ((byte_count - 1) >> 8) UPDI::sts16rsd(start_addr, data, byte_count);
     c12:	39 db       	rcall	.-2446   	; 0x286 <UPDI::st8(unsigned long, unsigned char)>
     c14:	81 11       	cpse	r24, r1
     c16:	e7 cf       	rjmp	.-50     	; 0xbe6 <UPDI::runtime(unsigned char)+0x3b4>
     c18:	ce ce       	rjmp	.-612    	; 0x9b6 <UPDI::runtime(unsigned char)+0x184>
     c1a:	c8 01       	movw	r24, r16
     c1c:	01 97       	sbiw	r24, 0x01	; 1
     c1e:	89 2f       	mov	r24, r25
     c20:	99 27       	eor	r25, r25
     c22:	89 2b       	or	r24, r25
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:159
    if (!nvm_ctrl_v2(NVM_V2_CMD_EEERWR)) return false;

    if (byte_count == 1) UPDI::st8(start_addr, *data);
    else UPDI::sts8(start_addr, data, byte_count);

    return nvm_ctrl_v2(NVM_V2_CMD_NOCMD);
     c24:	39 f0       	breq	.+14     	; 0xc34 <UPDI::runtime(unsigned char)+0x402>
     c26:	a8 01       	movw	r20, r16
     c28:	c7 01       	movw	r24, r14
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:233
    if (!nvm_ctrl_v2(NVM_V2_CMD_FLWR)) return false;

    /* This version allows bulk writes of 512 bytes */
    if (byte_count == 1) UPDI::st8(start_addr, *data);
    else if ((byte_count - 1) >> 8) UPDI::sts16rsd(start_addr, data, byte_count);
    else UPDI::sts8rsd(start_addr, data, byte_count);
     c2a:	b6 01       	movw	r22, r12
     c2c:	e7 da       	rcall	.-2610   	; 0x1fc <UPDI::sts16rsd(unsigned long, unsigned char*, unsigned int) [clone .constprop.11]>
write_eeprom_v2():
     c2e:	80 e0       	ldi	r24, 0x00	; 0
     c30:	f0 dd       	rcall	.-1056   	; 0x812 <NVM::nvm_ctrl_v2(unsigned char)>
     c32:	4a c0       	rjmp	.+148    	; 0xcc8 <UPDI::runtime(unsigned char)+0x496>
write_flash_v2():
     c34:	40 2f       	mov	r20, r16
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:242

  bool write_flash_v0 (uint32_t start_addr, uint8_t *data, size_t byte_count, bool is_bound) {
    /* NVMCTRL version 0 */
    /* This version does not require page erasure. */
    /* Just clearing the buffer buffer is sufficient. */
    if (is_bound) {
     c36:	c7 01       	movw	r24, r14
     c38:	b6 01       	movw	r22, r12
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:170
    if (byte_count > 64) {
      /* If the limit is exceeded, it will fall back and force a Single-byte write */
      set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
      return true;
    }
    nvm_wait();
     c3a:	a6 da       	rcall	.-2740   	; 0x188 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.21]>
     c3c:	f8 cf       	rjmp	.-16     	; 0xc2e <UPDI::runtime(unsigned char)+0x3fc>
write_flash_v0():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:172

    if (byte_count == 1) UPDI::st8(start_addr, *data);
     c3e:	21 11       	cpse	r18, r1
     c40:	0d c0       	rjmp	.+26     	; 0xc5c <UPDI::runtime(unsigned char)+0x42a>
write_eeprom_v0():
     c42:	d9 dd       	rcall	.-1102   	; 0x7f6 <NVM::nvm_wait()>
     c44:	01 30       	cpi	r16, 0x01	; 1
     c46:	11 05       	cpc	r17, r1
     c48:	09 f0       	breq	.+2      	; 0xc4c <UPDI::runtime(unsigned char)+0x41a>
     c4a:	ab c0       	rjmp	.+342    	; 0xda2 <UPDI::runtime(unsigned char)+0x570>
     c4c:	40 91 a2 38 	lds	r20, 0x38A2	; 0x8038a2 <JTAG2::packet+0x12>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:175
    else UPDI::sts8rsd(start_addr, data, byte_count);

    return nvm_ctrl(NVM_CMD_ERWP);
     c50:	c7 01       	movw	r24, r14
     c52:	b6 01       	movw	r22, r12
     c54:	18 db       	rcall	.-2512   	; 0x286 <UPDI::st8(unsigned long, unsigned char)>
     c56:	83 e0       	ldi	r24, 0x03	; 3
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:243
  bool write_flash_v0 (uint32_t start_addr, uint8_t *data, size_t byte_count, bool is_bound) {
    /* NVMCTRL version 0 */
    /* This version does not require page erasure. */
    /* Just clearing the buffer buffer is sufficient. */
    if (is_bound) {
      nvm_wait();
     c58:	db db       	rcall	.-2122   	; 0x410 <NVM::nvm_ctrl(unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:244
      if (!nvm_ctrl(NVM_CMD_PBC)) return false;
     c5a:	36 c0       	rjmp	.+108    	; 0xcc8 <UPDI::runtime(unsigned char)+0x496>
write_flash_v0():
     c5c:	cc dd       	rcall	.-1128   	; 0x7f6 <NVM::nvm_wait()>
     c5e:	84 e0       	ldi	r24, 0x04	; 4
     c60:	d7 db       	rcall	.-2130   	; 0x410 <NVM::nvm_ctrl(unsigned char)>
     c62:	81 11       	cpse	r24, r1
     c64:	ee cf       	rjmp	.-36     	; 0xc42 <UPDI::runtime(unsigned char)+0x410>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:412
  if (byte_count == 0 || byte_count > 256) {
    set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
    return true;
  }

  switch (mem_type) {
     c66:	a7 ce       	rjmp	.-690    	; 0x9b6 <UPDI::runtime(unsigned char)+0x184>
write_memory():
     c68:	81 eb       	ldi	r24, 0xB1	; 177
     c6a:	b8 16       	cp	r11, r24
     c6c:	41 f0       	breq	.+16     	; 0xc7e <UPDI::runtime(unsigned char)+0x44c>
     c6e:	8b 15       	cp	r24, r11
     c70:	e0 f0       	brcs	.+56     	; 0xcaa <UPDI::runtime(unsigned char)+0x478>
     c72:	90 e2       	ldi	r25, 0x20	; 32
     c74:	b9 16       	cp	r11, r25
     c76:	11 f1       	breq	.+68     	; 0xcbc <UPDI::runtime(unsigned char)+0x48a>
     c78:	e2 e2       	ldi	r30, 0x22	; 34
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:434
    }
    case JTAG2::MTYPE_XMEGA_EEPROM :          // 0xC4
    case JTAG2::MTYPE_EEPROM_PAGE :           // 0xB1
    case JTAG2::MTYPE_EEPROM : {              // 0x22
      /* NVMCTRL processing steps vary depending on the version. */
      if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN4_bp))
     c7a:	be 12       	cpse	r11, r30
     c7c:	1c c0       	rjmp	.+56     	; 0xcb6 <UPDI::runtime(unsigned char)+0x484>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:116

  bool write_eeprom_v4 (uint32_t start_addr, uint8_t *data, size_t byte_count) {
    /* NVMCTRL version 4 */
    /* This version cannot be written in bulk transfer */
    /* Only 2 bytes (1 word) can be written at a time */
    if (byte_count > 2) {
     c7e:	ec 9b       	sbis	0x1d, 4	; 29
     c80:	59 c0       	rjmp	.+178    	; 0xd34 <UPDI::runtime(unsigned char)+0x502>
write_eeprom_v4():
     c82:	03 30       	cpi	r16, 0x03	; 3
     c84:	11 05       	cpc	r17, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:121
      /* If the limit is exceeded, it will fall back and force a Single-byte write */
      set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
      return true;
    }
    if (!nvm_ctrl_v3(NVM_V2_CMD_EEERWR)) return false;
     c86:	08 f0       	brcs	.+2      	; 0xc8a <UPDI::runtime(unsigned char)+0x458>
     c88:	2a cf       	rjmp	.-428    	; 0xade <UPDI::runtime(unsigned char)+0x2ac>
     c8a:	83 e1       	ldi	r24, 0x13	; 19
     c8c:	ae dd       	rcall	.-1188   	; 0x7ea <NVM::nvm_ctrl_v3(unsigned char)>
     c8e:	88 23       	and	r24, r24
     c90:	09 f4       	brne	.+2      	; 0xc94 <UPDI::runtime(unsigned char)+0x462>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:123

    if (byte_count == 1) UPDI::st8(start_addr, *data);
     c92:	91 ce       	rjmp	.-734    	; 0x9b6 <UPDI::runtime(unsigned char)+0x184>
     c94:	01 30       	cpi	r16, 0x01	; 1
     c96:	11 05       	cpc	r17, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:124
    else UPDI::sts8(start_addr, data, byte_count);
     c98:	09 f4       	brne	.+2      	; 0xc9c <UPDI::runtime(unsigned char)+0x46a>
     c9a:	5a cf       	rjmp	.-332    	; 0xb50 <UPDI::runtime(unsigned char)+0x31e>
     c9c:	22 e0       	ldi	r18, 0x02	; 2
     c9e:	42 ea       	ldi	r20, 0xA2	; 162
     ca0:	58 e3       	ldi	r21, 0x38	; 56
     ca2:	c7 01       	movw	r24, r14
     ca4:	b6 01       	movw	r22, r12
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:412
  if (byte_count == 0 || byte_count > 256) {
    set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
    return true;
  }

  switch (mem_type) {
     ca6:	2c db       	rcall	.-2472   	; 0x300 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)>
     ca8:	6f cf       	rjmp	.-290    	; 0xb88 <UPDI::runtime(unsigned char)+0x356>
write_memory():
     caa:	f3 eb       	ldi	r31, 0xB3	; 179
     cac:	fb 15       	cp	r31, r11
     cae:	70 f4       	brcc	.+28     	; 0xccc <UPDI::runtime(unsigned char)+0x49a>
     cb0:	84 ec       	ldi	r24, 0xC4	; 196
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:445
      else
        return write_eeprom_v0(start_addr, data, byte_count);
    }
    default :
      /* Other memory types are rejected */
      set_response(JTAG2::RSP_ILLEGAL_MEMORY_TYPE);
     cb2:	b8 16       	cp	r11, r24
     cb4:	21 f3       	breq	.-56     	; 0xc7e <UPDI::runtime(unsigned char)+0x44c>
     cb6:	82 ea       	ldi	r24, 0xA2	; 162
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:415
  }

  switch (mem_type) {
    /* Can write to the IO region as is */
    case JTAG2::MTYPE_SRAM : {                // 0x20
      return UPDI::sts8(start_addr, data, byte_count);
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	13 cf       	rjmp	.-474    	; 0xae2 <UPDI::runtime(unsigned char)+0x2b0>
     cbc:	20 2f       	mov	r18, r16
     cbe:	42 ea       	ldi	r20, 0xA2	; 162
     cc0:	58 e3       	ldi	r21, 0x38	; 56
     cc2:	c7 01       	movw	r24, r14
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:175
    nvm_wait();

    if (byte_count == 1) UPDI::st8(start_addr, *data);
    else UPDI::sts8rsd(start_addr, data, byte_count);

    return nvm_ctrl(NVM_CMD_ERWP);
     cc4:	b6 01       	movw	r22, r12
     cc6:	1c db       	rcall	.-2504   	; 0x300 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)>
write_eeprom_v0():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:422
    /* EEPROM region */
    case JTAG2::MTYPE_LOCK_BITS :             // 0xB3
    case JTAG2::MTYPE_FUSE_BITS : {           // 0xB2
      /* The NVMCTRL version 0 implementation is special. */
      if (bit_is_clear(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp)
      && bit_is_clear(UPDI_NVMCTRL, UPDI::UPDI_GEN2_bp)) {
     cc8:	18 2f       	mov	r17, r24
     cca:	c8 ce       	rjmp	.-624    	; 0xa5c <UPDI::runtime(unsigned char)+0x22a>
write_memory():
     ccc:	ed 99       	sbic	0x1d, 5	; 29
     cce:	d7 cf       	rjmp	.-82     	; 0xc7e <UPDI::runtime(unsigned char)+0x44c>
     cd0:	ee 99       	sbic	0x1d, 6	; 29
     cd2:	d5 cf       	rjmp	.-86     	; 0xc7e <UPDI::runtime(unsigned char)+0x44c>
     cd4:	f8 01       	movw	r30, r16
     cd6:	e0 57       	subi	r30, 0x70	; 112
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:100

  bool write_fuse (uint16_t addr, uint8_t data) {
    /* Version 0 of FUSE can write one byte at a time in a special way */
    struct fuse_packet_t { uint16_t data; uint16_t addr; } fuse_packet;
    fuse_packet.data = data;
    fuse_packet.addr = addr;
     cd8:	f7 4c       	sbci	r31, 0xC7	; 199
     cda:	5f 01       	movw	r10, r30
     cdc:	00 e9       	ldi	r16, 0x90	; 144
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:99
   **********************************************/

  bool write_fuse (uint16_t addr, uint8_t data) {
    /* Version 0 of FUSE can write one byte at a time in a special way */
    struct fuse_packet_t { uint16_t data; uint16_t addr; } fuse_packet;
    fuse_packet.data = data;
     cde:	18 e3       	ldi	r17, 0x38	; 56
write_fuse():
     ce0:	c6 01       	movw	r24, r12
     ce2:	80 59       	subi	r24, 0x90	; 144
     ce4:	98 43       	sbci	r25, 0x38	; 56
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:100
    fuse_packet.addr = addr;
     ce6:	6c 01       	movw	r12, r24
     ce8:	f8 01       	movw	r30, r16
     cea:	82 89       	ldd	r24, Z+18	; 0x12
     cec:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:101
    nvm_wait();
     cee:	89 83       	std	Y+1, r24	; 0x01
     cf0:	9a 83       	std	Y+2, r25	; 0x02
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:102
    if (!UPDI::sts8(NVMCTRL_REG_DATA,
     cf2:	c6 01       	movw	r24, r12
     cf4:	80 0f       	add	r24, r16
     cf6:	91 1f       	adc	r25, r17
     cf8:	8b 83       	std	Y+3, r24	; 0x03
     cfa:	9c 83       	std	Y+4, r25	; 0x04
     cfc:	7c dd       	rcall	.-1288   	; 0x7f6 <NVM::nvm_wait()>
     cfe:	24 e0       	ldi	r18, 0x04	; 4
     d00:	ae 01       	movw	r20, r28
     d02:	4f 5f       	subi	r20, 0xFF	; 255
     d04:	5f 4f       	sbci	r21, 0xFF	; 255
     d06:	66 e0       	ldi	r22, 0x06	; 6
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:104
      (uint8_t*)&fuse_packet, sizeof(fuse_packet))) return false;
    if (!nvm_ctrl(NVM_CMD_WFU)) return false;
     d08:	70 e1       	ldi	r23, 0x10	; 16
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	f8 da       	rcall	.-2576   	; 0x300 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:105
    return ((nvm_wait() & 7) == 0);
     d10:	88 23       	and	r24, r24
     d12:	09 f4       	brne	.+2      	; 0xd16 <UPDI::runtime(unsigned char)+0x4e4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:424
    case JTAG2::MTYPE_FUSE_BITS : {           // 0xB2
      /* The NVMCTRL version 0 implementation is special. */
      if (bit_is_clear(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp)
      && bit_is_clear(UPDI_NVMCTRL, UPDI::UPDI_GEN2_bp)) {
        do {
          if (!write_fuse(start_addr++, *data++)) return false;
     d14:	50 ce       	rjmp	.-864    	; 0x9b6 <UPDI::runtime(unsigned char)+0x184>
     d16:	87 e0       	ldi	r24, 0x07	; 7
     d18:	7b db       	rcall	.-2314   	; 0x410 <NVM::nvm_ctrl(unsigned char)>
     d1a:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:425
        } while (--byte_count);
     d1c:	09 f4       	brne	.+2      	; 0xd20 <UPDI::runtime(unsigned char)+0x4ee>
     d1e:	4b ce       	rjmp	.-874    	; 0x9b6 <UPDI::runtime(unsigned char)+0x184>
     d20:	6a dd       	rcall	.-1324   	; 0x7f6 <NVM::nvm_wait()>
write_memory():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:436
    case JTAG2::MTYPE_EEPROM_PAGE :           // 0xB1
    case JTAG2::MTYPE_EEPROM : {              // 0x22
      /* NVMCTRL processing steps vary depending on the version. */
      if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN4_bp))
        return write_eeprom_v4(start_addr, data, byte_count);
      else if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp))
     d22:	87 70       	andi	r24, 0x07	; 7
     d24:	09 f0       	breq	.+2      	; 0xd28 <UPDI::runtime(unsigned char)+0x4f6>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:132
  }

  bool write_eeprom_v3 (uint32_t start_addr, uint8_t *data, size_t byte_count) {
    /* NVMCTRL version 3 or 5 */
    /* This version can write 8 bytes in bulk */
    if (byte_count > 8) {
     d26:	47 ce       	rjmp	.-882    	; 0x9b6 <UPDI::runtime(unsigned char)+0x184>
     d28:	0f 5f       	subi	r16, 0xFF	; 255
     d2a:	1f 4f       	sbci	r17, 0xFF	; 255
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:137
      /* If the limit is exceeded, it will fall back and force a Single-byte write */
      set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
      return true;
    }
    if (!nvm_ctrl_v3(NVM_V3_CMD_EEPBCLR)) return false;
     d2c:	a0 16       	cp	r10, r16
     d2e:	b1 06       	cpc	r11, r17
     d30:	d9 f6       	brne	.-74     	; 0xce8 <UPDI::runtime(unsigned char)+0x4b6>
     d32:	4e ce       	rjmp	.-868    	; 0x9d0 <UPDI::runtime(unsigned char)+0x19e>
     d34:	ed 9b       	sbis	0x1d, 5	; 29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:139

    if (byte_count == 1) UPDI::st8(start_addr, *data);
     d36:	1a c0       	rjmp	.+52     	; 0xd6c <UPDI::runtime(unsigned char)+0x53a>
write_eeprom_v3():
     d38:	09 30       	cpi	r16, 0x09	; 9
     d3a:	11 05       	cpc	r17, r1
     d3c:	08 f0       	brcs	.+2      	; 0xd40 <UPDI::runtime(unsigned char)+0x50e>
     d3e:	cf ce       	rjmp	.-610    	; 0xade <UPDI::runtime(unsigned char)+0x2ac>
     d40:	8f e1       	ldi	r24, 0x1F	; 31
     d42:	53 dd       	rcall	.-1370   	; 0x7ea <NVM::nvm_ctrl_v3(unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:142
    else UPDI::sts8(start_addr, data, byte_count);

    return nvm_ctrl_v3(NVM_V3_CMD_EEPERW);
     d44:	88 23       	and	r24, r24
     d46:	09 f4       	brne	.+2      	; 0xd4a <UPDI::runtime(unsigned char)+0x518>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:140
      return true;
    }
    if (!nvm_ctrl_v3(NVM_V3_CMD_EEPBCLR)) return false;

    if (byte_count == 1) UPDI::st8(start_addr, *data);
    else UPDI::sts8(start_addr, data, byte_count);
     d48:	36 ce       	rjmp	.-916    	; 0x9b6 <UPDI::runtime(unsigned char)+0x184>
     d4a:	01 30       	cpi	r16, 0x01	; 1
     d4c:	11 05       	cpc	r17, r1
     d4e:	39 f4       	brne	.+14     	; 0xd5e <UPDI::runtime(unsigned char)+0x52c>
     d50:	40 91 a2 38 	lds	r20, 0x38A2	; 0x8038a2 <JTAG2::packet+0x12>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:438
      /* NVMCTRL processing steps vary depending on the version. */
      if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN4_bp))
        return write_eeprom_v4(start_addr, data, byte_count);
      else if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp))
        return write_eeprom_v3(start_addr, data, byte_count);
      else if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN2_bp))
     d54:	c7 01       	movw	r24, r14
     d56:	b6 01       	movw	r22, r12
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:149

  bool write_eeprom_v2 (uint32_t start_addr, uint8_t *data, size_t byte_count) {
    /* NVMCTRL version 2 */
    /* This version cannot be written in bulk transfer */
    /* Only 2 bytes (1 word) can be written at a time */
    if (byte_count > 2) {
     d58:	96 da       	rcall	.-2772   	; 0x286 <UPDI::st8(unsigned long, unsigned char)>
     d5a:	85 e1       	ldi	r24, 0x15	; 21
     d5c:	37 cf       	rjmp	.-402    	; 0xbcc <UPDI::runtime(unsigned char)+0x39a>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:154
      /* If the limit is exceeded, it will fall back and force a Single-byte write */
      set_response(JTAG2::RSP_ILLEGAL_MEMORY_RANGE);
      return true;
    }
    if (!nvm_ctrl_v2(NVM_V2_CMD_EEERWR)) return false;
     d5e:	20 2f       	mov	r18, r16
     d60:	42 ea       	ldi	r20, 0xA2	; 162
     d62:	58 e3       	ldi	r21, 0x38	; 56
     d64:	c7 01       	movw	r24, r14
     d66:	b6 01       	movw	r22, r12
     d68:	cb da       	rcall	.-2666   	; 0x300 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:156

    if (byte_count == 1) UPDI::st8(start_addr, *data);
     d6a:	f7 cf       	rjmp	.-18     	; 0xd5a <UPDI::runtime(unsigned char)+0x528>
write_memory():
     d6c:	ee 9b       	sbis	0x1d, 6	; 29
     d6e:	14 c0       	rjmp	.+40     	; 0xd98 <UPDI::runtime(unsigned char)+0x566>
write_eeprom_v2():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:157
    else UPDI::sts8(start_addr, data, byte_count);
     d70:	03 30       	cpi	r16, 0x03	; 3
     d72:	11 05       	cpc	r17, r1
     d74:	08 f0       	brcs	.+2      	; 0xd78 <UPDI::runtime(unsigned char)+0x546>
     d76:	b3 ce       	rjmp	.-666    	; 0xade <UPDI::runtime(unsigned char)+0x2ac>
     d78:	83 e1       	ldi	r24, 0x13	; 19
     d7a:	4b dd       	rcall	.-1386   	; 0x812 <NVM::nvm_ctrl_v2(unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:165
  }

  bool write_eeprom_v0 (uint32_t start_addr, uint8_t *data, size_t byte_count) {
    /* NVMCTRL version 0 */
    /* This version allows fast bulk writes of 32 or 64 bytes */
    if (byte_count > 64) {
     d7c:	88 23       	and	r24, r24
     d7e:	09 f4       	brne	.+2      	; 0xd82 <UPDI::runtime(unsigned char)+0x550>
     d80:	1a ce       	rjmp	.-972    	; 0x9b6 <UPDI::runtime(unsigned char)+0x184>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:173
      return true;
    }
    nvm_wait();

    if (byte_count == 1) UPDI::st8(start_addr, *data);
    else UPDI::sts8rsd(start_addr, data, byte_count);
     d82:	01 30       	cpi	r16, 0x01	; 1
     d84:	11 05       	cpc	r17, r1
     d86:	09 f4       	brne	.+2      	; 0xd8a <UPDI::runtime(unsigned char)+0x558>
     d88:	36 cf       	rjmp	.-404    	; 0xbf6 <UPDI::runtime(unsigned char)+0x3c4>
     d8a:	22 e0       	ldi	r18, 0x02	; 2
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:771
      case UPDI_CMD_WRITE_MEMORY : {
        _result = NVM::write_memory();
        break;
      }
      case UPDI_CMD_ERASE : {
        if (JTAG2::packet.body[JTAG2::MEM_TYPE] == JTAG2::XMEGA_ERASE_CHIP) {
     d8c:	42 ea       	ldi	r20, 0xA2	; 162
     d8e:	58 e3       	ldi	r21, 0x38	; 56
     d90:	c7 01       	movw	r24, r14
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:775
          #ifdef ENABLE_ALWAYS_CHIPERASE_ASI
          _result = UPDI::chip_erase();
          #else
          _result = bit_is_set(UPDI_CONTROL, UPDI_PROG_bp) ? NVM::chip_erase() : UPDI::chip_erase();
     d92:	b6 01       	movw	r22, r12
     d94:	b5 da       	rcall	.-2710   	; 0x300 <UPDI::sts8(unsigned long, unsigned char*, unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:264
/* Otherwise, you must use UPDI::chip_erase().     */

bool NVM::chip_erase (void) {
  /* NVMCTRL processing steps vary depending on the version. */
  if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN4_bp)
    || bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp)) {
     d96:	4b cf       	rjmp	.-362    	; 0xc2e <UPDI::runtime(unsigned char)+0x3fc>
write_eeprom_v0():
     d98:	01 34       	cpi	r16, 0x41	; 65
     d9a:	11 05       	cpc	r17, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:273
    if (!nvm_ctrl_v3(NVM_V3_CMD_FLPBCLR)) return false;
    if (!nvm_ctrl_v3(NVM_V2_CMD_NOCMD)) return false;
    if (!nvm_ctrl_v3(NVM_V3_CMD_EEPBCLR)) return false;
    if (!nvm_ctrl_v3(NVM_V2_CMD_NOCMD)) return false;
  }
  else if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN2_bp)) {
     d9c:	08 f4       	brcc	.+2      	; 0xda0 <UPDI::runtime(unsigned char)+0x56e>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:280
    if (!nvm_ctrl_v2(NVM_V2_CMD_CHER)) return false;
    if (!nvm_ctrl_v2(NVM_V2_CMD_NOCMD)) return false;
  }
  else {
    /* version 0 */
    if (!nvm_ctrl_v2(NVM_CMD_CHER)) return false;
     d9e:	51 cf       	rjmp	.-350    	; 0xc42 <UPDI::runtime(unsigned char)+0x410>
     da0:	9e ce       	rjmp	.-708    	; 0xade <UPDI::runtime(unsigned char)+0x2ac>
     da2:	40 2f       	mov	r20, r16
     da4:	c7 01       	movw	r24, r14
     da6:	b6 01       	movw	r22, r12
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:281
    if (!nvm_ctrl_v2(NVM_CMD_PBC)) return false;
     da8:	ef d9       	rcall	.-3106   	; 0x188 <UPDI::sts8rsd(unsigned long, unsigned char*, unsigned char) [clone .constprop.21]>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:266
bool NVM::chip_erase (void) {
  /* NVMCTRL processing steps vary depending on the version. */
  if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN4_bp)
    || bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp)) {
    /* version 3,4,5 */
    if (!nvm_ctrl_v3(NVM_V2_CMD_CHER)) return false;
     daa:	55 cf       	rjmp	.-342    	; 0xc56 <UPDI::runtime(unsigned char)+0x424>
_ZN4UPDI7runtimeEh():
     dac:	80 91 99 38 	lds	r24, 0x3899	; 0x803899 <JTAG2::packet+0x9>
     db0:	81 11       	cpse	r24, r1
     db2:	55 ce       	rjmp	.-854    	; 0xa5e <UPDI::runtime(unsigned char)+0x22c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:267
    if (!nvm_ctrl_v3(NVM_V2_CMD_NOCMD)) return false;
     db4:	e1 9b       	sbis	0x1c, 1	; 28
     db6:	35 c0       	rjmp	.+106    	; 0xe22 <UPDI::runtime(unsigned char)+0x5f0>
chip_erase():
     db8:	ec 99       	sbic	0x1d, 4	; 29
     dba:	0b c0       	rjmp	.+22     	; 0xdd2 <UPDI::runtime(unsigned char)+0x5a0>
     dbc:	ed 99       	sbic	0x1d, 5	; 29
     dbe:	09 c0       	rjmp	.+18     	; 0xdd2 <UPDI::runtime(unsigned char)+0x5a0>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:268
    if (!nvm_ctrl_v3(NVM_V3_CMD_FLPBCLR)) return false;
     dc0:	ee 99       	sbic	0x1d, 6	; 29
     dc2:	27 c0       	rjmp	.+78     	; 0xe12 <UPDI::runtime(unsigned char)+0x5e0>
     dc4:	85 e0       	ldi	r24, 0x05	; 5
     dc6:	25 dd       	rcall	.-1462   	; 0x812 <NVM::nvm_ctrl_v2(unsigned char)>
     dc8:	88 23       	and	r24, r24
     dca:	09 f4       	brne	.+2      	; 0xdce <UPDI::runtime(unsigned char)+0x59c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:269
    if (!nvm_ctrl_v3(NVM_V2_CMD_NOCMD)) return false;
     dcc:	b7 cd       	rjmp	.-1170   	; 0x93c <UPDI::runtime(unsigned char)+0x10a>
     dce:	84 e0       	ldi	r24, 0x04	; 4
     dd0:	21 c0       	rjmp	.+66     	; 0xe14 <UPDI::runtime(unsigned char)+0x5e2>
     dd2:	80 e2       	ldi	r24, 0x20	; 32
     dd4:	0a dd       	rcall	.-1516   	; 0x7ea <NVM::nvm_ctrl_v3(unsigned char)>
     dd6:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:270
    if (!nvm_ctrl_v3(NVM_V3_CMD_EEPBCLR)) return false;
     dd8:	09 f4       	brne	.+2      	; 0xddc <UPDI::runtime(unsigned char)+0x5aa>
     dda:	b0 cd       	rjmp	.-1184   	; 0x93c <UPDI::runtime(unsigned char)+0x10a>
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	05 dd       	rcall	.-1526   	; 0x7ea <NVM::nvm_ctrl_v3(unsigned char)>
     de0:	88 23       	and	r24, r24
     de2:	09 f4       	brne	.+2      	; 0xde6 <UPDI::runtime(unsigned char)+0x5b4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:271
    if (!nvm_ctrl_v3(NVM_V2_CMD_NOCMD)) return false;
     de4:	ab cd       	rjmp	.-1194   	; 0x93c <UPDI::runtime(unsigned char)+0x10a>
     de6:	8f e0       	ldi	r24, 0x0F	; 15
     de8:	00 dd       	rcall	.-1536   	; 0x7ea <NVM::nvm_ctrl_v3(unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:276
  }
  else if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN2_bp)) {
    /* version 2 */
    if (!nvm_ctrl_v2(NVM_V2_CMD_CHER)) return false;
    if (!nvm_ctrl_v2(NVM_V2_CMD_NOCMD)) return false;
     dea:	88 23       	and	r24, r24
     dec:	09 f4       	brne	.+2      	; 0xdf0 <UPDI::runtime(unsigned char)+0x5be>
     dee:	a6 cd       	rjmp	.-1204   	; 0x93c <UPDI::runtime(unsigned char)+0x10a>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:284
    /* version 0 */
    if (!nvm_ctrl_v2(NVM_CMD_CHER)) return false;
    if (!nvm_ctrl_v2(NVM_CMD_PBC)) return false;
    if (!nvm_ctrl_v2(NVM_CMD_NOCMD)) return false;
  }
  bit_set(UPDI_CONTROL, UPDI::UPDI_ERFM_bp);
     df0:	80 e0       	ldi	r24, 0x00	; 0
     df2:	fb dc       	rcall	.-1546   	; 0x7ea <NVM::nvm_ctrl_v3(unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:281
    if (!nvm_ctrl_v2(NVM_V2_CMD_NOCMD)) return false;
  }
  else {
    /* version 0 */
    if (!nvm_ctrl_v2(NVM_CMD_CHER)) return false;
    if (!nvm_ctrl_v2(NVM_CMD_PBC)) return false;
     df4:	88 23       	and	r24, r24
     df6:	09 f4       	brne	.+2      	; 0xdfa <UPDI::runtime(unsigned char)+0x5c8>
     df8:	a1 cd       	rjmp	.-1214   	; 0x93c <UPDI::runtime(unsigned char)+0x10a>
     dfa:	8f e1       	ldi	r24, 0x1F	; 31
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:276
    if (!nvm_ctrl_v3(NVM_V2_CMD_NOCMD)) return false;
  }
  else if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN2_bp)) {
    /* version 2 */
    if (!nvm_ctrl_v2(NVM_V2_CMD_CHER)) return false;
    if (!nvm_ctrl_v2(NVM_V2_CMD_NOCMD)) return false;
     dfc:	f6 dc       	rcall	.-1556   	; 0x7ea <NVM::nvm_ctrl_v3(unsigned char)>
     dfe:	88 23       	and	r24, r24
     e00:	09 f4       	brne	.+2      	; 0xe04 <UPDI::runtime(unsigned char)+0x5d2>
     e02:	9c cd       	rjmp	.-1224   	; 0x93c <UPDI::runtime(unsigned char)+0x10a>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:559
/* Otherwise you should use NVM::chip_erase().            */

// __attribute__((optimize("O0")))
bool UPDI::chip_erase (void) {
  /* If UPDI is prohibited, try HV control */
  if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) {
     e04:	80 e0       	ldi	r24, 0x00	; 0
     e06:	f1 dc       	rcall	.-1566   	; 0x7ea <NVM::nvm_ctrl_v3(unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:562
    HV_Pulse();
  }
  drain();
     e08:	88 23       	and	r24, r24
     e0a:	09 f4       	brne	.+2      	; 0xe0e <UPDI::runtime(unsigned char)+0x5dc>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:563
  if (!loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS, 500)) return false;
     e0c:	97 cd       	rjmp	.-1234   	; 0x93c <UPDI::runtime(unsigned char)+0x10a>
     e0e:	e2 9a       	sbi	0x1c, 2	; 28
     e10:	60 cd       	rjmp	.-1344   	; 0x8d2 <UPDI::runtime(unsigned char)+0xa0>
     e12:	80 e2       	ldi	r24, 0x20	; 32
     e14:	fe dc       	rcall	.-1540   	; 0x812 <NVM::nvm_ctrl_v2(unsigned char)>
     e16:	88 23       	and	r24, r24
     e18:	09 f4       	brne	.+2      	; 0xe1c <UPDI::runtime(unsigned char)+0x5ea>
     e1a:	90 cd       	rjmp	.-1248   	; 0x93c <UPDI::runtime(unsigned char)+0x10a>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:566

  /* Set the NVMPROG key. This is useful when CRCSCAN is activated. */
  if (get_cs_stat(UPDI_CS_ASI_CRC_STATUS) & UPDI_CRC_STATUS_gm) {
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	f9 dc       	rcall	.-1550   	; 0x812 <NVM::nvm_ctrl_v2(unsigned char)>
     e20:	f3 cf       	rjmp	.-26     	; 0xe08 <UPDI::runtime(unsigned char)+0x5d6>
     e22:	e0 9b       	sbis	0x1c, 0	; 28
     e24:	42 c0       	rjmp	.+132    	; 0xeaa <UPDI::runtime(unsigned char)+0x678>
     e26:	af da       	rcall	.-2722   	; 0x386 <UPDI::drain()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:425
  return loop_until_key_stat_is_set(UPDI_KEY_NVMPROG);
}

/* __attribute__((optimize("O0"))) */
bool UPDI::set_erase_key (void) {
  if (!send_bytes(erase_key, sizeof(erase_key))) return false;
     e28:	64 ef       	ldi	r22, 0xF4	; 244
     e2a:	71 e0       	ldi	r23, 0x01	; 1
     e2c:	80 e2       	ldi	r24, 0x20	; 32
     e2e:	f6 db       	rcall	.-2068   	; 0x61c <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
     e30:	88 23       	and	r24, r24
     e32:	09 f4       	brne	.+2      	; 0xe36 <UPDI::runtime(unsigned char)+0x604>
     e34:	83 cd       	rjmp	.-1274   	; 0x93c <UPDI::runtime(unsigned char)+0x10a>
     e36:	8c e0       	ldi	r24, 0x0C	; 12
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:426
  return loop_until_key_stat_is_set(UPDI_KEY_CHIPERASE);
     e38:	1e da       	rcall	.-3012   	; 0x276 <UPDI::get_cs_stat(unsigned char)>
     e3a:	87 70       	andi	r24, 0x07	; 7
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:572
    /* Communication errors are not checked. */
    set_nvmprog_key();
  }

  /* Transition to CHIPERASE mode by system reset */
  if (!set_erase_key()) return false;
     e3c:	09 f0       	breq	.+2      	; 0xe40 <UPDI::runtime(unsigned char)+0x60e>
     e3e:	37 c0       	rjmp	.+110    	; 0xeae <UPDI::runtime(unsigned char)+0x67c>
set_erase_key():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:575

  /* Issue a system reset */
  if (!updi_reset(true) || !updi_reset(false)) return false;
     e40:	6a e0       	ldi	r22, 0x0A	; 10
     e42:	85 e3       	ldi	r24, 0x35	; 53
     e44:	98 e3       	ldi	r25, 0x38	; 56
     e46:	87 d9       	rcall	.-3314   	; 0x156 <UPDI::send_bytes(unsigned char*, unsigned char)>
     e48:	88 23       	and	r24, r24
     e4a:	09 f4       	brne	.+2      	; 0xe4e <UPDI::runtime(unsigned char)+0x61c>
     e4c:	77 cd       	rjmp	.-1298   	; 0x93c <UPDI::runtime(unsigned char)+0x10a>
     e4e:	88 e0       	ldi	r24, 0x08	; 8
     e50:	71 db       	rcall	.-2334   	; 0x534 <UPDI::loop_until_key_stat_is_set(unsigned char, unsigned int) [clone .constprop.27]>
chip_erase():
     e52:	88 23       	and	r24, r24
     e54:	09 f4       	brne	.+2      	; 0xe58 <UPDI::runtime(unsigned char)+0x626>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:578

  /* If RSTSYS is true, it is still not accessible */
  loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS);
     e56:	72 cd       	rjmp	.-1308   	; 0x93c <UPDI::runtime(unsigned char)+0x10a>
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	a5 da       	rcall	.-2742   	; 0x3a6 <UPDI::updi_reset(bool)>
     e5c:	88 23       	and	r24, r24
     e5e:	09 f4       	brne	.+2      	; 0xe62 <UPDI::runtime(unsigned char)+0x630>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:581

  /* If LOCKSTATUS is clear, the chip is unlocked */
  loop_until_sys_stat_is_clear(UPDI_SYS_LOCKSTATUS);
     e60:	6d cd       	rjmp	.-1318   	; 0x93c <UPDI::runtime(unsigned char)+0x10a>
     e62:	80 e0       	ldi	r24, 0x00	; 0
     e64:	a0 da       	rcall	.-2752   	; 0x3a6 <UPDI::updi_reset(bool)>
     e66:	88 23       	and	r24, r24
     e68:	09 f4       	brne	.+2      	; 0xe6c <UPDI::runtime(unsigned char)+0x63a>
     e6a:	68 cd       	rjmp	.-1328   	; 0x93c <UPDI::runtime(unsigned char)+0x10a>
     e6c:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:319
  send_bytes(set_ptr, sizeof(set_ptr));
  return RECV();
}

bool UPDI::is_cs_stat (uint8_t code, uint8_t check) {
  return check == (get_cs_stat(code) & check);
     e6e:	60 e0       	ldi	r22, 0x00	; 0
     e70:	80 e2       	ldi	r24, 0x20	; 32
     e72:	d4 db       	rcall	.-2136   	; 0x61c <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:393
bool UPDI::loop_until_key_stat_is_clear (uint8_t bitmap, uint16_t limit) {
  #ifdef ENABLE_DEBUG_UPDI_SENDER
  uint16_t _back = _send_ptr;
  #endif
  do {
    if (!is_key_stat(bitmap)) return true;
     e74:	70 e0       	ldi	r23, 0x00	; 0
     e76:	60 e0       	ldi	r22, 0x00	; 0
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.10/cores/megaAVR/api/delay_busywait.h:31
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	d0 db       	rcall	.-2144   	; 0x61c <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
     e7c:	10 e0       	ldi	r17, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:398
    #ifdef ENABLE_DEBUG_UPDI_SENDER
    _send_ptr = _back;
    #endif
    TIM::delay_50us();
  } while (--limit);
     e7e:	00 e0       	ldi	r16, 0x00	; 0
is_cs_stat():
     e80:	87 e0       	ldi	r24, 0x07	; 7
     e82:	f9 d9       	rcall	.-3086   	; 0x276 <UPDI::get_cs_stat(unsigned char)>
loop_until_key_stat_is_clear():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:587

  /* Make sure the CHER bit is cleared before next reset */
  loop_until_key_stat_is_clear(UPDI_KEY_CHIPERASE);

  /* Chip erasure was successful */
  bit_set(UPDI_CONTROL, UPDI_ERFM_bp);
     e84:	83 ff       	sbrs	r24, 3
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:319
  send_bytes(set_ptr, sizeof(set_ptr));
  return RECV();
}

bool UPDI::is_cs_stat (uint8_t code, uint8_t check) {
  return check == (get_cs_stat(code) & check);
     e86:	07 c0       	rjmp	.+14     	; 0xe96 <UPDI::runtime(unsigned char)+0x664>
delay_micros():
     e88:	f6 ea       	ldi	r31, 0xA6	; 166
     e8a:	fa 95       	dec	r31
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:591
  /* Chip erasure was successful */
  bit_set(UPDI_CONTROL, UPDI_ERFM_bp);

  /* Once the HV control and device is successfully unlocked, */
  /* you should be able to enter program mode. */
  if (!is_sys_stat(UPDI_SYS_NVMPROG)) {
     e8c:	f1 f7       	brne	.-4      	; 0xe8a <UPDI::runtime(unsigned char)+0x658>
     e8e:	00 c0       	rjmp	.+0      	; 0xe90 <UPDI::runtime(unsigned char)+0x65e>
loop_until_key_stat_is_clear():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:600
    loop_until_sys_stat_is_set(UPDI_SYS_NVMPROG);
  }

  /* After performing HV control, it is necessary to obtain SIB */
  bit_clear(UPDI_CONTROL, UPDI_INFO_bp);
  bit_set(UPDI_CONTROL, UPDI_PROG_bp);
     e90:	01 50       	subi	r16, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:601
  return enter_updi(true);
     e92:	11 09       	sbc	r17, r1
     e94:	a9 f7       	brne	.-22     	; 0xe80 <UPDI::runtime(unsigned char)+0x64e>
chip_erase():
     e96:	e2 9a       	sbi	0x1c, 2	; 28
is_cs_stat():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:560

// __attribute__((optimize("O0")))
bool UPDI::chip_erase (void) {
  /* If UPDI is prohibited, try HV control */
  if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) {
    HV_Pulse();
     e98:	8b e0       	ldi	r24, 0x0B	; 11
     e9a:	ed d9       	rcall	.-3110   	; 0x276 <UPDI::get_cs_stat(unsigned char)>
chip_erase():
     e9c:	83 ff       	sbrs	r24, 3
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:568
  if (!loop_until_sys_stat_is_clear(UPDI_SYS_RSTSYS, 500)) return false;

  /* Set the NVMPROG key. This is useful when CRCSCAN is activated. */
  if (get_cs_stat(UPDI_CS_ASI_CRC_STATUS) & UPDI_CRC_STATUS_gm) {
    /* Communication errors are not checked. */
    set_nvmprog_key();
     e9e:	09 c0       	rjmp	.+18     	; 0xeb2 <UPDI::runtime(unsigned char)+0x680>
     ea0:	e0 98       	cbi	0x1c, 0	; 28
     ea2:	e1 9a       	sbi	0x1c, 1	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:592
  bit_set(UPDI_CONTROL, UPDI_ERFM_bp);

  /* Once the HV control and device is successfully unlocked, */
  /* you should be able to enter program mode. */
  if (!is_sys_stat(UPDI_SYS_NVMPROG)) {
    if (!set_nvmprog_key()) return false;
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	fb db       	rcall	.-2058   	; 0x69e <UPDI::enter_updi(bool)>
     ea8:	15 cd       	rjmp	.-1494   	; 0x8d4 <UPDI::runtime(unsigned char)+0xa2>
     eaa:	7e db       	rcall	.-2308   	; 0x5a8 <UPDI::HV_Pulse()>
     eac:	bc cf       	rjmp	.-136    	; 0xe26 <UPDI::runtime(unsigned char)+0x5f4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:593
    if (!updi_reset(true) || !updi_reset(false)) return false;
     eae:	5a db       	rcall	.-2380   	; 0x564 <UPDI::set_nvmprog_key()>
     eb0:	c7 cf       	rjmp	.-114    	; 0xe40 <UPDI::runtime(unsigned char)+0x60e>
     eb2:	58 db       	rcall	.-2384   	; 0x564 <UPDI::set_nvmprog_key()>
     eb4:	88 23       	and	r24, r24
     eb6:	09 f4       	brne	.+2      	; 0xeba <UPDI::runtime(unsigned char)+0x688>
     eb8:	41 cd       	rjmp	.-1406   	; 0x93c <UPDI::runtime(unsigned char)+0x10a>
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	74 da       	rcall	.-2840   	; 0x3a6 <UPDI::updi_reset(bool)>
     ebe:	88 23       	and	r24, r24
     ec0:	09 f4       	brne	.+2      	; 0xec4 <UPDI::runtime(unsigned char)+0x692>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:594
    loop_until_sys_stat_is_clear(UPDI_SYS_LOCKSTATUS);
     ec2:	3c cd       	rjmp	.-1416   	; 0x93c <UPDI::runtime(unsigned char)+0x10a>
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	6f da       	rcall	.-2850   	; 0x3a6 <UPDI::updi_reset(bool)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:595
    loop_until_sys_stat_is_set(UPDI_SYS_NVMPROG);
     ec8:	88 23       	and	r24, r24
     eca:	09 f4       	brne	.+2      	; 0xece <UPDI::runtime(unsigned char)+0x69c>
     ecc:	37 cd       	rjmp	.-1426   	; 0x93c <UPDI::runtime(unsigned char)+0x10a>
     ece:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:781
          #endif
        }
        break;
      }
      case UPDI_CMD_GO : {
        _result = Target_Reset(true) && Target_Reset(false);
     ed0:	60 e0       	ldi	r22, 0x00	; 0
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	a3 db       	rcall	.-2234   	; 0x61c <UPDI::loop_until_sys_stat_is_clear(unsigned char, unsigned int)>
     ed6:	88 e0       	ldi	r24, 0x08	; 8
     ed8:	4f db       	rcall	.-2402   	; 0x578 <UPDI::loop_until_sys_stat_is_set(unsigned char, unsigned int) [clone .constprop.26]>
     eda:	e2 cf       	rjmp	.-60     	; 0xea0 <UPDI::runtime(unsigned char)+0x66e>
_ZN4UPDI7runtimeEh():
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	68 da       	rcall	.-2864   	; 0x3b0 <UPDI::Target_Reset(bool)>
     ee0:	88 23       	and	r24, r24
     ee2:	09 f4       	brne	.+2      	; 0xee6 <UPDI::runtime(unsigned char)+0x6b4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:789
    }
  }
  TIM::Timeout_Stop();
  UPDI_USART.CTRLB = UPDI_USART_ON;
  wdt_reset();
  if (!_result) drain();
     ee4:	f7 cc       	rjmp	.-1554   	; 0x8d4 <UPDI::runtime(unsigned char)+0xa2>
     ee6:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:388

      /* A page block must be erased before writing to a new page block.
         The new AVRDUDE splits large page blocks into multiple queries to read-modify-write.
         This prevents atomic operations and requires special handling. */
      bool is_bound = bit_is_clear(UPDI_CONTROL, UPDI::UPDI_ERFM_bp);
      if (is_bound) {
     ee8:	63 da       	rcall	.-2874   	; 0x3b0 <UPDI::Target_Reset(bool)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/NVM.cpp:387
      }

      /* A page block must be erased before writing to a new page block.
         The new AVRDUDE splits large page blocks into multiple queries to read-modify-write.
         This prevents atomic operations and requires special handling. */
      bool is_bound = bit_is_clear(UPDI_CONTROL, UPDI::UPDI_ERFM_bp);
     eea:	f4 cc       	rjmp	.-1560   	; 0x8d4 <UPDI::runtime(unsigned char)+0xa2>
     eec:	4c da       	rcall	.-2920   	; 0x386 <UPDI::drain()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:732

/**********************
 * UPDI authorization *
 **********************/

bool UPDI::updi_activate (bool hv_active) {
     eee:	c0 cd       	rjmp	.-1152   	; 0xa70 <UPDI::runtime(unsigned char)+0x23e>
write_memory():
     ef0:	e2 9b       	sbis	0x1c, 2	; 28
     ef2:	07 ce       	rjmp	.-1010   	; 0xb02 <UPDI::runtime(unsigned char)+0x2d0>
_ZN4UPDI7runtimeEh():
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	20 ce       	rjmp	.-960    	; 0xb38 <UPDI::runtime(unsigned char)+0x306>

00000ef8 <UPDI::updi_activate(bool)>:
_ZN4UPDI13updi_activateEb():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:733
  volatile uint8_t count = 4;
     ef8:	cf 93       	push	r28
     efa:	df 93       	push	r29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:734
  while (--count && bit_is_clear(UPDI_CONTROL, UPDI_PROG_bp)) {
     efc:	00 d0       	rcall	.+0      	; 0xefe <UPDI::updi_activate(bool)+0x6>
     efe:	cd b7       	in	r28, 0x3d	; 61
     f00:	de b7       	in	r29, 0x3e	; 62
     f02:	8a 83       	std	Y+2, r24	; 0x02
     f04:	84 e0       	ldi	r24, 0x04	; 4
     f06:	89 83       	std	Y+1, r24	; 0x01
     f08:	89 81       	ldd	r24, Y+1	; 0x01
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:737
    /* For the second lap, forced HV control is enabled by the CMND_RESET parameter */
    /* For the third lap, forced HV control of JP short is allowed. */
    if ((count == 2 && hv_active)
     f0a:	81 50       	subi	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:738
     || (count == 1 && JTAG2::updi_desc.hvupdi_variant != '1' 
     f0c:	89 83       	std	Y+1, r24	; 0x01
     f0e:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:737
bool UPDI::updi_activate (bool hv_active) {
  volatile uint8_t count = 4;
  while (--count && bit_is_clear(UPDI_CONTROL, UPDI_PROG_bp)) {
    /* For the second lap, forced HV control is enabled by the CMND_RESET parameter */
    /* For the third lap, forced HV control of JP short is allowed. */
    if ((count == 2 && hv_active)
     f10:	c1 f0       	breq	.+48     	; 0xf42 <UPDI::updi_activate(bool)+0x4a>
     f12:	e1 99       	sbic	0x1c, 1	; 28
     f14:	16 c0       	rjmp	.+44     	; 0xf42 <UPDI::updi_activate(bool)+0x4a>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:738
     || (count == 1 && JTAG2::updi_desc.hvupdi_variant != '1' 
     f16:	89 81       	ldd	r24, Y+1	; 0x01
     f18:	82 30       	cpi	r24, 0x02	; 2
     f1a:	19 f4       	brne	.+6      	; 0xf22 <UPDI::updi_activate(bool)+0x2a>
     f1c:	2a 81       	ldd	r18, Y+2	; 0x02
     f1e:	21 11       	cpse	r18, r1
     f20:	08 c0       	rjmp	.+16     	; 0xf32 <UPDI::updi_activate(bool)+0x3a>
     f22:	89 81       	ldd	r24, Y+1	; 0x01
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:739
                    && !digitalRead(JP_SENSE_PIN))) {
     f24:	81 30       	cpi	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:740
      bit_set(UPDI_CONTROL, UPDI_FCHV_bp);
     f26:	31 f4       	brne	.+12     	; 0xf34 <UPDI::updi_activate(bool)+0x3c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:742
    }
    if (setjmp(TIM::CONTEXT) == 0) {
     f28:	80 91 68 38 	lds	r24, 0x3868	; 0x803868 <JTAG2::updi_desc+0x2>
     f2c:	81 33       	cpi	r24, 0x31	; 49
     f2e:	11 f0       	breq	.+4      	; 0xf34 <UPDI::updi_activate(bool)+0x3c>
     f30:	53 9b       	sbis	0x0a, 3	; 10
     f32:	e4 9a       	sbi	0x1c, 4	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:746
      TIM::Timeout_Start(125);
      enter_updi(false) && enter_prog();
    }
    TIM::Timeout_Stop();
     f34:	8e e4       	ldi	r24, 0x4E	; 78
     f36:	98 e3       	ldi	r25, 0x38	; 56
     f38:	ba d3       	rcall	.+1908   	; 0x16ae <setjmp>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:748
  }
  return bit_is_set(UPDI_CONTROL, UPDI_PROG_bp);
     f3a:	89 2b       	or	r24, r25
     f3c:	51 f0       	breq	.+20     	; 0xf52 <UPDI::updi_activate(bool)+0x5a>
     f3e:	5e da       	rcall	.-2884   	; 0x3fc <TIM::Timeout_Stop()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:749
}
     f40:	e3 cf       	rjmp	.-58     	; 0xf08 <UPDI::updi_activate(bool)+0x10>
     f42:	8c b3       	in	r24, 0x1c	; 28
     f44:	86 95       	lsr	r24
     f46:	81 70       	andi	r24, 0x01	; 1
     f48:	0f 90       	pop	r0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:106
/*
 * Timeout control
 */

void TIM::Timeout_Start (uint16_t _ms) {
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     f4a:	0f 90       	pop	r0
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     f4c:	df 91       	pop	r29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:107
    TCB0_CNT = 0;
     f4e:	cf 91       	pop	r28
     f50:	08 95       	ret
Timeout_Start():
     f52:	8f b7       	in	r24, 0x3f	; 63
__iCliRetVal():
     f54:	f8 94       	cli
Timeout_Start():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:108
    TCB0_CCMP = _ms >> 2;
     f56:	ea e8       	ldi	r30, 0x8A	; 138
     f58:	fa e0       	ldi	r31, 0x0A	; 10
     f5a:	10 82       	st	Z, r1
     f5c:	11 82       	std	Z+1, r1	; 0x01
     f5e:	2f e1       	ldi	r18, 0x1F	; 31
     f60:	30 e0       	ldi	r19, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:109
    TCB0_INTCTRL = TCB_CAPT_bm;
     f62:	ec e8       	ldi	r30, 0x8C	; 140
     f64:	fa e0       	ldi	r31, 0x0A	; 10
     f66:	20 83       	st	Z, r18
     f68:	31 83       	std	Z+1, r19	; 0x01
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:110
    TCB0_INTFLAGS = TCB_CAPT_bm;
     f6a:	21 e0       	ldi	r18, 0x01	; 1
     f6c:	e5 e8       	ldi	r30, 0x85	; 133
     f6e:	fa e0       	ldi	r31, 0x0A	; 10
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:111
    TCB0_CTRLA = TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
     f70:	20 83       	st	Z, r18
     f72:	e6 e8       	ldi	r30, 0x86	; 134
     f74:	fa e0       	ldi	r31, 0x0A	; 10
     f76:	20 83       	st	Z, r18
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     f78:	2f e0       	ldi	r18, 0x0F	; 15
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:744
                    && !digitalRead(JP_SENSE_PIN))) {
      bit_set(UPDI_CONTROL, UPDI_FCHV_bp);
    }
    if (setjmp(TIM::CONTEXT) == 0) {
      TIM::Timeout_Start(125);
      enter_updi(false) && enter_prog();
     f7a:	e0 e8       	ldi	r30, 0x80	; 128
     f7c:	fa e0       	ldi	r31, 0x0A	; 10
     f7e:	20 83       	st	Z, r18
__iRestore():
     f80:	8f bf       	out	0x3f, r24	; 63
_ZN4UPDI13updi_activateEb():
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	8c db       	rcall	.-2280   	; 0x69e <UPDI::enter_updi(bool)>
     f86:	88 23       	and	r24, r24
     f88:	d1 f2       	breq	.-76     	; 0xf3e <UPDI::updi_activate(bool)+0x46>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:276
ISR(TCB0_INT_vect, ISR_NAKED) {
  /***
    This interrupt is a global escape due to timeout.
    There is no return to the source of the interrupt.
  ***/
  __asm__ __volatile__ ("EOR R1,R1");
     f8a:	5f db       	rcall	.-2370   	; 0x64a <UPDI::enter_prog()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:277
  TCB0_CTRLA = 0;
     f8c:	d8 cf       	rjmp	.-80     	; 0xf3e <UPDI::updi_activate(bool)+0x46>

00000f8e <__vector_13>:
__vector_13():
     f8e:	11 24       	eor	r1, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:278
  TCB0_INTFLAGS = TCB_CAPT_bm;
     f90:	10 92 80 0a 	sts	0x0A80, r1	; 0x800a80 <__RODATA_PM_OFFSET__+0x7f8a80>
     f94:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:279
  longjmp(TIM::CONTEXT, 2);
     f96:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__RODATA_PM_OFFSET__+0x7f8a86>
     f9a:	62 e0       	ldi	r22, 0x02	; 2
     f9c:	70 e0       	ldi	r23, 0x00	; 0
     f9e:	8e e4       	ldi	r24, 0x4E	; 78
     fa0:	98 e3       	ldi	r25, 0x38	; 56
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:248

/*
 * RTS monitoring upper and lower end interrupts
 */

ISR(portIntrruptVector(RTS_SENSE_PIN)) {
     fa2:	a5 d3       	rcall	.+1866   	; 0x16ee <longjmp>

00000fa4 <__vector_6>:
__vector_6():
     fa4:	1f 92       	push	r1
     fa6:	0f 92       	push	r0
     fa8:	0f b6       	in	r0, 0x3f	; 63
     faa:	0f 92       	push	r0
     fac:	11 24       	eor	r1, r1
     fae:	2f 93       	push	r18
     fb0:	3f 93       	push	r19
     fb2:	4f 93       	push	r20
     fb4:	5f 93       	push	r21
     fb6:	6f 93       	push	r22
     fb8:	7f 93       	push	r23
     fba:	8f 93       	push	r24
     fbc:	9f 93       	push	r25
     fbe:	af 93       	push	r26
     fc0:	bf 93       	push	r27
     fc2:	ef 93       	push	r30
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:169

void SYS::WDT_OFF (void) { WDT_SET(WDT_PERIOD_OFF_gc); }

void SYS::WDT_ON (void) { WDT_SET(WDT_PERIOD_8KCLK_gc); }

void SYS::WDT_Short (void) { WDT_SET(WDT_PERIOD_128CLK_gc); }
     fc4:	ff 93       	push	r31
WDT_Short():
     fc6:	85 e0       	ldi	r24, 0x05	; 5
     fc8:	2a dc       	rcall	.-1964   	; 0x81e <SYS::WDT_SET(unsigned char)>
RTS_Disable():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:108
void SYS::RTS_Enable (void) {
  pinControlRegister(RTS_SENSE_PIN) = RTS_SENSE_CONFIG;
}

void SYS::RTS_Disable (void) {
  pinControlRegister(RTS_SENSE_PIN) = RTS_SENSE_DISABLE;
     fca:	88 e0       	ldi	r24, 0x08	; 8
     fcc:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <__RODATA_PM_OFFSET__+0x7f8412>
__vector_6():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:260
  ***/

  SYS::WDT_Short();
  SYS::RTS_Disable();
  portRegister(RTS_SENSE_PIN).INTFLAGS =
  portRegister(RTS_SENSE_PIN).INTFLAGS;
     fd0:	e0 e0       	ldi	r30, 0x00	; 0
     fd2:	f4 e0       	ldi	r31, 0x04	; 4
     fd4:	81 85       	ldd	r24, Z+9	; 0x09
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:259
    is set to approximately 250ms.
  ***/

  SYS::WDT_Short();
  SYS::RTS_Disable();
  portRegister(RTS_SENSE_PIN).INTFLAGS =
     fd6:	81 87       	std	Z+9, r24	; 0x09
PG_Enable():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:96
/******************
 * Various ON/OFF *
 ******************/

void SYS::PG_Enable (void) {
  digitalWrite(PGEN_PIN, HIGH);
     fd8:	48 9a       	sbi	0x09, 0	; 9
LED_Flash():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:150
  }
}

/* Flash (after RTS assert/UPDI authorization) */
void TIM::LED_Flash (void) {
  LED_TCB1(2, TCB1_FLASH);
     fda:	69 ea       	ldi	r22, 0xA9	; 169
     fdc:	78 e0       	ldi	r23, 0x08	; 8
     fde:	82 e0       	ldi	r24, 0x02	; 2
     fe0:	f8 d9       	rcall	.-3088   	; 0x3d2 <LED_TCB1(unsigned char, unsigned int)>
__vector_6():
     fe2:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:263
  SYS::RTS_Disable();
  portRegister(RTS_SENSE_PIN).INTFLAGS =
  portRegister(RTS_SENSE_PIN).INTFLAGS;
  SYS::PG_Enable();
  TIM::LED_Flash();
  UPDI::Target_Reset(true);
     fe4:	e5 d9       	rcall	.-3126   	; 0x3b0 <UPDI::Target_Reset(bool)>
     fe6:	21 9a       	sbi	0x04, 1	; 4
     fe8:	ff 91       	pop	r31
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:264
  openDrainWrite(TRST_PIN, LOW);
     fea:	ef 91       	pop	r30
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:265
}
     fec:	bf 91       	pop	r27
     fee:	af 91       	pop	r26
     ff0:	9f 91       	pop	r25
     ff2:	8f 91       	pop	r24
     ff4:	7f 91       	pop	r23
     ff6:	6f 91       	pop	r22
     ff8:	5f 91       	pop	r21
     ffa:	4f 91       	pop	r20
     ffc:	3f 91       	pop	r19
     ffe:	2f 91       	pop	r18
    1000:	0f 90       	pop	r0
    1002:	0f be       	out	0x3f, r0	; 63
    1004:	0f 90       	pop	r0
    1006:	1f 90       	pop	r1
    1008:	18 95       	reti

0000100a <__vector_7>:
__vector_7():
    100a:	88 e0       	ldi	r24, 0x08	; 8
    100c:	08 dc       	rcall	.-2032   	; 0x81e <SYS::WDT_SET(unsigned char)>
LED_Fast():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:218
  /***
    The LED flashes rapidly while the UPDI data line is LOW.
    If there is no response for 1 second,
    the process will be aborted and the system will restart.
  ***/
  SYS::WDT_SET(WDT_PERIOD_1KCLK_gc);
    100e:	65 e1       	ldi	r22, 0x15	; 21
    1010:	74 e0       	ldi	r23, 0x04	; 4
    1012:	84 e0       	ldi	r24, 0x04	; 4
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:160
  LED_TCB1(3, TCB1_BLINK);
}

/* Fast blinking (UPDI memory access in progress) */
void TIM::LED_Fast (void) {
  LED_TCB1(4, TCB1_FAST);
    1014:	de d9       	rcall	.-3140   	; 0x3d2 <LED_TCB1(unsigned char, unsigned int)>
__vector_7():
    1016:	11 9b       	sbis	0x02, 1	; 2
    1018:	fe cf       	rjmp	.-4      	; 0x1016 <__vector_7+0xc>
WDT_Short():
    101a:	85 e0       	ldi	r24, 0x05	; 5
    101c:	00 dc       	rcall	.-2048   	; 0x81e <SYS::WDT_SET(unsigned char)>
__vector_7():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:220
    If there is no response for 1 second,
    the process will be aborted and the system will restart.
  ***/
  SYS::WDT_SET(WDT_PERIOD_1KCLK_gc);
  TIM::LED_Fast();
  while (!digitalRead(UPDI_TDAT_PIN));
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	c7 d9       	rcall	.-3186   	; 0x3b0 <UPDI::Target_Reset(bool)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:169

void SYS::WDT_OFF (void) { WDT_SET(WDT_PERIOD_OFF_gc); }

void SYS::WDT_ON (void) { WDT_SET(WDT_PERIOD_8KCLK_gc); }

void SYS::WDT_Short (void) { WDT_SET(WDT_PERIOD_128CLK_gc); }
    1022:	88 e0       	ldi	r24, 0x08	; 8
    1024:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__RODATA_PM_OFFSET__+0x7f8806>
delay_micros():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:226

  /***
    If UPDI can be communicated, attempt to reset the target.
  ***/
  SYS::WDT_Short();
  UPDI::Target_Reset(true);
    1028:	8f ec       	ldi	r24, 0xCF	; 207
    102a:	97 e0       	ldi	r25, 0x07	; 7
    102c:	01 97       	sbiw	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:229

  /* Attempt to reset the target hardware. */
  UPDI_USART.CTRLB = UPDI_USART_OFF;
    102e:	f1 f7       	brne	.-4      	; 0x102c <__vector_7+0x22>
    1030:	00 c0       	rjmp	.+0      	; 0x1032 <__vector_7+0x28>
    1032:	00 00       	nop
__vector_7():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.10/cores/megaAVR/api/delay_busywait.h:31
    1034:	01 9a       	sbi	0x00, 1	; 0
    1036:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <__RODATA_PM_OFFSET__+0x7f8411>
    103a:	09 98       	cbi	0x01, 1	; 1
    103c:	21 9a       	sbi	0x04, 1	; 4
LED_Blink():
    103e:	69 ea       	ldi	r22, 0xA9	; 169
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:231
  delay_micros(800);
  pinMode(UPDI_TDAT_PIN, OUTPUT);
    1040:	75 e5       	ldi	r23, 0x55	; 85
    1042:	83 e0       	ldi	r24, 0x03	; 3
    1044:	c6 d9       	rcall	.-3188   	; 0x3d2 <LED_TCB1(unsigned char, unsigned int)>
WDT_OFF():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:232
  digitalWrite(UPDI_TDAT_PIN, LOW);
    1046:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:233
  openDrainWrite(TRST_PIN, LOW);
    1048:	ea db       	rcall	.-2092   	; 0x81e <SYS::WDT_SET(unsigned char)>
__vector_7():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:155
  LED_TCB1(2, TCB1_FLASH);
}

/* Flashing (SW1 assert) */
void TIM::LED_Blink (void) {
  LED_TCB1(3, TCB1_BLINK);
    104a:	30 9b       	sbis	0x06, 0	; 6
    104c:	fe cf       	rjmp	.-4      	; 0x104a <__vector_7+0x40>
WDT_REBOOT():
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	e6 db       	rcall	.-2100   	; 0x81e <SYS::WDT_SET(unsigned char)>
    1052:	ff cf       	rjmp	.-2      	; 0x1052 <__vector_7+0x48>

00001054 <main>:
main():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:165
  wdt_reset();
  loop_until_bit_is_clear(WDT_STATUS, WDT_SYNCBUSY_bp);
  _PROTECTED_WRITE(WDT_CTRLA, _wdt_period);
}

void SYS::WDT_OFF (void) { WDT_SET(WDT_PERIOD_OFF_gc); }
    1054:	cf 93       	push	r28
    1056:	df 93       	push	r29
    1058:	00 d0       	rcall	.+0      	; 0x105a <main+0x6>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:238
  openDrainWrite(TRST_PIN, LOW);

  /* The LED will blink and wait while the button is pressed. */
  TIM::LED_Blink();
  SYS::WDT_OFF();
  while (!digitalRead(SW_SENSE_PIN));
    105a:	cd b7       	in	r28, 0x3d	; 61
    105c:	de b7       	in	r29, 0x3e	; 62
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:172
void SYS::WDT_ON (void) { WDT_SET(WDT_PERIOD_8KCLK_gc); }

void SYS::WDT_Short (void) { WDT_SET(WDT_PERIOD_128CLK_gc); }

void SYS::WDT_REBOOT (void) {
  WDT_SET(WDT_PERIOD_8CLK_gc);
    105e:	f8 94       	cli
initVariant():
    1060:	24 e0       	ldi	r18, 0x04	; 4
    1062:	e0 e1       	ldi	r30, 0x10	; 16
    1064:	f4 e0       	ldi	r31, 0x04	; 4
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.10/variants/tinyAVR2_20/variant.h:281
    "   DEC  R24     \n"
    "   BRNE 2b        " /* 3 loop PORTA to PORTC */
    : : "z" ((register8_t*)&PORTA_PIN0CTRL),
        "r" ((uint8_t)PORT_ISC_INPUT_DISABLE_gc)
      : "r24", "r25"
  );
    1066:	83 e0       	ldi	r24, 0x03	; 3
    1068:	98 e0       	ldi	r25, 0x08	; 8
    106a:	21 93       	st	Z+, r18
    106c:	9a 95       	dec	r25
    106e:	e9 f7       	brne	.-6      	; 0x106a <main+0x16>
    1070:	78 96       	adiw	r30, 0x18	; 24
    1072:	8a 95       	dec	r24
    1074:	c9 f7       	brne	.-14     	; 0x1068 <main+0x14>
_CLKCTRL_SETUP():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.10/cores/megaAVR/api/CLKCTRL_megaAVR.h:127
  // _PROTECTED_WRITE(CLKCTRL.MCLKCTRLA, CLKCTRL_CLKSEL_OSC20M_gc);

#else

  #if defined(_CLKCTRL_PDIV_)
  _PROTECTED_WRITE(CLKCTRL_MCLKCTRLB, _CLKCTRL_PDIV_ | CLKCTRL_PEN_bm);
    1076:	88 ed       	ldi	r24, 0xD8	; 216
    1078:	41 e0       	ldi	r20, 0x01	; 1
    107a:	50 e0       	ldi	r21, 0x00	; 0
    107c:	84 bf       	out	0x34, r24	; 52
    107e:	40 93 61 00 	sts	0x0061, r20	; 0x800061 <__RODATA_PM_OFFSET__+0x7f8061>
setup():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:17
#include <avr/io.h>

void SYS::setup (void) {

  /* Target reset release */
  pinControlRegister(TRST_PIN) = TRST_PIN_CONFIG;
    1082:	8c e0       	ldi	r24, 0x0C	; 12
    1084:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <__RODATA_PM_OFFSET__+0x7f8431>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:20

  /* Outgoing port */
  PORTA_DIRSET = _BV(pinPosition(HVP1_PIN))
    1088:	88 ef       	ldi	r24, 0xF8	; 248
    108a:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <__RODATA_PM_OFFSET__+0x7f8401>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:25
               | _BV(pinPosition(HVP2_PIN))
               | _BV(pinPosition(HV12_PIN))
               | _BV(pinPosition(LEDG_PIN))
               | _BV(pinPosition(LEDY_PIN));
  PORTB_DIRSET = _BV(pinPosition(HV8_PIN));
    108e:	80 e2       	ldi	r24, 0x20	; 32
    1090:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__RODATA_PM_OFFSET__+0x7f8421>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:28

  /* USART switching LOW=Target opening (PG_Disable) */
  PORTC_DIRSET = _BV(pinPosition(PGEN_PIN));
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <__RODATA_PM_OFFSET__+0x7f8441>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:31

  /* LED output */
  LEDG_EVOUT_MUX = LEDG_EVOUT_ALT;          /* OUT:PA7 */
    109a:	80 93 e0 05 	sts	0x05E0, r24	; 0x8005e0 <__RODATA_PM_OFFSET__+0x7f85e0>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:32
  PORTMUX_CCLROUTEA = PORTMUX_LUT3_ALT1_gc; /* OUT:PA5 IN:PC0,PC1,PC2 */
    109e:	98 e0       	ldi	r25, 0x08	; 8
    10a0:	90 93 e1 05 	sts	0x05E1, r25	; 0x8005e1 <__RODATA_PM_OFFSET__+0x7f85e1>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:33
  PORTA_OUTSET = _BV(pinPosition(LEDG_PIN))
    10a4:	30 ea       	ldi	r19, 0xA0	; 160
    10a6:	30 93 05 04 	sts	0x0405, r19	; 0x800405 <__RODATA_PM_OFFSET__+0x7f8405>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:37
               | _BV(pinPosition(LEDY_PIN));

  /* USART Alternative Selection */
  PORTMUX_USARTROUTEA = JTAG_PMUX_ALT | UPDI_PMUX_ALT;
    10aa:	45 e0       	ldi	r20, 0x05	; 5
    10ac:	40 93 e2 05 	sts	0x05E2, r20	; 0x8005e2 <__RODATA_PM_OFFSET__+0x7f85e2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:40

  /* JTAG port */
  pinControlRegister(JTAG_TXD_PIN) = JTAG_TXD_CONFIG;
    10b0:	90 93 52 04 	sts	0x0452, r25	; 0x800452 <__RODATA_PM_OFFSET__+0x7f8452>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:41
  pinControlRegister(JTAG_RXD_PIN) = JTAG_RXD_CONFIG;
    10b4:	90 93 51 04 	sts	0x0451, r25	; 0x800451 <__RODATA_PM_OFFSET__+0x7f8451>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:44

  /* UPDI port */
  pinControlRegister(UPDI_TDAT_PIN) = UPDI_TDAT_CONFIG;
    10b8:	90 93 11 04 	sts	0x0411, r25	; 0x800411 <__RODATA_PM_OFFSET__+0x7f8411>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:47

  /* HV generator */
  pinControlRegister(HVP1_PIN) = HVP1_PIN_CONFIG;
    10bc:	20 93 13 04 	sts	0x0413, r18	; 0x800413 <__RODATA_PM_OFFSET__+0x7f8413>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:48
  pinControlRegister(HVP2_PIN) = HVP2_PIN_CONFIG;
    10c0:	34 e8       	ldi	r19, 0x84	; 132
    10c2:	30 93 14 04 	sts	0x0414, r19	; 0x800414 <__RODATA_PM_OFFSET__+0x7f8414>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:51

  /* SW1 Interrupt permission */
  pinControlRegister(SW_SENSE_PIN) = SW_SENSE_CONFIG;
    10c6:	3d e0       	ldi	r19, 0x0D	; 13
    10c8:	30 93 30 04 	sts	0x0430, r19	; 0x800430 <__RODATA_PM_OFFSET__+0x7f8430>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:54

  /* RTS monitor */
  pinControlRegister(RTS_SENSE_PIN) = RTS_SENSE_CONFIG;
    10cc:	39 e0       	ldi	r19, 0x09	; 9
    10ce:	30 93 12 04 	sts	0x0412, r19	; 0x800412 <__RODATA_PM_OFFSET__+0x7f8412>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:57

  /* JP1 monitor */
  pinControlRegister(JP_SENSE_PIN) = JP_SENSE_CONFIG;
    10d2:	90 93 53 04 	sts	0x0453, r25	; 0x800453 <__RODATA_PM_OFFSET__+0x7f8453>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:60

  /* Initialize state variables */
  UPDI_CONTROL = 0;
    10d6:	1c ba       	out	0x1c, r1	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:61
  UPDI_NVMCTRL = 0;
    10d8:	1d ba       	out	0x1d, r1	; 29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:46

void TIM::setup (void) {

  /* EVSYS signal distribution */

  EVSYS_CHANNEL0 = EVSYS_CHANNEL0_CCL_LUT0_gc;
    10da:	90 e1       	ldi	r25, 0x10	; 16
    10dc:	90 93 90 01 	sts	0x0190, r25	; 0x800190 <__RODATA_PM_OFFSET__+0x7f8190>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:47
  EVSYS_CHANNEL1 = EVSYS_CHANNEL1_RTC_PIT_DIV128_gc;
    10e0:	3a e0       	ldi	r19, 0x0A	; 10
    10e2:	30 93 91 01 	sts	0x0191, r19	; 0x800191 <__RODATA_PM_OFFSET__+0x7f8191>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:48
  EVSYS_CHANNEL2 = EVSYS_CHANNEL2_CCL_LUT1_gc;
    10e6:	91 e1       	ldi	r25, 0x11	; 17
    10e8:	90 93 92 01 	sts	0x0192, r25	; 0x800192 <__RODATA_PM_OFFSET__+0x7f8192>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:49
  EVSYS_CHANNEL3 = EVSYS_CHANNEL3_PORTA_PIN5_gc;  /* <- PA5:LEDY */
    10ec:	9d e4       	ldi	r25, 0x4D	; 77
    10ee:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <__RODATA_PM_OFFSET__+0x7f8193>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:50
  EVSYS_USERTCB0COUNT = EVSYS_USER_CHANNEL1_gc;
    10f2:	92 e0       	ldi	r25, 0x02	; 2
    10f4:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <__RODATA_PM_OFFSET__+0x7f81b1>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:51
  EVSYS_USERTCB1COUNT = EVSYS_USER_CHANNEL1_gc;
    10f8:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <__RODATA_PM_OFFSET__+0x7f81b3>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:52
  EVSYS_USERCCLLUT0A  = EVSYS_USER_CHANNEL3_gc;   /* <- PA5:LEDY */
    10fc:	20 93 a0 01 	sts	0x01A0, r18	; 0x8001a0 <__RODATA_PM_OFFSET__+0x7f81a0>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:53
  EVSYS_USERCCLLUT1A  = EVSYS_USER_CHANNEL3_gc;   /* <- PA5:LEDY */
    1100:	20 93 a2 01 	sts	0x01A2, r18	; 0x8001a2 <__RODATA_PM_OFFSET__+0x7f81a2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:60
  /* When PA5:LEDY of CCL3 is used, the signal output of CCL0 and CCL1 is stopped. */

  /* CCL/LUT construction */

  /* TRUTH0: 010 is ON */
  CCL_TRUTH0    = CCL_TRUTH_2_bm;
    1104:	20 93 cb 01 	sts	0x01CB, r18	; 0x8001cb <__RODATA_PM_OFFSET__+0x7f81cb>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:61
  CCL_LUT0CTRLC = CCL_INSEL2_EVENTA_gc;           /* <- IN2:PA5 */
    1108:	93 e0       	ldi	r25, 0x03	; 3
    110a:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <__RODATA_PM_OFFSET__+0x7f81ca>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:62
  CCL_LUT0CTRLB = CCL_INSEL1_TCB1_gc;             /* <- IN1:POS */
    110e:	20 ec       	ldi	r18, 0xC0	; 192
    1110:	20 93 c9 01 	sts	0x01C9, r18	; 0x8001c9 <__RODATA_PM_OFFSET__+0x7f81c9>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:63
  CCL_LUT0CTRLA = CCL_ENABLE_bm;
    1114:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <__RODATA_PM_OFFSET__+0x7f81c8>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:66

  /* TRUTH1: 001 010 is ON */
  CCL_TRUTH1    = CCL_TRUTH_1_bm | CCL_TRUTH_2_bm;
    1118:	26 e0       	ldi	r18, 0x06	; 6
    111a:	20 93 cf 01 	sts	0x01CF, r18	; 0x8001cf <__RODATA_PM_OFFSET__+0x7f81cf>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:67
  CCL_LUT1CTRLC = CCL_INSEL2_EVENTA_gc;           /* <- IN2:PA5 */
    111e:	90 93 ce 01 	sts	0x01CE, r25	; 0x8001ce <__RODATA_PM_OFFSET__+0x7f81ce>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:68
  CCL_LUT1CTRLB = CCL_INSEL0_TCA0_gc | CCL_INSEL1_TCB1_gc;  /* <- IN0:POS IN1:POS */
    1122:	2a ec       	ldi	r18, 0xCA	; 202
    1124:	20 93 cd 01 	sts	0x01CD, r18	; 0x8001cd <__RODATA_PM_OFFSET__+0x7f81cd>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:69
  CCL_LUT1CTRLA = CCL_ENABLE_bm;
    1128:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <__RODATA_PM_OFFSET__+0x7f81cc>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:75

  /* TRUTH3: 001 010 is ON */
  /* CCL_INSEL0_USART0_gc : USART0TX normal HIGH */
  /* CCL_INSEL1_IO_gc     : USART1RX normal HIGH */
  /* CCL_INSEL2_IO_gc     : USART1TX normal HIGH */
  CCL_TRUTH3    = (uint8_t) ~CCL_TRUTH_7_bm;
    112c:	2f e7       	ldi	r18, 0x7F	; 127
    112e:	20 93 d7 01 	sts	0x01D7, r18	; 0x8001d7 <__RODATA_PM_OFFSET__+0x7f81d7>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:76
  CCL_LUT3CTRLC = CCL_INSEL2_IO_gc;
    1132:	40 93 d6 01 	sts	0x01D6, r20	; 0x8001d6 <__RODATA_PM_OFFSET__+0x7f81d6>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:77
  CCL_LUT3CTRLB = CCL_INSEL0_USART0_gc | CCL_INSEL1_IO_gc;
    1136:	28 e5       	ldi	r18, 0x58	; 88
    1138:	20 93 d5 01 	sts	0x01D5, r18	; 0x8001d5 <__RODATA_PM_OFFSET__+0x7f81d5>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:78
  CCL_LUT3CTRLA = CCL_ENABLE_bm | CCL_OUTEN_bm;
    113c:	21 e4       	ldi	r18, 0x41	; 65
    113e:	20 93 d4 01 	sts	0x01D4, r18	; 0x8001d4 <__RODATA_PM_OFFSET__+0x7f81d4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:81

  /* CCL enable */
  CCL_CTRLA = CCL_RUNSTDBY_bm | CCL_ENABLE_bm;
    1142:	20 93 c0 01 	sts	0x01C0, r18	; 0x8001c0 <__RODATA_PM_OFFSET__+0x7f81c0>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:84

  /* RTC_PIT enable */
  RTC_PITCTRLA = RTC_PITEN_bm;
    1146:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__RODATA_PM_OFFSET__+0x7f8150>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:89

  /* Timer */

  /* TCA0 */
  TCA0_SPLIT_CTRLD = TCA_SPLIT_SPLITM_bm;
    114a:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <__RODATA_PM_OFFSET__+0x7f8a03>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:90
  TCA0_SPLIT_LPER  = TCA0_STEP - 2;
    114e:	29 e8       	ldi	r18, 0x89	; 137
    1150:	20 93 26 0a 	sts	0x0A26, r18	; 0x800a26 <__RODATA_PM_OFFSET__+0x7f8a26>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:91
  TCA0_SPLIT_LCMP0 = TCA0_STEP / 2;
    1154:	25 e4       	ldi	r18, 0x45	; 69
    1156:	20 93 28 0a 	sts	0x0A28, r18	; 0x800a28 <__RODATA_PM_OFFSET__+0x7f8a28>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:92
  TCA0_SPLIT_HPER  = 1;
    115a:	80 93 27 0a 	sts	0x0A27, r24	; 0x800a27 <__RODATA_PM_OFFSET__+0x7f8a27>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:93
  TCA0_SPLIT_HCMP0 = 1;     /* WOA3=PA3 */
    115e:	80 93 29 0a 	sts	0x0A29, r24	; 0x800a29 <__RODATA_PM_OFFSET__+0x7f8a29>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:94
  TCA0_SPLIT_HCMP1 = 1;     /* WOA4=PA4 */
    1162:	80 93 2b 0a 	sts	0x0A2B, r24	; 0x800a2b <__RODATA_PM_OFFSET__+0x7f8a2b>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:95
  TCA0_SPLIT_CTRLA = TCA_SPLIT_RUNSTDBY_bm | TCA_SPLIT_ENABLE_bm | TCA_SPLIT_CLKSEL_DIV1024_gc;
    1166:	8f e8       	ldi	r24, 0x8F	; 143
    1168:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__RODATA_PM_OFFSET__+0x7f8a00>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:98

  /* TCB1 */
  TCB1_CTRLB = TCB_CNTMODE_PWM8_gc;
    116c:	87 e0       	ldi	r24, 0x07	; 7
    116e:	80 93 91 0a 	sts	0x0A91, r24	; 0x800a91 <__RODATA_PM_OFFSET__+0x7f8a91>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:459
/******************
 * Initialization *
 ******************/

void JTAG2::setup (void) {
  JTAG_USART.BAUD = pgm_read_word( &BAUD_TABLE[BAUD_19200] );
    1172:	ed e9       	ldi	r30, 0x9D	; 157
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	45 91       	lpm	r20, Z+
    1178:	54 91       	lpm	r21, Z
    117a:	40 93 28 08 	sts	0x0828, r20	; 0x800828 <__RODATA_PM_OFFSET__+0x7f8828>
    117e:	50 93 29 08 	sts	0x0829, r21	; 0x800829 <__RODATA_PM_OFFSET__+0x7f8829>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:460
  JTAG_USART.CTRLA = JTAG_USART_CTRLA;
    1182:	10 92 25 08 	sts	0x0825, r1	; 0x800825 <__RODATA_PM_OFFSET__+0x7f8825>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:461
  JTAG_USART.CTRLC = JTAG_USART_CTRLC;
    1186:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__RODATA_PM_OFFSET__+0x7f8827>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:462
  JTAG_USART.CTRLB = JTAG_USART_OFF;
    118a:	88 e8       	ldi	r24, 0x88	; 136
    118c:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__RODATA_PM_OFFSET__+0x7f8826>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:70
  }
  #endif
}

void UPDI::setup (void) {
  UPDI_USART.BAUD  = UPDI_BAUD_CALC;
    1190:	80 eb       	ldi	r24, 0xB0	; 176
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__RODATA_PM_OFFSET__+0x7f8808>
    1198:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__RODATA_PM_OFFSET__+0x7f8809>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:71
  UPDI_USART.CTRLA = UPDI_USART_CTRLA;
    119c:	30 93 05 08 	sts	0x0805, r19	; 0x800805 <__RODATA_PM_OFFSET__+0x7f8805>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:72
  UPDI_USART.CTRLC = UPDI_USART_CTRLC;
    11a0:	8b e2       	ldi	r24, 0x2B	; 43
    11a2:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <__RODATA_PM_OFFSET__+0x7f8807>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:73
  UPDI_USART.CTRLB = UPDI_USART_ON;
    11a6:	88 ec       	ldi	r24, 0xC8	; 200
    11a8:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__RODATA_PM_OFFSET__+0x7f8806>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/UPDI.cpp:74
  bit_clear(UPDI_CONTROL, UPDI_CLKU_bp);
    11ac:	e6 98       	cbi	0x1c, 6	; 28
ready():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:121
 * Run at the end of the boot sequence *
 ***************************************/

void SYS::ready (void) {
  /* Release target from reset state after resetting WDT timeout */
  if (bit_is_set(RSTCTRL_RSTFR, RSTCTRL_WDRF_bp))
    11ae:	80 91 40 00 	lds	r24, 0x0040	; 0x800040 <__RODATA_PM_OFFSET__+0x7f8040>
    11b2:	83 ff       	sbrs	r24, 3
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <main+0x166>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:122
    UPDI::Target_Reset(false);
    11b6:	80 e0       	ldi	r24, 0x00	; 0
    11b8:	fb d8       	rcall	.-3594   	; 0x3b0 <UPDI::Target_Reset(bool)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:125

  /* Clears the reset state flag. */
  RSTCTRL_RSTFR = RSTCTRL_RSTFR;
    11ba:	80 91 40 00 	lds	r24, 0x0040	; 0x800040 <__RODATA_PM_OFFSET__+0x7f8040>
    11be:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__RODATA_PM_OFFSET__+0x7f8040>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:128

  /*** Hibernation mode ***/
  set_sleep_mode(SLEEP_MODE_STANDBY);
    11c2:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <__RODATA_PM_OFFSET__+0x7f8050>
    11c6:	89 7f       	andi	r24, 0xF9	; 249
    11c8:	82 60       	ori	r24, 0x02	; 2
    11ca:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__RODATA_PM_OFFSET__+0x7f8050>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:131

  /* Clear asynchronous interrupts detected during initialization */
  while (portRegister(RTS_SENSE_PIN).INTFLAGS) {
    11ce:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__RODATA_PM_OFFSET__+0x7f8409>
    11d2:	88 23       	and	r24, r24
    11d4:	29 f0       	breq	.+10     	; 0x11e0 <main+0x18c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:133
    portRegister(RTS_SENSE_PIN).INTFLAGS =
    portRegister(RTS_SENSE_PIN).INTFLAGS;
    11d6:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__RODATA_PM_OFFSET__+0x7f8409>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:132
  /*** Hibernation mode ***/
  set_sleep_mode(SLEEP_MODE_STANDBY);

  /* Clear asynchronous interrupts detected during initialization */
  while (portRegister(RTS_SENSE_PIN).INTFLAGS) {
    portRegister(RTS_SENSE_PIN).INTFLAGS =
    11da:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <__RODATA_PM_OFFSET__+0x7f8409>
    11de:	f7 cf       	rjmp	.-18     	; 0x11ce <main+0x17a>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:137
    portRegister(RTS_SENSE_PIN).INTFLAGS;
  }

  /* Interrupt permission */
  sei();
    11e0:	78 94       	sei
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:142

  /* Keeps the LED flashing while the RTS maintains a low signal level. */
  /* This usually indicates that the serial console is still open.      */
  /* After completion, the system will be reset. */
  if (!digitalRead(RTS_SENSE_PIN)) {
    11e2:	12 99       	sbic	0x02, 2	; 2
    11e4:	0f c0       	rjmp	.+30     	; 0x1204 <main+0x1b0>
LED_Flash():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:150
  }
}

/* Flash (after RTS assert/UPDI authorization) */
void TIM::LED_Flash (void) {
  LED_TCB1(2, TCB1_FLASH);
    11e6:	69 ea       	ldi	r22, 0xA9	; 169
    11e8:	78 e0       	ldi	r23, 0x08	; 8
    11ea:	82 e0       	ldi	r24, 0x02	; 2
    11ec:	f2 d8       	rcall	.-3612   	; 0x3d2 <LED_TCB1(unsigned char, unsigned int)>
ready():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:144
    TIM::LED_Flash();
    while (!digitalRead(RTS_SENSE_PIN)) {
    11ee:	12 99       	sbic	0x02, 2	; 2
    11f0:	06 c0       	rjmp	.+12     	; 0x11fe <main+0x1aa>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:145
      sleep_enable();
    11f2:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <__RODATA_PM_OFFSET__+0x7f8050>
    11f6:	81 60       	ori	r24, 0x01	; 1
    11f8:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__RODATA_PM_OFFSET__+0x7f8050>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:172
void SYS::WDT_ON (void) { WDT_SET(WDT_PERIOD_8KCLK_gc); }

void SYS::WDT_Short (void) { WDT_SET(WDT_PERIOD_128CLK_gc); }

void SYS::WDT_REBOOT (void) {
  WDT_SET(WDT_PERIOD_8CLK_gc);
    11fc:	f8 cf       	rjmp	.-16     	; 0x11ee <main+0x19a>
WDT_REBOOT():
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	0e db       	rcall	.-2532   	; 0x81e <SYS::WDT_SET(unsigned char)>
    1202:	ff cf       	rjmp	.-2      	; 0x1202 <main+0x1ae>
LED_HeartBeat():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:129
 * LED operation switching
 */

/* Heartbeat (waiting) */
void TIM::LED_HeartBeat (void) {
  if (TIM::mode != 1) {
    1204:	80 91 65 38 	lds	r24, 0x3865	; 0x803865 <TIM::mode>
    1208:	81 30       	cpi	r24, 0x01	; 1
    120a:	99 f0       	breq	.+38     	; 0x1232 <main+0x1de>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:130
    TIM::mode = 1;
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	80 93 65 38 	sts	0x3865, r24	; 0x803865 <TIM::mode>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:131
    TCB1_CCMP = TCB1_HBEAT;
    1212:	8a e8       	ldi	r24, 0x8A	; 138
    1214:	95 e4       	ldi	r25, 0x45	; 69
    1216:	80 93 9c 0a 	sts	0x0A9C, r24	; 0x800a9c <__RODATA_PM_OFFSET__+0x7f8a9c>
    121a:	90 93 9d 0a 	sts	0x0A9D, r25	; 0x800a9d <__RODATA_PM_OFFSET__+0x7f8a9d>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:132
    TCB1_CNT = 0;
    121e:	10 92 9a 0a 	sts	0x0A9A, r1	; 0x800a9a <__RODATA_PM_OFFSET__+0x7f8a9a>
    1222:	10 92 9b 0a 	sts	0x0A9B, r1	; 0x800a9b <__RODATA_PM_OFFSET__+0x7f8a9b>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:133
    TCB1_CTRLA = TCB_RUNSTDBY_bm | TCB_ENABLE_bm | TCB_CLKSEL_TCA0_gc;
    1226:	85 e4       	ldi	r24, 0x45	; 69
    1228:	80 93 90 0a 	sts	0x0A90, r24	; 0x800a90 <__RODATA_PM_OFFSET__+0x7f8a90>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:134
    LEDG_EVOUT = EVSYS_USER_CHANNEL2_gc;
    122c:	83 e0       	ldi	r24, 0x03	; 3
    122e:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <__RODATA_PM_OFFSET__+0x7f81a9>
ready():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:152
    SYS::WDT_REBOOT();
  }
  TIM::LED_HeartBeat();

  /* It stays in a low power state until the first interrupt occurs. */
  sleep_enable();
    1232:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <__RODATA_PM_OFFSET__+0x7f8050>
    1236:	81 60       	ori	r24, 0x01	; 1
    1238:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__RODATA_PM_OFFSET__+0x7f8050>
get_parameter():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:253
      }
      case PAR_EMU_MODE : {
        /* This response code indicates an UPDI-only implementation */
        /* In normal JTAGICEmkII this is never queried */
        packet.body[1] = 0x55;
        packet.size_word[0] = 2;
    123c:	f2 e0       	ldi	r31, 0x02	; 2
    123e:	af 2e       	mov	r10, r31
    1240:	b1 2c       	mov	r11, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:263
        packet.size_word[0] = 2;
        break;
      }
      case PAR_VTARGET : {
        _CAPS16(packet.body[1])->word = SYS::get_vcc();
        packet.size_word[0] = 3;
    1242:	a3 e0       	ldi	r26, 0x03	; 3
    1244:	8a 2e       	mov	r8, r26
    1246:	91 2c       	mov	r9, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:246
      case PAR_FW_VER : {
        packet.body[1] = sign_on_resp[3];
        packet.body[2] = sign_on_resp[4];
        packet.body[3] = sign_on_resp[7];
        packet.body[4] = sign_on_resp[8];
        packet.size_word[0] = 5;
    1248:	b5 e0       	ldi	r27, 0x05	; 5
    124a:	2b 2e       	mov	r2, r27
    124c:	31 2c       	mov	r3, r1
sign_on_response():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:168
  /********************
   * SIGN_ON Response *
   ********************/

  void sign_on_response (void) {
    packet.size_word[0] = sizeof(sign_on_resp);
    124e:	1d e1       	ldi	r17, 0x1D	; 29
    1250:	41 2e       	mov	r4, r17
    1252:	51 2c       	mov	r5, r1
    1254:	05 eb       	ldi	r16, 0xB5	; 181
    1256:	60 2e       	mov	r6, r16
    1258:	08 e3       	ldi	r16, 0x38	; 56
    125a:	70 2e       	mov	r7, r16
get():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:86
  /*******************
   * Local functions *
   *******************/

  uint8_t get (void) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_RXCIF_bp);
    125c:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
    1260:	87 ff       	sbrs	r24, 7
    1262:	fc cf       	rjmp	.-8      	; 0x125c <main+0x208>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:87
    return JTAG_USART.RXDATAL;
    1264:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__RODATA_PM_OFFSET__+0x7f8820>
packet_receive():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:126
    uint16_t _crc = ~0;
    uint8_t *p = (uint8_t*) &packet.soh;
    uint8_t *q = (uint8_t*) &packet.soh;

    /* Waiting for reception (infinite loop) */
    while (get() != MESSAGE_START);
    1268:	8b 31       	cpi	r24, 0x1B	; 27
    126a:	c1 f7       	brne	.-16     	; 0x125c <main+0x208>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:127
    (*p++) = MESSAGE_START;
    126c:	80 93 90 38 	sts	0x3890, r24	; 0x803890 <JTAG2::packet>
    1270:	e1 e9       	ldi	r30, 0x91	; 145
    1272:	f8 e3       	ldi	r31, 0x38	; 56
get():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:86
  /*******************
   * Local functions *
   *******************/

  uint8_t get (void) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_RXCIF_bp);
    1274:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
    1278:	87 ff       	sbrs	r24, 7
    127a:	fc cf       	rjmp	.-8      	; 0x1274 <main+0x220>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:87
    return JTAG_USART.RXDATAL;
    127c:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__RODATA_PM_OFFSET__+0x7f8820>
packet_receive():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:130
    /* Waiting for reception (infinite loop) */
    while (get() != MESSAGE_START);
    (*p++) = MESSAGE_START;

    /* First 7bytes */
    for (int8_t i = 0; i < 7; i++) *p++ = get();
    1280:	81 93       	st	Z+, r24
    1282:	28 e3       	ldi	r18, 0x38	; 56
    1284:	e8 39       	cpi	r30, 0x98	; 152
    1286:	f2 07       	cpc	r31, r18
    1288:	a9 f7       	brne	.-22     	; 0x1274 <main+0x220>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:133

    /* STX confirmation */
    if (packet.stx != TOKEN) return false;
    128a:	80 91 97 38 	lds	r24, 0x3897	; 0x803897 <JTAG2::packet+0x7>
    128e:	8e 30       	cpi	r24, 0x0E	; 14
    1290:	29 f7       	brne	.-54     	; 0x125c <main+0x208>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:136

    /* Check packet length */
    if (packet.size > sizeof(packet.body)) return false;
    1292:	80 91 93 38 	lds	r24, 0x3893	; 0x803893 <JTAG2::packet+0x3>
    1296:	90 91 94 38 	lds	r25, 0x3894	; 0x803894 <JTAG2::packet+0x4>
    129a:	a0 91 95 38 	lds	r26, 0x3895	; 0x803895 <JTAG2::packet+0x5>
    129e:	b0 91 96 38 	lds	r27, 0x3896	; 0x803896 <JTAG2::packet+0x6>
    12a2:	85 31       	cpi	r24, 0x15	; 21
    12a4:	92 40       	sbci	r25, 0x02	; 2
    12a6:	a1 05       	cpc	r26, r1
    12a8:	b1 05       	cpc	r27, r1
    12aa:	c0 f6       	brcc	.-80     	; 0x125c <main+0x208>
    12ac:	08 e9       	ldi	r16, 0x98	; 152
    12ae:	18 e3       	ldi	r17, 0x38	; 56
    12b0:	68 01       	movw	r12, r16
main():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:139

    /* receive the rest */
    for (int16_t j = -2; j < packet.size_word[0]; j++) *p++ = get();
    12b2:	8e ef       	ldi	r24, 0xFE	; 254
    12b4:	9f ef       	ldi	r25, 0xFF	; 255
packet_receive():
    12b6:	20 91 93 38 	lds	r18, 0x3893	; 0x803893 <JTAG2::packet+0x3>
    12ba:	30 91 94 38 	lds	r19, 0x3894	; 0x803894 <JTAG2::packet+0x4>
    12be:	82 17       	cp	r24, r18
    12c0:	93 07       	cpc	r25, r19
    12c2:	5c f4       	brge	.+22     	; 0x12da <main+0x286>
get():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:86
  /*******************
   * Local functions *
   *******************/

  uint8_t get (void) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_RXCIF_bp);
    12c4:	20 91 24 08 	lds	r18, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
    12c8:	27 ff       	sbrs	r18, 7
    12ca:	fc cf       	rjmp	.-8      	; 0x12c4 <main+0x270>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:87
    return JTAG_USART.RXDATAL;
    12cc:	20 91 20 08 	lds	r18, 0x0820	; 0x800820 <__RODATA_PM_OFFSET__+0x7f8820>
packet_receive():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:139

    /* Check packet length */
    if (packet.size > sizeof(packet.body)) return false;

    /* receive the rest */
    for (int16_t j = -2; j < packet.size_word[0]; j++) *p++ = get();
    12d0:	d6 01       	movw	r26, r12
    12d2:	2d 93       	st	X+, r18
    12d4:	6d 01       	movw	r12, r26
    12d6:	01 96       	adiw	r24, 0x01	; 1
    12d8:	ee cf       	rjmp	.-36     	; 0x12b6 <main+0x262>
    12da:	e0 e9       	ldi	r30, 0x90	; 144
    12dc:	ee 2e       	mov	r14, r30
    12de:	e8 e3       	ldi	r30, 0x38	; 56
    12e0:	fe 2e       	mov	r15, r30
main():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:121
  /****************
   * JTAG Receive *
   ****************/

  bool packet_receive (void) {
    uint16_t _crc = ~0;
    12e2:	8f ef       	ldi	r24, 0xFF	; 255
    12e4:	9f ef       	ldi	r25, 0xFF	; 255
packet_receive():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:142

    /* receive the rest */
    for (int16_t j = -2; j < packet.size_word[0]; j++) *p++ = get();

    /* CRC check when receive buffer is filled */
    while (p != q) _crc = crc16_update(_crc, *q++);
    12e6:	ec 14       	cp	r14, r12
    12e8:	fd 04       	cpc	r15, r13
    12ea:	29 f0       	breq	.+10     	; 0x12f6 <main+0x2a2>
    12ec:	f7 01       	movw	r30, r14
    12ee:	61 91       	ld	r22, Z+
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:101
  void flush (void) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_TXCIF_bp);
  }

  uint16_t crc16_update(uint16_t _crc, uint8_t _data) {
    return _crc_ccitt_update(_crc, _data);
    12f0:	7f 01       	movw	r14, r30
crc16_update():
    12f2:	b8 d8       	rcall	.-3728   	; 0x464 <_crc_ccitt_update(unsigned int, unsigned char)>
    12f4:	f8 cf       	rjmp	.-16     	; 0x12e6 <main+0x292>
wakeup_jtag():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:485
 * Main loop *
 *************/

void JTAG2::wakeup_jtag (void) {
  for (;;) {
    if (packet_receive()) process_command();
    12f6:	89 2b       	or	r24, r25
    12f8:	09 f0       	breq	.+2      	; 0x12fc <main+0x2a8>
    12fa:	b0 cf       	rjmp	.-160    	; 0x125c <main+0x208>
process_command():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:330
  /****************
   * JTAG Process *
   ****************/

  inline void process_command (void) {
    wdt_reset();
    12fc:	a8 95       	wdr
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:334
    #ifdef ENABLE_DEBUG_UPDI_SENDER
    UPDI::_send_buf_clear();
    #endif
    uint8_t message_id = packet.body[MESSAGE_ID];
    12fe:	80 91 98 38 	lds	r24, 0x3898	; 0x803898 <JTAG2::packet+0x8>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:335
    packet.size_word[0] = 1;
    1302:	21 e0       	ldi	r18, 0x01	; 1
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	20 93 93 38 	sts	0x3893, r18	; 0x803893 <JTAG2::packet+0x3>
    130a:	30 93 94 38 	sts	0x3894, r19	; 0x803894 <JTAG2::packet+0x4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:336
    packet.body[MESSAGE_ID] = RSP_OK;
    130e:	30 e8       	ldi	r19, 0x80	; 128
    1310:	30 93 98 38 	sts	0x3898, r19	; 0x803898 <JTAG2::packet+0x8>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:337
    switch (message_id) {
    1314:	8b 30       	cpi	r24, 0x0B	; 11
    1316:	09 f4       	brne	.+2      	; 0x131a <main+0x2c6>
    1318:	40 c1       	rjmp	.+640    	; 0x159a <main+0x546>
    131a:	08 f0       	brcs	.+2      	; 0x131e <main+0x2ca>
    131c:	4c c0       	rjmp	.+152    	; 0x13b6 <main+0x362>
    131e:	83 30       	cpi	r24, 0x03	; 3
    1320:	09 f4       	brne	.+2      	; 0x1324 <main+0x2d0>
    1322:	c5 c0       	rjmp	.+394    	; 0x14ae <main+0x45a>
    1324:	08 f0       	brcs	.+2      	; 0x1328 <main+0x2d4>
    1326:	3d c0       	rjmp	.+122    	; 0x13a2 <main+0x34e>
    1328:	81 30       	cpi	r24, 0x01	; 1
    132a:	09 f4       	brne	.+2      	; 0x132e <main+0x2da>
    132c:	6a c0       	rjmp	.+212    	; 0x1402 <main+0x3ae>
    132e:	08 f4       	brcc	.+2      	; 0x1332 <main+0x2de>
    1330:	ae c1       	rjmp	.+860    	; 0x168e <main+0x63a>
set_parameter():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:190
   * CMND_SET_PARAMETER *
   **********************/

  bool set_parameter (void) {
    uint8_t param_val = packet.body[RSP_DATA + 1];
    switch ( packet.body[RSP_DATA] ) {
    1332:	80 91 99 38 	lds	r24, 0x3899	; 0x803899 <JTAG2::packet+0x9>
    1336:	85 30       	cpi	r24, 0x05	; 5
    1338:	09 f0       	breq	.+2      	; 0x133c <main+0x2e8>
    133a:	b1 c0       	rjmp	.+354    	; 0x149e <main+0x44a>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:189
  /**********************
   * CMND_SET_PARAMETER *
   **********************/

  bool set_parameter (void) {
    uint8_t param_val = packet.body[RSP_DATA + 1];
    133c:	d0 90 9a 38 	lds	r13, 0x389A	; 0x80389a <JTAG2::packet+0xa>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:194
    switch ( packet.body[RSP_DATA] ) {
      /* JTAG interface speed */
      case PAR_BAUD_RATE : {
        /* Compatible range confirmation */
        if ((param_val >= BAUD_LOWER) && (param_val <= BAUD_UPPER)) {
    1340:	8e ef       	ldi	r24, 0xFE	; 254
    1342:	8d 0d       	add	r24, r13
    1344:	88 31       	cpi	r24, 0x18	; 24
    1346:	08 f0       	brcs	.+2      	; 0x134a <main+0x2f6>
    1348:	ad c0       	rjmp	.+346    	; 0x14a4 <main+0x450>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:195
          uint16_t baud = pgm_read_word( &BAUD_TABLE[param_val] );
    134a:	8d 2d       	mov	r24, r13
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	fc 01       	movw	r30, r24
    1350:	ee 0f       	add	r30, r30
    1352:	ff 1f       	adc	r31, r31
    1354:	eb 56       	subi	r30, 0x6B	; 107
    1356:	ff 4f       	sbci	r31, 0xFF	; 255
    1358:	05 91       	lpm	r16, Z+
    135a:	14 91       	lpm	r17, Z
    135c:	78 01       	movw	r14, r16
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:196
          if (baud) {
    135e:	01 15       	cp	r16, r1
    1360:	11 05       	cpc	r17, r1
    1362:	09 f4       	brne	.+2      	; 0x1366 <main+0x312>
    1364:	9f c0       	rjmp	.+318    	; 0x14a4 <main+0x450>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:198
            /* If normal, respond and then change speed */
            param_baud_rate_val = (jtag_baud_rate_e) param_val;
    1366:	80 93 3f 38 	sts	0x383F, r24	; 0x80383f <JTAG2::param_baud_rate_val>
    136a:	90 93 40 38 	sts	0x3840, r25	; 0x803840 <JTAG2::param_baud_rate_val+0x1>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:199
            answer_transfer();
    136e:	8c d8       	rcall	.-3816   	; 0x488 <JTAG2::answer_transfer()>
flush():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:97
    JTAG_USART.STATUS = USART_TXCIF_bm;
    return JTAG_USART.TXDATAL = _data;
  }

  void flush (void) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_TXCIF_bp);
    1370:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
    1374:	86 ff       	sbrs	r24, 6
    1376:	fc cf       	rjmp	.-8      	; 0x1370 <main+0x31c>
set_parameter():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:202
            /* If normal, respond and then change speed */
            param_baud_rate_val = (jtag_baud_rate_e) param_val;
            answer_transfer();
            flush();
            /* If the division ratio is too small, change to double speed mode */
            if (baud < 64) {
    1378:	00 34       	cpi	r16, 0x40	; 64
    137a:	11 05       	cpc	r17, r1
    137c:	30 f4       	brcc	.+12     	; 0x138a <main+0x336>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:203
              JTAG_USART.CTRLB = JTAG_USART_DBLON;
    137e:	8a ec       	ldi	r24, 0xCA	; 202
    1380:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__RODATA_PM_OFFSET__+0x7f8826>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:204
              baud <<= 1;
    1384:	78 01       	movw	r14, r16
    1386:	ee 0c       	add	r14, r14
    1388:	ff 1c       	adc	r15, r15
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:206
            }
            JTAG_USART.BAUD = baud;
    138a:	e0 92 28 08 	sts	0x0828, r14	; 0x800828 <__RODATA_PM_OFFSET__+0x7f8828>
    138e:	f0 92 29 08 	sts	0x0829, r15	; 0x800829 <__RODATA_PM_OFFSET__+0x7f8829>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:208
            /* Speed to allow terminal mode */
            if (param_val == BAUD_38400 || param_val == BAUD_666666)
    1392:	b5 e0       	ldi	r27, 0x05	; 5
    1394:	db 16       	cp	r13, r27
    1396:	19 f0       	breq	.+6      	; 0x139e <main+0x34a>
    1398:	e8 e1       	ldi	r30, 0x18	; 24
    139a:	de 12       	cpse	r13, r30
    139c:	5f cf       	rjmp	.-322    	; 0x125c <main+0x208>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:209
              bit_set(UPDI_CONTROL, UPDI::UPDI_TERM_bp);
    139e:	e5 9a       	sbi	0x1c, 5	; 28
    13a0:	5d cf       	rjmp	.-326    	; 0x125c <main+0x208>
process_command():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:337
    UPDI::_send_buf_clear();
    #endif
    uint8_t message_id = packet.body[MESSAGE_ID];
    packet.size_word[0] = 1;
    packet.body[MESSAGE_ID] = RSP_OK;
    switch (message_id) {
    13a2:	85 30       	cpi	r24, 0x05	; 5
    13a4:	09 f4       	brne	.+2      	; 0x13a8 <main+0x354>
    13a6:	19 c1       	rjmp	.+562    	; 0x15da <main+0x586>
    13a8:	08 f4       	brcc	.+2      	; 0x13ac <main+0x358>
    13aa:	1e c1       	rjmp	.+572    	; 0x15e8 <main+0x594>
    13ac:	88 30       	cpi	r24, 0x08	; 8
    13ae:	61 f0       	breq	.+24     	; 0x13c8 <main+0x374>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:447
        /* After all processing is completed, reset itself */
        SYS::System_Reset();
      }
      /* Returns negation for unknown commands */
      default : {
        set_response(RSP_FAILED);
    13b0:	80 ea       	ldi	r24, 0xA0	; 160
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	79 c0       	rjmp	.+242    	; 0x14a8 <main+0x454>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:337
    UPDI::_send_buf_clear();
    #endif
    uint8_t message_id = packet.body[MESSAGE_ID];
    packet.size_word[0] = 1;
    packet.body[MESSAGE_ID] = RSP_OK;
    switch (message_id) {
    13b6:	86 31       	cpi	r24, 0x16	; 22
    13b8:	50 f4       	brcc	.+20     	; 0x13ce <main+0x37a>
    13ba:	84 31       	cpi	r24, 0x14	; 20
    13bc:	28 f4       	brcc	.+10     	; 0x13c8 <main+0x374>
    13be:	8c 30       	cpi	r24, 0x0C	; 12
    13c0:	09 f4       	brne	.+2      	; 0x13c4 <main+0x370>
    13c2:	2e c1       	rjmp	.+604    	; 0x1620 <main+0x5cc>
    13c4:	8f 30       	cpi	r24, 0x0F	; 15
    13c6:	a1 f7       	brne	.-24     	; 0x13b0 <main+0x35c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:434
      case CMND_SET_XMEGA_PARAMS :
      case CMND_ENTER_PROGMODE :
      case CMND_LEAVE_PROGMODE :
      case CMND_GO :
      case CMND_GET_SYNC : {
        set_response(RSP_OK);
    13c8:	80 e8       	ldi	r24, 0x80	; 128
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	6d c0       	rjmp	.+218    	; 0x14a8 <main+0x454>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:337
    UPDI::_send_buf_clear();
    #endif
    uint8_t message_id = packet.body[MESSAGE_ID];
    packet.size_word[0] = 1;
    packet.body[MESSAGE_ID] = RSP_OK;
    switch (message_id) {
    13ce:	86 33       	cpi	r24, 0x36	; 54
    13d0:	d9 f3       	breq	.-10     	; 0x13c8 <main+0x374>
    13d2:	85 35       	cpi	r24, 0x55	; 85
    13d4:	09 f4       	brne	.+2      	; 0x13d8 <main+0x384>
    13d6:	41 c1       	rjmp	.+642    	; 0x165a <main+0x606>
    13d8:	84 33       	cpi	r24, 0x34	; 52
    13da:	51 f7       	brne	.-44     	; 0x13b0 <main+0x35c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:411
        #endif
        break;
      }
      case CMND_XMEGA_ERASE : {
        /* Received packet error retransmission exception */
        if (before_seqnum == packet.number) break;
    13dc:	20 91 91 38 	lds	r18, 0x3891	; 0x803891 <JTAG2::packet+0x1>
    13e0:	30 91 92 38 	lds	r19, 0x3892	; 0x803892 <JTAG2::packet+0x2>
    13e4:	80 91 41 38 	lds	r24, 0x3841	; 0x803841 <JTAG2::before_seqnum>
    13e8:	90 91 42 38 	lds	r25, 0x3842	; 0x803842 <JTAG2::before_seqnum+0x1>
    13ec:	28 17       	cp	r18, r24
    13ee:	39 07       	cpc	r19, r25
    13f0:	09 f4       	brne	.+2      	; 0x13f4 <main+0x3a0>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:412
        if (UPDI::runtime(UPDI::UPDI_CMD_ERASE)) {
    13f2:	55 c0       	rjmp	.+170    	; 0x149e <main+0x44a>
    13f4:	83 e0       	ldi	r24, 0x03	; 3
    13f6:	1d da       	rcall	.-3014   	; 0x832 <UPDI::runtime(unsigned char)>
    13f8:	81 11       	cpse	r24, r1
    13fa:	06 c1       	rjmp	.+524    	; 0x1608 <main+0x5b4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:417
          /* Keep the sequence number if completed successfully */
          before_seqnum = packet.number;
        }
        else {
          set_response(RSP_ILLEGAL_POWER_STATE);
    13fc:	8d ea       	ldi	r24, 0xAD	; 173
    13fe:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:167
  _PROTECTED_WRITE(WDT_CTRLA, _wdt_period);
}

void SYS::WDT_OFF (void) { WDT_SET(WDT_PERIOD_OFF_gc); }

void SYS::WDT_ON (void) { WDT_SET(WDT_PERIOD_8KCLK_gc); }
    1400:	53 c0       	rjmp	.+166    	; 0x14a8 <main+0x454>
WDT_ON():
    1402:	8b e0       	ldi	r24, 0x0B	; 11
    1404:	0c da       	rcall	.-3048   	; 0x81e <SYS::WDT_SET(unsigned char)>
RTS_Disable():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:108
void SYS::RTS_Enable (void) {
  pinControlRegister(RTS_SENSE_PIN) = RTS_SENSE_CONFIG;
}

void SYS::RTS_Disable (void) {
  pinControlRegister(RTS_SENSE_PIN) = RTS_SENSE_DISABLE;
    1406:	88 e0       	ldi	r24, 0x08	; 8
    1408:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <__RODATA_PM_OFFSET__+0x7f8412>
LED_Stop():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:166
}

/* Suspension (before UPDI approval) */
/* TCA0 changed to charge pump drive speed */
void TIM::LED_Stop (void) {
  if (TIM::mode != 0) {
    140c:	80 91 65 38 	lds	r24, 0x3865	; 0x803865 <TIM::mode>
    1410:	88 23       	and	r24, r24
    1412:	41 f0       	breq	.+16     	; 0x1424 <main+0x3d0>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:167
    TIM::mode = 0;
    1414:	10 92 65 38 	sts	0x3865, r1	; 0x803865 <TIM::mode>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:168
    TCA0_SPLIT_CTRLA = TCA_SPLIT_RUNSTDBY_bm | TCA_SPLIT_ENABLE_bm | TCA_SPLIT_CLKSEL_DIV1_gc;
    1418:	81 e8       	ldi	r24, 0x81	; 129
    141a:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__RODATA_PM_OFFSET__+0x7f8a00>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:169
    LEDG_EVOUT = EVSYS_USER_OFF_gc;
    141e:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <__RODATA_PM_OFFSET__+0x7f81a9>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:170
    digitalWrite(LEDG_PIN, LOW);
    1422:	0f 98       	cbi	0x01, 7	; 1
process_command():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:342
    switch (message_id) {
      case CMND_GET_SIGN_ON : {
        SYS::WDT_ON();
        SYS::RTS_Disable();
        TIM::LED_Stop();
        UPDI::Target_Reset(true);
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <UPDI::Target_Reset(bool)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:343
        openDrainWrite(TRST_PIN, LOW);
    142a:	21 9a       	sbi	0x04, 1	; 4
PG_Enable():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:96
/******************
 * Various ON/OFF *
 ******************/

void SYS::PG_Enable (void) {
  digitalWrite(PGEN_PIN, HIGH);
    142c:	48 9a       	sbi	0x09, 0	; 9
transfer_enable():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:106
    return _crc_ccitt_update(_crc, _data);
  }

  void transfer_enable (void) {
    SYS::PG_Enable();
    pinMode(JTAG_TXD_PIN, OUTPUT);
    142e:	42 9a       	sbi	0x08, 2	; 8
    1430:	10 92 52 04 	sts	0x0452, r1	; 0x800452 <__RODATA_PM_OFFSET__+0x7f8452>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:107
    JTAG_USART.CTRLB = JTAG_USART_ON;
    1434:	88 ec       	ldi	r24, 0xC8	; 200
    1436:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__RODATA_PM_OFFSET__+0x7f8826>
sign_on_response():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:168
  /********************
   * SIGN_ON Response *
   ********************/

  void sign_on_response (void) {
    packet.size_word[0] = sizeof(sign_on_resp);
    143a:	40 92 93 38 	sts	0x3893, r4	; 0x803893 <JTAG2::packet+0x3>
    143e:	50 92 94 38 	sts	0x3894, r5	; 0x803894 <JTAG2::packet+0x4>
    1442:	e8 e7       	ldi	r30, 0x78	; 120
    1444:	f0 e0       	ldi	r31, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:170
    for (uint8_t i = 0; i < sizeof(sign_on_resp); i++)
      packet.body[i] = pgm_read_byte( &sign_on_resp[i] );
    1446:	84 91       	lpm	r24, Z
    1448:	d8 01       	movw	r26, r16
    144a:	8d 93       	st	X+, r24
    144c:	8d 01       	movw	r16, r26
    144e:	31 96       	adiw	r30, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:169
   * SIGN_ON Response *
   ********************/

  void sign_on_response (void) {
    packet.size_word[0] = sizeof(sign_on_resp);
    for (uint8_t i = 0; i < sizeof(sign_on_resp); i++)
    1450:	6a 16       	cp	r6, r26
    1452:	7b 06       	cpc	r7, r27
    1454:	c1 f7       	brne	.-16     	; 0x1446 <main+0x3f2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:175
      packet.body[i] = pgm_read_byte( &sign_on_resp[i] );
    /* Generate version information from SERNUM */
    uint8_t* p = (uint8_t*) &SIGROW_SERNUM0;
    uint8_t* q = (uint8_t*) &SIGROW_SERNUM4;
    uint8_t* r = (uint8_t*) &packet.body[10];
      *r = *q++ ^ *p++; *r++ ^= *p++;
    1456:	80 91 07 11 	lds	r24, 0x1107	; 0x801107 <__RODATA_PM_OFFSET__+0x7f9107>
    145a:	90 91 03 11 	lds	r25, 0x1103	; 0x801103 <__RODATA_PM_OFFSET__+0x7f9103>
    145e:	98 27       	eor	r25, r24
    1460:	80 91 04 11 	lds	r24, 0x1104	; 0x801104 <__RODATA_PM_OFFSET__+0x7f9104>
    1464:	89 27       	eor	r24, r25
    1466:	80 93 a2 38 	sts	0x38A2, r24	; 0x8038a2 <JTAG2::packet+0x12>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:176
      *r = *q++ ^ *p++; *r++ ^= *p++;
    146a:	80 91 08 11 	lds	r24, 0x1108	; 0x801108 <__RODATA_PM_OFFSET__+0x7f9108>
    146e:	90 91 05 11 	lds	r25, 0x1105	; 0x801105 <__RODATA_PM_OFFSET__+0x7f9105>
    1472:	98 27       	eor	r25, r24
    1474:	80 91 06 11 	lds	r24, 0x1106	; 0x801106 <__RODATA_PM_OFFSET__+0x7f9106>
    1478:	89 27       	eor	r24, r25
    147a:	80 93 a3 38 	sts	0x38A3, r24	; 0x8038a3 <JTAG2::packet+0x13>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:177
      *r++ = *q++;
    147e:	80 91 09 11 	lds	r24, 0x1109	; 0x801109 <__RODATA_PM_OFFSET__+0x7f9109>
    1482:	80 93 a4 38 	sts	0x38A4, r24	; 0x8038a4 <JTAG2::packet+0x14>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:178
      *r++ = *q++;
    1486:	80 91 0a 11 	lds	r24, 0x110A	; 0x80110a <__RODATA_PM_OFFSET__+0x7f910a>
    148a:	80 93 a5 38 	sts	0x38A5, r24	; 0x8038a5 <JTAG2::packet+0x15>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:179
      *r++ = *q++;
    148e:	80 91 0b 11 	lds	r24, 0x110B	; 0x80110b <__RODATA_PM_OFFSET__+0x7f910b>
    1492:	80 93 a6 38 	sts	0x38A6, r24	; 0x8038a6 <JTAG2::packet+0x16>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:180
      *r++ = *q++;
    1496:	80 91 0c 11 	lds	r24, 0x110C	; 0x80110c <__RODATA_PM_OFFSET__+0x7f910c>
    149a:	80 93 a7 38 	sts	0x38A7, r24	; 0x8038a7 <JTAG2::packet+0x17>
process_command():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:450
      /* Returns negation for unknown commands */
      default : {
        set_response(RSP_FAILED);
      }
    }
    answer_transfer();
    149e:	0e 94 44 02 	call	0x488	; 0x488 <JTAG2::answer_transfer()>
    14a2:	dc ce       	rjmp	.-584    	; 0x125c <main+0x208>
set_parameter():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:214
              bit_set(UPDI_CONTROL, UPDI::UPDI_TERM_bp);
            return false;
          }
        }
        /* Range violation results in failure response */
        set_response(RSP_ILLEGAL_VALUE);
    14a4:	86 ea       	ldi	r24, 0xA6	; 166
    14a6:	90 e0       	ldi	r25, 0x00	; 0
process_command():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:447
        /* After all processing is completed, reset itself */
        SYS::System_Reset();
      }
      /* Returns negation for unknown commands */
      default : {
        set_response(RSP_FAILED);
    14a8:	0e 94 23 02 	call	0x446	; 0x446 <JTAG2::set_response(JTAG2::jtag_response_e)>
    14ac:	f8 cf       	rjmp	.-16     	; 0x149e <main+0x44a>
get_parameter():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:234
  /**********************
   * CMND_GET_PARAMETER *
   **********************/

  void get_parameter (void) {
    switch ( packet.body[RSP_DATA] ) {
    14ae:	80 91 99 38 	lds	r24, 0x3899	; 0x803899 <JTAG2::packet+0x9>
    14b2:	83 30       	cpi	r24, 0x03	; 3
    14b4:	81 f1       	breq	.+96     	; 0x1516 <main+0x4c2>
    14b6:	38 f4       	brcc	.+14     	; 0x14c6 <main+0x472>
    14b8:	81 30       	cpi	r24, 0x01	; 1
    14ba:	79 f0       	breq	.+30     	; 0x14da <main+0x486>
    14bc:	82 30       	cpi	r24, 0x02	; 2
    14be:	b9 f0       	breq	.+46     	; 0x14ee <main+0x49a>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:281
          packet.size_word[0] = 1 + sizeof(updi_desc.sib);
          break;
        }
      }
      default : {
        set_response(RSP_ILLEGAL_PARAMETER);
    14c0:	81 ea       	ldi	r24, 0xA1	; 161
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	f1 cf       	rjmp	.-30     	; 0x14a8 <main+0x454>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:234
  /**********************
   * CMND_GET_PARAMETER *
   **********************/

  void get_parameter (void) {
    switch ( packet.body[RSP_DATA] ) {
    14c6:	86 30       	cpi	r24, 0x06	; 6
    14c8:	71 f1       	breq	.+92     	; 0x1526 <main+0x4d2>
    14ca:	8d 31       	cpi	r24, 0x1D	; 29
    14cc:	09 f4       	brne	.+2      	; 0x14d0 <main+0x47c>
    14ce:	51 c0       	rjmp	.+162    	; 0x1572 <main+0x51e>
    14d0:	85 30       	cpi	r24, 0x05	; 5
    14d2:	b1 f7       	brne	.-20     	; 0x14c0 <main+0x46c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:257
        packet.body[1] = 0x55;
        packet.size_word[0] = 2;
        break;
      }
      case PAR_BAUD_RATE : {
        packet.body[1] = param_baud_rate_val;
    14d4:	80 91 3f 38 	lds	r24, 0x383F	; 0x80383f <JTAG2::param_baud_rate_val>
    14d8:	1f c0       	rjmp	.+62     	; 0x1518 <main+0x4c4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:236
   **********************/

  void get_parameter (void) {
    switch ( packet.body[RSP_DATA] ) {
      case PAR_HW_VER : {
        packet.body[1] = sign_on_resp[5];
    14da:	82 e0       	ldi	r24, 0x02	; 2
    14dc:	80 93 99 38 	sts	0x3899, r24	; 0x803899 <JTAG2::packet+0x9>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:237
        packet.body[2] = sign_on_resp[9];
    14e0:	80 93 9a 38 	sts	0x389A, r24	; 0x80389a <JTAG2::packet+0xa>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:263
        packet.size_word[0] = 2;
        break;
      }
      case PAR_VTARGET : {
        _CAPS16(packet.body[1])->word = SYS::get_vcc();
        packet.size_word[0] = 3;
    14e4:	80 92 93 38 	sts	0x3893, r8	; 0x803893 <JTAG2::packet+0x3>
    14e8:	90 92 94 38 	sts	0x3894, r9	; 0x803894 <JTAG2::packet+0x4>
    14ec:	10 c0       	rjmp	.+32     	; 0x150e <main+0x4ba>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:242
        packet.body[2] = sign_on_resp[9];
        packet.size_word[0] = 3;
        break;
      }
      case PAR_FW_VER : {
        packet.body[1] = sign_on_resp[3];
    14ee:	85 e3       	ldi	r24, 0x35	; 53
    14f0:	80 93 99 38 	sts	0x3899, r24	; 0x803899 <JTAG2::packet+0x9>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:243
        packet.body[2] = sign_on_resp[4];
    14f4:	87 e0       	ldi	r24, 0x07	; 7
    14f6:	80 93 9a 38 	sts	0x389A, r24	; 0x80389a <JTAG2::packet+0xa>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:244
        packet.body[3] = sign_on_resp[7];
    14fa:	82 e2       	ldi	r24, 0x22	; 34
    14fc:	80 93 9b 38 	sts	0x389B, r24	; 0x80389b <JTAG2::packet+0xb>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:245
        packet.body[4] = sign_on_resp[8];
    1500:	86 e0       	ldi	r24, 0x06	; 6
    1502:	80 93 9c 38 	sts	0x389C, r24	; 0x80389c <JTAG2::packet+0xc>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:246
        packet.size_word[0] = 5;
    1506:	20 92 93 38 	sts	0x3893, r2	; 0x803893 <JTAG2::packet+0x3>
    150a:	30 92 94 38 	sts	0x3894, r3	; 0x803894 <JTAG2::packet+0x4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:285
      default : {
        set_response(RSP_ILLEGAL_PARAMETER);
        return;
      }
    }
    packet.body[MESSAGE_ID] = RSP_PARAMETER;
    150e:	81 e8       	ldi	r24, 0x81	; 129
    1510:	80 93 98 38 	sts	0x3898, r24	; 0x803898 <JTAG2::packet+0x8>
    1514:	c4 cf       	rjmp	.-120    	; 0x149e <main+0x44a>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:252
        break;
      }
      case PAR_EMU_MODE : {
        /* This response code indicates an UPDI-only implementation */
        /* In normal JTAGICEmkII this is never queried */
        packet.body[1] = 0x55;
    1516:	85 e5       	ldi	r24, 0x55	; 85
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:257
        packet.size_word[0] = 2;
        break;
      }
      case PAR_BAUD_RATE : {
        packet.body[1] = param_baud_rate_val;
    1518:	80 93 99 38 	sts	0x3899, r24	; 0x803899 <JTAG2::packet+0x9>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:258
        packet.size_word[0] = 2;
    151c:	a0 92 93 38 	sts	0x3893, r10	; 0x803893 <JTAG2::packet+0x3>
    1520:	b0 92 94 38 	sts	0x3894, r11	; 0x803894 <JTAG2::packet+0x4>
    1524:	f4 cf       	rjmp	.-24     	; 0x150e <main+0x4ba>
get_vcc():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:70
 * Self VCC measurement *
 ************************/

/*** This routine is exclusive to the tinyAVR-2 series. ***/
uint16_t SYS::get_vcc (void) {
  ADC0_CTRLA = ADC_ENABLE_bm;
    1526:	f1 e0       	ldi	r31, 0x01	; 1
    1528:	f0 93 00 06 	sts	0x0600, r31	; 0x800600 <__RODATA_PM_OFFSET__+0x7f8600>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:71
  ADC0_CTRLB = ADC_PRESC_DIV2_gc;
    152c:	10 92 01 06 	sts	0x0601, r1	; 0x800601 <__RODATA_PM_OFFSET__+0x7f8601>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:72
  ADC0_CTRLC = ADC_REFSEL_1024MV_gc | ((F_CPU / 1000000UL) << ADC_TIMEBASE_gp);
    1530:	84 e5       	ldi	r24, 0x54	; 84
    1532:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__RODATA_PM_OFFSET__+0x7f8602>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:73
  ADC0_CTRLE = 17; /* (SAMPDUR + 0.5) * fCLK_ADC = 10.5 µs sample duration */
    1536:	81 e1       	ldi	r24, 0x11	; 17
    1538:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__RODATA_PM_OFFSET__+0x7f8608>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:74
  ADC0_MUXPOS = ADC_MUXPOS_VDDDIV10_gc; /* ADC channel VDD/10 */
    153c:	91 e3       	ldi	r25, 0x31	; 49
    153e:	90 93 0c 06 	sts	0x060C, r25	; 0x80060c <__RODATA_PM_OFFSET__+0x7f860c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:75
  ADC0_COMMAND = ADC_MODE_SINGLE_12BIT_gc | ADC_START_IMMEDIATE_gc;
    1542:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <__RODATA_PM_OFFSET__+0x7f860a>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:76
  loop_until_bit_is_set(ADC0_INTFLAGS, ADC_SAMPRDY_bp);
    1546:	80 91 05 06 	lds	r24, 0x0605	; 0x800605 <__RODATA_PM_OFFSET__+0x7f8605>
    154a:	81 ff       	sbrs	r24, 1
    154c:	fc cf       	rjmp	.-8      	; 0x1546 <main+0x4f2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:77
  uint16_t adc_reading = ADC0_SAMPLE;
    154e:	80 91 14 06 	lds	r24, 0x0614	; 0x800614 <__RODATA_PM_OFFSET__+0x7f8614>
    1552:	90 91 15 06 	lds	r25, 0x0615	; 0x800615 <__RODATA_PM_OFFSET__+0x7f8615>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:78
  adc_reading += adc_reading + (adc_reading >> 1);  /* x2.5 */
    1556:	9c 01       	movw	r18, r24
    1558:	36 95       	lsr	r19
    155a:	27 95       	ror	r18
    155c:	88 0f       	add	r24, r24
    155e:	99 1f       	adc	r25, r25
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:79
  ADC0_CTRLA = 0;
    1560:	10 92 00 06 	sts	0x0600, r1	; 0x800600 <__RODATA_PM_OFFSET__+0x7f8600>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:78
  ADC0_CTRLE = 17; /* (SAMPDUR + 0.5) * fCLK_ADC = 10.5 µs sample duration */
  ADC0_MUXPOS = ADC_MUXPOS_VDDDIV10_gc; /* ADC channel VDD/10 */
  ADC0_COMMAND = ADC_MODE_SINGLE_12BIT_gc | ADC_START_IMMEDIATE_gc;
  loop_until_bit_is_set(ADC0_INTFLAGS, ADC_SAMPRDY_bp);
  uint16_t adc_reading = ADC0_SAMPLE;
  adc_reading += adc_reading + (adc_reading >> 1);  /* x2.5 */
    1564:	82 0f       	add	r24, r18
    1566:	93 1f       	adc	r25, r19
get_parameter():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:262
        break;
      }
      case PAR_VTARGET : {
        _CAPS16(packet.body[1])->word = SYS::get_vcc();
    1568:	80 93 99 38 	sts	0x3899, r24	; 0x803899 <JTAG2::packet+0x9>
    156c:	90 93 9a 38 	sts	0x389A, r25	; 0x80389a <JTAG2::packet+0xa>
    1570:	b9 cf       	rjmp	.-142    	; 0x14e4 <main+0x490>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:272
      case PAR_TARGET_SIGNATURE : {
        /* SIB information can be returned as an extended signature. */
        /* Responds correctly only during programming mode.          */
        /* otherwise an error will be returned.                      */
        /* Silicon revision (REVID) can be read as normal IO memory. */
        if (bit_is_set(UPDI_CONTROL, UPDI::UPDI_INFO_bp)) {
    1572:	e0 9b       	sbis	0x1c, 0	; 28
    1574:	a5 cf       	rjmp	.-182    	; 0x14c0 <main+0x46c>
    1576:	e0 e7       	ldi	r30, 0x70	; 112
    1578:	f8 e3       	ldi	r31, 0x38	; 56
    157a:	a9 e9       	ldi	r26, 0x99	; 153
    157c:	b8 e3       	ldi	r27, 0x38	; 56
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:275
          uint8_t *q = &packet.body[RSP_DATA];
          uint8_t *p = &updi_desc.sib[0];
          for (uint8_t i = 0; i < sizeof(updi_desc.sib); i++) *q++ = *p++;
    157e:	81 91       	ld	r24, Z+
    1580:	8d 93       	st	X+, r24
    1582:	20 e9       	ldi	r18, 0x90	; 144
    1584:	38 e3       	ldi	r19, 0x38	; 56
    1586:	2e 17       	cp	r18, r30
    1588:	3f 07       	cpc	r19, r31
    158a:	c9 f7       	brne	.-14     	; 0x157e <main+0x52a>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:276
          packet.size_word[0] = 1 + sizeof(updi_desc.sib);
    158c:	81 e2       	ldi	r24, 0x21	; 33
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	80 93 93 38 	sts	0x3893, r24	; 0x803893 <JTAG2::packet+0x3>
    1594:	90 93 94 38 	sts	0x3894, r25	; 0x803894 <JTAG2::packet+0x4>
    1598:	ba cf       	rjmp	.-140    	; 0x150e <main+0x4ba>
process_command():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:359
        get_parameter();
        break;
      }
      case CMND_RESET : {
        /* Run only the first time */
        if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_INIT_bp)) {
    159a:	e7 99       	sbic	0x1c, 7	; 28
    159c:	80 cf       	rjmp	.-256    	; 0x149e <main+0x44a>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:360
          uint8_t hv_control = packet.body[RSP_DATA];
    159e:	90 91 99 38 	lds	r25, 0x3899	; 0x803899 <JTAG2::packet+0x9>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:362
          bool hv_active = false;
          if ((hv_control & '0') == '0') {
    15a2:	89 2f       	mov	r24, r25
    15a4:	80 73       	andi	r24, 0x30	; 48
    15a6:	80 33       	cpi	r24, 0x30	; 48
    15a8:	29 f4       	brne	.+10     	; 0x15b4 <main+0x560>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:366
            /* If the general reset setting is neither 0 nor 1. */
            /* Accepts special extension settings.              */
            /* This forces HV control.                          */
            updi_desc.hvupdi_variant = hv_control;
    15aa:	90 93 68 38 	sts	0x3868, r25	; 0x803868 <JTAG2::updi_desc+0x2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:368
            /* '1' must be passed for automatic HV control to be inhibited */
            if (hv_control != '1') hv_active = true;
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	91 33       	cpi	r25, 0x31	; 49
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:361
      }
      case CMND_RESET : {
        /* Run only the first time */
        if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_INIT_bp)) {
          uint8_t hv_control = packet.body[RSP_DATA];
          bool hv_active = false;
    15b2:	09 f4       	brne	.+2      	; 0x15b6 <main+0x562>
main():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:371
            updi_desc.hvupdi_variant = hv_control;
            /* '1' must be passed for automatic HV control to be inhibited */
            if (hv_control != '1') hv_active = true;
          }
          /* Here UPDI control is tried */
          UPDI::updi_activate(hv_active);
    15b4:	80 e0       	ldi	r24, 0x00	; 0
process_command():
    15b6:	a0 dc       	rcall	.-1728   	; 0xef8 <UPDI::updi_activate(bool)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:372
          if (bit_is_set(UPDI_CONTROL, UPDI::UPDI_TERM_bp)) {
    15b8:	e5 9b       	sbis	0x1c, 5	; 28
    15ba:	09 c0       	rjmp	.+18     	; 0x15ce <main+0x57a>
LED_Blink():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:155
  LED_TCB1(2, TCB1_FLASH);
}

/* Flashing (SW1 assert) */
void TIM::LED_Blink (void) {
  LED_TCB1(3, TCB1_BLINK);
    15bc:	69 ea       	ldi	r22, 0xA9	; 169
    15be:	75 e5       	ldi	r23, 0x55	; 85
    15c0:	83 e0       	ldi	r24, 0x03	; 3
    15c2:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LED_TCB1(unsigned char, unsigned int)>
WDT_OFF():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:165
  wdt_reset();
  loop_until_bit_is_clear(WDT_STATUS, WDT_SYNCBUSY_bp);
  _PROTECTED_WRITE(WDT_CTRLA, _wdt_period);
}

void SYS::WDT_OFF (void) { WDT_SET(WDT_PERIOD_OFF_gc); }
    15c6:	80 e0       	ldi	r24, 0x00	; 0
    15c8:	2a d9       	rcall	.-3500   	; 0x81e <SYS::WDT_SET(unsigned char)>
process_command():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:381
          }
          else {
            /* If not set to interactive mode, the LED will flash rapidly */
            TIM::LED_Fast();
          }
          bit_set(UPDI_CONTROL, UPDI::UPDI_INIT_bp);
    15ca:	e7 9a       	sbi	0x1c, 7	; 28
    15cc:	68 cf       	rjmp	.-304    	; 0x149e <main+0x44a>
LED_Fast():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/TIM.cpp:160
}

/* Fast blinking (UPDI memory access in progress) */
void TIM::LED_Fast (void) {
  LED_TCB1(4, TCB1_FAST);
    15ce:	65 e1       	ldi	r22, 0x15	; 21
    15d0:	74 e0       	ldi	r23, 0x04	; 4
    15d2:	84 e0       	ldi	r24, 0x04	; 4
    15d4:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LED_TCB1(unsigned char, unsigned int)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:389
        UPDI::_send_buf_copy();
        #endif
        break;
      }
      case CMND_READ_MEMORY : {
        if (!UPDI::runtime(UPDI::UPDI_CMD_READ_MEMORY)) {
    15d8:	f8 cf       	rjmp	.-16     	; 0x15ca <main+0x576>
process_command():
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	2a d9       	rcall	.-3500   	; 0x832 <UPDI::runtime(unsigned char)>
    15de:	81 11       	cpse	r24, r1
    15e0:	5e cf       	rjmp	.-324    	; 0x149e <main+0x44a>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:390
          set_response(RSP_NO_TARGET_POWER);
    15e2:	8b ea       	ldi	r24, 0xAB	; 171
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	60 cf       	rjmp	.-320    	; 0x14a8 <main+0x454>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:396
        }
        break;
      }
      case CMND_WRITE_MEMORY : {
        /* Received packet error retransmission exception */
        if (before_seqnum == packet.number) break;
    15e8:	20 91 91 38 	lds	r18, 0x3891	; 0x803891 <JTAG2::packet+0x1>
    15ec:	30 91 92 38 	lds	r19, 0x3892	; 0x803892 <JTAG2::packet+0x2>
    15f0:	80 91 41 38 	lds	r24, 0x3841	; 0x803841 <JTAG2::before_seqnum>
    15f4:	90 91 42 38 	lds	r25, 0x3842	; 0x803842 <JTAG2::before_seqnum+0x1>
    15f8:	28 17       	cp	r18, r24
    15fa:	39 07       	cpc	r19, r25
    15fc:	09 f4       	brne	.+2      	; 0x1600 <main+0x5ac>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:397
        if (UPDI::runtime(UPDI::UPDI_CMD_WRITE_MEMORY)) {
    15fe:	4f cf       	rjmp	.-354    	; 0x149e <main+0x44a>
    1600:	82 e0       	ldi	r24, 0x02	; 2
    1602:	17 d9       	rcall	.-3538   	; 0x832 <UPDI::runtime(unsigned char)>
    1604:	88 23       	and	r24, r24
    1606:	49 f0       	breq	.+18     	; 0x161a <main+0x5c6>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:414
      case CMND_XMEGA_ERASE : {
        /* Received packet error retransmission exception */
        if (before_seqnum == packet.number) break;
        if (UPDI::runtime(UPDI::UPDI_CMD_ERASE)) {
          /* Keep the sequence number if completed successfully */
          before_seqnum = packet.number;
    1608:	80 91 91 38 	lds	r24, 0x3891	; 0x803891 <JTAG2::packet+0x1>
    160c:	90 91 92 38 	lds	r25, 0x3892	; 0x803892 <JTAG2::packet+0x2>
    1610:	80 93 41 38 	sts	0x3841, r24	; 0x803841 <JTAG2::before_seqnum>
    1614:	90 93 42 38 	sts	0x3842, r25	; 0x803842 <JTAG2::before_seqnum+0x1>
    1618:	42 cf       	rjmp	.-380    	; 0x149e <main+0x44a>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:402
        if (UPDI::runtime(UPDI::UPDI_CMD_WRITE_MEMORY)) {
          /* Keep the sequence number if completed successfully */
          before_seqnum = packet.number;
        }
        else {
          set_response(RSP_ILLEGAL_MCU_STATE);
    161a:	85 ea       	ldi	r24, 0xA5	; 165
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	44 cf       	rjmp	.-376    	; 0x14a8 <main+0x454>
set_descripter():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:296

  void set_descripter (uint8_t type) {
    if (type == CMND_SET_DEVICE_DESC) {
      const struct jtag_device_descriptor *desc =
           (struct jtag_device_descriptor*)&packet.body[RSP_DATA];
      updi_desc.flash_page_size = *(uint16_t*)(&desc->uiFlashPageSize[0]);
    1620:	80 91 8c 39 	lds	r24, 0x398C	; 0x80398c <JTAG2::packet+0xfc>
    1624:	90 91 8d 39 	lds	r25, 0x398D	; 0x80398d <JTAG2::packet+0xfd>
    1628:	80 93 6a 38 	sts	0x386A, r24	; 0x80386a <JTAG2::updi_desc+0x4>
    162c:	90 93 6b 38 	sts	0x386B, r25	; 0x80386b <JTAG2::updi_desc+0x5>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:297
      updi_desc.eeprom_page_size = desc->ucEepromPageSize;
    1630:	80 91 8e 39 	lds	r24, 0x398E	; 0x80398e <JTAG2::packet+0xfe>
    1634:	80 93 6c 38 	sts	0x386C, r24	; 0x80386c <JTAG2::updi_desc+0x6>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:298
      if ((desc->ucIDRAddress & '0') == '0') {
    1638:	90 91 89 39 	lds	r25, 0x3989	; 0x803989 <JTAG2::packet+0xf9>
    163c:	29 2f       	mov	r18, r25
    163e:	20 73       	andi	r18, 0x30	; 48
    1640:	20 33       	cpi	r18, 0x30	; 48
    1642:	19 f4       	brne	.+6      	; 0x164a <main+0x5f6>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:302
        /* Accepts special extension settings. */
        /* 0x31 must be passed for automatic HV control to be inhibited. */
        /* This parameter can be specified in the `idr` descriptor in the `part` section. */
        updi_desc.hvupdi_variant = desc->ucIDRAddress;  // Valid value 0x30,0x31 or 0x32
    1644:	90 93 68 38 	sts	0x3868, r25	; 0x803868 <JTAG2::updi_desc+0x2>
    1648:	bf ce       	rjmp	.-642    	; 0x13c8 <main+0x374>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:307
      }
      else {
        /* If the EEPROM page size is 32 or more, it is considered a HV=12V system. */
        /* This setting will be referenced when automatic HV control is requested.  */
        updi_desc.hvupdi_variant = updi_desc.eeprom_page_size >= 32 ? '0' : '2';
    164a:	80 32       	cpi	r24, 0x20	; 32
    164c:	20 f4       	brcc	.+8      	; 0x1656 <main+0x602>
main():
    164e:	82 e3       	ldi	r24, 0x32	; 50
set_descripter():
    1650:	80 93 68 38 	sts	0x3868, r24	; 0x803868 <JTAG2::updi_desc+0x2>
    1654:	b9 ce       	rjmp	.-654    	; 0x13c8 <main+0x374>
main():
    1656:	80 e3       	ldi	r24, 0x30	; 48
    1658:	fb cf       	rjmp	.-10     	; 0x1650 <main+0x5fc>
set_descripter():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:315
    else if (type == CMND_SET_UPDI_PARAMS) {
      /* This structure is used instead of CMND_SET_DEVICE_DESC after */
      /* answering 0x55 ('U') to PAR_EMU_MODE of CMND_GET_PARAMETER.  */
      /* Once you have confirmed the magic number and data length,    */
      /* you can simply clone it into your internal structure.        */
      const struct updi_device_descriptor *desc =
    165a:	a9 e9       	ldi	r26, 0x99	; 153
    165c:	b8 e3       	ldi	r27, 0x38	; 56
    165e:	a9 83       	std	Y+1, r26	; 0x01
    1660:	ba 83       	std	Y+2, r27	; 0x02
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:317
           (struct updi_device_descriptor*)&packet.body[RSP_DATA];
      if (desc->magicnumber == 'U' && desc->length <= sizeof(updi_desc) - 2) {
    1662:	80 91 99 38 	lds	r24, 0x3899	; 0x803899 <JTAG2::packet+0x9>
    1666:	85 35       	cpi	r24, 0x55	; 85
    1668:	09 f0       	breq	.+2      	; 0x166c <main+0x618>
    166a:	ae ce       	rjmp	.-676    	; 0x13c8 <main+0x374>
    166c:	90 91 9a 38 	lds	r25, 0x389A	; 0x80389a <JTAG2::packet+0xa>
    1670:	99 32       	cpi	r25, 0x29	; 41
    1672:	08 f0       	brcs	.+2      	; 0x1676 <main+0x622>
    1674:	a9 ce       	rjmp	.-686    	; 0x13c8 <main+0x374>
    1676:	de 01       	movw	r26, r28
    1678:	13 96       	adiw	r26, 0x03	; 3
    167a:	e8 e6       	ldi	r30, 0x68	; 104
    167c:	f8 e3       	ldi	r31, 0x38	; 56
main():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:320
        uint8_t *q = 2 + (uint8_t*)&updi_desc;
        uint8_t *p = 2 + (uint8_t*)&desc;
        for (int8_t i = 0; i < desc->length; i++) *q++ = *p++;
    167e:	80 e0       	ldi	r24, 0x00	; 0
set_descripter():
    1680:	89 17       	cp	r24, r25
    1682:	09 f4       	brne	.+2      	; 0x1686 <main+0x632>
    1684:	a1 ce       	rjmp	.-702    	; 0x13c8 <main+0x374>
    1686:	2d 91       	ld	r18, X+
    1688:	21 93       	st	Z+, r18
    168a:	8f 5f       	subi	r24, 0xFF	; 255
    168c:	f9 cf       	rjmp	.-14     	; 0x1680 <main+0x62c>
process_command():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:438
      case CMND_GET_SYNC : {
        set_response(RSP_OK);
        break;
      }
      case CMND_SIGN_OFF : {
        answer_transfer();
    168e:	0e 94 44 02 	call	0x488	; 0x488 <JTAG2::answer_transfer()>
flush():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:97
    JTAG_USART.STATUS = USART_TXCIF_bm;
    return JTAG_USART.TXDATAL = _data;
  }

  void flush (void) {
    loop_until_bit_is_set(JTAG_USART.STATUS, USART_TXCIF_bp);
    1692:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
    1696:	86 ff       	sbrs	r24, 6
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:440
        break;
      }
      case CMND_SIGN_OFF : {
        answer_transfer();
        flush();
        if (bit_is_set(UPDI_CONTROL, UPDI::UPDI_INFO_bp))
    1698:	fc cf       	rjmp	.-8      	; 0x1692 <main+0x63e>
process_command():
    169a:	e0 9b       	sbis	0x1c, 0	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/JTAG2.cpp:441
          UPDI::runtime(UPDI::UPDI_CMD_GO);
    169c:	02 c0       	rjmp	.+4      	; 0x16a2 <main+0x64e>
    169e:	84 e0       	ldi	r24, 0x04	; 4
    16a0:	c8 d8       	rcall	.-3696   	; 0x832 <UPDI::runtime(unsigned char)>
System_Reset():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW634B/src/SYS.cpp:88
/*************
 * Self reset *
 *************/

void SYS::System_Reset (void) {
  _PROTECTED_WRITE(RSTCTRL_SWRR, RSTCTRL_SWRE_bm);
    16a2:	88 ed       	ldi	r24, 0xD8	; 216
    16a4:	b1 e0       	ldi	r27, 0x01	; 1
    16a6:	84 bf       	out	0x34, r24	; 52
    16a8:	b0 93 41 00 	sts	0x0041, r27	; 0x800041 <__RODATA_PM_OFFSET__+0x7f8041>
    16ac:	81 ce       	rjmp	.-766    	; 0x13b0 <main+0x35c>

000016ae <setjmp>:
setjmp():
    16ae:	dc 01       	movw	r26, r24
    16b0:	2d 92       	st	X+, r2
    16b2:	3d 92       	st	X+, r3
    16b4:	4d 92       	st	X+, r4
    16b6:	5d 92       	st	X+, r5
    16b8:	6d 92       	st	X+, r6
    16ba:	7d 92       	st	X+, r7
    16bc:	8d 92       	st	X+, r8
    16be:	9d 92       	st	X+, r9
    16c0:	ad 92       	st	X+, r10
    16c2:	bd 92       	st	X+, r11
    16c4:	cd 92       	st	X+, r12
    16c6:	dd 92       	st	X+, r13
    16c8:	ed 92       	st	X+, r14
    16ca:	fd 92       	st	X+, r15
    16cc:	0d 93       	st	X+, r16
    16ce:	1d 93       	st	X+, r17
    16d0:	cd 93       	st	X+, r28
    16d2:	dd 93       	st	X+, r29
    16d4:	ff 91       	pop	r31
    16d6:	ef 91       	pop	r30
    16d8:	8d b7       	in	r24, 0x3d	; 61
    16da:	8d 93       	st	X+, r24
    16dc:	8e b7       	in	r24, 0x3e	; 62
    16de:	8d 93       	st	X+, r24
    16e0:	8f b7       	in	r24, 0x3f	; 63
    16e2:	8d 93       	st	X+, r24
    16e4:	ed 93       	st	X+, r30
    16e6:	fd 93       	st	X+, r31
    16e8:	88 27       	eor	r24, r24
    16ea:	99 27       	eor	r25, r25
    16ec:	09 94       	ijmp

000016ee <longjmp>:
longjmp():
    16ee:	dc 01       	movw	r26, r24
    16f0:	cb 01       	movw	r24, r22
    16f2:	81 30       	cpi	r24, 0x01	; 1
    16f4:	91 05       	cpc	r25, r1
    16f6:	81 1d       	adc	r24, r1
    16f8:	2d 90       	ld	r2, X+
    16fa:	3d 90       	ld	r3, X+
    16fc:	4d 90       	ld	r4, X+
    16fe:	5d 90       	ld	r5, X+
    1700:	6d 90       	ld	r6, X+
    1702:	7d 90       	ld	r7, X+
    1704:	8d 90       	ld	r8, X+
    1706:	9d 90       	ld	r9, X+
    1708:	ad 90       	ld	r10, X+
    170a:	bd 90       	ld	r11, X+
    170c:	cd 90       	ld	r12, X+
    170e:	dd 90       	ld	r13, X+
    1710:	ed 90       	ld	r14, X+
    1712:	fd 90       	ld	r15, X+
    1714:	0d 91       	ld	r16, X+
    1716:	1d 91       	ld	r17, X+
    1718:	cd 91       	ld	r28, X+
    171a:	dd 91       	ld	r29, X+
    171c:	ed 91       	ld	r30, X+
    171e:	fd 91       	ld	r31, X+
    1720:	0d 90       	ld	r0, X+
    1722:	0f be       	out	0x3f, r0	; 63
    1724:	ed bf       	out	0x3d, r30	; 61
    1726:	fe bf       	out	0x3e, r31	; 62
    1728:	ed 91       	ld	r30, X+
    172a:	fd 91       	ld	r31, X+
    172c:	09 94       	ijmp

0000172e <_exit>:
exit():
    172e:	f8 94       	cli

00001730 <__stop_program>:
__stop_program():
    1730:	ff cf       	rjmp	.-2      	; 0x1730 <__stop_program>
