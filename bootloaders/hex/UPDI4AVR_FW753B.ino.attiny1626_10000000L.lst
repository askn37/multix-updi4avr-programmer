
/var/folders/mz/_z9vt_y13rdf9tt_4qkvv0k40000gn/T/arduino_build_199307/UPDI4AVR_FW753B.ino.elf:     file format elf32-avr


Disassembly of section .data:

00803800 <__data_start>:
__data_start():
  803800:	55 c8       	rjmp	.-3926   	; 0x8028ac <UPDI::nvmprog_key+0x7f8f68>
  803802:	00 c3       	rjmp	.+1536   	; 0x803e04 <__bss_end+0x38c>
  803804:	04 55       	subi	r16, 0x54	; 84

00803805 <UPDI::send_repeat_header(unsigned char, unsigned long, unsigned int)::set_repeat>:
  803805:	55 a0 00 55 04                                      U..U.

0080380a <UPDI::send_repeat_header(unsigned char, unsigned long, unsigned int)::set_ptr>:
  80380a:	55 6a 00 00 00 00                                   Uj....

00803810 <UPDI::st8(unsigned long, unsigned char)::set_ptr>:
  803810:	55 48 00 00 00 00                                   UH....

00803816 <UPDI::ld8(unsigned long)::set_ptr>:
  803816:	55 08 00 00 00 00                                   U.....

0080381c <UPDI::get_cs_stat(unsigned char)::set_ptr>:
  80381c:	55 00                                               U.

0080381e <UPDI::set_cs_stat(unsigned char, unsigned char)::set_ptr>:
  80381e:	55 00 00                                            U..

00803821 <UPDI::enter_updi(bool)::set_ptr>:
  803821:	55 e5                                               U.

00803823 <NVM::set_repeat_rsd>:
  803823:	55 c2 0e 55 a0 00 55 65                             U..U..Ue

0080382b <NVM::set_repeat>:
  80382b:	55 a0 00 55 64                                      U..Ud

00803830 <NVM::set_ptr>:
  803830:	55 6a 00 00 00 00                                   Uj....

00803836 <JTAG2::PARAM_BAUD_RATE_VAL>:
  803836:	04 00                                               ..

Disassembly of section .text:

00000000 <__vectors>:
__vectors():
../../../../crt1/gcrt1.S:61
       0:	67 c0       	rjmp	.+206    	; 0xd0 <__ctors_end>
       2:	00 00       	nop
../../../../crt1/gcrt1.S:67
       4:	82 c0       	rjmp	.+260    	; 0x10a <__bad_interrupt>
       6:	00 00       	nop
../../../../crt1/gcrt1.S:68
       8:	80 c0       	rjmp	.+256    	; 0x10a <__bad_interrupt>
       a:	00 00       	nop
../../../../crt1/gcrt1.S:69
       c:	7e c0       	rjmp	.+252    	; 0x10a <__bad_interrupt>
       e:	00 00       	nop
../../../../crt1/gcrt1.S:70
      10:	7c c0       	rjmp	.+248    	; 0x10a <__bad_interrupt>
      12:	00 00       	nop
../../../../crt1/gcrt1.S:71
      14:	7a c0       	rjmp	.+244    	; 0x10a <__bad_interrupt>
      16:	00 00       	nop
../../../../crt1/gcrt1.S:72
      18:	0c 94 bf 08 	jmp	0x117e	; 0x117e <__vector_6>
../../../../crt1/gcrt1.S:73
      1c:	0c 94 f5 08 	jmp	0x11ea	; 0x11ea <__vector_7>
../../../../crt1/gcrt1.S:74
      20:	74 c0       	rjmp	.+232    	; 0x10a <__bad_interrupt>
      22:	00 00       	nop
../../../../crt1/gcrt1.S:75
      24:	72 c0       	rjmp	.+228    	; 0x10a <__bad_interrupt>
      26:	00 00       	nop
../../../../crt1/gcrt1.S:76
      28:	70 c0       	rjmp	.+224    	; 0x10a <__bad_interrupt>
      2a:	00 00       	nop
../../../../crt1/gcrt1.S:77
      2c:	6e c0       	rjmp	.+220    	; 0x10a <__bad_interrupt>
      2e:	00 00       	nop
../../../../crt1/gcrt1.S:78
      30:	6c c0       	rjmp	.+216    	; 0x10a <__bad_interrupt>
      32:	00 00       	nop
../../../../crt1/gcrt1.S:79
      34:	0c 94 b4 08 	jmp	0x1168	; 0x1168 <__vector_13>
../../../../crt1/gcrt1.S:80
      38:	68 c0       	rjmp	.+208    	; 0x10a <__bad_interrupt>
      3a:	00 00       	nop
../../../../crt1/gcrt1.S:81
      3c:	66 c0       	rjmp	.+204    	; 0x10a <__bad_interrupt>
      3e:	00 00       	nop
../../../../crt1/gcrt1.S:82
      40:	64 c0       	rjmp	.+200    	; 0x10a <__bad_interrupt>
      42:	00 00       	nop
../../../../crt1/gcrt1.S:83
      44:	62 c0       	rjmp	.+196    	; 0x10a <__bad_interrupt>
      46:	00 00       	nop
../../../../crt1/gcrt1.S:84
      48:	60 c0       	rjmp	.+192    	; 0x10a <__bad_interrupt>
      4a:	00 00       	nop
../../../../crt1/gcrt1.S:85
      4c:	5e c0       	rjmp	.+188    	; 0x10a <__bad_interrupt>
      4e:	00 00       	nop
../../../../crt1/gcrt1.S:86
      50:	5c c0       	rjmp	.+184    	; 0x10a <__bad_interrupt>
      52:	00 00       	nop
../../../../crt1/gcrt1.S:87
      54:	5a c0       	rjmp	.+180    	; 0x10a <__bad_interrupt>
      56:	00 00       	nop
../../../../crt1/gcrt1.S:88
      58:	58 c0       	rjmp	.+176    	; 0x10a <__bad_interrupt>
      5a:	00 00       	nop
../../../../crt1/gcrt1.S:89
      5c:	56 c0       	rjmp	.+172    	; 0x10a <__bad_interrupt>
      5e:	00 00       	nop
../../../../crt1/gcrt1.S:90
      60:	54 c0       	rjmp	.+168    	; 0x10a <__bad_interrupt>
      62:	00 00       	nop
../../../../crt1/gcrt1.S:91
      64:	52 c0       	rjmp	.+164    	; 0x10a <__bad_interrupt>
      66:	00 00       	nop
../../../../crt1/gcrt1.S:92
      68:	50 c0       	rjmp	.+160    	; 0x10a <__bad_interrupt>
      6a:	00 00       	nop
../../../../crt1/gcrt1.S:93
      6c:	4e c0       	rjmp	.+156    	; 0x10a <__bad_interrupt>
      6e:	00 00       	nop
../../../../crt1/gcrt1.S:94
      70:	4c c0       	rjmp	.+152    	; 0x10a <__bad_interrupt>
      72:	00 00       	nop
../../../../crt1/gcrt1.S:95
      74:	4a c0       	rjmp	.+148    	; 0x10a <__bad_interrupt>
	...

00000078 <__trampolines_end>:
__trampolines_start():
      78:	86 01       	movw	r16, r12
      7a:	01 01       	movw	r0, r2
      7c:	02 01       	movw	r0, r4
      7e:	01 35       	cpi	r16, 0x51	; 81
      80:	07 01       	movw	r0, r14
      82:	00 00       	nop
      84:	00 00       	nop
      86:	00 00       	nop
      88:	4a 54       	subi	r20, 0x4A	; 74
      8a:	41 47       	sbci	r20, 0x71	; 113
      8c:	49 43       	sbci	r20, 0x39	; 57
      8e:	45 20       	and	r4, r5
      90:	6d 6b       	ori	r22, 0xBD	; 189
      92:	49 49       	sbci	r20, 0x99	; 153
	...

00000095 <JTAG2::BAUD_TABLE>:
      95:	00 00 1b 41 8d 20 47 10 23 08 12 04 b6 02 5b 01     ...A. G.#.....[.
      a5:	da 0a 04 01 ae 00 57 00 2b 00 39 01 9c 00 00 00     ......W.+.9.....
      b5:	00 00 0b 01 c8 00 a0 00 85 00 64 00 50 00 43 00     ..........d.P.C.
      c5:	3c 00 28 00 1b 00 14 00 0d 00 00                    <.(........

000000d0 <__ctors_end>:
__dtors_end():
../../../../crt1/gcrt1.S:230
      d0:	11 24       	eor	r1, r1
../../../../crt1/gcrt1.S:231
      d2:	1f be       	out	0x3f, r1	; 63
../../../../crt1/gcrt1.S:232
      d4:	cf ef       	ldi	r28, 0xFF	; 255
../../../../crt1/gcrt1.S:234
      d6:	cd bf       	out	0x3d, r28	; 61
../../../../crt1/gcrt1.S:236
      d8:	df e3       	ldi	r29, 0x3F	; 63
../../../../crt1/gcrt1.S:237
      da:	de bf       	out	0x3e, r29	; 62

000000dc <__do_copy_data>:
__do_copy_data():
      dc:	18 e3       	ldi	r17, 0x38	; 56
      de:	a0 e0       	ldi	r26, 0x00	; 0
      e0:	b8 e3       	ldi	r27, 0x38	; 56
      e2:	ee e4       	ldi	r30, 0x4E	; 78
      e4:	f9 e1       	ldi	r31, 0x19	; 25
      e6:	02 c0       	rjmp	.+4      	; 0xec <__do_copy_data+0x10>
      e8:	05 90       	lpm	r0, Z+
      ea:	0d 92       	st	X+, r0
      ec:	a8 33       	cpi	r26, 0x38	; 56
      ee:	b1 07       	cpc	r27, r17
      f0:	d9 f7       	brne	.-10     	; 0xe8 <__do_copy_data+0xc>

000000f2 <__do_clear_bss>:
__do_clear_bss():
      f2:	2a e3       	ldi	r18, 0x3A	; 58
      f4:	a8 e3       	ldi	r26, 0x38	; 56
      f6:	b8 e3       	ldi	r27, 0x38	; 56
      f8:	01 c0       	rjmp	.+2      	; 0xfc <.do_clear_bss_start>

000000fa <.do_clear_bss_loop>:
      fa:	1d 92       	st	X+, r1

000000fc <.do_clear_bss_start>:
      fc:	a8 37       	cpi	r26, 0x78	; 120
      fe:	b2 07       	cpc	r27, r18
     100:	e1 f7       	brne	.-8      	; 0xfa <.do_clear_bss_loop>
.do_clear_bss_start():
../../../../crt1/gcrt1.S:314
     102:	0e 94 0e 09 	call	0x121c	; 0x121c <main>
../../../../crt1/gcrt1.S:315
     106:	0c 94 96 0c 	jmp	0x192c	; 0x192c <_exit>

0000010a <__bad_interrupt>:
__vector_22():
../../../../crt1/gcrt1.S:209
     10a:	7a cf       	rjmp	.-268    	; 0x0 <__vectors>

0000010c <UPDI::RECV()>:
_ZN4UPDI4RECVEv():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:44
/*
 * UPDI受信
 */

uint8_t UPDI::RECV (void) {
  loop_until_bit_is_set(UPDI_USART.STATUS, USART_RXCIF_bp);
     10c:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <UPDI::nvmprog_key+0x7f6ec0>
     110:	87 ff       	sbrs	r24, 7
     112:	fc cf       	rjmp	.-8      	; 0x10c <UPDI::RECV()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:45
  UPDI_LASTH = UPDI_USART.RXDATAH ^ 0x80;
     114:	80 91 01 08 	lds	r24, 0x0801	; 0x800801 <UPDI::nvmprog_key+0x7f6ebd>
     118:	80 58       	subi	r24, 0x80	; 128
     11a:	8f bb       	out	0x1f, r24	; 31
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:46
  return UPDI_LASTL = UPDI_USART.RXDATAL;
     11c:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <UPDI::nvmprog_key+0x7f6ebc>
     120:	8e bb       	out	0x1e, r24	; 30
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:47
}
     122:	08 95       	ret

00000124 <UPDI::SEND(unsigned char)>:
_ZN4UPDI4SENDEh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:55
 * UPDI送信
 *
 * ループバック受信で送信値を照合
 */

bool UPDI::SEND (uint8_t _data) {
     124:	cf 93       	push	r28
     126:	c8 2f       	mov	r28, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:57
  bool _r;
  loop_until_bit_is_set(UPDI_USART.STATUS, USART_DREIF_bp);
     128:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <UPDI::nvmprog_key+0x7f6ec0>
     12c:	85 ff       	sbrs	r24, 5
     12e:	fc cf       	rjmp	.-8      	; 0x128 <UPDI::SEND(unsigned char)+0x4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:58
  UPDI_USART.STATUS = USART_TXCIF_bm;
     130:	80 e4       	ldi	r24, 0x40	; 64
     132:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <UPDI::nvmprog_key+0x7f6ec0>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:59
  UPDI_USART.TXDATAL = _data;
     136:	c0 93 02 08 	sts	0x0802, r28	; 0x800802 <UPDI::nvmprog_key+0x7f6ebe>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:60
  loop_until_bit_is_set(UPDI_USART.STATUS, USART_TXCIF_bp);
     13a:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <UPDI::nvmprog_key+0x7f6ec0>
     13e:	86 ff       	sbrs	r24, 6
     140:	fc cf       	rjmp	.-8      	; 0x13a <UPDI::SEND(unsigned char)+0x16>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:61
  _r = _data == UPDI::RECV();
     142:	e4 df       	rcall	.-56     	; 0x10c <UPDI::RECV()>
     144:	98 2f       	mov	r25, r24
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	9c 13       	cpse	r25, r28
     14a:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:62
  if (!_r) UPDI_LASTH |= 0x20;
     14c:	9c 13       	cpse	r25, r28
     14e:	fd 9a       	sbi	0x1f, 5	; 31
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:64
  return _r;
}
     150:	cf 91       	pop	r28
     152:	08 95       	ret

00000154 <UPDI::send_bytes(unsigned char const*, unsigned int)>:
_ZN4UPDI10send_bytesEPKhj():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:111

/*
 * バイト塊送信
 */

bool UPDI::send_bytes (const uint8_t *data, size_t len) {
     154:	0f 93       	push	r16
     156:	1f 93       	push	r17
     158:	cf 93       	push	r28
     15a:	df 93       	push	r29
     15c:	eb 01       	movw	r28, r22
     15e:	8c 01       	movw	r16, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:114
  uint8_t *p = (uint8_t*)(void*)data;
  do {
    if (!UPDI::SEND(*p++)) break;
     160:	f8 01       	movw	r30, r16
     162:	81 91       	ld	r24, Z+
     164:	8f 01       	movw	r16, r30
     166:	de df       	rcall	.-68     	; 0x124 <UPDI::SEND(unsigned char)>
     168:	88 23       	and	r24, r24
     16a:	11 f0       	breq	.+4      	; 0x170 <UPDI::send_bytes(unsigned char const*, unsigned int)+0x1c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:115
  } while (--len);
     16c:	21 97       	sbiw	r28, 0x01	; 1
     16e:	c1 f7       	brne	.-16     	; 0x160 <UPDI::send_bytes(unsigned char const*, unsigned int)+0xc>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:116
  return len == 0;
     170:	81 e0       	ldi	r24, 0x01	; 1
     172:	cd 2b       	or	r28, r29
     174:	09 f0       	breq	.+2      	; 0x178 <UPDI::send_bytes(unsigned char const*, unsigned int)+0x24>
     176:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:117
}
     178:	df 91       	pop	r29
     17a:	cf 91       	pop	r28
     17c:	1f 91       	pop	r17
     17e:	0f 91       	pop	r16
     180:	08 95       	ret

00000182 <UPDI::set_cs_stat(unsigned char, unsigned char)>:
_ZN4UPDI11set_cs_statEhh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:219
 * コントロールステータス送信
 */

bool UPDI::set_cs_stat (const uint8_t code, uint8_t data) {
  static uint8_t set_ptr[] = { UPDI::UPDI_SYNCH, 0, 0 };
  set_ptr[1] = UPDI::UPDI_STCS | code;
     182:	ee e1       	ldi	r30, 0x1E	; 30
     184:	f8 e3       	ldi	r31, 0x38	; 56
     186:	80 6c       	ori	r24, 0xC0	; 192
     188:	81 83       	std	Z+1, r24	; 0x01
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:220
  set_ptr[2] = data;
     18a:	62 83       	std	Z+2, r22	; 0x02
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:221
  return UPDI::send_bytes(set_ptr, sizeof(set_ptr));
     18c:	63 e0       	ldi	r22, 0x03	; 3
     18e:	70 e0       	ldi	r23, 0x00	; 0
     190:	cf 01       	movw	r24, r30
     192:	e0 cf       	rjmp	.-64     	; 0x154 <UPDI::send_bytes(unsigned char const*, unsigned int)>

00000194 <UPDI::updi_reset(bool)>:
_ZN4UPDI10updi_resetEb():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:233
}
inline uint8_t UPDI::get_cs_asi_ctra (void) {
  return UPDI::get_cs_stat(UPDI::UPDI_CS_ASI_CTRLA);
}
inline bool UPDI::updi_reset (bool logic) {
  return UPDI::set_cs_stat(
     194:	60 e0       	ldi	r22, 0x00	; 0
     196:	81 11       	cpse	r24, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:235
    UPDI::UPDI_CS_ASI_RESET_REQ,
    (logic ? UPDI::UPDI_RSTREQ : UPDI::UPDI_NOP));
     198:	69 e5       	ldi	r22, 0x59	; 89
     19a:	88 e0       	ldi	r24, 0x08	; 8
     19c:	f2 cf       	rjmp	.-28     	; 0x182 <UPDI::set_cs_stat(unsigned char, unsigned char)>

0000019e <UPDI::st8(unsigned long, unsigned char)>:
_ZN4UPDI3st8Emh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:148

/*
 * 単バイト送信
 */

bool UPDI::st8 (uint32_t addr, uint8_t data) {
     19e:	cf 93       	push	r28
     1a0:	c4 2f       	mov	r28, r20
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:154
  static uint8_t set_ptr[] = {
      UPDI::UPDI_SYNCH
    , UPDI::UPDI_STS | UPDI::UPDI_ADDR3 | UPDI::UPDI_DATA1
    , 0, 0, 0, 0  // qword address
  };
  _CAPS32(set_ptr[2])->dword = addr;
     1a2:	60 93 12 38 	sts	0x3812, r22	; 0x803812 <UPDI::st8(unsigned long, unsigned char)::set_ptr+0x2>
     1a6:	70 93 13 38 	sts	0x3813, r23	; 0x803813 <UPDI::st8(unsigned long, unsigned char)::set_ptr+0x3>
     1aa:	80 93 14 38 	sts	0x3814, r24	; 0x803814 <UPDI::st8(unsigned long, unsigned char)::set_ptr+0x4>
     1ae:	90 93 15 38 	sts	0x3815, r25	; 0x803815 <UPDI::st8(unsigned long, unsigned char)::set_ptr+0x5>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:155
  if (!UPDI::send_bytes(set_ptr, sizeof(set_ptr) - 1)) return false;
     1b2:	65 e0       	ldi	r22, 0x05	; 5
     1b4:	70 e0       	ldi	r23, 0x00	; 0
     1b6:	80 e1       	ldi	r24, 0x10	; 16
     1b8:	98 e3       	ldi	r25, 0x38	; 56
     1ba:	cc df       	rcall	.-104    	; 0x154 <UPDI::send_bytes(unsigned char const*, unsigned int)>
     1bc:	81 11       	cpse	r24, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:158
  if (UPDI::UPDI_ACK != UPDI::RECV()) return false;
  if (!UPDI::SEND(data)) return false;
  return UPDI::UPDI_ACK == UPDI::RECV();
     1be:	02 c0       	rjmp	.+4      	; 0x1c4 <UPDI::st8(unsigned long, unsigned char)+0x26>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:156
    , UPDI::UPDI_STS | UPDI::UPDI_ADDR3 | UPDI::UPDI_DATA1
    , 0, 0, 0, 0  // qword address
  };
  _CAPS32(set_ptr[2])->dword = addr;
  if (!UPDI::send_bytes(set_ptr, sizeof(set_ptr) - 1)) return false;
  if (UPDI::UPDI_ACK != UPDI::RECV()) return false;
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	0b c0       	rjmp	.+22     	; 0x1da <UPDI::st8(unsigned long, unsigned char)+0x3c>
     1c4:	a3 df       	rcall	.-186    	; 0x10c <UPDI::RECV()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:157
  if (!UPDI::SEND(data)) return false;
     1c6:	80 34       	cpi	r24, 0x40	; 64
     1c8:	d9 f7       	brne	.-10     	; 0x1c0 <UPDI::st8(unsigned long, unsigned char)+0x22>
     1ca:	8c 2f       	mov	r24, r28
     1cc:	ab df       	rcall	.-170    	; 0x124 <UPDI::SEND(unsigned char)>
     1ce:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:158
  return UPDI::UPDI_ACK == UPDI::RECV();
     1d0:	b9 f3       	breq	.-18     	; 0x1c0 <UPDI::st8(unsigned long, unsigned char)+0x22>
     1d2:	9c df       	rcall	.-200    	; 0x10c <UPDI::RECV()>
     1d4:	91 e0       	ldi	r25, 0x01	; 1
     1d6:	80 34       	cpi	r24, 0x40	; 64
     1d8:	99 f7       	brne	.-26     	; 0x1c0 <UPDI::st8(unsigned long, unsigned char)+0x22>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:159
}
     1da:	89 2f       	mov	r24, r25
     1dc:	cf 91       	pop	r28
     1de:	08 95       	ret

000001e0 <UPDI::send_repeat_header(unsigned char, unsigned long, unsigned int)>:
_ZN4UPDI18send_repeat_headerEhmj():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:136
    , UPDI::UPDI_REPEAT | UPDI::UPDI_DATA1
    , 0                   // repeat count
    , UPDI::UPDI_SYNCH
    , UPDI::UPDI_PTR_INC  // +cmd
  };
  _CAPS32(set_ptr[2])->dword = addr;
     1e0:	40 93 0c 38 	sts	0x380C, r20	; 0x80380c <UPDI::send_repeat_header(unsigned char, unsigned long, unsigned int)::set_ptr+0x2>
     1e4:	50 93 0d 38 	sts	0x380D, r21	; 0x80380d <UPDI::send_repeat_header(unsigned char, unsigned long, unsigned int)::set_ptr+0x3>
     1e8:	60 93 0e 38 	sts	0x380E, r22	; 0x80380e <UPDI::send_repeat_header(unsigned char, unsigned long, unsigned int)::set_ptr+0x4>
     1ec:	70 93 0f 38 	sts	0x380F, r23	; 0x80380f <UPDI::send_repeat_header(unsigned char, unsigned long, unsigned int)::set_ptr+0x5>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:137
  set_repeat[2] = len - 1;
     1f0:	21 50       	subi	r18, 0x01	; 1
     1f2:	20 93 07 38 	sts	0x3807, r18	; 0x803807 <UPDI::send_repeat_header(unsigned char, unsigned long, unsigned int)::set_repeat+0x2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:138
  set_repeat[4] = UPDI::UPDI_PTR_INC | cmd;
     1f6:	84 60       	ori	r24, 0x04	; 4
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:139
  if (!UPDI::send_bytes(set_ptr, sizeof(set_ptr) - 1)) return false;
     1f8:	80 93 09 38 	sts	0x3809, r24	; 0x803809 <UPDI::send_repeat_header(unsigned char, unsigned long, unsigned int)::set_repeat+0x4>
     1fc:	65 e0       	ldi	r22, 0x05	; 5
     1fe:	70 e0       	ldi	r23, 0x00	; 0
     200:	8a e0       	ldi	r24, 0x0A	; 10
     202:	98 e3       	ldi	r25, 0x38	; 56
     204:	a7 df       	rcall	.-178    	; 0x154 <UPDI::send_bytes(unsigned char const*, unsigned int)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:140
  if (UPDI::UPDI_ACK != UPDI::RECV()) return false;
     206:	88 23       	and	r24, r24
     208:	41 f0       	breq	.+16     	; 0x21a <UPDI::send_repeat_header(unsigned char, unsigned long, unsigned int)+0x3a>
     20a:	80 df       	rcall	.-256    	; 0x10c <UPDI::RECV()>
     20c:	80 34       	cpi	r24, 0x40	; 64
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:141
  return UPDI::send_bytes(set_repeat, sizeof(set_repeat));
     20e:	29 f4       	brne	.+10     	; 0x21a <UPDI::send_repeat_header(unsigned char, unsigned long, unsigned int)+0x3a>
     210:	65 e0       	ldi	r22, 0x05	; 5
     212:	70 e0       	ldi	r23, 0x00	; 0
     214:	85 e0       	ldi	r24, 0x05	; 5
     216:	98 e3       	ldi	r25, 0x38	; 56
     218:	9d cf       	rjmp	.-198    	; 0x154 <UPDI::send_bytes(unsigned char const*, unsigned int)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:142
}
     21a:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:82
 * BREAKキャラクタ
 *
 * 送信速度を遅くすることで生成する
 */

void UPDI::BREAK (void) {
     21c:	08 95       	ret

0000021e <UPDI::BREAK()>:
_ZN4UPDI5BREAKEv():
     21e:	cf 93       	push	r28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:83
  UPDI_USART.BAUD = UPDI_BAUD_BREAK;
     220:	df 93       	push	r29
     222:	c0 e0       	ldi	r28, 0x00	; 0
     224:	d8 e0       	ldi	r29, 0x08	; 8
     226:	80 ec       	ldi	r24, 0xC0	; 192
     228:	94 e4       	ldi	r25, 0x44	; 68
     22a:	88 87       	std	Y+8, r24	; 0x08
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:84
  UPDI::SEND(UPDI::UPDI_NOP);
     22c:	99 87       	std	Y+9, r25	; 0x09
     22e:	80 e0       	ldi	r24, 0x00	; 0
     230:	79 df       	rcall	.-270    	; 0x124 <UPDI::SEND(unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:85
  UPDI_USART.BAUD = UPDI_BAUD_CALC;
     232:	80 eb       	ldi	r24, 0xB0	; 176
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	88 87       	std	Y+8, r24	; 0x08
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:86
}
     238:	99 87       	std	Y+9, r25	; 0x09
     23a:	df 91       	pop	r29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:196
 * コントロールステータス受信
 */

uint8_t UPDI::get_cs_stat (const uint8_t code) {
  static uint8_t set_ptr[] = { UPDI::UPDI_SYNCH, 0 };
  set_ptr[1] = UPDI::UPDI_LDCS | code;
     23c:	cf 91       	pop	r28
     23e:	08 95       	ret

00000240 <UPDI::get_cs_stat(unsigned char)>:
_ZN4UPDI11get_cs_statEh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:197
  while (!UPDI::send_bytes(set_ptr, sizeof(set_ptr))) UPDI::BREAK();
     240:	80 68       	ori	r24, 0x80	; 128
     242:	80 93 1d 38 	sts	0x381D, r24	; 0x80381d <UPDI::get_cs_stat(unsigned char)::set_ptr+0x1>
     246:	62 e0       	ldi	r22, 0x02	; 2
     248:	70 e0       	ldi	r23, 0x00	; 0
     24a:	8c e1       	ldi	r24, 0x1C	; 28
     24c:	98 e3       	ldi	r25, 0x38	; 56
     24e:	82 df       	rcall	.-252    	; 0x154 <UPDI::send_bytes(unsigned char const*, unsigned int)>
     250:	81 11       	cpse	r24, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:198
  return UPDI::RECV();
     252:	02 c0       	rjmp	.+4      	; 0x258 <UPDI::get_cs_stat(unsigned char)+0x18>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:185
  static uint8_t set_ptr[] = {
      UPDI::UPDI_SYNCH
    , UPDI::UPDI_LDS | UPDI::UPDI_ADDR3 | UPDI::UPDI_DATA1
    , 0, 0, 0, 0  // qword address
  };
  _CAPS16(set_ptr[2])->word = (uint16_t)addr;
     254:	e4 df       	rcall	.-56     	; 0x21e <UPDI::BREAK()>
     256:	f7 cf       	rjmp	.-18     	; 0x246 <UPDI::get_cs_stat(unsigned char)+0x6>
     258:	59 cf       	rjmp	.-334    	; 0x10c <UPDI::RECV()>

0000025a <UPDI::ld8(unsigned long)>:
_ZN4UPDI3ld8Em():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:186
  while (!UPDI::send_bytes(set_ptr, sizeof(set_ptr) - 1)) UPDI::BREAK();
     25a:	60 93 18 38 	sts	0x3818, r22	; 0x803818 <UPDI::ld8(unsigned long)::set_ptr+0x2>
     25e:	70 93 19 38 	sts	0x3819, r23	; 0x803819 <UPDI::ld8(unsigned long)::set_ptr+0x3>
     262:	65 e0       	ldi	r22, 0x05	; 5
     264:	70 e0       	ldi	r23, 0x00	; 0
     266:	86 e1       	ldi	r24, 0x16	; 22
     268:	98 e3       	ldi	r25, 0x38	; 56
     26a:	74 df       	rcall	.-280    	; 0x154 <UPDI::send_bytes(unsigned char const*, unsigned int)>
     26c:	81 11       	cpse	r24, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:187
  return UPDI::RECV();
     26e:	02 c0       	rjmp	.+4      	; 0x274 <UPDI::ld8(unsigned long)+0x1a>
     270:	d6 df       	rcall	.-84     	; 0x21e <UPDI::BREAK()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:94
 * 対象リセット
 *
 * BREAKを前置するタイプ
 */

bool UPDI::Target_Reset (bool _enable) {
     272:	f7 cf       	rjmp	.-18     	; 0x262 <UPDI::ld8(unsigned long)+0x8>
     274:	4b cf       	rjmp	.-362    	; 0x10c <UPDI::RECV()>

00000276 <UPDI::Target_Reset(bool)>:
_ZN4UPDI12Target_ResetEb():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:102
    , UPDI::UPDI_STCS | UPDI::UPDI_CS_ASI_RESET_REQ
    , 0
    , UPDI::UPDI_STCS | UPDI::UPDI_CS_CTRLB
    , UPDI::UPDI_SET_UPDIDIS
  };
  UPDI::BREAK();
     276:	cf 93       	push	r28
     278:	c8 2f       	mov	r28, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:103
  set_ptr[2] = _enable ? UPDI::UPDI_RSTREQ : UPDI::UPDI_NOP;
     27a:	d1 df       	rcall	.-94     	; 0x21e <UPDI::BREAK()>
     27c:	80 e0       	ldi	r24, 0x00	; 0
     27e:	c1 11       	cpse	r28, r1
     280:	89 e5       	ldi	r24, 0x59	; 89
     282:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <__DATA_REGION_ORIGIN__+0x2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:104
  return UPDI::send_bytes(set_ptr, sizeof(set_ptr));
     286:	65 e0       	ldi	r22, 0x05	; 5
     288:	70 e0       	ldi	r23, 0x00	; 0
     28a:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:105
}
     28c:	98 e3       	ldi	r25, 0x38	; 56
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:104
    , UPDI::UPDI_STCS | UPDI::UPDI_CS_CTRLB
    , UPDI::UPDI_SET_UPDIDIS
  };
  UPDI::BREAK();
  set_ptr[2] = _enable ? UPDI::UPDI_RSTREQ : UPDI::UPDI_NOP;
  return UPDI::send_bytes(set_ptr, sizeof(set_ptr));
     28e:	cf 91       	pop	r28
     290:	61 cf       	rjmp	.-318    	; 0x154 <UPDI::send_bytes(unsigned char const*, unsigned int)>

00000292 <TIM::LED_Blink()>:
_ZN3TIM9LED_BlinkEv():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:160
    LEDG_EVOUT = EVSYS_USER_CHANNEL2_gc;
  }
}

void LED_TCB1 (uint8_t mode, uint16_t ccmp) {
  if (TIM::mode != mode) {
     292:	80 91 50 38 	lds	r24, 0x3850	; 0x803850 <TIM::mode>
     296:	83 30       	cpi	r24, 0x03	; 3
     298:	99 f0       	breq	.+38     	; 0x2c0 <TIM::LED_Blink()+0x2e>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:161
    TIM::mode = mode;
     29a:	83 e0       	ldi	r24, 0x03	; 3
     29c:	80 93 50 38 	sts	0x3850, r24	; 0x803850 <TIM::mode>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:162
    TCB1_CCMP = ccmp;
     2a0:	89 ea       	ldi	r24, 0xA9	; 169
     2a2:	95 e5       	ldi	r25, 0x55	; 85
     2a4:	80 93 9c 0a 	sts	0x0A9C, r24	; 0x800a9c <UPDI::nvmprog_key+0x7f7158>
     2a8:	90 93 9d 0a 	sts	0x0A9D, r25	; 0x800a9d <UPDI::nvmprog_key+0x7f7159>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:163
    TCB1_CNT = 0;
     2ac:	10 92 9a 0a 	sts	0x0A9A, r1	; 0x800a9a <UPDI::nvmprog_key+0x7f7156>
     2b0:	10 92 9b 0a 	sts	0x0A9B, r1	; 0x800a9b <UPDI::nvmprog_key+0x7f7157>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:164
    TCB1_CTRLA = TCB_RUNSTDBY_bm | TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
     2b4:	8f e4       	ldi	r24, 0x4F	; 79
     2b6:	80 93 90 0a 	sts	0x0A90, r24	; 0x800a90 <UPDI::nvmprog_key+0x7f714c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:165
    LEDG_EVOUT = EVSYS_USER_CHANNEL0_gc;
     2ba:	81 e0       	ldi	r24, 0x01	; 1
     2bc:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <UPDI::nvmprog_key+0x7f6865>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:177
}

/* 点滅（SW1アサート）*/
void TIM::LED_Blink (void) {
  LED_TCB1(3, TCB1_BLINK);
}
     2c0:	08 95       	ret

000002c2 <TIM::LED_Flash()>:
_ZN3TIM9LED_FlashEv():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:160
    LEDG_EVOUT = EVSYS_USER_CHANNEL2_gc;
  }
}

void LED_TCB1 (uint8_t mode, uint16_t ccmp) {
  if (TIM::mode != mode) {
     2c2:	80 91 50 38 	lds	r24, 0x3850	; 0x803850 <TIM::mode>
     2c6:	82 30       	cpi	r24, 0x02	; 2
     2c8:	99 f0       	breq	.+38     	; 0x2f0 <TIM::LED_Flash()+0x2e>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:161
    TIM::mode = mode;
     2ca:	82 e0       	ldi	r24, 0x02	; 2
     2cc:	80 93 50 38 	sts	0x3850, r24	; 0x803850 <TIM::mode>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:162
    TCB1_CCMP = ccmp;
     2d0:	89 ea       	ldi	r24, 0xA9	; 169
     2d2:	98 e0       	ldi	r25, 0x08	; 8
     2d4:	80 93 9c 0a 	sts	0x0A9C, r24	; 0x800a9c <UPDI::nvmprog_key+0x7f7158>
     2d8:	90 93 9d 0a 	sts	0x0A9D, r25	; 0x800a9d <UPDI::nvmprog_key+0x7f7159>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:163
    TCB1_CNT = 0;
     2dc:	10 92 9a 0a 	sts	0x0A9A, r1	; 0x800a9a <UPDI::nvmprog_key+0x7f7156>
     2e0:	10 92 9b 0a 	sts	0x0A9B, r1	; 0x800a9b <UPDI::nvmprog_key+0x7f7157>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:164
    TCB1_CTRLA = TCB_RUNSTDBY_bm | TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
     2e4:	8f e4       	ldi	r24, 0x4F	; 79
     2e6:	80 93 90 0a 	sts	0x0A90, r24	; 0x800a90 <UPDI::nvmprog_key+0x7f714c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:165
    LEDG_EVOUT = EVSYS_USER_CHANNEL0_gc;
     2ea:	81 e0       	ldi	r24, 0x01	; 1
     2ec:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <UPDI::nvmprog_key+0x7f6865>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:172
}

/* フラッシュ（RTSアサート/UPDI許認可後）*/
void TIM::LED_Flash (void) {
  LED_TCB1(2, TCB1_FLASH);
}
     2f0:	08 95       	ret

000002f2 <TIM::Timeout_Stop()>:
_ZN3TIM12Timeout_StopEv():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:137
    TCB0_CTRLA = TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
  }
}

void TIM::Timeout_Stop (void) {
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     2f2:	8f b7       	in	r24, 0x3f	; 63
__iCliRetVal():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     2f4:	f8 94       	cli
_ZN3TIM12Timeout_StopEv():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:138
    TCB0_CTRLA = 0;
     2f6:	10 92 80 0a 	sts	0x0A80, r1	; 0x800a80 <UPDI::nvmprog_key+0x7f713c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:139
    TCB0_INTFLAGS = TCB_CAPT_bm;
     2fa:	91 e0       	ldi	r25, 0x01	; 1
     2fc:	90 93 86 0a 	sts	0x0A86, r25	; 0x800a86 <UPDI::nvmprog_key+0x7f7142>
__iRestore():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     300:	8f bf       	out	0x3f, r24	; 63
_ZN3TIM12Timeout_StopEv():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:141
  }
  reti();
     302:	18 95       	reti
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:142
}
     304:	08 95       	ret

00000306 <SYS::WDT_SET(unsigned char)>:
_ZN3SYS7WDT_SETEh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/SYS.cpp:133
/*
 * WDT操作
 */

void SYS::WDT_SET (uint8_t _wdt_period) {
  loop_until_bit_is_clear(WDT_STATUS, WDT_SYNCBUSY_bp);
     306:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <UPDI::nvmprog_key+0x7f67bd>
     30a:	90 fd       	sbrc	r25, 0
     30c:	fc cf       	rjmp	.-8      	; 0x306 <SYS::WDT_SET(unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/SYS.cpp:134
  _PROTECTED_WRITE(WDT_CTRLA, _wdt_period);
     30e:	98 ed       	ldi	r25, 0xD8	; 216
     310:	94 bf       	out	0x34, r25	; 52
     312:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <UPDI::nvmprog_key+0x7f67bc>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/SYS.cpp:135
}
     316:	08 95       	ret

00000318 <SYS::get_vcc()>:
_ZN3SYS7get_vccEv():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/SYS.cpp:69
/*
 * 自己VCC測定
 */

uint16_t SYS::get_vcc (void) {
  ADC0_CTRLA = ADC_ENABLE_bm;
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <UPDI::nvmprog_key+0x7f6cbc>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/SYS.cpp:70
  ADC0_CTRLB = ADC_PRESC_DIV2_gc;
     31e:	10 92 01 06 	sts	0x0601, r1	; 0x800601 <UPDI::nvmprog_key+0x7f6cbd>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/SYS.cpp:71
  ADC0_CTRLC = ADC_REFSEL_1024MV_gc | ((F_CPU / 1000000UL) << ADC_TIMEBASE_gp);
     322:	84 e5       	ldi	r24, 0x54	; 84
     324:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <UPDI::nvmprog_key+0x7f6cbe>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/SYS.cpp:72
  ADC0_CTRLE = 17; /* (SAMPDUR + 0.5) * fCLK_ADC = 10.5 µs sample duration */
     328:	81 e1       	ldi	r24, 0x11	; 17
     32a:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <UPDI::nvmprog_key+0x7f6cc4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/SYS.cpp:73
  ADC0_MUXPOS = ADC_MUXPOS_VDDDIV10_gc; /* ADC channel VDD/10 */
     32e:	91 e3       	ldi	r25, 0x31	; 49
     330:	90 93 0c 06 	sts	0x060C, r25	; 0x80060c <UPDI::nvmprog_key+0x7f6cc8>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/SYS.cpp:74
  ADC0_COMMAND = ADC_MODE_SINGLE_12BIT_gc | ADC_START_IMMEDIATE_gc;
     334:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <UPDI::nvmprog_key+0x7f6cc6>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/SYS.cpp:75
  loop_until_bit_is_set(ADC0_INTFLAGS, ADC_SAMPRDY_bp);
     338:	80 91 05 06 	lds	r24, 0x0605	; 0x800605 <UPDI::nvmprog_key+0x7f6cc1>
     33c:	81 ff       	sbrs	r24, 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/SYS.cpp:76
  uint16_t adc_reading = ADC0_SAMPLE;
     33e:	fc cf       	rjmp	.-8      	; 0x338 <SYS::get_vcc()+0x20>
     340:	20 91 14 06 	lds	r18, 0x0614	; 0x800614 <UPDI::nvmprog_key+0x7f6cd0>
     344:	30 91 15 06 	lds	r19, 0x0615	; 0x800615 <UPDI::nvmprog_key+0x7f6cd1>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/SYS.cpp:77
  adc_reading += adc_reading + (adc_reading >> 1);  /* x2.5 */
     348:	c9 01       	movw	r24, r18
     34a:	96 95       	lsr	r25
     34c:	87 95       	ror	r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/SYS.cpp:78
  ADC0_CTRLA = 0;
     34e:	22 0f       	add	r18, r18
     350:	33 1f       	adc	r19, r19
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/SYS.cpp:80
  return adc_reading;
}
     352:	10 92 00 06 	sts	0x0600, r1	; 0x800600 <UPDI::nvmprog_key+0x7f6cbc>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:317
 * NVMCTRL制御
 */

/* NVMCTRL v0 */
bool NVM::nvm_ctrl (uint8_t nvmcmd) {
  return UPDI::st8(NVM::NVMCTRL_REG_CTRLA, nvmcmd);
     356:	82 0f       	add	r24, r18
     358:	93 1f       	adc	r25, r19
     35a:	08 95       	ret

0000035c <NVM::nvm_ctrl(unsigned char)>:
_ZN3NVM8nvm_ctrlEh():
     35c:	48 2f       	mov	r20, r24
     35e:	60 e0       	ldi	r22, 0x00	; 0
     360:	70 e1       	ldi	r23, 0x10	; 16
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:320
}

bool nvm_ctrl_change (uint8_t nvmcmd) {
     362:	80 e0       	ldi	r24, 0x00	; 0
     364:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:321
  if (UPDI::ld8(NVM::NVMCTRL_REG_CTRLA) == nvmcmd) return true;
     366:	1b cf       	rjmp	.-458    	; 0x19e <UPDI::st8(unsigned long, unsigned char)>

00000368 <nvm_ctrl_change(unsigned char)>:
_Z15nvm_ctrl_changeh():
     368:	cf 93       	push	r28
     36a:	c8 2f       	mov	r28, r24
     36c:	60 e0       	ldi	r22, 0x00	; 0
     36e:	70 e1       	ldi	r23, 0x10	; 16
     370:	80 e0       	ldi	r24, 0x00	; 0
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	72 df       	rcall	.-284    	; 0x25a <UPDI::ld8(unsigned long)>
     376:	8c 13       	cpse	r24, r28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:325
  if (!NVM::nvm_ctrl(NVM::NVM_V2_CMD_NOCMD)) return false;
  if (NVM::NVM_V2_CMD_NOCMD != nvmcmd) return NVM::nvm_ctrl(nvmcmd);
  return true;
}
     378:	03 c0       	rjmp	.+6      	; 0x380 <nvm_ctrl_change(unsigned char)+0x18>
     37a:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:322
  return UPDI::st8(NVM::NVMCTRL_REG_CTRLA, nvmcmd);
}

bool nvm_ctrl_change (uint8_t nvmcmd) {
  if (UPDI::ld8(NVM::NVMCTRL_REG_CTRLA) == nvmcmd) return true;
  if (!NVM::nvm_ctrl(NVM::NVM_V2_CMD_NOCMD)) return false;
     37c:	cf 91       	pop	r28
     37e:	08 95       	ret
     380:	80 e0       	ldi	r24, 0x00	; 0
     382:	ec df       	rcall	.-40     	; 0x35c <NVM::nvm_ctrl(unsigned char)>
     384:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:323
  if (NVM::NVM_V2_CMD_NOCMD != nvmcmd) return NVM::nvm_ctrl(nvmcmd);
     386:	d1 f3       	breq	.-12     	; 0x37c <nvm_ctrl_change(unsigned char)+0x14>
     388:	cc 23       	and	r28, r28
     38a:	b9 f3       	breq	.-18     	; 0x37a <nvm_ctrl_change(unsigned char)+0x12>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:325
  return true;
}
     38c:	8c 2f       	mov	r24, r28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:323
}

bool nvm_ctrl_change (uint8_t nvmcmd) {
  if (UPDI::ld8(NVM::NVMCTRL_REG_CTRLA) == nvmcmd) return true;
  if (!NVM::nvm_ctrl(NVM::NVM_V2_CMD_NOCMD)) return false;
  if (NVM::NVM_V2_CMD_NOCMD != nvmcmd) return NVM::nvm_ctrl(nvmcmd);
     38e:	cf 91       	pop	r28
     390:	e5 cf       	rjmp	.-54     	; 0x35c <NVM::nvm_ctrl(unsigned char)>

00000392 <JTAG2::set_response(JTAG2::jtag_response_e)>:
_ZN5JTAG212set_responseENS_15jtag_response_eE():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:162
  }
}

/* JTAG Response */
void JTAG2::set_response (jtag_response_e response_code) {
  packet.size = 4;
     392:	44 e0       	ldi	r20, 0x04	; 4
     394:	50 e0       	ldi	r21, 0x00	; 0
     396:	60 e0       	ldi	r22, 0x00	; 0
     398:	70 e0       	ldi	r23, 0x00	; 0
     39a:	40 93 66 38 	sts	0x3866, r20	; 0x803866 <JTAG2::packet+0x3>
     39e:	50 93 67 38 	sts	0x3867, r21	; 0x803867 <JTAG2::packet+0x4>
     3a2:	60 93 68 38 	sts	0x3868, r22	; 0x803868 <JTAG2::packet+0x5>
     3a6:	70 93 69 38 	sts	0x3869, r23	; 0x803869 <JTAG2::packet+0x6>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:164
  /* 応答番号 */
  packet.body[0] = response_code;
     3aa:	80 93 6b 38 	sts	0x386B, r24	; 0x80386b <JTAG2::packet+0x8>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:166
  /* 動作状態 0:無効 1:認識 2:書込可 */
  packet.body[1] = bit_is_set(UPDI_CONTROL, UPDI::UPDI_PROG_bp) ? 2
     3ae:	e1 99       	sbic	0x1c, 1	; 28
     3b0:	0b c0       	rjmp	.+22     	; 0x3c8 <JTAG2::set_response(JTAG2::jtag_response_e)+0x36>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:167
                 : bit_is_set(UPDI_CONTROL, UPDI::UPDI_INFO_bp) ? 1 : 0;
     3b2:	8c b3       	in	r24, 0x1c	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:166
void JTAG2::set_response (jtag_response_e response_code) {
  packet.size = 4;
  /* 応答番号 */
  packet.body[0] = response_code;
  /* 動作状態 0:無効 1:認識 2:書込可 */
  packet.body[1] = bit_is_set(UPDI_CONTROL, UPDI::UPDI_PROG_bp) ? 2
     3b4:	81 70       	andi	r24, 0x01	; 1
     3b6:	80 93 6c 38 	sts	0x386C, r24	; 0x80386c <JTAG2::packet+0x9>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:169
                 : bit_is_set(UPDI_CONTROL, UPDI::UPDI_INFO_bp) ? 1 : 0;
  /* 内部状態フラグ */
  packet.body[2] = UPDI_CONTROL;
     3ba:	8c b3       	in	r24, 0x1c	; 28
     3bc:	80 93 6d 38 	sts	0x386D, r24	; 0x80386d <JTAG2::packet+0xa>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:170
  packet.body[3] = UPDI_NVMCTRL;
     3c0:	8d b3       	in	r24, 0x1d	; 29
     3c2:	80 93 6e 38 	sts	0x386E, r24	; 0x80386e <JTAG2::packet+0xb>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:171
}
     3c6:	08 95       	ret
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:166
void JTAG2::set_response (jtag_response_e response_code) {
  packet.size = 4;
  /* 応答番号 */
  packet.body[0] = response_code;
  /* 動作状態 0:無効 1:認識 2:書込可 */
  packet.body[1] = bit_is_set(UPDI_CONTROL, UPDI::UPDI_PROG_bp) ? 2
     3c8:	82 e0       	ldi	r24, 0x02	; 2
     3ca:	f5 cf       	rjmp	.-22     	; 0x3b6 <JTAG2::set_response(JTAG2::jtag_response_e)+0x24>

000003cc <_crc_ccitt_update(unsigned int, unsigned char)>:
_ZL17_crc_ccitt_updatejh():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/crc16.h:285
        "eor    %A0,__tmp_reg__"

        : "=d" (__ret)
        : "r" (__data), "0" (__crc)
        : "r0"
    );
     3cc:	86 27       	eor	r24, r22
     3ce:	08 2e       	mov	r0, r24
     3d0:	82 95       	swap	r24
     3d2:	80 7f       	andi	r24, 0xF0	; 240
     3d4:	80 25       	eor	r24, r0
     3d6:	09 2e       	mov	r0, r25
     3d8:	98 2f       	mov	r25, r24
     3da:	82 95       	swap	r24
     3dc:	8f 70       	andi	r24, 0x0F	; 15
     3de:	08 26       	eor	r0, r24
     3e0:	86 95       	lsr	r24
     3e2:	98 27       	eor	r25, r24
     3e4:	89 27       	eor	r24, r25
     3e6:	88 0f       	add	r24, r24
     3e8:	88 0f       	add	r24, r24
     3ea:	88 0f       	add	r24, r24
     3ec:	80 25       	eor	r24, r0
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/crc16.h:287
    return __ret;
}
     3ee:	08 95       	ret

000003f0 <JTAG2::answer_transfer()>:
_ZN5JTAG215answer_transferEv():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:147
  while (p != q) _crc = JTAG2::crc16_update(_crc, *q++);
  return _crc == 0;
}

/* JTAG Answer */
void JTAG2::answer_transfer (void) {
     3f0:	af 92       	push	r10
     3f2:	bf 92       	push	r11
     3f4:	cf 92       	push	r12
     3f6:	df 92       	push	r13
     3f8:	ef 92       	push	r14
     3fa:	ff 92       	push	r15
     3fc:	0f 93       	push	r16
     3fe:	1f 93       	push	r17
     400:	cf 93       	push	r28
     402:	df 93       	push	r29
     404:	00 d0       	rcall	.+0      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     406:	cd b7       	in	r28, 0x3d	; 61
     408:	de b7       	in	r29, 0x3e	; 62
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:148
  uint16_t _crc = ~0;
     40a:	8f ef       	ldi	r24, 0xFF	; 255
     40c:	9f ef       	ldi	r25, 0xFF	; 255
     40e:	89 83       	std	Y+1, r24	; 0x01
     410:	9a 83       	std	Y+2, r25	; 0x02
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:149
  int16_t _len = packet.size_word[0] + 8;
     412:	e0 90 66 38 	lds	r14, 0x3866	; 0x803866 <JTAG2::packet+0x3>
     416:	f0 90 67 38 	lds	r15, 0x3867	; 0x803867 <JTAG2::packet+0x4>
     41a:	87 01       	movw	r16, r14
     41c:	08 5f       	subi	r16, 0xF8	; 248
     41e:	1f 4f       	sbci	r17, 0xFF	; 255
     420:	83 e6       	ldi	r24, 0x63	; 99
     422:	c8 2e       	mov	r12, r24
     424:	88 e3       	ldi	r24, 0x38	; 56
     426:	d8 2e       	mov	r13, r24
     428:	56 01       	movw	r10, r12
     42a:	81 e0       	ldi	r24, 0x01	; 1
     42c:	e8 1a       	sub	r14, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:152
  uint8_t *_p = (uint8_t*) &packet.soh;
  uint8_t *_q = (uint8_t*) &packet.soh;
  while (_len--) _crc = JTAG2::crc16_update(_crc, *_q++);
     42e:	f1 08       	sbc	r15, r1
     430:	a7 ef       	ldi	r26, 0xF7	; 247
     432:	ea 16       	cp	r14, r26
     434:	af ef       	ldi	r26, 0xFF	; 255
     436:	fa 06       	cpc	r15, r26
     438:	49 f0       	breq	.+18     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     43a:	f5 01       	movw	r30, r10
     43c:	61 91       	ld	r22, Z+
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:116
void JTAG2::flush (void) {
  loop_until_bit_is_set(JTAG_USART.STATUS, USART_TXCIF_bp);
}

uint16_t JTAG2::crc16_update(uint16_t _crc, uint8_t _data) {
  return _crc_ccitt_update(_crc, _data);
     43e:	5f 01       	movw	r10, r30
crc16_update():
     440:	89 81       	ldd	r24, Y+1	; 0x01
     442:	9a 81       	ldd	r25, Y+2	; 0x02
     444:	c3 df       	rcall	.-122    	; 0x3cc <_crc_ccitt_update(unsigned int, unsigned char)>
_ZN5JTAG215answer_transferEv():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:152
void JTAG2::answer_transfer (void) {
  uint16_t _crc = ~0;
  int16_t _len = packet.size_word[0] + 8;
  uint8_t *_p = (uint8_t*) &packet.soh;
  uint8_t *_q = (uint8_t*) &packet.soh;
  while (_len--) _crc = JTAG2::crc16_update(_crc, *_q++);
     446:	89 83       	std	Y+1, r24	; 0x01
     448:	9a 83       	std	Y+2, r25	; 0x02
     44a:	ef cf       	rjmp	.-34     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     44c:	f8 01       	movw	r30, r16
     44e:	ed 59       	subi	r30, 0x9D	; 157
     450:	f7 4c       	sbci	r31, 0xC7	; 199
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:153
  (*_q++) = _CAPS16(_crc)->bytes[0];
     452:	89 81       	ldd	r24, Y+1	; 0x01
     454:	80 83       	st	Z, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:154
  (*_q++) = _CAPS16(_crc)->bytes[1];
     456:	8a 81       	ldd	r24, Y+2	; 0x02
     458:	81 83       	std	Z+1, r24	; 0x01
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:155
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     45a:	2f b7       	in	r18, 0x3f	; 63
__iCliRetVal():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     45c:	f8 94       	cli
_ZN5JTAG215answer_transferEv():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:154
  int16_t _len = packet.size_word[0] + 8;
  uint8_t *_p = (uint8_t*) &packet.soh;
  uint8_t *_q = (uint8_t*) &packet.soh;
  while (_len--) _crc = JTAG2::crc16_update(_crc, *_q++);
  (*_q++) = _CAPS16(_crc)->bytes[0];
  (*_q++) = _CAPS16(_crc)->bytes[1];
     45e:	32 96       	adiw	r30, 0x02	; 2
put():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:107
  return JTAG_USART.RXDATAL;
}

uint8_t JTAG2::put (uint8_t _data) {
  loop_until_bit_is_set(JTAG_USART.STATUS, USART_DREIF_bp);
  JTAG_USART.STATUS = USART_TXCIF_bm;
     460:	90 e4       	ldi	r25, 0x40	; 64
_ZN5JTAG215answer_transferEv():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:156
  uint8_t *_q = (uint8_t*) &packet.soh;
  while (_len--) _crc = JTAG2::crc16_update(_crc, *_q++);
  (*_q++) = _CAPS16(_crc)->bytes[0];
  (*_q++) = _CAPS16(_crc)->bytes[1];
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    while (_p != _q) put(*_p++);
     462:	ce 16       	cp	r12, r30
     464:	df 06       	cpc	r13, r31
     466:	71 f4       	brne	.+28     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
__iRestore():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     468:	2f bf       	out	0x3f, r18	; 63
_ZN5JTAG215answer_transferEv():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:158
  }
}
     46a:	0f 90       	pop	r0
     46c:	0f 90       	pop	r0
     46e:	df 91       	pop	r29
     470:	cf 91       	pop	r28
     472:	1f 91       	pop	r17
     474:	0f 91       	pop	r16
     476:	ff 90       	pop	r15
     478:	ef 90       	pop	r14
     47a:	df 90       	pop	r13
     47c:	cf 90       	pop	r12
     47e:	bf 90       	pop	r11
     480:	af 90       	pop	r10
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:156
  uint8_t *_q = (uint8_t*) &packet.soh;
  while (_len--) _crc = JTAG2::crc16_update(_crc, *_q++);
  (*_q++) = _CAPS16(_crc)->bytes[0];
  (*_q++) = _CAPS16(_crc)->bytes[1];
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    while (_p != _q) put(*_p++);
     482:	08 95       	ret
     484:	d6 01       	movw	r26, r12
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:106
  loop_until_bit_is_set(JTAG_USART.STATUS, USART_RXCIF_bp);
  return JTAG_USART.RXDATAL;
}

uint8_t JTAG2::put (uint8_t _data) {
  loop_until_bit_is_set(JTAG_USART.STATUS, USART_DREIF_bp);
     486:	8d 91       	ld	r24, X+
     488:	6d 01       	movw	r12, r26
put():
     48a:	30 91 24 08 	lds	r19, 0x0824	; 0x800824 <UPDI::nvmprog_key+0x7f6ee0>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:107
  JTAG_USART.STATUS = USART_TXCIF_bm;
     48e:	35 ff       	sbrs	r19, 5
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:108
  return JTAG_USART.TXDATAL = _data;
     490:	fc cf       	rjmp	.-8      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     492:	90 93 24 08 	sts	0x0824, r25	; 0x800824 <UPDI::nvmprog_key+0x7f6ee0>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:413
 * プログラミング制御開始
 *
 */

bool UPDI::enter_prog (void) {
  if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_PROG_bp)) {
     496:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <UPDI::nvmprog_key+0x7f6ede>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:201
  set_ptr[1] = UPDI::UPDI_LDCS | code;
  while (!UPDI::send_bytes(set_ptr, sizeof(set_ptr))) UPDI::BREAK();
  return UPDI::RECV();
}
inline bool UPDI::is_cs_stat (const uint8_t code, uint8_t check) {
  return check == (UPDI::get_cs_stat(code) & check);
     49a:	e3 cf       	rjmp	.-58     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>

0000049c <UPDI::enter_prog()>:
_ZN4UPDI10enter_progEv():
     49c:	e1 99       	sbic	0x1c, 1	; 28
     49e:	33 c0       	rjmp	.+102    	; 0x506 <UPDI::enter_prog()+0x6a>
is_cs_stat():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:414
 *
 */

bool UPDI::enter_prog (void) {
  if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_PROG_bp)) {
    while (UPDI::is_sys_stat(UPDI::UPDI_SYS_RSTSYS));
     4a0:	8b e0       	ldi	r24, 0x0B	; 11
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:415
    if (!(UPDI_LASTL & UPDI::UPDI_SYS_NVMPROG)) {
     4a2:	ce de       	rcall	.-612    	; 0x240 <UPDI::get_cs_stat(unsigned char)>
_ZN4UPDI10enter_progEv():
     4a4:	85 fd       	sbrc	r24, 5
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:416
      if (UPDI_LASTL & UPDI::UPDI_SYS_LOCKSTATUS) return false;
     4a6:	fc cf       	rjmp	.-8      	; 0x4a0 <UPDI::enter_prog()+0x4>
     4a8:	f3 99       	sbic	0x1e, 3	; 30
     4aa:	2b c0       	rjmp	.+86     	; 0x502 <UPDI::enter_prog()+0x66>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:201
  set_ptr[1] = UPDI::UPDI_LDCS | code;
  while (!UPDI::send_bytes(set_ptr, sizeof(set_ptr))) UPDI::BREAK();
  return UPDI::RECV();
}
inline bool UPDI::is_cs_stat (const uint8_t code, uint8_t check) {
  return check == (UPDI::get_cs_stat(code) & check);
     4ac:	f0 9b       	sbis	0x1e, 0	; 30
     4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <UPDI::enter_prog()+0x18>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:417
bool UPDI::enter_prog (void) {
  if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_PROG_bp)) {
    while (UPDI::is_sys_stat(UPDI::UPDI_SYS_RSTSYS));
    if (!(UPDI_LASTL & UPDI::UPDI_SYS_NVMPROG)) {
      if (UPDI_LASTL & UPDI::UPDI_SYS_LOCKSTATUS) return false;
      if (!UPDI::is_key_stat(UPDI::UPDI_KEY_NVMPROG)) {
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	08 95       	ret
is_cs_stat():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:418
        if (!UPDI::send_bytes(UPDI::nvmprog_key, sizeof(UPDI::nvmprog_key))) return false;
     4b4:	87 e0       	ldi	r24, 0x07	; 7
     4b6:	c4 de       	rcall	.-632    	; 0x240 <UPDI::get_cs_stat(unsigned char)>
_ZN4UPDI10enter_progEv():
     4b8:	84 fd       	sbrc	r24, 4
     4ba:	11 c0       	rjmp	.+34     	; 0x4de <UPDI::enter_prog()+0x42>
     4bc:	6a e0       	ldi	r22, 0x0A	; 10
     4be:	70 e0       	ldi	r23, 0x00	; 0
     4c0:	84 e4       	ldi	r24, 0x44	; 68
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.4/cores/megaAVR/api/delay_busywait.h:31
static __inline__ __attribute__((__always_inline__)) void delay_micros (uint32_t _us);
static __inline__ __attribute__((__always_inline__)) void delay_millis (uint32_t _ms);

void delay_micros (uint32_t _us) {
  if (F_CPU >= 1000000L) {
    __builtin_avr_delay_cycles((F_CPU / 1000000L) * _us);
     4c2:	99 e9       	ldi	r25, 0x99	; 153
     4c4:	47 de       	rcall	.-882    	; 0x154 <UPDI::send_bytes(unsigned char const*, unsigned int)>
     4c6:	88 23       	and	r24, r24
     4c8:	99 f3       	breq	.-26     	; 0x4b0 <UPDI::enter_prog()+0x14>
delay_micros():
     4ca:	89 ef       	ldi	r24, 0xF9	; 249
     4cc:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:201
  set_ptr[1] = UPDI::UPDI_LDCS | code;
  while (!UPDI::send_bytes(set_ptr, sizeof(set_ptr))) UPDI::BREAK();
  return UPDI::RECV();
}
inline bool UPDI::is_cs_stat (const uint8_t code, uint8_t check) {
  return check == (UPDI::get_cs_stat(code) & check);
     4ce:	01 97       	sbiw	r24, 0x01	; 1
     4d0:	f1 f7       	brne	.-4      	; 0x4ce <UPDI::enter_prog()+0x32>
     4d2:	00 c0       	rjmp	.+0      	; 0x4d4 <UPDI::enter_prog()+0x38>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:419
    while (UPDI::is_sys_stat(UPDI::UPDI_SYS_RSTSYS));
    if (!(UPDI_LASTL & UPDI::UPDI_SYS_NVMPROG)) {
      if (UPDI_LASTL & UPDI::UPDI_SYS_LOCKSTATUS) return false;
      if (!UPDI::is_key_stat(UPDI::UPDI_KEY_NVMPROG)) {
        if (!UPDI::send_bytes(UPDI::nvmprog_key, sizeof(UPDI::nvmprog_key))) return false;
        do{ delay_micros(100); } while (!UPDI::is_key_stat(UPDI::UPDI_KEY_NVMPROG));
     4d4:	00 00       	nop
is_cs_stat():
     4d6:	87 e0       	ldi	r24, 0x07	; 7
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:421
      }
      if (!UPDI::updi_reset(true) || !UPDI::updi_reset(false)) return false;
     4d8:	b3 de       	rcall	.-666    	; 0x240 <UPDI::get_cs_stat(unsigned char)>
_ZN4UPDI10enter_progEv():
     4da:	84 ff       	sbrs	r24, 4
     4dc:	f6 cf       	rjmp	.-20     	; 0x4ca <UPDI::enter_prog()+0x2e>
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	59 de       	rcall	.-846    	; 0x194 <UPDI::updi_reset(bool)>
     4e2:	88 23       	and	r24, r24
     4e4:	29 f3       	breq	.-54     	; 0x4b0 <UPDI::enter_prog()+0x14>
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	55 de       	rcall	.-854    	; 0x194 <UPDI::updi_reset(bool)>
     4ea:	88 23       	and	r24, r24
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.4/cores/megaAVR/api/delay_busywait.h:31
     4ec:	09 f3       	breq	.-62     	; 0x4b0 <UPDI::enter_prog()+0x14>
delay_micros():
     4ee:	89 ef       	ldi	r24, 0xF9	; 249
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	01 97       	sbiw	r24, 0x01	; 1
     4f4:	f1 f7       	brne	.-4      	; 0x4f2 <UPDI::enter_prog()+0x56>
     4f6:	00 c0       	rjmp	.+0      	; 0x4f8 <UPDI::enter_prog()+0x5c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:201
  set_ptr[1] = UPDI::UPDI_LDCS | code;
  while (!UPDI::send_bytes(set_ptr, sizeof(set_ptr))) UPDI::BREAK();
  return UPDI::RECV();
}
inline bool UPDI::is_cs_stat (const uint8_t code, uint8_t check) {
  return check == (UPDI::get_cs_stat(code) & check);
     4f8:	00 00       	nop
is_cs_stat():
     4fa:	8b e0       	ldi	r24, 0x0B	; 11
     4fc:	a1 de       	rcall	.-702    	; 0x240 <UPDI::get_cs_stat(unsigned char)>
_ZN4UPDI10enter_progEv():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:422
      if (!UPDI::is_key_stat(UPDI::UPDI_KEY_NVMPROG)) {
        if (!UPDI::send_bytes(UPDI::nvmprog_key, sizeof(UPDI::nvmprog_key))) return false;
        do{ delay_micros(100); } while (!UPDI::is_key_stat(UPDI::UPDI_KEY_NVMPROG));
      }
      if (!UPDI::updi_reset(true) || !UPDI::updi_reset(false)) return false;
      do{ delay_micros(100); } while (!UPDI::is_sys_stat(UPDI::UPDI_SYS_NVMPROG));
     4fe:	83 ff       	sbrs	r24, 3
     500:	f6 cf       	rjmp	.-20     	; 0x4ee <UPDI::enter_prog()+0x52>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:424
    }
    UPDI_CONTROL |= _BV(UPDI::UPDI_INFO_bp);
     502:	e0 9a       	sbi	0x1c, 0	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:425
    UPDI_CONTROL |= _BV(UPDI::UPDI_PROG_bp);
     504:	e1 9a       	sbi	0x1c, 1	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:427
  }
  return true;
     506:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:428
}
     508:	08 95       	ret

0000050a <HV_Pulse()>:
_Z8HV_Pulsev():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:200
/*
 * HVチャージポンプ駆動制御
 */

void TIM::HV_Pulse_ON (void) {
  TCA0_SPLIT_CTRLB = TCA_SPLIT_HCMP0EN_bm | TCA_SPLIT_HCMP1EN_bm;
     50a:	80 e3       	ldi	r24, 0x30	; 48
     50c:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <UPDI::nvmprog_key+0x7f70bd>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:282
/*
 * HVパルス印加
 */
void HV_Pulse (void) {
  TIM::HV_Pulse_ON();
  openDrainWrite(TRST_PIN, LOW);
     510:	21 9a       	sbi	0x04, 1	; 4
delay_micros():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.4/cores/megaAVR/api/delay_busywait.h:31
     512:	8f ec       	ldi	r24, 0xCF	; 207
     514:	97 e0       	ldi	r25, 0x07	; 7
     516:	01 97       	sbiw	r24, 0x01	; 1
     518:	f1 f7       	brne	.-4      	; 0x516 <HV_Pulse()+0xc>
     51a:	00 c0       	rjmp	.+0      	; 0x51c <HV_Pulse()+0x12>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:284
  delay_micros(800);
  openDrainWrite(TRST_PIN, HIGH);
     51c:	00 00       	nop
_Z8HV_Pulsev():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.4/cores/megaAVR/api/delay_busywait.h:31
     51e:	21 98       	cbi	0x04, 1	; 4
delay_micros():
     520:	8f ec       	ldi	r24, 0xCF	; 207
     522:	97 e0       	ldi	r25, 0x07	; 7
     524:	01 97       	sbiw	r24, 0x01	; 1
     526:	f1 f7       	brne	.-4      	; 0x524 <HV_Pulse()+0x1a>
     528:	00 c0       	rjmp	.+0      	; 0x52a <HV_Pulse()+0x20>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:286
  delay_micros(800);
  if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN2_bp)) {
     52a:	00 00       	nop
_Z8HV_Pulsev():
     52c:	ee 9b       	sbis	0x1d, 6	; 29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:287
    digitalWrite(HV8_PIN, HIGH);
     52e:	1b c0       	rjmp	.+54     	; 0x566 <HV_Pulse()+0x5c>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.4/cores/megaAVR/api/delay_busywait.h:31
     530:	2d 9a       	sbi	0x05, 5	; 5
delay_micros():
     532:	8f ec       	ldi	r24, 0xCF	; 207
     534:	97 e0       	ldi	r25, 0x07	; 7
     536:	01 97       	sbiw	r24, 0x01	; 1
     538:	f1 f7       	brne	.-4      	; 0x536 <HV_Pulse()+0x2c>
     53a:	00 c0       	rjmp	.+0      	; 0x53c <HV_Pulse()+0x32>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:289
    delay_micros(800);
    digitalWrite(HV8_PIN, LOW);
     53c:	00 00       	nop
_Z8HV_Pulsev():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:204
}

void TIM::HV_Pulse_OFF (void) {
  TCA0_SPLIT_CTRLB = 0;
     53e:	2d 98       	cbi	0x05, 5	; 5
HV_Pulse_OFF():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:297
    digitalWrite(HV12_PIN, HIGH);
    delay_micros(800);
    digitalWrite(HV12_PIN, LOW);
  }
  TIM::HV_Pulse_OFF();
  UPDI_USART.BAUD = UPDI_BAUD_SHORT_BREAK;
     540:	10 92 01 0a 	sts	0x0A01, r1	; 0x800a01 <UPDI::nvmprog_key+0x7f70bd>
_Z8HV_Pulsev():
     544:	88 ee       	ldi	r24, 0xE8	; 232
     546:	93 e0       	ldi	r25, 0x03	; 3
     548:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <UPDI::nvmprog_key+0x7f6ec4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:298
  UPDI::SEND(UPDI::UPDI_NOP);
     54c:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <UPDI::nvmprog_key+0x7f6ec5>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:299
  UPDI_USART.BAUD = UPDI_BAUD_CALC;
     550:	80 e0       	ldi	r24, 0x00	; 0
     552:	e8 dd       	rcall	.-1072   	; 0x124 <UPDI::SEND(unsigned char)>
     554:	80 eb       	ldi	r24, 0xB0	; 176
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <UPDI::nvmprog_key+0x7f6ec4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:302
  UPDI_CONTROL |= _BV(UPDI::UPDI_ERHV_bp);
  UPDI_CONTROL &= ~_BV(UPDI::UPDI_CLKU_bp);
}
     55c:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <UPDI::nvmprog_key+0x7f6ec5>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.4/cores/megaAVR/api/delay_busywait.h:31
     560:	e3 9a       	sbi	0x1c, 3	; 28
     562:	e7 98       	cbi	0x1c, 7	; 28
     564:	08 95       	ret
     566:	0e 9a       	sbi	0x01, 6	; 1
delay_micros():
     568:	8f ec       	ldi	r24, 0xCF	; 207
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:294
    digitalWrite(HV8_PIN, LOW);
  }
  else {
    digitalWrite(HV12_PIN, HIGH);
    delay_micros(800);
    digitalWrite(HV12_PIN, LOW);
     56a:	97 e0       	ldi	r25, 0x07	; 7
     56c:	01 97       	sbiw	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:341

/*
 * UPDI制御開始
 */

bool UPDI::enter_updi (bool skip) {
     56e:	f1 f7       	brne	.-4      	; 0x56c <HV_Pulse()+0x62>
     570:	00 c0       	rjmp	.+0      	; 0x572 <HV_Pulse()+0x68>
     572:	00 00       	nop
_Z8HV_Pulsev():
     574:	0e 98       	cbi	0x01, 6	; 1
     576:	e4 cf       	rjmp	.-56     	; 0x540 <HV_Pulse()+0x36>

00000578 <UPDI::enter_updi(bool)>:
_ZN4UPDI10enter_updiEb():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:345
  static uint8_t set_ptr[] = { UPDI::UPDI_SYNCH, UPDI::UPDI_SIB_128 };
  uint8_t* _p = &JTAG2::packet.body[4];
  size_t _len = 16;
  bool hvol = SYS::get_vcc() >= 4250;
     578:	0f 93       	push	r16
     57a:	1f 93       	push	r17
     57c:	cf 93       	push	r28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:346
  if (!skip) {
     57e:	df 93       	push	r29
     580:	c8 2f       	mov	r28, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:348
    /* HV制御強制許可 */
    if (bit_is_set(UPDI_CONTROL, UPDI_FCHV_bp)) {
     582:	ca de       	rcall	.-620    	; 0x318 <SYS::get_vcc()>
     584:	8c 01       	movw	r16, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:349
      HV_Pulse();
     586:	c1 11       	cpse	r28, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:352

      /* send nvmprog_key */
      if (!UPDI::send_bytes(UPDI::nvmprog_key, sizeof(UPDI::nvmprog_key))) return false;
     588:	1d c0       	rjmp	.+58     	; 0x5c4 <UPDI::enter_updi(bool)+0x4c>
     58a:	e4 9b       	sbis	0x1c, 4	; 28
     58c:	36 c0       	rjmp	.+108    	; 0x5fa <UPDI::enter_updi(bool)+0x82>
     58e:	bd df       	rcall	.-134    	; 0x50a <HV_Pulse()>
     590:	6a e0       	ldi	r22, 0x0A	; 10
     592:	70 e0       	ldi	r23, 0x00	; 0
     594:	84 e4       	ldi	r24, 0x44	; 68
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:394
        UPDI_NVMCTRL |= _BV(UPDI::UPDI_GEN2_bp);
        NVM::nvm_flash_offset = 0x800000;
        break;
      }
      default : {
        return false;
     596:	99 e9       	ldi	r25, 0x99	; 153
     598:	dd dd       	rcall	.-1094   	; 0x154 <UPDI::send_bytes(unsigned char const*, unsigned int)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:355

      /* send nvmprog_key */
      if (!UPDI::send_bytes(UPDI::nvmprog_key, sizeof(UPDI::nvmprog_key))) return false;

      /* restart target : change mode */
      if (!UPDI::updi_reset(true) || !UPDI::updi_reset(false)) return false;
     59a:	81 11       	cpse	r24, r1
     59c:	02 c0       	rjmp	.+4      	; 0x5a2 <UPDI::enter_updi(bool)+0x2a>
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	63 c0       	rjmp	.+198    	; 0x668 <UPDI::enter_updi(bool)+0xf0>
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	f7 dd       	rcall	.-1042   	; 0x194 <UPDI::updi_reset(bool)>
     5a6:	88 23       	and	r24, r24
     5a8:	d1 f3       	breq	.-12     	; 0x59e <UPDI::enter_updi(bool)+0x26>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.4/cores/megaAVR/api/delay_busywait.h:40
  }
}

void delay_millis (uint32_t _ms) {
  if (F_CPU >= 1000000L) {
    __builtin_avr_delay_cycles((F_CPU / 1000L) * _ms);
     5aa:	80 e0       	ldi	r24, 0x00	; 0
     5ac:	f3 dd       	rcall	.-1050   	; 0x194 <UPDI::updi_reset(bool)>
     5ae:	88 23       	and	r24, r24
     5b0:	b1 f3       	breq	.-20     	; 0x59e <UPDI::enter_updi(bool)+0x26>
delay_millis():
     5b2:	2f e9       	ldi	r18, 0x9F	; 159
     5b4:	86 e8       	ldi	r24, 0x86	; 134
     5b6:	91 e0       	ldi	r25, 0x01	; 1
     5b8:	21 50       	subi	r18, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:363
      delay_millis(50);
    }
    else
      UPDI::BREAK();
  }
  if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_INFO_bp)) {
     5ba:	80 40       	sbci	r24, 0x00	; 0
     5bc:	90 40       	sbci	r25, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:364
    if (hvol && !UPDI::set_cs_asi_ctra(UPDI::UPDI_SET_UPDICLKSEL_8M)) return false;
     5be:	e1 f7       	brne	.-8      	; 0x5b8 <UPDI::enter_updi(bool)+0x40>
     5c0:	00 c0       	rjmp	.+0      	; 0x5c2 <UPDI::enter_updi(bool)+0x4a>
     5c2:	00 00       	nop
_ZN4UPDI10enter_updiEb():
     5c4:	e0 99       	sbic	0x1c, 0	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:224
  set_ptr[1] = UPDI::UPDI_STCS | code;
  set_ptr[2] = data;
  return UPDI::send_bytes(set_ptr, sizeof(set_ptr));
}
inline bool UPDI::set_cs_ctra (const uint8_t data) {
  return UPDI::set_cs_stat(UPDI::UPDI_CS_CTRLA, data);
     5c6:	4c c0       	rjmp	.+152    	; 0x660 <UPDI::enter_updi(bool)+0xe8>
     5c8:	0a 39       	cpi	r16, 0x9A	; 154
     5ca:	20 e1       	ldi	r18, 0x10	; 16
     5cc:	12 07       	cpc	r17, r18
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:365
    else
      UPDI::BREAK();
  }
  if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_INFO_bp)) {
    if (hvol && !UPDI::set_cs_asi_ctra(UPDI::UPDI_SET_UPDICLKSEL_8M)) return false;
    if (!UPDI::set_cs_ctra(UPDI::UPDI_SET_GTVAL_2)) return false;
     5ce:	b8 f4       	brcc	.+46     	; 0x5fe <UPDI::enter_updi(bool)+0x86>
set_cs_ctra():
     5d0:	66 e0       	ldi	r22, 0x06	; 6
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:366
    if (!UPDI::send_bytes(set_ptr, sizeof(set_ptr))) return false;
     5d2:	82 e0       	ldi	r24, 0x02	; 2
     5d4:	d6 dd       	rcall	.-1108   	; 0x182 <UPDI::set_cs_stat(unsigned char, unsigned char)>
_ZN4UPDI10enter_updiEb():
     5d6:	88 23       	and	r24, r24
     5d8:	11 f3       	breq	.-60     	; 0x59e <UPDI::enter_updi(bool)+0x26>
     5da:	62 e0       	ldi	r22, 0x02	; 2
     5dc:	70 e0       	ldi	r23, 0x00	; 0
     5de:	81 e2       	ldi	r24, 0x21	; 33
     5e0:	98 e3       	ldi	r25, 0x38	; 56
     5e2:	b8 dd       	rcall	.-1168   	; 0x154 <UPDI::send_bytes(unsigned char const*, unsigned int)>
     5e4:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:367
    while (_len--) *_p++ = UPDI::RECV();
     5e6:	d9 f2       	breq	.-74     	; 0x59e <UPDI::enter_updi(bool)+0x26>
     5e8:	cf e6       	ldi	r28, 0x6F	; 111
     5ea:	d8 e3       	ldi	r29, 0x38	; 56
     5ec:	88 e3       	ldi	r24, 0x38	; 56
     5ee:	cf 37       	cpi	r28, 0x7F	; 127
     5f0:	d8 07       	cpc	r29, r24
     5f2:	59 f0       	breq	.+22     	; 0x60a <UPDI::enter_updi(bool)+0x92>
     5f4:	8b dd       	rcall	.-1258   	; 0x10c <UPDI::RECV()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:361

      /* wait enable : chip erase mode success */
      delay_millis(50);
    }
    else
      UPDI::BREAK();
     5f6:	89 93       	st	Y+, r24
     5f8:	f9 cf       	rjmp	.-14     	; 0x5ec <UPDI::enter_updi(bool)+0x74>
     5fa:	11 de       	rcall	.-990    	; 0x21e <UPDI::BREAK()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:227
}
inline bool UPDI::set_cs_ctra (const uint8_t data) {
  return UPDI::set_cs_stat(UPDI::UPDI_CS_CTRLA, data);
}
inline bool UPDI::set_cs_asi_ctra (const uint8_t data) {
  return UPDI::set_cs_stat(UPDI::UPDI_CS_ASI_CTRLA, data);
     5fc:	e3 cf       	rjmp	.-58     	; 0x5c4 <UPDI::enter_updi(bool)+0x4c>
set_cs_asi_ctra():
     5fe:	62 e0       	ldi	r22, 0x02	; 2
     600:	89 e0       	ldi	r24, 0x09	; 9
     602:	bf dd       	rcall	.-1154   	; 0x182 <UPDI::set_cs_stat(unsigned char, unsigned char)>
_ZN4UPDI10enter_updiEb():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:364
    }
    else
      UPDI::BREAK();
  }
  if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_INFO_bp)) {
    if (hvol && !UPDI::set_cs_asi_ctra(UPDI::UPDI_SET_UPDICLKSEL_8M)) return false;
     604:	81 11       	cpse	r24, r1
     606:	e4 cf       	rjmp	.-56     	; 0x5d0 <UPDI::enter_updi(bool)+0x58>
     608:	ca cf       	rjmp	.-108    	; 0x59e <UPDI::enter_updi(bool)+0x26>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:368
    if (!UPDI::set_cs_ctra(UPDI::UPDI_SET_GTVAL_2)) return false;
    if (!UPDI::send_bytes(set_ptr, sizeof(set_ptr))) return false;
    while (_len--) *_p++ = UPDI::RECV();
    switch (JTAG2::packet.body[4]) {
     60a:	80 91 6f 38 	lds	r24, 0x386F	; 0x80386f <JTAG2::packet+0xc>
     60e:	81 34       	cpi	r24, 0x41	; 65
     610:	21 f0       	breq	.+8      	; 0x61a <UPDI::enter_updi(bool)+0xa2>
     612:	70 f4       	brcc	.+28     	; 0x630 <UPDI::enter_updi(bool)+0xb8>
     614:	80 32       	cpi	r24, 0x20	; 32
     616:	09 f0       	breq	.+2      	; 0x61a <UPDI::enter_updi(bool)+0xa2>
     618:	c2 cf       	rjmp	.-124    	; 0x59e <UPDI::enter_updi(bool)+0x26>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:385
      case ' ' :
      case 'A' : {              // 'AVR_Dx' series
        /* AVR Dx SIB = 'AVR     P:2D:1-3' */
        /* AVR Ex SIB = 'AVR     P:3D:1-3' */
        /* AVR DA SIB = '    AVR P:2D:1-3' (最初期ロット) */
        if (JTAG2::packet.body[14] == '3') {
     61a:	80 91 79 38 	lds	r24, 0x3879	; 0x803879 <JTAG2::packet+0x16>
     61e:	83 33       	cpi	r24, 0x33	; 51
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:387
          // 'AVR_Ex' series
          UPDI_NVMCTRL |= _BV(UPDI::UPDI_GEN3_bp);
     620:	09 f4       	brne	.+2      	; 0x624 <UPDI::enter_updi(bool)+0xac>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:389
        }
        UPDI_NVMCTRL |= _BV(UPDI::UPDI_GEN2_bp);
     622:	ef 9a       	sbi	0x1d, 7	; 29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:390
        NVM::nvm_flash_offset = 0x800000;
     624:	ee 9a       	sbi	0x1d, 6	; 29
     626:	80 e0       	ldi	r24, 0x00	; 0
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	a0 e8       	ldi	r26, 0x80	; 128
     62c:	b0 e0       	ldi	r27, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:368
  if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_INFO_bp)) {
    if (hvol && !UPDI::set_cs_asi_ctra(UPDI::UPDI_SET_UPDICLKSEL_8M)) return false;
    if (!UPDI::set_cs_ctra(UPDI::UPDI_SET_GTVAL_2)) return false;
    if (!UPDI::send_bytes(set_ptr, sizeof(set_ptr))) return false;
    while (_len--) *_p++ = UPDI::RECV();
    switch (JTAG2::packet.body[4]) {
     62e:	0f c0       	rjmp	.+30     	; 0x64e <UPDI::enter_updi(bool)+0xd6>
     630:	8d 36       	cpi	r24, 0x6D	; 109
     632:	41 f0       	breq	.+16     	; 0x644 <UPDI::enter_updi(bool)+0xcc>
     634:	84 37       	cpi	r24, 0x74	; 116
     636:	09 f0       	breq	.+2      	; 0x63a <UPDI::enter_updi(bool)+0xc2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:377
        NVM::nvm_flash_offset = 0x4000;
        break;
      }
      case 't' : {              // 'tinyAVR' series
        /* tinyAVR SIB = 'tinyAVR P:0D:1-3' */
        NVM::nvm_flash_offset = 0x8000;
     638:	b2 cf       	rjmp	.-156    	; 0x59e <UPDI::enter_updi(bool)+0x26>
     63a:	80 e0       	ldi	r24, 0x00	; 0
     63c:	90 e8       	ldi	r25, 0x80	; 128
     63e:	a0 e0       	ldi	r26, 0x00	; 0
     640:	b0 e0       	ldi	r27, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:371
    if (!UPDI::send_bytes(set_ptr, sizeof(set_ptr))) return false;
    while (_len--) *_p++ = UPDI::RECV();
    switch (JTAG2::packet.body[4]) {
      case 'm' : {              // 'megaAVR' series
        /* megaAVR SIB = 'megaAVR P:0D:1-3' */
        UPDI_NVMCTRL |= _BV(UPDI::UPDI_LOWF_bp);
     642:	05 c0       	rjmp	.+10     	; 0x64e <UPDI::enter_updi(bool)+0xd6>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:372
        NVM::nvm_flash_offset = 0x4000;
     644:	ed 9a       	sbi	0x1d, 5	; 29
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	90 e4       	ldi	r25, 0x40	; 64
     64a:	a0 e0       	ldi	r26, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:390
        if (JTAG2::packet.body[14] == '3') {
          // 'AVR_Ex' series
          UPDI_NVMCTRL |= _BV(UPDI::UPDI_GEN3_bp);
        }
        UPDI_NVMCTRL |= _BV(UPDI::UPDI_GEN2_bp);
        NVM::nvm_flash_offset = 0x800000;
     64c:	b0 e0       	ldi	r27, 0x00	; 0
     64e:	80 93 51 38 	sts	0x3851, r24	; 0x803851 <NVM::nvm_flash_offset>
     652:	90 93 52 38 	sts	0x3852, r25	; 0x803852 <NVM::nvm_flash_offset+0x1>
     656:	a0 93 53 38 	sts	0x3853, r26	; 0x803853 <NVM::nvm_flash_offset+0x2>
     65a:	b0 93 54 38 	sts	0x3854, r27	; 0x803854 <NVM::nvm_flash_offset+0x3>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:399
        return false;
      }
    }
    UPDI_CONTROL |= _BV(UPDI::UPDI_INFO_bp);
  }
  if (hvol && (UPDI::get_cs_asi_ctra() & UPDI::UPDI_SET_UPDICLKSEL_bm) 
     65e:	e0 9a       	sbi	0x1c, 0	; 28
     660:	0a 39       	cpi	r16, 0x9A	; 154
     662:	10 41       	sbci	r17, 0x10	; 16
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:404
                                      == UPDI::UPDI_SET_UPDICLKSEL_8M) {
    UPDI_CONTROL |= _BV(UPDI::UPDI_CLKU_bp);
    UPDI_USART.BAUD = UPDI_BAUD_CALC >> 1;
  }
  return true;
     664:	30 f4       	brcc	.+12     	; 0x672 <UPDI::enter_updi(bool)+0xfa>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:405
}
     666:	81 e0       	ldi	r24, 0x01	; 1
     668:	df 91       	pop	r29
     66a:	cf 91       	pop	r28
     66c:	1f 91       	pop	r17
     66e:	0f 91       	pop	r16
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:230
}
inline bool UPDI::set_cs_asi_ctra (const uint8_t data) {
  return UPDI::set_cs_stat(UPDI::UPDI_CS_ASI_CTRLA, data);
}
inline uint8_t UPDI::get_cs_asi_ctra (void) {
  return UPDI::get_cs_stat(UPDI::UPDI_CS_ASI_CTRLA);
     670:	08 95       	ret
get_cs_asi_ctra():
     672:	89 e0       	ldi	r24, 0x09	; 9
     674:	e5 dd       	rcall	.-1078   	; 0x240 <UPDI::get_cs_stat(unsigned char)>
_ZN4UPDI10enter_updiEb():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:399
        return false;
      }
    }
    UPDI_CONTROL |= _BV(UPDI::UPDI_INFO_bp);
  }
  if (hvol && (UPDI::get_cs_asi_ctra() & UPDI::UPDI_SET_UPDICLKSEL_bm) 
     676:	83 70       	andi	r24, 0x03	; 3
     678:	82 30       	cpi	r24, 0x02	; 2
     67a:	a9 f7       	brne	.-22     	; 0x666 <UPDI::enter_updi(bool)+0xee>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:401
                                      == UPDI::UPDI_SET_UPDICLKSEL_8M) {
    UPDI_CONTROL |= _BV(UPDI::UPDI_CLKU_bp);
     67c:	e7 9a       	sbi	0x1c, 7	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:402
    UPDI_USART.BAUD = UPDI_BAUD_CALC >> 1;
     67e:	88 e5       	ldi	r24, 0x58	; 88
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <UPDI::nvmprog_key+0x7f6ec4>
     686:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <UPDI::nvmprog_key+0x7f6ec5>
     68a:	ed cf       	rjmp	.-38     	; 0x666 <UPDI::enter_updi(bool)+0xee>

0000068c <UPDI::updi_activate()>:
_ZN4UPDI13updi_activateEv():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:434

/*
 * UPDI許認可
 */

bool UPDI::updi_activate (void) {
     68c:	cf 93       	push	r28
     68e:	df 93       	push	r29
     690:	1f 92       	push	r1
     692:	cd b7       	in	r28, 0x3d	; 61
     694:	de b7       	in	r29, 0x3e	; 62
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:435
  volatile uint8_t count = 3;
     696:	83 e0       	ldi	r24, 0x03	; 3
     698:	89 83       	std	Y+1, r24	; 0x01
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:436
  while (--count && bit_is_clear(UPDI_CONTROL, UPDI_PROG_bp)) {
     69a:	89 81       	ldd	r24, Y+1	; 0x01
     69c:	81 50       	subi	r24, 0x01	; 1
     69e:	89 83       	std	Y+1, r24	; 0x01
     6a0:	88 23       	and	r24, r24
     6a2:	91 f1       	breq	.+100    	; 0x708 <UPDI::updi_activate()+0x7c>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.4/cores/megaAVR/api/delay_busywait.h:40
     6a4:	e1 99       	sbic	0x1c, 1	; 28
     6a6:	30 c0       	rjmp	.+96     	; 0x708 <UPDI::updi_activate()+0x7c>
delay_millis():
     6a8:	2f e3       	ldi	r18, 0x3F	; 63
     6aa:	3d e0       	ldi	r19, 0x0D	; 13
     6ac:	83 e0       	ldi	r24, 0x03	; 3
     6ae:	21 50       	subi	r18, 0x01	; 1
     6b0:	30 40       	sbci	r19, 0x00	; 0
     6b2:	80 40       	sbci	r24, 0x00	; 0
     6b4:	e1 f7       	brne	.-8      	; 0x6ae <UPDI::updi_activate()+0x22>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:438
    delay_millis(100);
    if (setjmp(TIM::CONTEXT) == 0) {
     6b6:	00 c0       	rjmp	.+0      	; 0x6b8 <UPDI::updi_activate()+0x2c>
     6b8:	00 00       	nop
_ZN4UPDI13updi_activateEv():
     6ba:	88 e3       	ldi	r24, 0x38	; 56
     6bc:	98 e3       	ldi	r25, 0x38	; 56
     6be:	0e 94 56 0c 	call	0x18ac	; 0x18ac <setjmp>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     6c2:	89 2b       	or	r24, r25
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:128
 * タイムアウト制御
 */

void TIM::Timeout_Start (uint16_t _ms) {
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    TCB0_CNT = 0;
     6c4:	e1 f4       	brne	.+56     	; 0x6fe <UPDI::updi_activate()+0x72>
Timeout_Start():
     6c6:	8f b7       	in	r24, 0x3f	; 63
__iCliRetVal():
     6c8:	f8 94       	cli
Timeout_Start():
     6ca:	ea e8       	ldi	r30, 0x8A	; 138
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:129
    TCB0_CCMP = _ms >> 2;
     6cc:	fa e0       	ldi	r31, 0x0A	; 10
     6ce:	10 82       	st	Z, r1
     6d0:	11 82       	std	Z+1, r1	; 0x01
     6d2:	25 e2       	ldi	r18, 0x25	; 37
     6d4:	30 e0       	ldi	r19, 0x00	; 0
     6d6:	ec e8       	ldi	r30, 0x8C	; 140
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:130
    TCB0_INTCTRL = TCB_CAPT_bm;
     6d8:	fa e0       	ldi	r31, 0x0A	; 10
     6da:	20 83       	st	Z, r18
     6dc:	31 83       	std	Z+1, r19	; 0x01
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:131
    TCB0_INTFLAGS = TCB_CAPT_bm;
     6de:	21 e0       	ldi	r18, 0x01	; 1
     6e0:	e5 e8       	ldi	r30, 0x85	; 133
     6e2:	fa e0       	ldi	r31, 0x0A	; 10
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:132
    TCB0_CTRLA = TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
     6e4:	20 83       	st	Z, r18
     6e6:	e6 e8       	ldi	r30, 0x86	; 134
     6e8:	fa e0       	ldi	r31, 0x0A	; 10
     6ea:	20 83       	st	Z, r18
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     6ec:	2f e0       	ldi	r18, 0x0F	; 15
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:440
      TIM::Timeout_Start(150);
      UPDI::enter_updi(false) && UPDI::enter_prog();
     6ee:	e0 e8       	ldi	r30, 0x80	; 128
     6f0:	fa e0       	ldi	r31, 0x0A	; 10
     6f2:	20 83       	st	Z, r18
__iRestore():
     6f4:	8f bf       	out	0x3f, r24	; 63
_ZN4UPDI13updi_activateEv():
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	3f df       	rcall	.-386    	; 0x578 <UPDI::enter_updi(bool)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:442
    }
    TIM::Timeout_Stop();
     6fa:	81 11       	cpse	r24, r1
     6fc:	cf de       	rcall	.-610    	; 0x49c <UPDI::enter_prog()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:445

    /* 2周目以降は JPショートならHV制御強制を許可 */
    if (!digitalRead(JP_SENSE_PIN)) UPDI_CONTROL |= _BV(UPDI::UPDI_FCHV_bp);
     6fe:	f9 dd       	rcall	.-1038   	; 0x2f2 <TIM::Timeout_Stop()>
     700:	53 99       	sbic	0x0a, 3	; 10
     702:	cb cf       	rjmp	.-106    	; 0x69a <UPDI::updi_activate()+0xe>
     704:	e4 9a       	sbi	0x1c, 4	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:447
  }
  return bit_is_set(UPDI_CONTROL, UPDI_PROG_bp);
     706:	c9 cf       	rjmp	.-110    	; 0x69a <UPDI::updi_activate()+0xe>
     708:	8c b3       	in	r24, 0x1c	; 28
     70a:	86 95       	lsr	r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:448
}
     70c:	81 70       	andi	r24, 0x01	; 1
     70e:	0f 90       	pop	r0
     710:	df 91       	pop	r29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:307
  return UPDI_LASTL;
}

/* NVMCTRL v3 */
uint8_t NVM::nvm_wait_v3 (void) {
  while (UPDI::ld8(NVM::NVMCTRL_V3_REG_STATUS) & 3) delay_micros(50);
     712:	cf 91       	pop	r28
     714:	08 95       	ret

00000716 <NVM::nvm_wait_v3()>:
_ZN3NVM11nvm_wait_v3Ev():
     716:	66 e0       	ldi	r22, 0x06	; 6
     718:	70 e1       	ldi	r23, 0x10	; 16
     71a:	80 e0       	ldi	r24, 0x00	; 0
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	9d dd       	rcall	.-1222   	; 0x25a <UPDI::ld8(unsigned long)>
     720:	83 70       	andi	r24, 0x03	; 3
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.4/cores/megaAVR/api/delay_busywait.h:31
static __inline__ __attribute__((__always_inline__)) void delay_micros (uint32_t _us);
static __inline__ __attribute__((__always_inline__)) void delay_millis (uint32_t _ms);

void delay_micros (uint32_t _us) {
  if (F_CPU >= 1000000L) {
    __builtin_avr_delay_cycles((F_CPU / 1000000L) * _us);
     722:	29 f0       	breq	.+10     	; 0x72e <NVM::nvm_wait_v3()+0x18>
delay_micros():
     724:	86 ea       	ldi	r24, 0xA6	; 166
     726:	8a 95       	dec	r24
     728:	f1 f7       	brne	.-4      	; 0x726 <NVM::nvm_wait_v3()+0x10>
     72a:	00 c0       	rjmp	.+0      	; 0x72c <NVM::nvm_wait_v3()+0x16>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:308
  return UPDI_LASTL;
     72c:	f4 cf       	rjmp	.-24     	; 0x716 <NVM::nvm_wait_v3()>
_ZN3NVM11nvm_wait_v3Ev():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:309
}
     72e:	8e b3       	in	r24, 0x1e	; 30
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:334
  NVM::nvm_wait();
  return nvm_ctrl_change(nvmcmd);
}

/* NVMCTRL v3 */
bool NVM::nvm_ctrl_v3 (uint8_t nvmcmd) {
     730:	08 95       	ret

00000732 <NVM::nvm_ctrl_v3(unsigned char)>:
_ZN3NVM11nvm_ctrl_v3Eh():
     732:	cf 93       	push	r28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:335
  NVM::nvm_wait_v3();
     734:	c8 2f       	mov	r28, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:336
  return nvm_ctrl_change(nvmcmd);
     736:	ef df       	rcall	.-34     	; 0x716 <NVM::nvm_wait_v3()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:337
}
     738:	8c 2f       	mov	r24, r28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:336
}

/* NVMCTRL v3 */
bool NVM::nvm_ctrl_v3 (uint8_t nvmcmd) {
  NVM::nvm_wait_v3();
  return nvm_ctrl_change(nvmcmd);
     73a:	cf 91       	pop	r28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:525

  return NVM::nvm_ctrl_v2(NVM::NVM_V2_CMD_NOCMD);
}

/* NVMCTRL v3 */
bool NVM::write_flash_v3 (uint32_t start_addr, size_t byte_count) {
     73c:	15 ce       	rjmp	.-982    	; 0x368 <nvm_ctrl_change(unsigned char)>

0000073e <NVM::write_flash_v3(unsigned long, unsigned int)>:
_ZN3NVM14write_flash_v3Emj():
     73e:	cf 92       	push	r12
     740:	df 92       	push	r13
     742:	ef 92       	push	r14
     744:	ff 92       	push	r15
     746:	0f 93       	push	r16
     748:	1f 93       	push	r17
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:526
  byte_count >>= 1;
     74a:	cf 93       	push	r28
     74c:	df 93       	push	r29
     74e:	ea 01       	movw	r28, r20
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:527
  if (byte_count == 0 || byte_count > 256) return false;
     750:	d6 95       	lsr	r29
     752:	c7 95       	ror	r28
     754:	9e 01       	movw	r18, r28
     756:	21 50       	subi	r18, 0x01	; 1
     758:	31 09       	sbc	r19, r1
     75a:	2f 3f       	cpi	r18, 0xFF	; 255
     75c:	31 05       	cpc	r19, r1
     75e:	11 f0       	breq	.+4      	; 0x764 <NVM::write_flash_v3(unsigned long, unsigned int)+0x26>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:532

  /* チップ消去していない場合はセクター消去 */
  /* ただしページ境界先頭がアドレスされた場合に限る */
  if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_ERFM_bp)
  && ((uint16_t)start_addr & (NVM::flash_page_size - 1)) == 0) {
     760:	08 f0       	brcs	.+2      	; 0x764 <NVM::write_flash_v3(unsigned long, unsigned int)+0x26>
     762:	59 c0       	rjmp	.+178    	; 0x816 <__DATA_REGION_LENGTH__+0x16>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:537
    NVM::nvm_wait_v3();
    if (!UPDI::st8(start_addr, 0xFF)) return false;
    if (!NVM::nvm_ctrl_v3(NVM::NVM_V3_CMD_FLPER)) return false;
  }
  if (!NVM::nvm_ctrl_v3(NVM::NVM_V3_CMD_FLPBCLR)) return false;
     764:	6b 01       	movw	r12, r22
     766:	7c 01       	movw	r14, r24
     768:	e2 9b       	sbis	0x1c, 2	; 28
     76a:	40 c0       	rjmp	.+128    	; 0x7ec <NVM::write_flash_v3(unsigned long, unsigned int)+0xae>
     76c:	8f e0       	ldi	r24, 0x0F	; 15
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:540

  /* setting register pointer and enable RSD mode */
  _CAPS32(set_ptr[2])->dword = start_addr;
     76e:	e1 df       	rcall	.-62     	; 0x732 <NVM::nvm_ctrl_v3(unsigned char)>
     770:	88 23       	and	r24, r24
     772:	09 f4       	brne	.+2      	; 0x776 <NVM::write_flash_v3(unsigned long, unsigned int)+0x38>
     774:	50 c0       	rjmp	.+160    	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     776:	c0 92 32 38 	sts	0x3832, r12	; 0x803832 <NVM::set_ptr+0x2>
     77a:	d0 92 33 38 	sts	0x3833, r13	; 0x803833 <NVM::set_ptr+0x3>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:541
  set_repeat_rsd[5] = byte_count - 1;
     77e:	e0 92 34 38 	sts	0x3834, r14	; 0x803834 <NVM::set_ptr+0x4>
     782:	f0 92 35 38 	sts	0x3835, r15	; 0x803835 <NVM::set_ptr+0x5>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:542
  if (!UPDI::send_bytes(set_ptr, sizeof(set_ptr) - 1)) return false;
     786:	8c 2f       	mov	r24, r28
     788:	81 50       	subi	r24, 0x01	; 1
     78a:	80 93 28 38 	sts	0x3828, r24	; 0x803828 <NVM::set_repeat_rsd+0x5>
     78e:	65 e0       	ldi	r22, 0x05	; 5
     790:	70 e0       	ldi	r23, 0x00	; 0
     792:	80 e3       	ldi	r24, 0x30	; 48
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:543
  if (UPDI::UPDI_ACK != UPDI::RECV()) return false;
     794:	98 e3       	ldi	r25, 0x38	; 56
     796:	de dc       	rcall	.-1604   	; 0x154 <UPDI::send_bytes(unsigned char const*, unsigned int)>
     798:	88 23       	and	r24, r24
     79a:	09 f4       	brne	.+2      	; 0x79e <NVM::write_flash_v3(unsigned long, unsigned int)+0x60>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:544
  if (!UPDI::send_bytes(set_repeat_rsd, sizeof(set_repeat_rsd))) return false;
     79c:	3c c0       	rjmp	.+120    	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     79e:	b6 dc       	rcall	.-1684   	; 0x10c <UPDI::RECV()>
     7a0:	80 34       	cpi	r24, 0x40	; 64
     7a2:	09 f0       	breq	.+2      	; 0x7a6 <NVM::write_flash_v3(unsigned long, unsigned int)+0x68>
     7a4:	38 c0       	rjmp	.+112    	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     7a6:	68 e0       	ldi	r22, 0x08	; 8
     7a8:	70 e0       	ldi	r23, 0x00	; 0
     7aa:	83 e2       	ldi	r24, 0x23	; 35
     7ac:	98 e3       	ldi	r25, 0x38	; 56
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:549

  /* page buffer stored */
  uint8_t* p = &JTAG2::packet.body[10];
  do {
    UPDI::SEND(*p++);
     7ae:	d2 dc       	rcall	.-1628   	; 0x154 <UPDI::send_bytes(unsigned char const*, unsigned int)>
     7b0:	88 23       	and	r24, r24
     7b2:	89 f1       	breq	.+98     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     7b4:	03 e6       	ldi	r16, 0x63	; 99
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:550
    UPDI::SEND(*p++);
     7b6:	18 e3       	ldi	r17, 0x38	; 56
     7b8:	f8 01       	movw	r30, r16
     7ba:	82 89       	ldd	r24, Z+18	; 0x12
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:551
  } while (--byte_count);
     7bc:	b3 dc       	rcall	.-1690   	; 0x124 <UPDI::SEND(unsigned char)>
     7be:	f8 01       	movw	r30, r16
     7c0:	83 89       	ldd	r24, Z+19	; 0x13
     7c2:	b0 dc       	rcall	.-1696   	; 0x124 <UPDI::SEND(unsigned char)>
     7c4:	21 97       	sbiw	r28, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:224
  set_ptr[1] = UPDI::UPDI_STCS | code;
  set_ptr[2] = data;
  return UPDI::send_bytes(set_ptr, sizeof(set_ptr));
}
inline bool UPDI::set_cs_ctra (const uint8_t data) {
  return UPDI::set_cs_stat(UPDI::UPDI_CS_CTRLA, data);
     7c6:	0e 5f       	subi	r16, 0xFE	; 254
     7c8:	1f 4f       	sbci	r17, 0xFF	; 255
     7ca:	20 97       	sbiw	r28, 0x00	; 0
     7cc:	a9 f7       	brne	.-22     	; 0x7b8 <NVM::write_flash_v3(unsigned long, unsigned int)+0x7a>
set_cs_ctra():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:555
  // UPDI::guardtime();

  /* disable RSD mode */
  if (!UPDI::set_cs_ctra(UPDI::UPDI_SET_GTVAL_2)) return false;
     7ce:	66 e0       	ldi	r22, 0x06	; 6
     7d0:	82 e0       	ldi	r24, 0x02	; 2
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:558

  return NVM::nvm_ctrl_v3(NVM::NVM_V3_CMD_FLPW);
}
     7d2:	d7 dc       	rcall	.-1618   	; 0x182 <UPDI::set_cs_stat(unsigned char, unsigned char)>
_ZN3NVM14write_flash_v3Emj():
     7d4:	88 23       	and	r24, r24
     7d6:	f9 f0       	breq	.+62     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     7d8:	84 e0       	ldi	r24, 0x04	; 4
     7da:	df 91       	pop	r29
     7dc:	cf 91       	pop	r28
     7de:	1f 91       	pop	r17
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:557
  // UPDI::guardtime();

  /* disable RSD mode */
  if (!UPDI::set_cs_ctra(UPDI::UPDI_SET_GTVAL_2)) return false;

  return NVM::nvm_ctrl_v3(NVM::NVM_V3_CMD_FLPW);
     7e0:	0f 91       	pop	r16
     7e2:	ff 90       	pop	r15
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:532
  if (byte_count == 0 || byte_count > 256) return false;

  /* チップ消去していない場合はセクター消去 */
  /* ただしページ境界先頭がアドレスされた場合に限る */
  if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_ERFM_bp)
  && ((uint16_t)start_addr & (NVM::flash_page_size - 1)) == 0) {
     7e4:	ef 90       	pop	r14
     7e6:	df 90       	pop	r13
     7e8:	cf 90       	pop	r12
     7ea:	a3 cf       	rjmp	.-186    	; 0x732 <NVM::nvm_ctrl_v3(unsigned char)>
     7ec:	80 91 55 38 	lds	r24, 0x3855	; 0x803855 <NVM::flash_page_size>
     7f0:	90 91 56 38 	lds	r25, 0x3856	; 0x803856 <NVM::flash_page_size+0x1>
     7f4:	01 97       	sbiw	r24, 0x01	; 1
     7f6:	86 23       	and	r24, r22
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:533
    NVM::nvm_wait_v3();
     7f8:	9d 21       	and	r25, r13
     7fa:	89 2b       	or	r24, r25
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:534
    if (!UPDI::st8(start_addr, 0xFF)) return false;
     7fc:	09 f0       	breq	.+2      	; 0x800 <__DATA_REGION_LENGTH__>
     7fe:	b6 cf       	rjmp	.-148    	; 0x76c <NVM::write_flash_v3(unsigned long, unsigned int)+0x2e>
     800:	8a df       	rcall	.-236    	; 0x716 <NVM::nvm_wait_v3()>
     802:	4f ef       	ldi	r20, 0xFF	; 255
     804:	c7 01       	movw	r24, r14
     806:	b6 01       	movw	r22, r12
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:535
    if (!NVM::nvm_ctrl_v3(NVM::NVM_V3_CMD_FLPER)) return false;
     808:	ca dc       	rcall	.-1644   	; 0x19e <UPDI::st8(unsigned long, unsigned char)>
     80a:	88 23       	and	r24, r24
     80c:	21 f0       	breq	.+8      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     80e:	88 e0       	ldi	r24, 0x08	; 8
     810:	90 df       	rcall	.-224    	; 0x732 <NVM::nvm_ctrl_v3(unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:558

  /* disable RSD mode */
  if (!UPDI::set_cs_ctra(UPDI::UPDI_SET_GTVAL_2)) return false;

  return NVM::nvm_ctrl_v3(NVM::NVM_V3_CMD_FLPW);
}
     812:	81 11       	cpse	r24, r1
     814:	ab cf       	rjmp	.-170    	; 0x76c <NVM::write_flash_v3(unsigned long, unsigned int)+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	df 91       	pop	r29
     81a:	cf 91       	pop	r28
     81c:	1f 91       	pop	r17
     81e:	0f 91       	pop	r16
     820:	ff 90       	pop	r15
     822:	ef 90       	pop	r14
     824:	df 90       	pop	r13
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:301
 */

/* NVMCTRL v0 */
/* NVMCTRL v2 */
uint8_t NVM::nvm_wait (void) {
  while (UPDI::ld8(NVM::NVMCTRL_REG_STATUS) & 3) delay_micros(50);
     826:	cf 90       	pop	r12
     828:	08 95       	ret

0000082a <NVM::nvm_wait()>:
_ZN3NVM8nvm_waitEv():
     82a:	62 e0       	ldi	r22, 0x02	; 2
     82c:	70 e1       	ldi	r23, 0x10	; 16
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	13 dd       	rcall	.-1498   	; 0x25a <UPDI::ld8(unsigned long)>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.4/cores/megaAVR/api/delay_busywait.h:31
     834:	83 70       	andi	r24, 0x03	; 3
     836:	29 f0       	breq	.+10     	; 0x842 <NVM::nvm_wait()+0x18>
delay_micros():
     838:	86 ea       	ldi	r24, 0xA6	; 166
     83a:	8a 95       	dec	r24
     83c:	f1 f7       	brne	.-4      	; 0x83a <NVM::nvm_wait()+0x10>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:302
  return UPDI_LASTL;
     83e:	00 c0       	rjmp	.+0      	; 0x840 <NVM::nvm_wait()+0x16>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:303
}
     840:	f4 cf       	rjmp	.-24     	; 0x82a <NVM::nvm_wait()>
_ZN3NVM8nvm_waitEv():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:328
  if (NVM::NVM_V2_CMD_NOCMD != nvmcmd) return NVM::nvm_ctrl(nvmcmd);
  return true;
}

/* NVMCTRL v2 */
bool NVM::nvm_ctrl_v2 (uint8_t nvmcmd) {
     842:	8e b3       	in	r24, 0x1e	; 30
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:329
  NVM::nvm_wait();
     844:	08 95       	ret

00000846 <NVM::nvm_ctrl_v2(unsigned char)>:
_ZN3NVM11nvm_ctrl_v2Eh():
     846:	cf 93       	push	r28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:330
  return nvm_ctrl_change(nvmcmd);
     848:	c8 2f       	mov	r28, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:331
}
     84a:	ef df       	rcall	.-34     	; 0x82a <NVM::nvm_wait()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:330
}

/* NVMCTRL v2 */
bool NVM::nvm_ctrl_v2 (uint8_t nvmcmd) {
  NVM::nvm_wait();
  return nvm_ctrl_change(nvmcmd);
     84c:	8c 2f       	mov	r24, r28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:490
  if (!NVM::nvm_ctrl(NVM::NVM_CMD_ERWP)) return false;
  return NVM::nvm_wait() == 0;
}

/* NVMCTRL v2 */
bool NVM::write_flash_v2 (uint32_t start_addr, size_t byte_count) {
     84e:	cf 91       	pop	r28
     850:	8b cd       	rjmp	.-1258   	; 0x368 <nvm_ctrl_change(unsigned char)>

00000852 <NVM::write_flash_v2(unsigned long, unsigned int)>:
_ZN3NVM14write_flash_v2Emj():
     852:	cf 92       	push	r12
     854:	df 92       	push	r13
     856:	ef 92       	push	r14
     858:	ff 92       	push	r15
     85a:	0f 93       	push	r16
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:491
  byte_count >>= 1;
     85c:	1f 93       	push	r17
     85e:	cf 93       	push	r28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:492
  if (byte_count == 0 || byte_count > 256) return false;
     860:	df 93       	push	r29
     862:	ea 01       	movw	r28, r20
     864:	d6 95       	lsr	r29
     866:	c7 95       	ror	r28
     868:	9e 01       	movw	r18, r28
     86a:	21 50       	subi	r18, 0x01	; 1
     86c:	31 09       	sbc	r19, r1
     86e:	2f 3f       	cpi	r18, 0xFF	; 255
     870:	31 05       	cpc	r19, r1
     872:	11 f0       	breq	.+4      	; 0x878 <NVM::write_flash_v2(unsigned long, unsigned int)+0x26>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:497

  /* チップ消去していない場合はセクター消去 */
  /* ただしページ境界先頭がアドレスされた場合に限る */
  if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_ERFM_bp)
  && ((uint16_t)start_addr & (NVM::flash_page_size - 1)) == 0) {
     874:	08 f0       	brcs	.+2      	; 0x878 <NVM::write_flash_v2(unsigned long, unsigned int)+0x26>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:501
    if (!NVM::nvm_ctrl_v2(NVM::NVM_V2_CMD_FLPER)) return false;
    if (!UPDI::st8(start_addr, 0xFF)) return false;
  }
  if (!NVM::nvm_ctrl_v2(NVM::NVM_V2_CMD_FLWR)) return false;
     876:	58 c0       	rjmp	.+176    	; 0x928 <NVM::write_flash_v2(unsigned long, unsigned int)+0xd6>
     878:	6b 01       	movw	r12, r22
     87a:	7c 01       	movw	r14, r24
     87c:	e2 9b       	sbis	0x1c, 2	; 28
     87e:	40 c0       	rjmp	.+128    	; 0x900 <NVM::write_flash_v2(unsigned long, unsigned int)+0xae>
     880:	82 e0       	ldi	r24, 0x02	; 2
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:504

  /* setting register pointer and enable RSD mode */
  _CAPS32(set_ptr[2])->dword = start_addr;
     882:	e1 df       	rcall	.-62     	; 0x846 <NVM::nvm_ctrl_v2(unsigned char)>
     884:	88 23       	and	r24, r24
     886:	09 f4       	brne	.+2      	; 0x88a <NVM::write_flash_v2(unsigned long, unsigned int)+0x38>
     888:	4f c0       	rjmp	.+158    	; 0x928 <NVM::write_flash_v2(unsigned long, unsigned int)+0xd6>
     88a:	c0 92 32 38 	sts	0x3832, r12	; 0x803832 <NVM::set_ptr+0x2>
     88e:	d0 92 33 38 	sts	0x3833, r13	; 0x803833 <NVM::set_ptr+0x3>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:505
  set_repeat_rsd[5] = byte_count - 1;
     892:	e0 92 34 38 	sts	0x3834, r14	; 0x803834 <NVM::set_ptr+0x4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:506
  if (!UPDI::send_bytes(set_ptr, sizeof(set_ptr) - 1)) return false;
     896:	f0 92 35 38 	sts	0x3835, r15	; 0x803835 <NVM::set_ptr+0x5>
     89a:	8c 2f       	mov	r24, r28
     89c:	81 50       	subi	r24, 0x01	; 1
     89e:	80 93 28 38 	sts	0x3828, r24	; 0x803828 <NVM::set_repeat_rsd+0x5>
     8a2:	65 e0       	ldi	r22, 0x05	; 5
     8a4:	70 e0       	ldi	r23, 0x00	; 0
     8a6:	80 e3       	ldi	r24, 0x30	; 48
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:507
  if (UPDI::UPDI_ACK != UPDI::RECV()) return false;
     8a8:	98 e3       	ldi	r25, 0x38	; 56
     8aa:	54 dc       	rcall	.-1880   	; 0x154 <UPDI::send_bytes(unsigned char const*, unsigned int)>
     8ac:	88 23       	and	r24, r24
     8ae:	09 f4       	brne	.+2      	; 0x8b2 <NVM::write_flash_v2(unsigned long, unsigned int)+0x60>
     8b0:	3b c0       	rjmp	.+118    	; 0x928 <NVM::write_flash_v2(unsigned long, unsigned int)+0xd6>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:508
  if (!UPDI::send_bytes(set_repeat_rsd, sizeof(set_repeat_rsd))) return false;
     8b2:	2c dc       	rcall	.-1960   	; 0x10c <UPDI::RECV()>
     8b4:	80 34       	cpi	r24, 0x40	; 64
     8b6:	09 f0       	breq	.+2      	; 0x8ba <NVM::write_flash_v2(unsigned long, unsigned int)+0x68>
     8b8:	37 c0       	rjmp	.+110    	; 0x928 <NVM::write_flash_v2(unsigned long, unsigned int)+0xd6>
     8ba:	68 e0       	ldi	r22, 0x08	; 8
     8bc:	70 e0       	ldi	r23, 0x00	; 0
     8be:	83 e2       	ldi	r24, 0x23	; 35
     8c0:	98 e3       	ldi	r25, 0x38	; 56
     8c2:	48 dc       	rcall	.-1904   	; 0x154 <UPDI::send_bytes(unsigned char const*, unsigned int)>
     8c4:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:513

  /* page buffer stored */
  uint8_t* p = &JTAG2::packet.body[10];
  do {
    UPDI::SEND(*p++);
     8c6:	81 f1       	breq	.+96     	; 0x928 <NVM::write_flash_v2(unsigned long, unsigned int)+0xd6>
     8c8:	03 e6       	ldi	r16, 0x63	; 99
     8ca:	18 e3       	ldi	r17, 0x38	; 56
     8cc:	f8 01       	movw	r30, r16
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:514
    UPDI::SEND(*p++);
     8ce:	82 89       	ldd	r24, Z+18	; 0x12
     8d0:	29 dc       	rcall	.-1966   	; 0x124 <UPDI::SEND(unsigned char)>
     8d2:	f8 01       	movw	r30, r16
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:515
  } while (--byte_count);
     8d4:	83 89       	ldd	r24, Z+19	; 0x13
     8d6:	26 dc       	rcall	.-1972   	; 0x124 <UPDI::SEND(unsigned char)>
     8d8:	21 97       	sbiw	r28, 0x01	; 1
     8da:	0e 5f       	subi	r16, 0xFE	; 254
     8dc:	1f 4f       	sbci	r17, 0xFF	; 255
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:224
     8de:	20 97       	sbiw	r28, 0x00	; 0
     8e0:	a9 f7       	brne	.-22     	; 0x8cc <NVM::write_flash_v2(unsigned long, unsigned int)+0x7a>
set_cs_ctra():
     8e2:	66 e0       	ldi	r22, 0x06	; 6
     8e4:	82 e0       	ldi	r24, 0x02	; 2
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:519
  // UPDI::guardtime();

  /* disable RSD mode */
  if (!UPDI::set_cs_ctra(UPDI::UPDI_SET_GTVAL_2)) return false;
     8e6:	4d dc       	rcall	.-1894   	; 0x182 <UPDI::set_cs_stat(unsigned char, unsigned char)>
_ZN3NVM14write_flash_v2Emj():
     8e8:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:521

  return NVM::nvm_ctrl_v2(NVM::NVM_V2_CMD_NOCMD);
     8ea:	f1 f0       	breq	.+60     	; 0x928 <NVM::write_flash_v2(unsigned long, unsigned int)+0xd6>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:522
}
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	df 91       	pop	r29
     8f0:	cf 91       	pop	r28
     8f2:	1f 91       	pop	r17
     8f4:	0f 91       	pop	r16
     8f6:	ff 90       	pop	r15
     8f8:	ef 90       	pop	r14
     8fa:	df 90       	pop	r13
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:521
  // UPDI::guardtime();

  /* disable RSD mode */
  if (!UPDI::set_cs_ctra(UPDI::UPDI_SET_GTVAL_2)) return false;

  return NVM::nvm_ctrl_v2(NVM::NVM_V2_CMD_NOCMD);
     8fc:	cf 90       	pop	r12
     8fe:	a3 cf       	rjmp	.-186    	; 0x846 <NVM::nvm_ctrl_v2(unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:497
  if (byte_count == 0 || byte_count > 256) return false;

  /* チップ消去していない場合はセクター消去 */
  /* ただしページ境界先頭がアドレスされた場合に限る */
  if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_ERFM_bp)
  && ((uint16_t)start_addr & (NVM::flash_page_size - 1)) == 0) {
     900:	80 91 55 38 	lds	r24, 0x3855	; 0x803855 <NVM::flash_page_size>
     904:	90 91 56 38 	lds	r25, 0x3856	; 0x803856 <NVM::flash_page_size+0x1>
     908:	01 97       	sbiw	r24, 0x01	; 1
     90a:	86 23       	and	r24, r22
     90c:	9d 21       	and	r25, r13
     90e:	89 2b       	or	r24, r25
     910:	09 f0       	breq	.+2      	; 0x914 <NVM::write_flash_v2(unsigned long, unsigned int)+0xc2>
     912:	b6 cf       	rjmp	.-148    	; 0x880 <NVM::write_flash_v2(unsigned long, unsigned int)+0x2e>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:498
    if (!NVM::nvm_ctrl_v2(NVM::NVM_V2_CMD_FLPER)) return false;
     914:	88 e0       	ldi	r24, 0x08	; 8
     916:	97 df       	rcall	.-210    	; 0x846 <NVM::nvm_ctrl_v2(unsigned char)>
     918:	88 23       	and	r24, r24
     91a:	31 f0       	breq	.+12     	; 0x928 <NVM::write_flash_v2(unsigned long, unsigned int)+0xd6>
     91c:	4f ef       	ldi	r20, 0xFF	; 255
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:499
    if (!UPDI::st8(start_addr, 0xFF)) return false;
     91e:	c7 01       	movw	r24, r14
     920:	b6 01       	movw	r22, r12
     922:	3d dc       	rcall	.-1926   	; 0x19e <UPDI::st8(unsigned long, unsigned char)>
     924:	81 11       	cpse	r24, r1
     926:	ac cf       	rjmp	.-168    	; 0x880 <NVM::write_flash_v2(unsigned long, unsigned int)+0x2e>
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	df 91       	pop	r29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:522

  /* disable RSD mode */
  if (!UPDI::set_cs_ctra(UPDI::UPDI_SET_GTVAL_2)) return false;

  return NVM::nvm_ctrl_v2(NVM::NVM_V2_CMD_NOCMD);
}
     92c:	cf 91       	pop	r28
     92e:	1f 91       	pop	r17
     930:	0f 91       	pop	r16
     932:	ff 90       	pop	r15
     934:	ef 90       	pop	r14
     936:	df 90       	pop	r13
     938:	cf 90       	pop	r12
     93a:	08 95       	ret

0000093c <UPDI::runtime(unsigned char)>:
_ZN4UPDI7runtimeEh():
     93c:	bf 92       	push	r11
     93e:	cf 92       	push	r12
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:454

/*
 * UPDI制御プロセス
 */

bool UPDI::runtime (uint8_t updi_cmd) {
     940:	df 92       	push	r13
     942:	ef 92       	push	r14
     944:	ff 92       	push	r15
     946:	0f 93       	push	r16
     948:	1f 93       	push	r17
     94a:	cf 93       	push	r28
     94c:	df 93       	push	r29
     94e:	cd b7       	in	r28, 0x3d	; 61
     950:	de b7       	in	r29, 0x3e	; 62
     952:	26 97       	sbiw	r28, 0x06	; 6
     954:	cd bf       	out	0x3d, r28	; 61
     956:	de bf       	out	0x3e, r29	; 62
     958:	8e 83       	std	Y+6, r24	; 0x06
     95a:	1d 82       	std	Y+5, r1	; 0x05
     95c:	88 e3       	ldi	r24, 0x38	; 56
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:455
  volatile bool _result = false;
     95e:	98 e3       	ldi	r25, 0x38	; 56
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:457
  uint16_t limit = 4000;
  if (setjmp(TIM::CONTEXT) == 0) {
     960:	a5 d7       	rcall	.+3914   	; 0x18ac <setjmp>
     962:	89 2b       	or	r24, r25
     964:	09 f0       	breq	.+2      	; 0x968 <UPDI::runtime(unsigned char)+0x2c>
     966:	05 c1       	rjmp	.+522    	; 0xb72 <UPDI::runtime(unsigned char)+0x236>
Timeout_Start():
     968:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
     96a:	f8 94       	cli
Timeout_Start():
     96c:	10 92 8a 0a 	sts	0x0A8A, r1	; 0x800a8a <UPDI::nvmprog_key+0x7f7146>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     970:	10 92 8b 0a 	sts	0x0A8B, r1	; 0x800a8b <UPDI::nvmprog_key+0x7f7147>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:128
 * タイムアウト制御
 */

void TIM::Timeout_Start (uint16_t _ms) {
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    TCB0_CNT = 0;
     974:	28 ee       	ldi	r18, 0xE8	; 232
     976:	33 e0       	ldi	r19, 0x03	; 3
     978:	20 93 8c 0a 	sts	0x0A8C, r18	; 0x800a8c <UPDI::nvmprog_key+0x7f7148>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:129
    TCB0_CCMP = _ms >> 2;
     97c:	30 93 8d 0a 	sts	0x0A8D, r19	; 0x800a8d <UPDI::nvmprog_key+0x7f7149>
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	80 93 85 0a 	sts	0x0A85, r24	; 0x800a85 <UPDI::nvmprog_key+0x7f7141>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:130
    TCB0_INTCTRL = TCB_CAPT_bm;
     986:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <UPDI::nvmprog_key+0x7f7142>
     98a:	8f e0       	ldi	r24, 0x0F	; 15
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:131
    TCB0_INTFLAGS = TCB_CAPT_bm;
     98c:	80 93 80 0a 	sts	0x0A80, r24	; 0x800a80 <UPDI::nvmprog_key+0x7f713c>
__iRestore():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:132
    TCB0_CTRLA = TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
     990:	9f bf       	out	0x3f, r25	; 63
_ZN4UPDI7runtimeEh():
     992:	8e 81       	ldd	r24, Y+6	; 0x06
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     994:	83 30       	cpi	r24, 0x03	; 3
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:459
    TIM::Timeout_Start(limit);
    switch (updi_cmd) {
     996:	09 f4       	brne	.+2      	; 0x99a <UPDI::runtime(unsigned char)+0x5e>
     998:	97 c3       	rjmp	.+1838   	; 0x10c8 <UPDI::runtime(unsigned char)+0x78c>
     99a:	84 30       	cpi	r24, 0x04	; 4
     99c:	09 f4       	brne	.+2      	; 0x9a0 <UPDI::runtime(unsigned char)+0x64>
     99e:	dc c3       	rjmp	.+1976   	; 0x1158 <UPDI::runtime(unsigned char)+0x81c>
     9a0:	82 30       	cpi	r24, 0x02	; 2
     9a2:	09 f4       	brne	.+2      	; 0x9a6 <UPDI::runtime(unsigned char)+0x6a>
     9a4:	ae c0       	rjmp	.+348    	; 0xb02 <UPDI::runtime(unsigned char)+0x1c6>
read_memory():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:50
/*
 * メモリ読込中核
 */

bool NVM::read_memory (void) {
  uint8_t  mem_type   =         JTAG2::packet.body[1];
     9a6:	e3 e6       	ldi	r30, 0x63	; 99
     9a8:	f8 e3       	ldi	r31, 0x38	; 56
     9aa:	81 85       	ldd	r24, Z+9	; 0x09
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:51
  size_t   byte_count = _CAPS16(JTAG2::packet.body[2])->word;
     9ac:	02 85       	ldd	r16, Z+10	; 0x0a
     9ae:	13 85       	ldd	r17, Z+11	; 0x0b
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:52
  uint32_t start_addr = _CAPS32(JTAG2::packet.body[6])->dword;
     9b0:	46 85       	ldd	r20, Z+14	; 0x0e
     9b2:	57 85       	ldd	r21, Z+15	; 0x0f
     9b4:	60 89       	ldd	r22, Z+16	; 0x10
     9b6:	71 89       	ldd	r23, Z+17	; 0x11
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:53
  JTAG2::packet.body[0] = JTAG2::RSP_MEMORY;
     9b8:	92 e8       	ldi	r25, 0x82	; 130
     9ba:	90 87       	std	Z+8, r25	; 0x08
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:54
  JTAG2::packet.size_word[0] = byte_count + 1;
     9bc:	98 01       	movw	r18, r16
     9be:	2f 5f       	subi	r18, 0xFF	; 255
     9c0:	3f 4f       	sbci	r19, 0xFF	; 255
     9c2:	23 83       	std	Z+3, r18	; 0x03
     9c4:	34 83       	std	Z+4, r19	; 0x04
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:58
  /* 奇数量なら絶対アドレス（データ長は常に1） */
  /* 偶数量なら間接アドレス指定 */
  /* Flash領域は常に偶数量 */
  if (byte_count >= 2) {
     9c6:	02 30       	cpi	r16, 0x02	; 2
     9c8:	11 05       	cpc	r17, r1
     9ca:	08 f4       	brcc	.+2      	; 0x9ce <UPDI::runtime(unsigned char)+0x92>
     9cc:	46 c0       	rjmp	.+140    	; 0xa5a <UPDI::runtime(unsigned char)+0x11e>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:59
    switch (mem_type) {
     9ce:	80 3c       	cpi	r24, 0xC0	; 192
     9d0:	09 f4       	brne	.+2      	; 0x9d4 <UPDI::runtime(unsigned char)+0x98>
     9d2:	5c c0       	rjmp	.+184    	; 0xa8c <UPDI::runtime(unsigned char)+0x150>
     9d4:	48 f4       	brcc	.+18     	; 0x9e8 <UPDI::runtime(unsigned char)+0xac>
     9d6:	82 32       	cpi	r24, 0x22	; 34
     9d8:	09 f4       	brne	.+2      	; 0x9dc <UPDI::runtime(unsigned char)+0xa0>
     9da:	65 c0       	rjmp	.+202    	; 0xaa6 <UPDI::runtime(unsigned char)+0x16a>
     9dc:	18 f0       	brcs	.+6      	; 0x9e4 <UPDI::runtime(unsigned char)+0xa8>
     9de:	82 5b       	subi	r24, 0xB2	; 178
     9e0:	84 30       	cpi	r24, 0x04	; 4
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:316
bool UPDI::chip_erase (void) {
  /* Send HV Pulse */
  if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) HV_Pulse();

  /* send nvmprog_key */
  if (!UPDI::send_bytes(UPDI::nvmprog_key, sizeof(UPDI::nvmprog_key))) return false;
     9e2:	d8 f1       	brcs	.+118    	; 0xa5a <UPDI::runtime(unsigned char)+0x11e>
_ZN4UPDI7runtimeEh():
     9e4:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:59
     9e6:	33 c0       	rjmp	.+102    	; 0xa4e <UPDI::runtime(unsigned char)+0x112>
read_memory():
     9e8:	84 3c       	cpi	r24, 0xC4	; 196
     9ea:	09 f4       	brne	.+2      	; 0x9ee <UPDI::runtime(unsigned char)+0xb2>
     9ec:	5c c0       	rjmp	.+184    	; 0xaa6 <UPDI::runtime(unsigned char)+0x16a>
     9ee:	88 f5       	brcc	.+98     	; 0xa52 <UPDI::runtime(unsigned char)+0x116>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:67
      case JTAG2::MTYPE_XMEGA_FLASH : {   // 0xC0
        start_addr -= NVM::nvm_flash_offset;
      }
      /* Flash 領域 */
      case JTAG2::MTYPE_BOOT_FLASH : {    // 0xC1
        start_addr += NVM::nvm_flash_offset;
     9f0:	81 3c       	cpi	r24, 0xC1	; 193
     9f2:	c1 f7       	brne	.-16     	; 0x9e4 <UPDI::runtime(unsigned char)+0xa8>
     9f4:	80 91 51 38 	lds	r24, 0x3851	; 0x803851 <NVM::nvm_flash_offset>
     9f8:	90 91 52 38 	lds	r25, 0x3852	; 0x803852 <NVM::nvm_flash_offset+0x1>
     9fc:	a0 91 53 38 	lds	r26, 0x3853	; 0x803853 <NVM::nvm_flash_offset+0x2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:252
/*
 * Flash領域ワード読込
 */

bool NVM::read_flash (uint32_t start_addr, size_t byte_count) {
  byte_count >>= 1;
     a00:	b0 91 54 38 	lds	r27, 0x3854	; 0x803854 <NVM::nvm_flash_offset+0x3>
read_flash():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:253
  if (byte_count == 0 || byte_count > 256) return false;
     a04:	16 95       	lsr	r17
     a06:	07 95       	ror	r16
     a08:	98 01       	movw	r18, r16
     a0a:	21 50       	subi	r18, 0x01	; 1
     a0c:	31 09       	sbc	r19, r1
     a0e:	2f 3f       	cpi	r18, 0xFF	; 255
     a10:	31 05       	cpc	r19, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:67
      case JTAG2::MTYPE_XMEGA_FLASH : {   // 0xC0
        start_addr -= NVM::nvm_flash_offset;
      }
      /* Flash 領域 */
      case JTAG2::MTYPE_BOOT_FLASH : {    // 0xC1
        start_addr += NVM::nvm_flash_offset;
     a12:	09 f0       	breq	.+2      	; 0xa16 <UPDI::runtime(unsigned char)+0xda>
     a14:	38 f7       	brcc	.-50     	; 0x9e4 <UPDI::runtime(unsigned char)+0xa8>
read_memory():
     a16:	48 0f       	add	r20, r24
     a18:	59 1f       	adc	r21, r25
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:255

bool NVM::read_flash (uint32_t start_addr, size_t byte_count) {
  byte_count >>= 1;
  if (byte_count == 0 || byte_count > 256) return false;
  uint8_t* p = &JTAG2::packet.body[1];
  if (!UPDI::send_repeat_header(
     a1a:	6a 1f       	adc	r22, r26
     a1c:	7b 1f       	adc	r23, r27
read_flash():
     a1e:	98 01       	movw	r18, r16
     a20:	81 e2       	ldi	r24, 0x21	; 33
     a22:	de db       	rcall	.-2116   	; 0x1e0 <UPDI::send_repeat_header(unsigned char, unsigned long, unsigned int)>
     a24:	88 23       	and	r24, r24
     a26:	f1 f2       	breq	.-68     	; 0x9e4 <UPDI::runtime(unsigned char)+0xa8>
     a28:	73 e6       	ldi	r23, 0x63	; 99
     a2a:	e7 2e       	mov	r14, r23
     a2c:	78 e3       	ldi	r23, 0x38	; 56
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:261
    (UPDI::UPDI_LD | UPDI::UPDI_DATA2),
    start_addr,
    byte_count
  )) return false;
  do {
    *p++ = UPDI::RECV();
     a2e:	f7 2e       	mov	r15, r23
     a30:	6d db       	rcall	.-2342   	; 0x10c <UPDI::RECV()>
     a32:	f7 01       	movw	r30, r14
     a34:	81 87       	std	Z+9, r24	; 0x09
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:262
    *p++ = UPDI::RECV();
     a36:	6a db       	rcall	.-2348   	; 0x10c <UPDI::RECV()>
     a38:	f7 01       	movw	r30, r14
     a3a:	82 87       	std	Z+10, r24	; 0x0a
     a3c:	01 50       	subi	r16, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:263
  } while (--byte_count);
     a3e:	11 09       	sbc	r17, r1
     a40:	f2 e0       	ldi	r31, 0x02	; 2
     a42:	ef 0e       	add	r14, r31
     a44:	f1 1c       	adc	r15, r1
     a46:	01 15       	cp	r16, r1
     a48:	11 05       	cpc	r17, r1
     a4a:	91 f7       	brne	.-28     	; 0xa30 <UPDI::runtime(unsigned char)+0xf4>
read_userrow_dummy():
     a4c:	81 e0       	ldi	r24, 0x01	; 1
_ZN4UPDI7runtimeEh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:290
bool NVM::read_userrow_dummy (size_t byte_count) {
  if (byte_count == 0 || byte_count > 256) return false;
  uint8_t* p = &JTAG2::packet.body[1];
  uint8_t* q = &JTAG2::packet.body[266];
  do { *p++ = *q++; } while (--byte_count);
  UPDI_CONTROL &= ~_BV(UPDI::UPDI_URWR_bp);
     a4e:	8d 83       	std	Y+5, r24	; 0x05
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:484
          _result = UPDI::chip_erase();
        }
        break;
      }
      case UPDI::UPDI_CMD_GO : {
        _result = UPDI::Target_Reset(true) && UPDI::Target_Reset(false);
     a50:	90 c0       	rjmp	.+288    	; 0xb72 <UPDI::runtime(unsigned char)+0x236>
read_memory():
     a52:	85 3c       	cpi	r24, 0xC5	; 197
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:59
  JTAG2::packet.size_word[0] = byte_count + 1;
  /* 奇数量なら絶対アドレス（データ長は常に1） */
  /* 偶数量なら間接アドレス指定 */
  /* Flash領域は常に偶数量 */
  if (byte_count >= 2) {
    switch (mem_type) {
     a54:	a9 f1       	breq	.+106    	; 0xac0 <UPDI::runtime(unsigned char)+0x184>
     a56:	86 3c       	cpi	r24, 0xC6	; 198
     a58:	29 f6       	brne	.-118    	; 0x9e4 <UPDI::runtime(unsigned char)+0xa8>
read_data():
     a5a:	c8 01       	movw	r24, r16
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:272
/*
 * データ領域バイト読込
 */

bool NVM::read_data (uint32_t start_addr, size_t byte_count) {
  if (byte_count == 0 || byte_count > 256) return false;
     a5c:	01 97       	sbiw	r24, 0x01	; 1
     a5e:	8f 3f       	cpi	r24, 0xFF	; 255
     a60:	91 05       	cpc	r25, r1
     a62:	11 f0       	breq	.+4      	; 0xa68 <UPDI::runtime(unsigned char)+0x12c>
     a64:	08 f0       	brcs	.+2      	; 0xa68 <UPDI::runtime(unsigned char)+0x12c>
     a66:	be cf       	rjmp	.-132    	; 0x9e4 <UPDI::runtime(unsigned char)+0xa8>
     a68:	98 01       	movw	r18, r16
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:274
  uint8_t* p = &JTAG2::packet.body[1];
  if (!UPDI::send_repeat_header(
     a6a:	80 e2       	ldi	r24, 0x20	; 32
     a6c:	b9 db       	rcall	.-2190   	; 0x1e0 <UPDI::send_repeat_header(unsigned char, unsigned long, unsigned int)>
     a6e:	88 23       	and	r24, r24
     a70:	09 f4       	brne	.+2      	; 0xa74 <UPDI::runtime(unsigned char)+0x138>
     a72:	b8 cf       	rjmp	.-144    	; 0x9e4 <UPDI::runtime(unsigned char)+0xa8>
     a74:	6c e6       	ldi	r22, 0x6C	; 108
     a76:	e6 2e       	mov	r14, r22
     a78:	68 e3       	ldi	r22, 0x38	; 56
     a7a:	f6 2e       	mov	r15, r22
     a7c:	47 db       	rcall	.-2418   	; 0x10c <UPDI::RECV()>
     a7e:	f7 01       	movw	r30, r14
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:277
    (UPDI::UPDI_LD | UPDI::UPDI_DATA1),
    start_addr, byte_count)) return false;
  do { *p++ = UPDI::RECV(); } while (--byte_count);
     a80:	81 93       	st	Z+, r24
     a82:	7f 01       	movw	r14, r30
     a84:	01 50       	subi	r16, 0x01	; 1
     a86:	11 09       	sbc	r17, r1
     a88:	c9 f7       	brne	.-14     	; 0xa7c <UPDI::runtime(unsigned char)+0x140>
     a8a:	e0 cf       	rjmp	.-64     	; 0xa4c <UPDI::runtime(unsigned char)+0x110>
read_memory():
     a8c:	80 91 51 38 	lds	r24, 0x3851	; 0x803851 <NVM::nvm_flash_offset>
     a90:	90 91 52 38 	lds	r25, 0x3852	; 0x803852 <NVM::nvm_flash_offset+0x1>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:63
  if (byte_count >= 2) {
    switch (mem_type) {
      /* Data 領域 */
      /* これは常に絶対アドレス */
      case JTAG2::MTYPE_XMEGA_FLASH : {   // 0xC0
        start_addr -= NVM::nvm_flash_offset;
     a94:	a0 91 53 38 	lds	r26, 0x3853	; 0x803853 <NVM::nvm_flash_offset+0x2>
     a98:	b0 91 54 38 	lds	r27, 0x3854	; 0x803854 <NVM::nvm_flash_offset+0x3>
     a9c:	48 1b       	sub	r20, r24
     a9e:	59 0b       	sbc	r21, r25
     aa0:	6a 0b       	sbc	r22, r26
     aa2:	7b 0b       	sbc	r23, r27
     aa4:	a7 cf       	rjmp	.-178    	; 0x9f4 <UPDI::runtime(unsigned char)+0xb8>
     aa6:	80 91 5f 38 	lds	r24, 0x385F	; 0x80385f <NVM::nvm_eeprom_offset>
     aaa:	90 91 60 38 	lds	r25, 0x3860	; 0x803860 <NVM::nvm_eeprom_offset+0x1>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:73
        return NVM::read_flash(start_addr, byte_count);
      }
      /* EEPROM 領域 */
      case JTAG2::MTYPE_EEPROM :          // 0x22
      case JTAG2::MTYPE_EEPROM_XMEGA : {  // 0xC4
        start_addr += NVM::nvm_eeprom_offset;
     aae:	a0 91 61 38 	lds	r26, 0x3861	; 0x803861 <NVM::nvm_eeprom_offset+0x2>
     ab2:	b0 91 62 38 	lds	r27, 0x3862	; 0x803862 <NVM::nvm_eeprom_offset+0x3>
     ab6:	48 0f       	add	r20, r24
     ab8:	59 1f       	adc	r21, r25
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:83

        /* デバイス施錠されている場合の特殊書込直後 */
        if (bit_is_set(UPDI_CONTROL, UPDI::UPDI_URWR_bp))
          return NVM::read_userrow_dummy(byte_count);

        start_addr += NVM::nvm_user_sig_offset;
     aba:	6a 1f       	adc	r22, r26
     abc:	7b 1f       	adc	r23, r27
     abe:	cd cf       	rjmp	.-102    	; 0xa5a <UPDI::runtime(unsigned char)+0x11e>
     ac0:	e5 9b       	sbis	0x1c, 5	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:80
      }
      /* USERROW/USERSIG */
      case JTAG2::MTYPE_USERSIG : {       // 0xC5

        /* デバイス施錠されている場合の特殊書込直後 */
        if (bit_is_set(UPDI_CONTROL, UPDI::UPDI_URWR_bp))
     ac2:	16 c0       	rjmp	.+44     	; 0xaf0 <UPDI::runtime(unsigned char)+0x1b4>
read_userrow_dummy():
     ac4:	c8 01       	movw	r24, r16
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:286
/*
 * 施錠デバイスの USERROW ダミー応答
 */

bool NVM::read_userrow_dummy (size_t byte_count) {
  if (byte_count == 0 || byte_count > 256) return false;
     ac6:	01 97       	sbiw	r24, 0x01	; 1
     ac8:	8f 3f       	cpi	r24, 0xFF	; 255
     aca:	91 05       	cpc	r25, r1
     acc:	11 f0       	breq	.+4      	; 0xad2 <UPDI::runtime(unsigned char)+0x196>
     ace:	08 f0       	brcs	.+2      	; 0xad2 <UPDI::runtime(unsigned char)+0x196>
     ad0:	89 cf       	rjmp	.-238    	; 0x9e4 <UPDI::runtime(unsigned char)+0xa8>
     ad2:	e3 e6       	ldi	r30, 0x63	; 99
     ad4:	f8 e3       	ldi	r31, 0x38	; 56
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:289
  uint8_t* p = &JTAG2::packet.body[1];
  uint8_t* q = &JTAG2::packet.body[266];
  do { *p++ = *q++; } while (--byte_count);
     ad6:	0d 59       	subi	r16, 0x9D	; 157
     ad8:	17 4c       	sbci	r17, 0xC7	; 199
     ada:	df 01       	movw	r26, r30
     adc:	ae 5e       	subi	r26, 0xEE	; 238
     ade:	be 4f       	sbci	r27, 0xFE	; 254
     ae0:	8c 91       	ld	r24, X
     ae2:	81 87       	std	Z+9, r24	; 0x09
     ae4:	31 96       	adiw	r30, 0x01	; 1
     ae6:	e0 17       	cp	r30, r16
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:290
  UPDI_CONTROL &= ~_BV(UPDI::UPDI_URWR_bp);
     ae8:	f1 07       	cpc	r31, r17
     aea:	b9 f7       	brne	.-18     	; 0xada <UPDI::runtime(unsigned char)+0x19e>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:83

        /* デバイス施錠されている場合の特殊書込直後 */
        if (bit_is_set(UPDI_CONTROL, UPDI::UPDI_URWR_bp))
          return NVM::read_userrow_dummy(byte_count);

        start_addr += NVM::nvm_user_sig_offset;
     aec:	e5 98       	cbi	0x1c, 5	; 28
     aee:	ae cf       	rjmp	.-164    	; 0xa4c <UPDI::runtime(unsigned char)+0x110>
read_memory():
     af0:	80 91 5b 38 	lds	r24, 0x385B	; 0x80385b <NVM::nvm_user_sig_offset>
     af4:	90 91 5c 38 	lds	r25, 0x385C	; 0x80385c <NVM::nvm_user_sig_offset+0x1>
     af8:	a0 91 5d 38 	lds	r26, 0x385D	; 0x80385d <NVM::nvm_user_sig_offset+0x2>
     afc:	b0 91 5e 38 	lds	r27, 0x385E	; 0x80385e <NVM::nvm_user_sig_offset+0x3>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:465
      case UPDI::UPDI_CMD_READ_MEMORY : {
        _result = NVM::read_memory();
        break;
      }
      case UPDI::UPDI_CMD_WRITE_MEMORY : {
        if (bit_is_clear(UPDI_CONTROL, UPDI_PROG_bp)) {
     b00:	da cf       	rjmp	.-76     	; 0xab6 <UPDI::runtime(unsigned char)+0x17a>
_ZN4UPDI7runtimeEh():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:467
          /* USERROW だけは非PROG状態でも処理を通す */
          if (JTAG2::packet.body[1] != JTAG2::MTYPE_USERSIG) break;
     b02:	e1 99       	sbic	0x1c, 1	; 28
     b04:	30 c0       	rjmp	.+96     	; 0xb66 <UPDI::runtime(unsigned char)+0x22a>
     b06:	80 91 6c 38 	lds	r24, 0x386C	; 0x80386c <JTAG2::packet+0x9>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:106
/*
 * メモリ書込中核
 */

bool NVM::write_memory (void) {
  uint8_t  mem_type   =         JTAG2::packet.body[1];
     b0a:	85 3c       	cpi	r24, 0xC5	; 197
     b0c:	91 f5       	brne	.+100    	; 0xb72 <UPDI::runtime(unsigned char)+0x236>
write_memory():
     b0e:	e3 e6       	ldi	r30, 0x63	; 99
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:107
  size_t   byte_count = _CAPS16(JTAG2::packet.body[2])->word;
     b10:	f8 e3       	ldi	r31, 0x38	; 56
     b12:	81 85       	ldd	r24, Z+9	; 0x09
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:108
  uint32_t start_addr = _CAPS32(JTAG2::packet.body[6])->dword;
     b14:	02 85       	ldd	r16, Z+10	; 0x0a
     b16:	13 85       	ldd	r17, Z+11	; 0x0b
     b18:	c6 84       	ldd	r12, Z+14	; 0x0e
     b1a:	d7 84       	ldd	r13, Z+15	; 0x0f
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:112
  /* 奇数量なら絶対アドレス（データ長は常に1） */
  /* 偶数量なら間接アドレス指定 */
  /* Flash領域は常に偶数量 */
  if (byte_count >= 2) {
     b1c:	e0 88       	ldd	r14, Z+16	; 0x10
     b1e:	f1 88       	ldd	r15, Z+17	; 0x11
     b20:	02 30       	cpi	r16, 0x02	; 2
     b22:	11 05       	cpc	r17, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:170
      default : return false;
    }
  }
  else {
    /* ここは 1byte単位書込で通る */
    uint8_t data = JTAG2::packet.body[10];
     b24:	08 f0       	brcs	.+2      	; 0xb28 <UPDI::runtime(unsigned char)+0x1ec>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:171
    switch (mem_type) {
     b26:	38 c0       	rjmp	.+112    	; 0xb98 <UPDI::runtime(unsigned char)+0x25c>
     b28:	b2 88       	ldd	r11, Z+18	; 0x12
     b2a:	82 3b       	cpi	r24, 0xB2	; 178
     b2c:	08 f4       	brcc	.+2      	; 0xb30 <UPDI::runtime(unsigned char)+0x1f4>
     b2e:	4b c0       	rjmp	.+150    	; 0xbc6 <UPDI::runtime(unsigned char)+0x28a>
     b30:	84 3b       	cpi	r24, 0xB4	; 180
     b32:	08 f4       	brcc	.+2      	; 0xb36 <UPDI::runtime(unsigned char)+0x1fa>
     b34:	a0 c1       	rjmp	.+832    	; 0xe76 <UPDI::runtime(unsigned char)+0x53a>
     b36:	85 3c       	cpi	r24, 0xC5	; 197
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:190
        /* ここは terminal mode の場合のみ通過するはず */
        /* AVR_DA/DB/DD/EA is Flash */
        /* この系統は Flash として実装されている */

        /* NVMCTRL v3 */
        if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp)) {
     b38:	09 f0       	breq	.+2      	; 0xb3c <UPDI::runtime(unsigned char)+0x200>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:192
          /* アドレス先頭かつ0xFF書込ならページ消去 */
          if (((uint8_t)start_addr & 63) == 0 && data == 0xFF) {
     b3a:	45 c0       	rjmp	.+138    	; 0xbc6 <UPDI::runtime(unsigned char)+0x28a>
     b3c:	ef 9b       	sbis	0x1d, 7	; 29
     b3e:	1d c2       	rjmp	.+1082   	; 0xf7a <UPDI::runtime(unsigned char)+0x63e>
     b40:	8c 2d       	mov	r24, r12
     b42:	9c 2d       	mov	r25, r12
     b44:	9f 73       	andi	r25, 0x3F	; 63
     b46:	09 f0       	breq	.+2      	; 0xb4a <UPDI::runtime(unsigned char)+0x20e>
     b48:	04 c2       	rjmp	.+1032   	; 0xf52 <UPDI::runtime(unsigned char)+0x616>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:193
            NVM::nvm_wait_v3();
     b4a:	ff ef       	ldi	r31, 0xFF	; 255
     b4c:	bf 12       	cpse	r11, r31
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:194
            if (!UPDI::st8(start_addr, 0xFF)) return false;
     b4e:	01 c2       	rjmp	.+1026   	; 0xf52 <UPDI::runtime(unsigned char)+0x616>
     b50:	e2 dd       	rcall	.-1084   	; 0x716 <NVM::nvm_wait_v3()>
     b52:	4f ef       	ldi	r20, 0xFF	; 255
     b54:	c7 01       	movw	r24, r14
     b56:	b6 01       	movw	r22, r12
     b58:	22 db       	rcall	.-2492   	; 0x19e <UPDI::st8(unsigned long, unsigned char)>
     b5a:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:195
            if (!NVM::nvm_ctrl_v3(NVM::NVM_V3_CMD_FLPER)) return false;
     b5c:	09 f4       	brne	.+2      	; 0xb60 <UPDI::runtime(unsigned char)+0x224>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:448
  do {
    if (!UPDI::SEND(*p++)) return false;
    if (UPDI::UPDI_ACK != UPDI::RECV()) return false;
  } while (--byte_count);

  return NVM::nvm_ctrl_v3(NVM::NVM_V3_CMD_EEPERW);
     b5e:	75 c0       	rjmp	.+234    	; 0xc4a <UPDI::runtime(unsigned char)+0x30e>
     b60:	88 e0       	ldi	r24, 0x08	; 8
write_eeprom_v3():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:201
  set_ptr[1] = UPDI::UPDI_LDCS | code;
  while (!UPDI::send_bytes(set_ptr, sizeof(set_ptr))) UPDI::BREAK();
  return UPDI::RECV();
}
inline bool UPDI::is_cs_stat (const uint8_t code, uint8_t check) {
  return check == (UPDI::get_cs_stat(code) & check);
     b62:	e7 dd       	rcall	.-1074   	; 0x732 <NVM::nvm_ctrl_v3(unsigned char)>
     b64:	86 c0       	rjmp	.+268    	; 0xc72 <UPDI::runtime(unsigned char)+0x336>
is_cs_stat():
     b66:	8b e0       	ldi	r24, 0x0B	; 11
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:470
        if (bit_is_clear(UPDI_CONTROL, UPDI_PROG_bp)) {
          /* USERROW だけは非PROG状態でも処理を通す */
          if (JTAG2::packet.body[1] != JTAG2::MTYPE_USERSIG) break;
        }
        else {
          if (UPDI::is_sys_stat(UPDI::UPDI_SYS_LOCKSTATUS)) break;
     b68:	6b db       	rcall	.-2346   	; 0x240 <UPDI::get_cs_stat(unsigned char)>
_ZN4UPDI7runtimeEh():
     b6a:	80 fd       	sbrc	r24, 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:471
          if (!(UPDI_LASTL & UPDI::UPDI_SYS_NVMPROG)) break;
     b6c:	02 c0       	rjmp	.+4      	; 0xb72 <UPDI::runtime(unsigned char)+0x236>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:489
        _result = UPDI::Target_Reset(true) && UPDI::Target_Reset(false);
        break;
      }
    }
  }
  TIM::Timeout_Stop();
     b6e:	f3 99       	sbic	0x1e, 3	; 30
     b70:	ce cf       	rjmp	.-100    	; 0xb0e <UPDI::runtime(unsigned char)+0x1d2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:490
  UPDI_USART.CTRLB = UPDI_USART_ON;
     b72:	bf db       	rcall	.-2178   	; 0x2f2 <TIM::Timeout_Stop()>
     b74:	88 ec       	ldi	r24, 0xC8	; 200
     b76:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <UPDI::nvmprog_key+0x7f6ec2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:492
  wdt_reset();
  return _result;
     b7a:	a8 95       	wdr
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:493
}
     b7c:	8d 81       	ldd	r24, Y+5	; 0x05
     b7e:	26 96       	adiw	r28, 0x06	; 6
     b80:	cd bf       	out	0x3d, r28	; 61
     b82:	de bf       	out	0x3e, r29	; 62
     b84:	df 91       	pop	r29
     b86:	cf 91       	pop	r28
     b88:	1f 91       	pop	r17
     b8a:	0f 91       	pop	r16
     b8c:	ff 90       	pop	r15
     b8e:	ef 90       	pop	r14
     b90:	df 90       	pop	r13
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:113
  uint32_t start_addr = _CAPS32(JTAG2::packet.body[6])->dword;
  /* 奇数量なら絶対アドレス（データ長は常に1） */
  /* 偶数量なら間接アドレス指定 */
  /* Flash領域は常に偶数量 */
  if (byte_count >= 2) {
    switch (mem_type) {
     b92:	cf 90       	pop	r12
     b94:	bf 90       	pop	r11
     b96:	08 95       	ret
write_memory():
     b98:	82 3c       	cpi	r24, 0xC2	; 194
     b9a:	08 f0       	brcs	.+2      	; 0xb9e <UPDI::runtime(unsigned char)+0x262>
     b9c:	50 c0       	rjmp	.+160    	; 0xc3e <UPDI::runtime(unsigned char)+0x302>
     b9e:	80 3c       	cpi	r24, 0xC0	; 192
     ba0:	08 f0       	brcs	.+2      	; 0xba4 <UPDI::runtime(unsigned char)+0x268>
     ba2:	55 c0       	rjmp	.+170    	; 0xc4e <UPDI::runtime(unsigned char)+0x312>
     ba4:	82 32       	cpi	r24, 0x22	; 34
     ba6:	19 f0       	breq	.+6      	; 0xbae <UPDI::runtime(unsigned char)+0x272>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:129
      }
      /* EEPROM 領域 */
      case JTAG2::MTYPE_EEPROM :        // 0x22
      case JTAG2::MTYPE_EEPROM_XMEGA :  // 0xC4
      case JTAG2::MTYPE_LOCK_BITS : {   // 0xB3
        start_addr += NVM::nvm_eeprom_offset;
     ba8:	83 3b       	cpi	r24, 0xB3	; 179
     baa:	09 f0       	breq	.+2      	; 0xbae <UPDI::runtime(unsigned char)+0x272>
     bac:	4e c0       	rjmp	.+156    	; 0xc4a <UPDI::runtime(unsigned char)+0x30e>
     bae:	80 91 5f 38 	lds	r24, 0x385F	; 0x80385f <NVM::nvm_eeprom_offset>
     bb2:	90 91 60 38 	lds	r25, 0x3860	; 0x803860 <NVM::nvm_eeprom_offset+0x1>
     bb6:	a0 91 61 38 	lds	r26, 0x3861	; 0x803861 <NVM::nvm_eeprom_offset+0x2>
     bba:	b0 91 62 38 	lds	r27, 0x3862	; 0x803862 <NVM::nvm_eeprom_offset+0x3>
     bbe:	c8 0e       	add	r12, r24
     bc0:	d9 1e       	adc	r13, r25
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:240
        /* megaAVR/tinyAVR is EEPROM */
        /* この系統は EEPROM として実装されている */
      }
    }
  }
  if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp))
     bc2:	ea 1e       	adc	r14, r26
     bc4:	fb 1e       	adc	r15, r27
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:430
  return NVM::nvm_ctrl_v2(NVM::NVM_V2_CMD_NOCMD);
}

/* NVMCTRL v3 */
bool NVM::write_eeprom_v3 (uint32_t start_addr, size_t byte_count) {
  if (byte_count == 0 || byte_count > 256) return false;
     bc6:	c8 01       	movw	r24, r16
     bc8:	01 97       	sbiw	r24, 0x01	; 1
     bca:	ef 9b       	sbis	0x1d, 7	; 29
     bcc:	fd c1       	rjmp	.+1018   	; 0xfc8 <UPDI::runtime(unsigned char)+0x68c>
write_eeprom_v3():
     bce:	8f 3f       	cpi	r24, 0xFF	; 255
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:432

  if (!NVM::nvm_ctrl_v3(NVM::NVM_V3_CMD_NOCMD)) return false;
     bd0:	91 05       	cpc	r25, r1
     bd2:	11 f0       	breq	.+4      	; 0xbd8 <UPDI::runtime(unsigned char)+0x29c>
     bd4:	08 f0       	brcs	.+2      	; 0xbd8 <UPDI::runtime(unsigned char)+0x29c>
     bd6:	39 c0       	rjmp	.+114    	; 0xc4a <UPDI::runtime(unsigned char)+0x30e>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:435

  /* setting register pointer */
  _CAPS32(set_ptr[2])->dword = start_addr;
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	ab dd       	rcall	.-1194   	; 0x732 <NVM::nvm_ctrl_v3(unsigned char)>
     bdc:	88 23       	and	r24, r24
     bde:	a9 f1       	breq	.+106    	; 0xc4a <UPDI::runtime(unsigned char)+0x30e>
     be0:	c0 92 32 38 	sts	0x3832, r12	; 0x803832 <NVM::set_ptr+0x2>
     be4:	d0 92 33 38 	sts	0x3833, r13	; 0x803833 <NVM::set_ptr+0x3>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:436
  set_repeat[2] = (uint8_t)byte_count - 1;
     be8:	e0 92 34 38 	sts	0x3834, r14	; 0x803834 <NVM::set_ptr+0x4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:437
  if (!UPDI::send_bytes(set_ptr, sizeof(set_ptr) - 1)) return false;
     bec:	f0 92 35 38 	sts	0x3835, r15	; 0x803835 <NVM::set_ptr+0x5>
     bf0:	8f ef       	ldi	r24, 0xFF	; 255
     bf2:	80 0f       	add	r24, r16
     bf4:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <NVM::set_repeat+0x2>
     bf8:	65 e0       	ldi	r22, 0x05	; 5
     bfa:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:438
  if (UPDI::UPDI_ACK != UPDI::RECV()) return false;
     bfc:	80 e3       	ldi	r24, 0x30	; 48
     bfe:	98 e3       	ldi	r25, 0x38	; 56
     c00:	a9 da       	rcall	.-2734   	; 0x154 <UPDI::send_bytes(unsigned char const*, unsigned int)>
     c02:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:439
  if (!UPDI::send_bytes(set_repeat, sizeof(set_repeat))) return false;
     c04:	11 f1       	breq	.+68     	; 0xc4a <UPDI::runtime(unsigned char)+0x30e>
     c06:	82 da       	rcall	.-2812   	; 0x10c <UPDI::RECV()>
     c08:	80 34       	cpi	r24, 0x40	; 64
     c0a:	f9 f4       	brne	.+62     	; 0xc4a <UPDI::runtime(unsigned char)+0x30e>
     c0c:	65 e0       	ldi	r22, 0x05	; 5
     c0e:	70 e0       	ldi	r23, 0x00	; 0
     c10:	8b e2       	ldi	r24, 0x2B	; 43
     c12:	98 e3       	ldi	r25, 0x38	; 56
     c14:	9f da       	rcall	.-2754   	; 0x154 <UPDI::send_bytes(unsigned char const*, unsigned int)>
     c16:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:444

  /* page buffer stored */
  uint8_t* p = &JTAG2::packet.body[10];
  do {
    if (!UPDI::SEND(*p++)) return false;
     c18:	c1 f0       	breq	.+48     	; 0xc4a <UPDI::runtime(unsigned char)+0x30e>
     c1a:	25 e7       	ldi	r18, 0x75	; 117
     c1c:	e2 2e       	mov	r14, r18
     c1e:	28 e3       	ldi	r18, 0x38	; 56
     c20:	f2 2e       	mov	r15, r18
     c22:	f7 01       	movw	r30, r14
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:445
    if (UPDI::UPDI_ACK != UPDI::RECV()) return false;
     c24:	81 91       	ld	r24, Z+
     c26:	7f 01       	movw	r14, r30
     c28:	7d da       	rcall	.-2822   	; 0x124 <UPDI::SEND(unsigned char)>
     c2a:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:446
  } while (--byte_count);
     c2c:	71 f0       	breq	.+28     	; 0xc4a <UPDI::runtime(unsigned char)+0x30e>
     c2e:	6e da       	rcall	.-2852   	; 0x10c <UPDI::RECV()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:448

  return NVM::nvm_ctrl_v3(NVM::NVM_V3_CMD_EEPERW);
     c30:	80 34       	cpi	r24, 0x40	; 64
     c32:	59 f4       	brne	.+22     	; 0xc4a <UPDI::runtime(unsigned char)+0x30e>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:113
  uint32_t start_addr = _CAPS32(JTAG2::packet.body[6])->dword;
  /* 奇数量なら絶対アドレス（データ長は常に1） */
  /* 偶数量なら間接アドレス指定 */
  /* Flash領域は常に偶数量 */
  if (byte_count >= 2) {
    switch (mem_type) {
     c34:	01 50       	subi	r16, 0x01	; 1
     c36:	11 09       	sbc	r17, r1
     c38:	a1 f7       	brne	.-24     	; 0xc22 <UPDI::runtime(unsigned char)+0x2e6>
     c3a:	85 e1       	ldi	r24, 0x15	; 21
     c3c:	92 cf       	rjmp	.-220    	; 0xb62 <UPDI::runtime(unsigned char)+0x226>
write_memory():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:165
        }
        /* megaAVR/tinyAVR is EEPROM */
        /* この系統は EEPROM として実装されている */
        break;
      }
      default : return false;
     c3e:	84 3c       	cpi	r24, 0xC4	; 196
     c40:	09 f4       	brne	.+2      	; 0xc44 <UPDI::runtime(unsigned char)+0x308>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:118
    switch (mem_type) {
      /* Flash 領域 */
      /* 奇数量指定は Data領域絶対アドレス指定になる */
      case JTAG2::MTYPE_XMEGA_FLASH :   // 0xC0
      case JTAG2::MTYPE_BOOT_FLASH : {  // 0xC1
        start_addr += NVM::nvm_flash_offset;
     c42:	b5 cf       	rjmp	.-150    	; 0xbae <UPDI::runtime(unsigned char)+0x272>
     c44:	85 3c       	cpi	r24, 0xC5	; 197
     c46:	09 f4       	brne	.+2      	; 0xc4a <UPDI::runtime(unsigned char)+0x30e>
     c48:	6a c0       	rjmp	.+212    	; 0xd1e <UPDI::runtime(unsigned char)+0x3e2>
_ZN4UPDI7runtimeEh():
     c4a:	10 e0       	ldi	r17, 0x00	; 0
     c4c:	e5 c0       	rjmp	.+458    	; 0xe18 <UPDI::runtime(unsigned char)+0x4dc>
write_memory():
     c4e:	80 91 51 38 	lds	r24, 0x3851	; 0x803851 <NVM::nvm_flash_offset>
     c52:	90 91 52 38 	lds	r25, 0x3852	; 0x803852 <NVM::nvm_flash_offset+0x1>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:119
        if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp))
     c56:	a0 91 53 38 	lds	r26, 0x3853	; 0x803853 <NVM::nvm_flash_offset+0x2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:150
          /* 書く前にページ消去 */
            NVM::nvm_wait_v3();
          if (!UPDI::st8(start_addr, 0xFF)) return false;
          if (!NVM::nvm_ctrl_v3(NVM::NVM_V2_CMD_FLPER)) return false;
          UPDI_CONTROL |= _BV(UPDI::UPDI_ERFM_bp);
          return NVM::write_flash_v3(start_addr, byte_count);
     c5a:	b0 91 54 38 	lds	r27, 0x3854	; 0x803854 <NVM::nvm_flash_offset+0x3>
     c5e:	c8 0e       	add	r12, r24
     c60:	d9 1e       	adc	r13, r25
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:425
  do {
    if (!UPDI::SEND(*p++)) return false;
    if (UPDI::UPDI_ACK != UPDI::RECV()) return false;
  } while (--byte_count);

  return NVM::nvm_ctrl_v2(NVM::NVM_V2_CMD_NOCMD);
     c62:	ea 1e       	adc	r14, r26
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:121
      case JTAG2::MTYPE_XMEGA_FLASH :   // 0xC0
      case JTAG2::MTYPE_BOOT_FLASH : {  // 0xC1
        start_addr += NVM::nvm_flash_offset;
        if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp))
          return NVM::write_flash_v3(start_addr, byte_count);
        if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN2_bp))
     c64:	fb 1e       	adc	r15, r27
     c66:	ef 9b       	sbis	0x1d, 7	; 29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:159
        if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN2_bp)) {
          /* 書く前にページ消去 */
          if (!NVM::nvm_ctrl_v2(NVM::NVM_V2_CMD_FLPER)) return false;
          if (!UPDI::st8(start_addr, 0xFF)) return false;
          UPDI_CONTROL |= _BV(UPDI::UPDI_ERFM_bp);
          return NVM::write_flash_v2(start_addr, byte_count);
     c68:	06 c0       	rjmp	.+12     	; 0xc76 <UPDI::runtime(unsigned char)+0x33a>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:233
          else {
            JTAG2::packet.body[11] = 0xFF;
          }
          byte_count = 2;
          UPDI_CONTROL |= _BV(UPDI::UPDI_ERFM_bp);
          return NVM::write_flash_v2(start_addr, byte_count);
     c6a:	a8 01       	movw	r20, r16
     c6c:	c7 01       	movw	r24, r14
     c6e:	b6 01       	movw	r22, r12
     c70:	66 dd       	rcall	.-1332   	; 0x73e <NVM::write_flash_v3(unsigned long, unsigned int)>
write_eeprom_v2():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:457
 * Flash領域ワード書込
 */

/* NVMCTRL v0 */
bool NVM::write_flash (uint32_t start_addr, size_t byte_count) {
  byte_count >>= 1;
     c72:	18 2f       	mov	r17, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:458
  if (byte_count == 0 || byte_count > 256) return false;
     c74:	d1 c0       	rjmp	.+418    	; 0xe18 <UPDI::runtime(unsigned char)+0x4dc>
write_memory():
     c76:	ee 9b       	sbis	0x1d, 6	; 29
     c78:	05 c0       	rjmp	.+10     	; 0xc84 <UPDI::runtime(unsigned char)+0x348>
     c7a:	a8 01       	movw	r20, r16
     c7c:	c7 01       	movw	r24, r14
     c7e:	b6 01       	movw	r22, r12
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:462

  /* この系統ではページ消去を書込と同時に行える */
  /* NVMCTRL page buffer clear */
  NVM::nvm_wait();
     c80:	e8 dd       	rcall	.-1072   	; 0x852 <NVM::write_flash_v2(unsigned long, unsigned int)>
     c82:	f7 cf       	rjmp	.-18     	; 0xc72 <UPDI::runtime(unsigned char)+0x336>
write_flash():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:463
  if (!NVM::nvm_ctrl(NVM::NVM_CMD_PBC)) return false;
     c84:	16 95       	lsr	r17
     c86:	07 95       	ror	r16
     c88:	c8 01       	movw	r24, r16
     c8a:	01 97       	sbiw	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:464
  NVM::nvm_wait();
     c8c:	8f 3f       	cpi	r24, 0xFF	; 255
     c8e:	91 05       	cpc	r25, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:467

  /* setting register pointer and enable RSD mode */
  _CAPS32(set_ptr[2])->dword = start_addr;
     c90:	09 f0       	breq	.+2      	; 0xc94 <UPDI::runtime(unsigned char)+0x358>
     c92:	d8 f6       	brcc	.-74     	; 0xc4a <UPDI::runtime(unsigned char)+0x30e>
     c94:	ca dd       	rcall	.-1132   	; 0x82a <NVM::nvm_wait()>
     c96:	84 e0       	ldi	r24, 0x04	; 4
     c98:	61 db       	rcall	.-2366   	; 0x35c <NVM::nvm_ctrl(unsigned char)>
     c9a:	88 23       	and	r24, r24
     c9c:	b1 f2       	breq	.-84     	; 0xc4a <UPDI::runtime(unsigned char)+0x30e>
     c9e:	c5 dd       	rcall	.-1142   	; 0x82a <NVM::nvm_wait()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:468
  set_repeat_rsd[5] = byte_count - 1;
     ca0:	c0 92 32 38 	sts	0x3832, r12	; 0x803832 <NVM::set_ptr+0x2>
     ca4:	d0 92 33 38 	sts	0x3833, r13	; 0x803833 <NVM::set_ptr+0x3>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:469
  if (!UPDI::send_bytes(set_ptr, sizeof(set_ptr) - 1)) return false;
     ca8:	e0 92 34 38 	sts	0x3834, r14	; 0x803834 <NVM::set_ptr+0x4>
     cac:	f0 92 35 38 	sts	0x3835, r15	; 0x803835 <NVM::set_ptr+0x5>
     cb0:	8f ef       	ldi	r24, 0xFF	; 255
     cb2:	80 0f       	add	r24, r16
     cb4:	80 93 28 38 	sts	0x3828, r24	; 0x803828 <NVM::set_repeat_rsd+0x5>
     cb8:	65 e0       	ldi	r22, 0x05	; 5
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:470
  if (UPDI::UPDI_ACK != UPDI::RECV()) return false;
     cba:	70 e0       	ldi	r23, 0x00	; 0
     cbc:	80 e3       	ldi	r24, 0x30	; 48
     cbe:	98 e3       	ldi	r25, 0x38	; 56
     cc0:	49 da       	rcall	.-2926   	; 0x154 <UPDI::send_bytes(unsigned char const*, unsigned int)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:471
  if (!UPDI::send_bytes(set_repeat_rsd, sizeof(set_repeat_rsd))) return false;
     cc2:	88 23       	and	r24, r24
     cc4:	09 f4       	brne	.+2      	; 0xcc8 <UPDI::runtime(unsigned char)+0x38c>
     cc6:	c1 cf       	rjmp	.-126    	; 0xc4a <UPDI::runtime(unsigned char)+0x30e>
     cc8:	21 da       	rcall	.-3006   	; 0x10c <UPDI::RECV()>
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	09 f0       	breq	.+2      	; 0xcd0 <UPDI::runtime(unsigned char)+0x394>
     cce:	bd cf       	rjmp	.-134    	; 0xc4a <UPDI::runtime(unsigned char)+0x30e>
     cd0:	68 e0       	ldi	r22, 0x08	; 8
     cd2:	70 e0       	ldi	r23, 0x00	; 0
     cd4:	83 e2       	ldi	r24, 0x23	; 35
     cd6:	98 e3       	ldi	r25, 0x38	; 56
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:476

  /* page buffer stored */
  uint8_t* p = &JTAG2::packet.body[10];
  do {
    UPDI::SEND(*p++);
     cd8:	3d da       	rcall	.-2950   	; 0x154 <UPDI::send_bytes(unsigned char const*, unsigned int)>
     cda:	88 23       	and	r24, r24
     cdc:	09 f4       	brne	.+2      	; 0xce0 <UPDI::runtime(unsigned char)+0x3a4>
     cde:	b5 cf       	rjmp	.-150    	; 0xc4a <UPDI::runtime(unsigned char)+0x30e>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:477
    UPDI::SEND(*p++);
     ce0:	43 e6       	ldi	r20, 0x63	; 99
     ce2:	e4 2e       	mov	r14, r20
     ce4:	48 e3       	ldi	r20, 0x38	; 56
     ce6:	f4 2e       	mov	r15, r20
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:478
  } while (--byte_count);
     ce8:	f7 01       	movw	r30, r14
     cea:	82 89       	ldd	r24, Z+18	; 0x12
     cec:	1b da       	rcall	.-3018   	; 0x124 <UPDI::SEND(unsigned char)>
     cee:	f7 01       	movw	r30, r14
     cf0:	83 89       	ldd	r24, Z+19	; 0x13
     cf2:	18 da       	rcall	.-3024   	; 0x124 <UPDI::SEND(unsigned char)>
     cf4:	01 50       	subi	r16, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:224
  set_ptr[1] = UPDI::UPDI_STCS | code;
  set_ptr[2] = data;
  return UPDI::send_bytes(set_ptr, sizeof(set_ptr));
}
inline bool UPDI::set_cs_ctra (const uint8_t data) {
  return UPDI::set_cs_stat(UPDI::UPDI_CS_CTRLA, data);
     cf6:	11 09       	sbc	r17, r1
     cf8:	f2 e0       	ldi	r31, 0x02	; 2
     cfa:	ef 0e       	add	r14, r31
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:482
  // UPDI::guardtime();

  /* disable RSD mode */
  if (!UPDI::set_cs_ctra(UPDI::UPDI_SET_GTVAL_2)) return false;
     cfc:	f1 1c       	adc	r15, r1
     cfe:	01 15       	cp	r16, r1
     d00:	11 05       	cpc	r17, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:401
    if (!UPDI::SEND(*p++)) return false;
    if (UPDI::UPDI_ACK != UPDI::RECV()) return false;
  } while (--byte_count);

  /* NVMCTRL write page and complete */
  if (!NVM::nvm_ctrl(NVM::NVM_CMD_ERWP)) return false;
     d02:	91 f7       	brne	.-28     	; 0xce8 <UPDI::runtime(unsigned char)+0x3ac>
set_cs_ctra():
     d04:	66 e0       	ldi	r22, 0x06	; 6
     d06:	82 e0       	ldi	r24, 0x02	; 2
     d08:	3c da       	rcall	.-2952   	; 0x182 <UPDI::set_cs_stat(unsigned char, unsigned char)>
write_flash():
     d0a:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:402
  return NVM::nvm_wait() == 0;
     d0c:	09 f4       	brne	.+2      	; 0xd10 <UPDI::runtime(unsigned char)+0x3d4>
     d0e:	9d cf       	rjmp	.-198    	; 0xc4a <UPDI::runtime(unsigned char)+0x30e>
write_eeprom():
     d10:	83 e0       	ldi	r24, 0x03	; 3
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:136
      }
      /* USERROW/USERSIG 領域 */
      case JTAG2::MTYPE_USERSIG : {     // 0xC5

        /* デバイス施錠されている場合 */
        if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_PROG_bp))
     d12:	24 db       	rcall	.-2488   	; 0x35c <NVM::nvm_ctrl(unsigned char)>
     d14:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:270
/*
 * USERROW/USERSIG 特殊書込準備
 */
bool UPDI::enter_userrow (void) {
  /* send urowwrite_key */
  if (!UPDI::send_bytes(UPDI::urowwrite_key, sizeof(UPDI::urowwrite_key))) return false;
     d16:	09 f4       	brne	.+2      	; 0xd1a <UPDI::runtime(unsigned char)+0x3de>
     d18:	98 cf       	rjmp	.-208    	; 0xc4a <UPDI::runtime(unsigned char)+0x30e>
     d1a:	87 dd       	rcall	.-1266   	; 0x82a <NVM::nvm_wait()>
     d1c:	15 c1       	rjmp	.+554    	; 0xf48 <UPDI::runtime(unsigned char)+0x60c>
write_memory():
     d1e:	e1 99       	sbic	0x1c, 1	; 28
     d20:	7d c0       	rjmp	.+250    	; 0xe1c <UPDI::runtime(unsigned char)+0x4e0>
enter_userrow():
     d22:	6a e0       	ldi	r22, 0x0A	; 10
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:272
  /* restart target : change mode */
  if (!UPDI::updi_reset(true) || !UPDI::updi_reset(false)) return false;
     d24:	70 e0       	ldi	r23, 0x00	; 0
     d26:	80 e3       	ldi	r24, 0x30	; 48
     d28:	99 e9       	ldi	r25, 0x99	; 153
     d2a:	14 da       	rcall	.-3032   	; 0x154 <UPDI::send_bytes(unsigned char const*, unsigned int)>
     d2c:	88 23       	and	r24, r24
     d2e:	09 f4       	brne	.+2      	; 0xd32 <UPDI::runtime(unsigned char)+0x3f6>
     d30:	8c cf       	rjmp	.-232    	; 0xc4a <UPDI::runtime(unsigned char)+0x30e>
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	2f da       	rcall	.-2978   	; 0x194 <UPDI::updi_reset(bool)>
     d36:	88 23       	and	r24, r24
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.4/cores/megaAVR/api/delay_busywait.h:31
     d38:	09 f4       	brne	.+2      	; 0xd3c <UPDI::runtime(unsigned char)+0x400>
     d3a:	87 cf       	rjmp	.-242    	; 0xc4a <UPDI::runtime(unsigned char)+0x30e>
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	2a da       	rcall	.-2988   	; 0x194 <UPDI::updi_reset(bool)>
     d40:	88 23       	and	r24, r24
     d42:	09 f4       	brne	.+2      	; 0xd46 <UPDI::runtime(unsigned char)+0x40a>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:201
  set_ptr[1] = UPDI::UPDI_LDCS | code;
  while (!UPDI::send_bytes(set_ptr, sizeof(set_ptr))) UPDI::BREAK();
  return UPDI::RECV();
}
inline bool UPDI::is_cs_stat (const uint8_t code, uint8_t check) {
  return check == (UPDI::get_cs_stat(code) & check);
     d44:	82 cf       	rjmp	.-252    	; 0xc4a <UPDI::runtime(unsigned char)+0x30e>
delay_micros():
     d46:	89 ef       	ldi	r24, 0xF9	; 249
     d48:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:273
bool UPDI::enter_userrow (void) {
  /* send urowwrite_key */
  if (!UPDI::send_bytes(UPDI::urowwrite_key, sizeof(UPDI::urowwrite_key))) return false;
  /* restart target : change mode */
  if (!UPDI::updi_reset(true) || !UPDI::updi_reset(false)) return false;
  do{ delay_micros(100); } while (!UPDI::is_sys_stat(UPDI::UPDI_SYS_UROWPROG));
     d4a:	01 97       	sbiw	r24, 0x01	; 1
     d4c:	f1 f7       	brne	.-4      	; 0xd4a <UPDI::runtime(unsigned char)+0x40e>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:572

bool NVM::write_userrow (size_t byte_count) {
  if (!UPDI::enter_userrow()) return false;

  /* setting register pointer */
  _CAPS32(set_ptr[2])->dword = NVM::nvm_data_offset;
     d4e:	00 c0       	rjmp	.+0      	; 0xd50 <UPDI::runtime(unsigned char)+0x414>
     d50:	00 00       	nop
is_cs_stat():
     d52:	8b e0       	ldi	r24, 0x0B	; 11
     d54:	75 da       	rcall	.-2838   	; 0x240 <UPDI::get_cs_stat(unsigned char)>
enter_userrow():
     d56:	82 ff       	sbrs	r24, 2
     d58:	f6 cf       	rjmp	.-20     	; 0xd46 <UPDI::runtime(unsigned char)+0x40a>
write_userrow():
     d5a:	80 91 57 38 	lds	r24, 0x3857	; 0x803857 <NVM::nvm_data_offset>
     d5e:	90 91 58 38 	lds	r25, 0x3858	; 0x803858 <NVM::nvm_data_offset+0x1>
     d62:	a0 91 59 38 	lds	r26, 0x3859	; 0x803859 <NVM::nvm_data_offset+0x2>
     d66:	b0 91 5a 38 	lds	r27, 0x385A	; 0x80385a <NVM::nvm_data_offset+0x3>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:573
  set_repeat[2] = (uint8_t)byte_count - 1;
     d6a:	80 93 32 38 	sts	0x3832, r24	; 0x803832 <NVM::set_ptr+0x2>
     d6e:	90 93 33 38 	sts	0x3833, r25	; 0x803833 <NVM::set_ptr+0x3>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:574
  if (!UPDI::send_bytes(set_ptr, sizeof(set_ptr) - 1)) return false;
     d72:	a0 93 34 38 	sts	0x3834, r26	; 0x803834 <NVM::set_ptr+0x4>
     d76:	b0 93 35 38 	sts	0x3835, r27	; 0x803835 <NVM::set_ptr+0x5>
     d7a:	8f ef       	ldi	r24, 0xFF	; 255
     d7c:	80 0f       	add	r24, r16
     d7e:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <NVM::set_repeat+0x2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:575
  if (UPDI::UPDI_ACK != UPDI::RECV()) return false;
     d82:	65 e0       	ldi	r22, 0x05	; 5
     d84:	70 e0       	ldi	r23, 0x00	; 0
     d86:	80 e3       	ldi	r24, 0x30	; 48
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:576
  if (!UPDI::send_bytes(set_repeat, sizeof(set_repeat))) return false;
     d88:	98 e3       	ldi	r25, 0x38	; 56
     d8a:	e4 d9       	rcall	.-3128   	; 0x154 <UPDI::send_bytes(unsigned char const*, unsigned int)>
     d8c:	88 23       	and	r24, r24
     d8e:	09 f4       	brne	.+2      	; 0xd92 <UPDI::runtime(unsigned char)+0x456>
     d90:	5c cf       	rjmp	.-328    	; 0xc4a <UPDI::runtime(unsigned char)+0x30e>
     d92:	bc d9       	rcall	.-3208   	; 0x10c <UPDI::RECV()>
     d94:	80 34       	cpi	r24, 0x40	; 64
     d96:	09 f0       	breq	.+2      	; 0xd9a <UPDI::runtime(unsigned char)+0x45e>
     d98:	58 cf       	rjmp	.-336    	; 0xc4a <UPDI::runtime(unsigned char)+0x30e>
     d9a:	65 e0       	ldi	r22, 0x05	; 5
     d9c:	70 e0       	ldi	r23, 0x00	; 0
     d9e:	8b e2       	ldi	r24, 0x2B	; 43
     da0:	98 e3       	ldi	r25, 0x38	; 56
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:582

  /* page buffer stored */
  uint8_t* p = &JTAG2::packet.body[10];
  uint8_t* q = &JTAG2::packet.body[266];
  do {
    *q++ = *p;
     da2:	d8 d9       	rcall	.-3152   	; 0x154 <UPDI::send_bytes(unsigned char const*, unsigned int)>
     da4:	88 23       	and	r24, r24
     da6:	09 f4       	brne	.+2      	; 0xdaa <UPDI::runtime(unsigned char)+0x46e>
     da8:	50 cf       	rjmp	.-352    	; 0xc4a <UPDI::runtime(unsigned char)+0x30e>
     daa:	33 e6       	ldi	r19, 0x63	; 99
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:583
    if (!UPDI::SEND(*p++)) return false;
     dac:	e3 2e       	mov	r14, r19
     dae:	38 e3       	ldi	r19, 0x38	; 56
     db0:	f3 2e       	mov	r15, r19
     db2:	0d 59       	subi	r16, 0x9D	; 157
     db4:	17 4c       	sbci	r17, 0xC7	; 199
     db6:	f7 01       	movw	r30, r14
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:584
    if (UPDI::UPDI_ACK != UPDI::RECV()) return false;
     db8:	82 89       	ldd	r24, Z+18	; 0x12
     dba:	ee 5e       	subi	r30, 0xEE	; 238
     dbc:	fe 4f       	sbci	r31, 0xFE	; 254
     dbe:	80 83       	st	Z, r24
     dc0:	f7 01       	movw	r30, r14
     dc2:	82 89       	ldd	r24, Z+18	; 0x12
     dc4:	af d9       	rcall	.-3234   	; 0x124 <UPDI::SEND(unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:585
  } while (--byte_count);
     dc6:	88 23       	and	r24, r24
     dc8:	09 f4       	brne	.+2      	; 0xdcc <UPDI::runtime(unsigned char)+0x490>
     dca:	3f cf       	rjmp	.-386    	; 0xc4a <UPDI::runtime(unsigned char)+0x30e>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:587

  UPDI::set_cs_stat(UPDI::UPDI_CS_ASI_SYS_CTRLA, UPDI::UPDI_SET_UROWDONE);
     dcc:	9f d9       	rcall	.-3266   	; 0x10c <UPDI::RECV()>
     dce:	80 34       	cpi	r24, 0x40	; 64
     dd0:	09 f0       	breq	.+2      	; 0xdd4 <UPDI::runtime(unsigned char)+0x498>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.4/cores/megaAVR/api/delay_busywait.h:31
     dd2:	3b cf       	rjmp	.-394    	; 0xc4a <UPDI::runtime(unsigned char)+0x30e>
     dd4:	ff ef       	ldi	r31, 0xFF	; 255
     dd6:	ef 1a       	sub	r14, r31
     dd8:	ff 0a       	sbc	r15, r31
     dda:	e0 16       	cp	r14, r16
     ddc:	f1 06       	cpc	r15, r17
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:201
  set_ptr[1] = UPDI::UPDI_LDCS | code;
  while (!UPDI::send_bytes(set_ptr, sizeof(set_ptr))) UPDI::BREAK();
  return UPDI::RECV();
}
inline bool UPDI::is_cs_stat (const uint8_t code, uint8_t check) {
  return check == (UPDI::get_cs_stat(code) & check);
     dde:	59 f7       	brne	.-42     	; 0xdb6 <UPDI::runtime(unsigned char)+0x47a>
     de0:	62 e0       	ldi	r22, 0x02	; 2
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:588
  do{ delay_micros(100); } while (UPDI::is_sys_stat(UPDI::UPDI_SYS_UROWPROG));
     de2:	8a e0       	ldi	r24, 0x0A	; 10
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:589
  UPDI::set_cs_stat(UPDI::UPDI_CS_ASI_KEY_STATUS, UPDI::UPDI_KEY_UROWWRITE);
     de4:	ce d9       	rcall	.-3172   	; 0x182 <UPDI::set_cs_stat(unsigned char, unsigned char)>
delay_micros():
     de6:	89 ef       	ldi	r24, 0xF9	; 249
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	01 97       	sbiw	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:590
  if (!UPDI::updi_reset(true) || !UPDI::updi_reset(false)) return false;
     dec:	f1 f7       	brne	.-4      	; 0xdea <UPDI::runtime(unsigned char)+0x4ae>
     dee:	00 c0       	rjmp	.+0      	; 0xdf0 <UPDI::runtime(unsigned char)+0x4b4>
     df0:	00 00       	nop
is_cs_stat():
     df2:	8b e0       	ldi	r24, 0x0B	; 11
     df4:	25 da       	rcall	.-2998   	; 0x240 <UPDI::get_cs_stat(unsigned char)>
write_userrow():
     df6:	82 fd       	sbrc	r24, 2
     df8:	f6 cf       	rjmp	.-20     	; 0xde6 <UPDI::runtime(unsigned char)+0x4aa>
     dfa:	60 e2       	ldi	r22, 0x20	; 32
     dfc:	87 e0       	ldi	r24, 0x07	; 7
     dfe:	c1 d9       	rcall	.-3198   	; 0x182 <UPDI::set_cs_stat(unsigned char, unsigned char)>
     e00:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:591
  UPDI_CONTROL |= _BV(UPDI::UPDI_URWR_bp);
     e02:	c8 d9       	rcall	.-3184   	; 0x194 <UPDI::updi_reset(bool)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:473
        }
        else {
          if (UPDI::is_sys_stat(UPDI::UPDI_SYS_LOCKSTATUS)) break;
          if (!(UPDI_LASTL & UPDI::UPDI_SYS_NVMPROG)) break;
        }
        _result = NVM::write_memory();
     e04:	88 23       	and	r24, r24
     e06:	09 f4       	brne	.+2      	; 0xe0a <UPDI::runtime(unsigned char)+0x4ce>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:139

        /* デバイス施錠されている場合 */
        if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_PROG_bp))
          return NVM::write_userrow(byte_count);

        start_addr += NVM::nvm_user_sig_offset;
     e08:	20 cf       	rjmp	.-448    	; 0xc4a <UPDI::runtime(unsigned char)+0x30e>
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	c3 d9       	rcall	.-3194   	; 0x194 <UPDI::updi_reset(bool)>
     e0e:	18 2f       	mov	r17, r24
     e10:	88 23       	and	r24, r24
     e12:	09 f4       	brne	.+2      	; 0xe16 <UPDI::runtime(unsigned char)+0x4da>
     e14:	1a cf       	rjmp	.-460    	; 0xc4a <UPDI::runtime(unsigned char)+0x30e>
     e16:	e5 9a       	sbi	0x1c, 5	; 28
_ZN4UPDI7runtimeEh():
     e18:	1d 83       	std	Y+5, r17	; 0x05
     e1a:	ab ce       	rjmp	.-682    	; 0xb72 <UPDI::runtime(unsigned char)+0x236>
write_memory():
     e1c:	80 91 5b 38 	lds	r24, 0x385B	; 0x80385b <NVM::nvm_user_sig_offset>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:144
        /* AVR_DA/DB/DD/EA is Flash */
        /* この系統は Flash として実装されている */

        /* NVMCTRL v3 */
        if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp)) {
     e20:	90 91 5c 38 	lds	r25, 0x385C	; 0x80385c <NVM::nvm_user_sig_offset+0x1>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:147
          /* 書く前にページ消去 */
            NVM::nvm_wait_v3();
          if (!UPDI::st8(start_addr, 0xFF)) return false;
     e24:	a0 91 5d 38 	lds	r26, 0x385D	; 0x80385d <NVM::nvm_user_sig_offset+0x2>
     e28:	b0 91 5e 38 	lds	r27, 0x385E	; 0x80385e <NVM::nvm_user_sig_offset+0x3>
     e2c:	c8 0e       	add	r12, r24
     e2e:	d9 1e       	adc	r13, r25
     e30:	ea 1e       	adc	r14, r26
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:148
          if (!NVM::nvm_ctrl_v3(NVM::NVM_V2_CMD_FLPER)) return false;
     e32:	fb 1e       	adc	r15, r27
     e34:	ef 9b       	sbis	0x1d, 7	; 29
     e36:	0f c0       	rjmp	.+30     	; 0xe56 <UPDI::runtime(unsigned char)+0x51a>
     e38:	6e dc       	rcall	.-1828   	; 0x716 <NVM::nvm_wait_v3()>
     e3a:	4f ef       	ldi	r20, 0xFF	; 255
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:149
          UPDI_CONTROL |= _BV(UPDI::UPDI_ERFM_bp);
     e3c:	c7 01       	movw	r24, r14
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:154
          return NVM::write_flash_v3(start_addr, byte_count);
        }

        /* NVMCTRL v2 */
        if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN2_bp)) {
     e3e:	b6 01       	movw	r22, r12
     e40:	ae d9       	rcall	.-3236   	; 0x19e <UPDI::st8(unsigned long, unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:156
          /* 書く前にページ消去 */
          if (!NVM::nvm_ctrl_v2(NVM::NVM_V2_CMD_FLPER)) return false;
     e42:	88 23       	and	r24, r24
     e44:	09 f4       	brne	.+2      	; 0xe48 <UPDI::runtime(unsigned char)+0x50c>
     e46:	01 cf       	rjmp	.-510    	; 0xc4a <UPDI::runtime(unsigned char)+0x30e>
     e48:	88 e0       	ldi	r24, 0x08	; 8
     e4a:	73 dc       	rcall	.-1818   	; 0x732 <NVM::nvm_ctrl_v3(unsigned char)>
     e4c:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:157
          if (!UPDI::st8(start_addr, 0xFF)) return false;
     e4e:	09 f4       	brne	.+2      	; 0xe52 <UPDI::runtime(unsigned char)+0x516>
     e50:	fc ce       	rjmp	.-520    	; 0xc4a <UPDI::runtime(unsigned char)+0x30e>
     e52:	e2 9a       	sbi	0x1c, 2	; 28
     e54:	0a cf       	rjmp	.-492    	; 0xc6a <UPDI::runtime(unsigned char)+0x32e>
     e56:	ee 9b       	sbis	0x1d, 6	; 29
     e58:	b6 ce       	rjmp	.-660    	; 0xbc6 <UPDI::runtime(unsigned char)+0x28a>
     e5a:	88 e0       	ldi	r24, 0x08	; 8
     e5c:	f4 dc       	rcall	.-1560   	; 0x846 <NVM::nvm_ctrl_v2(unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:158
          UPDI_CONTROL |= _BV(UPDI::UPDI_ERFM_bp);
     e5e:	88 23       	and	r24, r24
     e60:	09 f4       	brne	.+2      	; 0xe64 <UPDI::runtime(unsigned char)+0x528>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:176
    switch (mem_type) {
      /* FUSES/LOCKBITS 領域 */
      /* 常に奇数量絶対アドレス指定の特殊書込 */
      case JTAG2::MTYPE_LOCK_BITS :     // 0xB3
      case JTAG2::MTYPE_FUSE_BITS : {   // 0xB2
        if (UPDI::ld8(start_addr) == data && UPDI_LASTH == 0) return true;
     e62:	f3 ce       	rjmp	.-538    	; 0xc4a <UPDI::runtime(unsigned char)+0x30e>
     e64:	4f ef       	ldi	r20, 0xFF	; 255
     e66:	c7 01       	movw	r24, r14
     e68:	b6 01       	movw	r22, r12
     e6a:	99 d9       	rcall	.-3278   	; 0x19e <UPDI::st8(unsigned long, unsigned char)>
     e6c:	88 23       	and	r24, r24
     e6e:	09 f4       	brne	.+2      	; 0xe72 <UPDI::runtime(unsigned char)+0x536>
     e70:	ec ce       	rjmp	.-552    	; 0xc4a <UPDI::runtime(unsigned char)+0x30e>
     e72:	e2 9a       	sbi	0x1c, 2	; 28
     e74:	02 cf       	rjmp	.-508    	; 0xc7a <UPDI::runtime(unsigned char)+0x33e>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:177
        if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp))
     e76:	c7 01       	movw	r24, r14
     e78:	b6 01       	movw	r22, r12
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:366
  return _r;
}

/* NVMCTRL v3 */
bool NVM::write_fuse_v3 (uint16_t addr, uint8_t data) {
  if (!NVM::nvm_ctrl_v2(NVM::NVM_V2_CMD_NOCMD)) return false;
     e7a:	ef d9       	rcall	.-3106   	; 0x25a <UPDI::ld8(unsigned long)>
     e7c:	b8 12       	cpse	r11, r24
     e7e:	04 c0       	rjmp	.+8      	; 0xe88 <UPDI::runtime(unsigned char)+0x54c>
     e80:	8f b3       	in	r24, 0x1f	; 31
_ZN4UPDI7runtimeEh():
     e82:	11 e0       	ldi	r17, 0x01	; 1
write_memory():
     e84:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:367
  if (!UPDI::st8(addr, data)) return false;
     e86:	41 f2       	breq	.-112    	; 0xe18 <UPDI::runtime(unsigned char)+0x4dc>
     e88:	ef 9b       	sbis	0x1d, 7	; 29
     e8a:	18 c0       	rjmp	.+48     	; 0xebc <UPDI::runtime(unsigned char)+0x580>
write_fuse_v3():
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	db dc       	rcall	.-1610   	; 0x846 <NVM::nvm_ctrl_v2(unsigned char)>
     e90:	88 23       	and	r24, r24
     e92:	09 f4       	brne	.+2      	; 0xe96 <UPDI::runtime(unsigned char)+0x55a>
     e94:	da ce       	rjmp	.-588    	; 0xc4a <UPDI::runtime(unsigned char)+0x30e>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:368
  bool _r = (NVM::nvm_wait_v3() & 0x70) == 0;
     e96:	c7 01       	movw	r24, r14
     e98:	b6 01       	movw	r22, r12
     e9a:	88 27       	eor	r24, r24
     e9c:	99 27       	eor	r25, r25
     e9e:	4b 2d       	mov	r20, r11
     ea0:	7e d9       	rcall	.-3332   	; 0x19e <UPDI::st8(unsigned long, unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:369
  if (!NVM::nvm_ctrl_v3(NVM::NVM_V3_CMD_EEPERW)) return false;
     ea2:	88 23       	and	r24, r24
     ea4:	09 f4       	brne	.+2      	; 0xea8 <UPDI::runtime(unsigned char)+0x56c>
     ea6:	d1 ce       	rjmp	.-606    	; 0xc4a <UPDI::runtime(unsigned char)+0x30e>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:360
/* NVMCTRL v2 */
bool NVM::write_fuse_v2 (uint16_t addr, uint8_t data) {
  if (!NVM::nvm_ctrl_v2(NVM::NVM_V2_CMD_EEERWR)) return false;
  if (!UPDI::st8(addr, data)) return false;
  bool _r = (NVM::nvm_wait() & 0x70) == 0;
  if (!NVM::nvm_ctrl_v2(NVM::NVM_V2_CMD_NOCMD)) return false;
     ea8:	36 dc       	rcall	.-1940   	; 0x716 <NVM::nvm_wait_v3()>
     eaa:	80 77       	andi	r24, 0x70	; 112
     eac:	11 e0       	ldi	r17, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:179
      case JTAG2::MTYPE_LOCK_BITS :     // 0xB3
      case JTAG2::MTYPE_FUSE_BITS : {   // 0xB2
        if (UPDI::ld8(start_addr) == data && UPDI_LASTH == 0) return true;
        if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp))
          return NVM::write_fuse_v3(start_addr, data);
        if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN2_bp))
     eae:	09 f0       	breq	.+2      	; 0xeb2 <UPDI::runtime(unsigned char)+0x576>
     eb0:	10 e0       	ldi	r17, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:357
  return ((NVM::nvm_wait() & 7) == 0);
}

/* NVMCTRL v2 */
bool NVM::write_fuse_v2 (uint16_t addr, uint8_t data) {
  if (!NVM::nvm_ctrl_v2(NVM::NVM_V2_CMD_EEERWR)) return false;
     eb2:	85 e1       	ldi	r24, 0x15	; 21
     eb4:	3e dc       	rcall	.-1924   	; 0x732 <NVM::nvm_ctrl_v3(unsigned char)>
write_fuse_v2():
     eb6:	81 11       	cpse	r24, r1
     eb8:	af cf       	rjmp	.-162    	; 0xe18 <UPDI::runtime(unsigned char)+0x4dc>
     eba:	c7 ce       	rjmp	.-626    	; 0xc4a <UPDI::runtime(unsigned char)+0x30e>
write_memory():
     ebc:	ee 9b       	sbis	0x1d, 6	; 29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:358
  if (!UPDI::st8(addr, data)) return false;
     ebe:	16 c0       	rjmp	.+44     	; 0xeec <UPDI::runtime(unsigned char)+0x5b0>
write_fuse_v2():
     ec0:	83 e1       	ldi	r24, 0x13	; 19
     ec2:	c1 dc       	rcall	.-1662   	; 0x846 <NVM::nvm_ctrl_v2(unsigned char)>
     ec4:	88 23       	and	r24, r24
     ec6:	09 f4       	brne	.+2      	; 0xeca <UPDI::runtime(unsigned char)+0x58e>
     ec8:	c0 ce       	rjmp	.-640    	; 0xc4a <UPDI::runtime(unsigned char)+0x30e>
     eca:	c7 01       	movw	r24, r14
     ecc:	b6 01       	movw	r22, r12
     ece:	88 27       	eor	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:359
  bool _r = (NVM::nvm_wait() & 0x70) == 0;
     ed0:	99 27       	eor	r25, r25
     ed2:	4b 2d       	mov	r20, r11
     ed4:	64 d9       	rcall	.-3384   	; 0x19e <UPDI::st8(unsigned long, unsigned char)>
     ed6:	88 23       	and	r24, r24
     ed8:	09 f4       	brne	.+2      	; 0xedc <UPDI::runtime(unsigned char)+0x5a0>
     eda:	b7 ce       	rjmp	.-658    	; 0xc4a <UPDI::runtime(unsigned char)+0x30e>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:360
  if (!NVM::nvm_ctrl_v2(NVM::NVM_V2_CMD_NOCMD)) return false;
     edc:	a6 dc       	rcall	.-1716   	; 0x82a <NVM::nvm_wait()>
     ede:	80 77       	andi	r24, 0x70	; 112
     ee0:	11 e0       	ldi	r17, 0x01	; 1
     ee2:	09 f0       	breq	.+2      	; 0xee6 <UPDI::runtime(unsigned char)+0x5aa>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:346
 */

/* NVMCTRL v0 */
bool NVM::write_fuse (uint16_t addr, uint8_t data) {
  fuse_packet_t fuse_packet;
  fuse_packet.data = data;
     ee4:	10 e0       	ldi	r17, 0x00	; 0
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	ae dc       	rcall	.-1700   	; 0x846 <NVM::nvm_ctrl_v2(unsigned char)>
     eea:	e5 cf       	rjmp	.-54     	; 0xeb6 <UPDI::runtime(unsigned char)+0x57a>
write_fuse():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:181
        if (UPDI::ld8(start_addr) == data && UPDI_LASTH == 0) return true;
        if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp))
          return NVM::write_fuse_v3(start_addr, data);
        if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN2_bp))
          return NVM::write_fuse_v2(start_addr, data);
        return NVM::write_fuse(start_addr, data);
     eec:	4b 2d       	mov	r20, r11
     eee:	50 e0       	ldi	r21, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:348
/* NVMCTRL v0 */
bool NVM::write_fuse (uint16_t addr, uint8_t data) {
  fuse_packet_t fuse_packet;
  fuse_packet.data = data;
  fuse_packet.addr = addr;
  NVM::nvm_wait();
     ef0:	49 83       	std	Y+1, r20	; 0x01
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:166
/*
 * 複バイト送信
 */

bool UPDI::sts8 (uint32_t addr, uint8_t *data, size_t len) {
  if (UPDI::send_repeat_header((UPDI::UPDI_ST | UPDI::UPDI_DATA1), addr, len)) {
     ef2:	5a 83       	std	Y+2, r21	; 0x02
write_memory():
     ef4:	cb 82       	std	Y+3, r12	; 0x03
     ef6:	dc 82       	std	Y+4, r13	; 0x04
write_fuse():
     ef8:	98 dc       	rcall	.-1744   	; 0x82a <NVM::nvm_wait()>
sts8():
     efa:	24 e0       	ldi	r18, 0x04	; 4
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	46 e0       	ldi	r20, 0x06	; 6
     f00:	50 e1       	ldi	r21, 0x10	; 16
     f02:	60 e0       	ldi	r22, 0x00	; 0
     f04:	70 e0       	ldi	r23, 0x00	; 0
     f06:	80 e6       	ldi	r24, 0x60	; 96
     f08:	6b d9       	rcall	.-3370   	; 0x1e0 <UPDI::send_repeat_header(unsigned char, unsigned long, unsigned int)>
     f0a:	88 23       	and	r24, r24
     f0c:	09 f4       	brne	.+2      	; 0xf10 <UPDI::runtime(unsigned char)+0x5d4>
     f0e:	9d ce       	rjmp	.-710    	; 0xc4a <UPDI::runtime(unsigned char)+0x30e>
     f10:	8e 01       	movw	r16, r28
     f12:	0f 5f       	subi	r16, 0xFF	; 255
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:168
    do {
      if (!UPDI::SEND(*data++)) break;
     f14:	1f 4f       	sbci	r17, 0xFF	; 255
     f16:	7e 01       	movw	r14, r28
     f18:	95 e0       	ldi	r25, 0x05	; 5
     f1a:	e9 0e       	add	r14, r25
     f1c:	f1 1c       	adc	r15, r1
     f1e:	f8 01       	movw	r30, r16
     f20:	81 91       	ld	r24, Z+
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:169
      if (UPDI::UPDI_ACK != RECV()) break;
     f22:	8f 01       	movw	r16, r30
     f24:	ff d8       	rcall	.-3586   	; 0x124 <UPDI::SEND(unsigned char)>
     f26:	88 23       	and	r24, r24
     f28:	09 f4       	brne	.+2      	; 0xf2c <UPDI::runtime(unsigned char)+0x5f0>
     f2a:	8f ce       	rjmp	.-738    	; 0xc4a <UPDI::runtime(unsigned char)+0x30e>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:170
    } while (--len);
     f2c:	ef d8       	rcall	.-3618   	; 0x10c <UPDI::RECV()>
     f2e:	80 34       	cpi	r24, 0x40	; 64
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:351
  if (!UPDI::sts8(NVM::NVMCTRL_REG_DATA,
    (uint8_t*)&fuse_packet, sizeof(fuse_packet))) return false;
  if (!NVM::nvm_ctrl(NVM::NVM_CMD_WFU)) return false;
     f30:	09 f0       	breq	.+2      	; 0xf34 <UPDI::runtime(unsigned char)+0x5f8>
     f32:	8b ce       	rjmp	.-746    	; 0xc4a <UPDI::runtime(unsigned char)+0x30e>
     f34:	0e 15       	cp	r16, r14
     f36:	1f 05       	cpc	r17, r15
     f38:	91 f7       	brne	.-28     	; 0xf1e <UPDI::runtime(unsigned char)+0x5e2>
write_fuse():
     f3a:	87 e0       	ldi	r24, 0x07	; 7
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:352
  return ((NVM::nvm_wait() & 7) == 0);
     f3c:	0f da       	rcall	.-3042   	; 0x35c <NVM::nvm_ctrl(unsigned char)>
     f3e:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:402
    if (UPDI::UPDI_ACK != UPDI::RECV()) return false;
  } while (--byte_count);

  /* NVMCTRL write page and complete */
  if (!NVM::nvm_ctrl(NVM::NVM_CMD_ERWP)) return false;
  return NVM::nvm_wait() == 0;
     f40:	09 f4       	brne	.+2      	; 0xf44 <UPDI::runtime(unsigned char)+0x608>
     f42:	83 ce       	rjmp	.-762    	; 0xc4a <UPDI::runtime(unsigned char)+0x30e>
     f44:	72 dc       	rcall	.-1820   	; 0x82a <NVM::nvm_wait()>
     f46:	87 70       	andi	r24, 0x07	; 7
write_eeprom():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:200
            if (!NVM::nvm_ctrl_v3(NVM::NVM_V3_CMD_FLPER)) return false;
            return true;
          }
          /* Flash は偶数単位でしか書けないため偶数化する */
          /* 他方のバイトには0xFFを補完 */
          if ((uint8_t)start_addr & 1) {
     f48:	11 e0       	ldi	r17, 0x01	; 1
     f4a:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:201
            JTAG2::packet.body[11] = data;
     f4c:	09 f4       	brne	.+2      	; 0xf50 <UPDI::runtime(unsigned char)+0x614>
     f4e:	64 cf       	rjmp	.-312    	; 0xe18 <UPDI::runtime(unsigned char)+0x4dc>
     f50:	7c ce       	rjmp	.-776    	; 0xc4a <UPDI::runtime(unsigned char)+0x30e>
write_memory():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:202
            JTAG2::packet.body[10] = 0xFF;
     f52:	80 ff       	sbrs	r24, 0
     f54:	0e c0       	rjmp	.+28     	; 0xf72 <UPDI::runtime(unsigned char)+0x636>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:203
            (uint8_t)start_addr--;
     f56:	e3 e6       	ldi	r30, 0x63	; 99
     f58:	f8 e3       	ldi	r31, 0x38	; 56
     f5a:	b3 8a       	std	Z+19, r11	; 0x13
     f5c:	8f ef       	ldi	r24, 0xFF	; 255
     f5e:	82 8b       	std	Z+18, r24	; 0x12
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:209
          }
          else {
            JTAG2::packet.body[11] = 0xFF;
          }
          byte_count = 2;
          UPDI_CONTROL |= _BV(UPDI::UPDI_ERFM_bp);
     f60:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:210
          return NVM::write_flash_v3(start_addr, byte_count);
     f62:	c8 1a       	sub	r12, r24
     f64:	d1 08       	sbc	r13, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:206
            JTAG2::packet.body[11] = data;
            JTAG2::packet.body[10] = 0xFF;
            (uint8_t)start_addr--;
          }
          else {
            JTAG2::packet.body[11] = 0xFF;
     f66:	e1 08       	sbc	r14, r1
     f68:	f1 08       	sbc	r15, r1
     f6a:	e2 9a       	sbi	0x1c, 2	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:214
          UPDI_CONTROL |= _BV(UPDI::UPDI_ERFM_bp);
          return NVM::write_flash_v3(start_addr, byte_count);
        }

        /* NVMCTRL v2 */
        if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN2_bp)) {
     f6c:	42 e0       	ldi	r20, 0x02	; 2
     f6e:	50 e0       	ldi	r21, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:216
          /* アドレス先頭かつ0xFF書込ならページ消去 */
          if (((uint8_t)start_addr & 63) == 0 && data == 0xFF) {
     f70:	7d ce       	rjmp	.-774    	; 0xc6c <UPDI::runtime(unsigned char)+0x330>
     f72:	8f ef       	ldi	r24, 0xFF	; 255
     f74:	80 93 76 38 	sts	0x3876, r24	; 0x803876 <JTAG2::packet+0x13>
     f78:	f8 cf       	rjmp	.-16     	; 0xf6a <UPDI::runtime(unsigned char)+0x62e>
     f7a:	ee 9b       	sbis	0x1d, 6	; 29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:217
            if (!NVM::nvm_ctrl_v2(NVM::NVM_V2_CMD_FLPER)) return false;
     f7c:	24 ce       	rjmp	.-952    	; 0xbc6 <UPDI::runtime(unsigned char)+0x28a>
     f7e:	8c 2d       	mov	r24, r12
     f80:	9c 2d       	mov	r25, r12
     f82:	9f 73       	andi	r25, 0x3F	; 63
     f84:	69 f4       	brne	.+26     	; 0xfa0 <UPDI::runtime(unsigned char)+0x664>
     f86:	9f ef       	ldi	r25, 0xFF	; 255
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:218
            if (!UPDI::st8(start_addr, 0xFF)) return false;
     f88:	b9 12       	cpse	r11, r25
     f8a:	0a c0       	rjmp	.+20     	; 0xfa0 <UPDI::runtime(unsigned char)+0x664>
     f8c:	88 e0       	ldi	r24, 0x08	; 8
     f8e:	5b dc       	rcall	.-1866   	; 0x846 <NVM::nvm_ctrl_v2(unsigned char)>
     f90:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:223
            return true;
          }
          /* Flash は偶数単位でしか書けないため偶数化する */
          /* 他方のバイトには0xFFを補完 */
          if ((uint8_t)start_addr & 1) {
     f92:	09 f4       	brne	.+2      	; 0xf96 <UPDI::runtime(unsigned char)+0x65a>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:224
            JTAG2::packet.body[11] = data;
     f94:	5a ce       	rjmp	.-844    	; 0xc4a <UPDI::runtime(unsigned char)+0x30e>
     f96:	4f ef       	ldi	r20, 0xFF	; 255
     f98:	c7 01       	movw	r24, r14
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:225
            JTAG2::packet.body[10] = 0xFF;
     f9a:	b6 01       	movw	r22, r12
     f9c:	00 d9       	rcall	.-3584   	; 0x19e <UPDI::st8(unsigned long, unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:226
            (uint8_t)start_addr--;
     f9e:	69 ce       	rjmp	.-814    	; 0xc72 <UPDI::runtime(unsigned char)+0x336>
     fa0:	80 ff       	sbrs	r24, 0
     fa2:	0e c0       	rjmp	.+28     	; 0xfc0 <UPDI::runtime(unsigned char)+0x684>
     fa4:	e3 e6       	ldi	r30, 0x63	; 99
     fa6:	f8 e3       	ldi	r31, 0x38	; 56
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:232
          }
          else {
            JTAG2::packet.body[11] = 0xFF;
          }
          byte_count = 2;
          UPDI_CONTROL |= _BV(UPDI::UPDI_ERFM_bp);
     fa8:	b3 8a       	std	Z+19, r11	; 0x13
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:233
          return NVM::write_flash_v2(start_addr, byte_count);
     faa:	8f ef       	ldi	r24, 0xFF	; 255
     fac:	82 8b       	std	Z+18, r24	; 0x12
     fae:	e1 e0       	ldi	r30, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:229
            JTAG2::packet.body[11] = data;
            JTAG2::packet.body[10] = 0xFF;
            (uint8_t)start_addr--;
          }
          else {
            JTAG2::packet.body[11] = 0xFF;
     fb0:	ce 1a       	sub	r12, r30
     fb2:	d1 08       	sbc	r13, r1
     fb4:	e1 08       	sbc	r14, r1
     fb6:	f1 08       	sbc	r15, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:242
      }
    }
  }
  if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp))
    return NVM::write_eeprom_v3(start_addr, byte_count);
  if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN2_bp))
     fb8:	e2 9a       	sbi	0x1c, 2	; 28
     fba:	42 e0       	ldi	r20, 0x02	; 2
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:407
  return NVM::nvm_wait() == 0;
}

/* NVMCTRL v2 */
bool NVM::write_eeprom_v2 (uint32_t start_addr, size_t byte_count) {
  if (byte_count == 0 || byte_count > 256) return false;
     fbc:	50 e0       	ldi	r21, 0x00	; 0
     fbe:	5e ce       	rjmp	.-836    	; 0xc7c <UPDI::runtime(unsigned char)+0x340>
     fc0:	8f ef       	ldi	r24, 0xFF	; 255
     fc2:	80 93 76 38 	sts	0x3876, r24	; 0x803876 <JTAG2::packet+0x13>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:409

  if (!NVM::nvm_ctrl_v2(NVM::NVM_V2_CMD_EEERWR)) return false;
     fc6:	f8 cf       	rjmp	.-16     	; 0xfb8 <UPDI::runtime(unsigned char)+0x67c>
     fc8:	ee 9b       	sbis	0x1d, 6	; 29
     fca:	3f c0       	rjmp	.+126    	; 0x104a <UPDI::runtime(unsigned char)+0x70e>
write_eeprom_v2():
     fcc:	8f 3f       	cpi	r24, 0xFF	; 255
     fce:	91 05       	cpc	r25, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:412

  /* setting register pointer */
  _CAPS32(set_ptr[2])->dword = start_addr;
     fd0:	11 f0       	breq	.+4      	; 0xfd6 <UPDI::runtime(unsigned char)+0x69a>
     fd2:	08 f0       	brcs	.+2      	; 0xfd6 <UPDI::runtime(unsigned char)+0x69a>
     fd4:	3a ce       	rjmp	.-908    	; 0xc4a <UPDI::runtime(unsigned char)+0x30e>
     fd6:	83 e1       	ldi	r24, 0x13	; 19
     fd8:	36 dc       	rcall	.-1940   	; 0x846 <NVM::nvm_ctrl_v2(unsigned char)>
     fda:	88 23       	and	r24, r24
     fdc:	09 f4       	brne	.+2      	; 0xfe0 <UPDI::runtime(unsigned char)+0x6a4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:413
  set_repeat[2] = (uint8_t)byte_count - 1;
     fde:	35 ce       	rjmp	.-918    	; 0xc4a <UPDI::runtime(unsigned char)+0x30e>
     fe0:	c0 92 32 38 	sts	0x3832, r12	; 0x803832 <NVM::set_ptr+0x2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:414
  if (!UPDI::send_bytes(set_ptr, sizeof(set_ptr) - 1)) return false;
     fe4:	d0 92 33 38 	sts	0x3833, r13	; 0x803833 <NVM::set_ptr+0x3>
     fe8:	e0 92 34 38 	sts	0x3834, r14	; 0x803834 <NVM::set_ptr+0x4>
     fec:	f0 92 35 38 	sts	0x3835, r15	; 0x803835 <NVM::set_ptr+0x5>
     ff0:	8f ef       	ldi	r24, 0xFF	; 255
     ff2:	80 0f       	add	r24, r16
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:415
  if (UPDI::UPDI_ACK != UPDI::RECV()) return false;
     ff4:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <NVM::set_repeat+0x2>
     ff8:	65 e0       	ldi	r22, 0x05	; 5
     ffa:	70 e0       	ldi	r23, 0x00	; 0
     ffc:	80 e3       	ldi	r24, 0x30	; 48
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:416
  if (!UPDI::send_bytes(set_repeat, sizeof(set_repeat))) return false;
     ffe:	98 e3       	ldi	r25, 0x38	; 56
    1000:	a9 d8       	rcall	.-3758   	; 0x154 <UPDI::send_bytes(unsigned char const*, unsigned int)>
    1002:	88 23       	and	r24, r24
    1004:	09 f4       	brne	.+2      	; 0x1008 <UPDI::runtime(unsigned char)+0x6cc>
    1006:	21 ce       	rjmp	.-958    	; 0xc4a <UPDI::runtime(unsigned char)+0x30e>
    1008:	81 d8       	rcall	.-3838   	; 0x10c <UPDI::RECV()>
    100a:	80 34       	cpi	r24, 0x40	; 64
    100c:	09 f0       	breq	.+2      	; 0x1010 <UPDI::runtime(unsigned char)+0x6d4>
    100e:	1d ce       	rjmp	.-966    	; 0xc4a <UPDI::runtime(unsigned char)+0x30e>
    1010:	65 e0       	ldi	r22, 0x05	; 5
    1012:	70 e0       	ldi	r23, 0x00	; 0
    1014:	8b e2       	ldi	r24, 0x2B	; 43
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:421

  /* page buffer stored */
  uint8_t* p = &JTAG2::packet.body[10];
  do {
    if (!UPDI::SEND(*p++)) return false;
    1016:	98 e3       	ldi	r25, 0x38	; 56
    1018:	9d d8       	rcall	.-3782   	; 0x154 <UPDI::send_bytes(unsigned char const*, unsigned int)>
    101a:	88 23       	and	r24, r24
    101c:	09 f4       	brne	.+2      	; 0x1020 <UPDI::runtime(unsigned char)+0x6e4>
    101e:	15 ce       	rjmp	.-982    	; 0xc4a <UPDI::runtime(unsigned char)+0x30e>
    1020:	95 e7       	ldi	r25, 0x75	; 117
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:422
    if (UPDI::UPDI_ACK != UPDI::RECV()) return false;
    1022:	e9 2e       	mov	r14, r25
    1024:	98 e3       	ldi	r25, 0x38	; 56
    1026:	f9 2e       	mov	r15, r25
    1028:	f7 01       	movw	r30, r14
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:423
  } while (--byte_count);
    102a:	81 91       	ld	r24, Z+
    102c:	7f 01       	movw	r14, r30
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:425

  return NVM::nvm_ctrl_v2(NVM::NVM_V2_CMD_NOCMD);
    102e:	7a d8       	rcall	.-3852   	; 0x124 <UPDI::SEND(unsigned char)>
    1030:	88 23       	and	r24, r24
    1032:	09 f4       	brne	.+2      	; 0x1036 <UPDI::runtime(unsigned char)+0x6fa>
    1034:	0a ce       	rjmp	.-1004   	; 0xc4a <UPDI::runtime(unsigned char)+0x30e>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:379
 * EEPROM領域バイト書込
 */

/* NVMCTRL v0 */
bool NVM::write_eeprom (uint32_t start_addr, size_t byte_count) {
  if (byte_count == 0 || byte_count > 256) return false;
    1036:	6a d8       	rcall	.-3884   	; 0x10c <UPDI::RECV()>
    1038:	80 34       	cpi	r24, 0x40	; 64
    103a:	09 f0       	breq	.+2      	; 0x103e <UPDI::runtime(unsigned char)+0x702>
    103c:	06 ce       	rjmp	.-1012   	; 0xc4a <UPDI::runtime(unsigned char)+0x30e>
    103e:	01 50       	subi	r16, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:382

  /* NVMCTRL page buffer clear */
  NVM::nvm_wait();
    1040:	11 09       	sbc	r17, r1
    1042:	91 f7       	brne	.-28     	; 0x1028 <UPDI::runtime(unsigned char)+0x6ec>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:383
  if (!NVM::nvm_ctrl(NVM::NVM_CMD_PBC)) return false;
    1044:	80 e0       	ldi	r24, 0x00	; 0
    1046:	ff db       	rcall	.-2050   	; 0x846 <NVM::nvm_ctrl_v2(unsigned char)>
    1048:	14 ce       	rjmp	.-984    	; 0xc72 <UPDI::runtime(unsigned char)+0x336>
write_eeprom():
    104a:	8f 3f       	cpi	r24, 0xFF	; 255
    104c:	91 05       	cpc	r25, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:384
  NVM::nvm_wait();
    104e:	11 f0       	breq	.+4      	; 0x1054 <UPDI::runtime(unsigned char)+0x718>
    1050:	08 f0       	brcs	.+2      	; 0x1054 <UPDI::runtime(unsigned char)+0x718>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:387

  /* setting register pointer */
  _CAPS32(set_ptr[2])->dword = start_addr;
    1052:	fb cd       	rjmp	.-1034   	; 0xc4a <UPDI::runtime(unsigned char)+0x30e>
    1054:	ea db       	rcall	.-2092   	; 0x82a <NVM::nvm_wait()>
    1056:	84 e0       	ldi	r24, 0x04	; 4
    1058:	81 d9       	rcall	.-3326   	; 0x35c <NVM::nvm_ctrl(unsigned char)>
    105a:	88 23       	and	r24, r24
    105c:	09 f4       	brne	.+2      	; 0x1060 <UPDI::runtime(unsigned char)+0x724>
    105e:	f5 cd       	rjmp	.-1046   	; 0xc4a <UPDI::runtime(unsigned char)+0x30e>
    1060:	e4 db       	rcall	.-2104   	; 0x82a <NVM::nvm_wait()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:388
  set_repeat[2] = (uint8_t)byte_count - 1;
    1062:	c0 92 32 38 	sts	0x3832, r12	; 0x803832 <NVM::set_ptr+0x2>
    1066:	d0 92 33 38 	sts	0x3833, r13	; 0x803833 <NVM::set_ptr+0x3>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:389
  if (!UPDI::send_bytes(set_ptr, sizeof(set_ptr) - 1)) return false;
    106a:	e0 92 34 38 	sts	0x3834, r14	; 0x803834 <NVM::set_ptr+0x4>
    106e:	f0 92 35 38 	sts	0x3835, r15	; 0x803835 <NVM::set_ptr+0x5>
    1072:	8f ef       	ldi	r24, 0xFF	; 255
    1074:	80 0f       	add	r24, r16
    1076:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <NVM::set_repeat+0x2>
    107a:	65 e0       	ldi	r22, 0x05	; 5
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:390
  if (UPDI::UPDI_ACK != UPDI::RECV()) return false;
    107c:	70 e0       	ldi	r23, 0x00	; 0
    107e:	80 e3       	ldi	r24, 0x30	; 48
    1080:	98 e3       	ldi	r25, 0x38	; 56
    1082:	68 d8       	rcall	.-3888   	; 0x154 <UPDI::send_bytes(unsigned char const*, unsigned int)>
    1084:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:391
  if (!UPDI::send_bytes(set_repeat, sizeof(set_repeat))) return false;
    1086:	09 f4       	brne	.+2      	; 0x108a <UPDI::runtime(unsigned char)+0x74e>
    1088:	e0 cd       	rjmp	.-1088   	; 0xc4a <UPDI::runtime(unsigned char)+0x30e>
    108a:	40 d8       	rcall	.-3968   	; 0x10c <UPDI::RECV()>
    108c:	80 34       	cpi	r24, 0x40	; 64
    108e:	09 f0       	breq	.+2      	; 0x1092 <UPDI::runtime(unsigned char)+0x756>
    1090:	dc cd       	rjmp	.-1096   	; 0xc4a <UPDI::runtime(unsigned char)+0x30e>
    1092:	65 e0       	ldi	r22, 0x05	; 5
    1094:	70 e0       	ldi	r23, 0x00	; 0
    1096:	8b e2       	ldi	r24, 0x2B	; 43
    1098:	98 e3       	ldi	r25, 0x38	; 56
    109a:	5c d8       	rcall	.-3912   	; 0x154 <UPDI::send_bytes(unsigned char const*, unsigned int)>
    109c:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:396

  /* page buffer stored */
  uint8_t* p = &JTAG2::packet.body[10];
  do {
    if (!UPDI::SEND(*p++)) return false;
    109e:	09 f4       	brne	.+2      	; 0x10a2 <UPDI::runtime(unsigned char)+0x766>
    10a0:	d4 cd       	rjmp	.-1112   	; 0xc4a <UPDI::runtime(unsigned char)+0x30e>
    10a2:	85 e7       	ldi	r24, 0x75	; 117
    10a4:	e8 2e       	mov	r14, r24
    10a6:	88 e3       	ldi	r24, 0x38	; 56
    10a8:	f8 2e       	mov	r15, r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:397
    if (UPDI::UPDI_ACK != UPDI::RECV()) return false;
    10aa:	f7 01       	movw	r30, r14
    10ac:	81 91       	ld	r24, Z+
    10ae:	7f 01       	movw	r14, r30
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/NVM.cpp:398
  } while (--byte_count);
    10b0:	39 d8       	rcall	.-3982   	; 0x124 <UPDI::SEND(unsigned char)>
    10b2:	88 23       	and	r24, r24
    10b4:	09 f4       	brne	.+2      	; 0x10b8 <UPDI::runtime(unsigned char)+0x77c>
    10b6:	c9 cd       	rjmp	.-1134   	; 0xc4a <UPDI::runtime(unsigned char)+0x30e>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:477
        }
        _result = NVM::write_memory();
        break;
      }
      case UPDI::UPDI_CMD_ERASE : {
        if (JTAG2::packet.body[1] == JTAG2::XMEGA_ERASE_CHIP
    10b8:	29 d8       	rcall	.-4014   	; 0x10c <UPDI::RECV()>
    10ba:	80 34       	cpi	r24, 0x40	; 64
    10bc:	09 f0       	breq	.+2      	; 0x10c0 <UPDI::runtime(unsigned char)+0x784>
    10be:	c5 cd       	rjmp	.-1142   	; 0xc4a <UPDI::runtime(unsigned char)+0x30e>
    10c0:	01 50       	subi	r16, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:478
          && _CAPS32(JTAG2::packet.body[2])->dword == 0) {
    10c2:	11 09       	sbc	r17, r1
    10c4:	91 f7       	brne	.-28     	; 0x10aa <UPDI::runtime(unsigned char)+0x76e>
    10c6:	24 ce       	rjmp	.-952    	; 0xd10 <UPDI::runtime(unsigned char)+0x3d4>
_ZN4UPDI7runtimeEh():
    10c8:	e3 e6       	ldi	r30, 0x63	; 99
    10ca:	f8 e3       	ldi	r31, 0x38	; 56
    10cc:	81 85       	ldd	r24, Z+9	; 0x09
    10ce:	81 11       	cpse	r24, r1
    10d0:	50 cd       	rjmp	.-1376   	; 0xb72 <UPDI::runtime(unsigned char)+0x236>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:313
 * HV制御はここを通る時のみ行われる
 */

bool UPDI::chip_erase (void) {
  /* Send HV Pulse */
  if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) HV_Pulse();
    10d2:	82 85       	ldd	r24, Z+10	; 0x0a
    10d4:	93 85       	ldd	r25, Z+11	; 0x0b
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:316

  /* send nvmprog_key */
  if (!UPDI::send_bytes(UPDI::nvmprog_key, sizeof(UPDI::nvmprog_key))) return false;
    10d6:	a4 85       	ldd	r26, Z+12	; 0x0c
    10d8:	b5 85       	ldd	r27, Z+13	; 0x0d
    10da:	89 2b       	or	r24, r25
    10dc:	8a 2b       	or	r24, r26
    10de:	8b 2b       	or	r24, r27
    10e0:	09 f0       	breq	.+2      	; 0x10e4 <UPDI::runtime(unsigned char)+0x7a8>
    10e2:	47 cd       	rjmp	.-1394   	; 0xb72 <UPDI::runtime(unsigned char)+0x236>
chip_erase():
    10e4:	e0 9b       	sbis	0x1c, 0	; 28
    10e6:	30 c0       	rjmp	.+96     	; 0x1148 <UPDI::runtime(unsigned char)+0x80c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:319

  /* send erase_key */
  if (!UPDI::send_bytes(UPDI::erase_key, sizeof(UPDI::erase_key))) return false;
    10e8:	6a e0       	ldi	r22, 0x0A	; 10
    10ea:	70 e0       	ldi	r23, 0x00	; 0
    10ec:	84 e4       	ldi	r24, 0x44	; 68
    10ee:	99 e9       	ldi	r25, 0x99	; 153
    10f0:	31 d8       	rcall	.-3998   	; 0x154 <UPDI::send_bytes(unsigned char const*, unsigned int)>
    10f2:	88 23       	and	r24, r24
    10f4:	09 f4       	brne	.+2      	; 0x10f8 <UPDI::runtime(unsigned char)+0x7bc>
    10f6:	76 cc       	rjmp	.-1812   	; 0x9e4 <UPDI::runtime(unsigned char)+0xa8>
    10f8:	6a e0       	ldi	r22, 0x0A	; 10
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:322

  /* restart target : change mode */
  if (!UPDI::updi_reset(true) || !UPDI::updi_reset(false)) return false;
    10fa:	70 e0       	ldi	r23, 0x00	; 0
    10fc:	8a e3       	ldi	r24, 0x3A	; 58
    10fe:	99 e9       	ldi	r25, 0x99	; 153
    1100:	29 d8       	rcall	.-4014   	; 0x154 <UPDI::send_bytes(unsigned char const*, unsigned int)>
    1102:	88 23       	and	r24, r24
    1104:	09 f4       	brne	.+2      	; 0x1108 <UPDI::runtime(unsigned char)+0x7cc>
    1106:	6e cc       	rjmp	.-1828   	; 0x9e4 <UPDI::runtime(unsigned char)+0xa8>
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	44 d8       	rcall	.-3960   	; 0x194 <UPDI::updi_reset(bool)>
    110c:	88 23       	and	r24, r24
    110e:	09 f4       	brne	.+2      	; 0x1112 <UPDI::runtime(unsigned char)+0x7d6>
    1110:	69 cc       	rjmp	.-1838   	; 0x9e4 <UPDI::runtime(unsigned char)+0xa8>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.4/cores/megaAVR/api/delay_busywait.h:40
  }
}

void delay_millis (uint32_t _ms) {
  if (F_CPU >= 1000000L) {
    __builtin_avr_delay_cycles((F_CPU / 1000L) * _ms);
    1112:	80 e0       	ldi	r24, 0x00	; 0
    1114:	3f d8       	rcall	.-3970   	; 0x194 <UPDI::updi_reset(bool)>
    1116:	88 23       	and	r24, r24
    1118:	09 f4       	brne	.+2      	; 0x111c <UPDI::runtime(unsigned char)+0x7e0>
    111a:	64 cc       	rjmp	.-1848   	; 0x9e4 <UPDI::runtime(unsigned char)+0xa8>
delay_millis():
    111c:	87 ea       	ldi	r24, 0xA7	; 167
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.4/cores/megaAVR/api/delay_busywait.h:31
static __inline__ __attribute__((__always_inline__)) void delay_micros (uint32_t _us);
static __inline__ __attribute__((__always_inline__)) void delay_millis (uint32_t _ms);

void delay_micros (uint32_t _us) {
  if (F_CPU >= 1000000L) {
    __builtin_avr_delay_cycles((F_CPU / 1000000L) * _us);
    111e:	91 e6       	ldi	r25, 0x61	; 97
    1120:	01 97       	sbiw	r24, 0x01	; 1
    1122:	f1 f7       	brne	.-4      	; 0x1120 <UPDI::runtime(unsigned char)+0x7e4>
    1124:	00 c0       	rjmp	.+0      	; 0x1126 <UPDI::runtime(unsigned char)+0x7ea>
    1126:	00 00       	nop
delay_micros():
    1128:	e9 ef       	ldi	r30, 0xF9	; 249
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:201
  set_ptr[1] = UPDI::UPDI_LDCS | code;
  while (!UPDI::send_bytes(set_ptr, sizeof(set_ptr))) UPDI::BREAK();
  return UPDI::RECV();
}
inline bool UPDI::is_cs_stat (const uint8_t code, uint8_t check) {
  return check == (UPDI::get_cs_stat(code) & check);
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	31 97       	sbiw	r30, 0x01	; 1
    112e:	f1 f7       	brne	.-4      	; 0x112c <UPDI::runtime(unsigned char)+0x7f0>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:327
  if (!UPDI::updi_reset(true) || !UPDI::updi_reset(false)) return false;

  /* wait enable : chip erase mode success */
  delay_millis(10);

  do{ delay_micros(100); } while (UPDI::is_sys_stat(UPDI::UPDI_SYS_LOCKSTATUS));
    1130:	00 c0       	rjmp	.+0      	; 0x1132 <UPDI::runtime(unsigned char)+0x7f6>
    1132:	00 00       	nop
is_cs_stat():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:328
  UPDI_CONTROL |= _BV(UPDI::UPDI_ERFM_bp);
    1134:	8b e0       	ldi	r24, 0x0B	; 11
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:330

  if (bit_is_set(UPDI_CONTROL, UPDI::UPDI_INFO_bp)) {
    1136:	84 d8       	rcall	.-3832   	; 0x240 <UPDI::get_cs_stat(unsigned char)>
chip_erase():
    1138:	80 fd       	sbrc	r24, 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:331
    UPDI_CONTROL &= ~_BV(UPDI::UPDI_PROG_bp);
    113a:	f6 cf       	rjmp	.-20     	; 0x1128 <UPDI::runtime(unsigned char)+0x7ec>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:334
    return UPDI::enter_prog();
  }
  return UPDI::enter_updi(true) && UPDI::enter_prog();
    113c:	e2 9a       	sbi	0x1c, 2	; 28
    113e:	e0 9b       	sbis	0x1c, 0	; 28
    1140:	05 c0       	rjmp	.+10     	; 0x114c <UPDI::runtime(unsigned char)+0x810>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:313
 * HV制御はここを通る時のみ行われる
 */

bool UPDI::chip_erase (void) {
  /* Send HV Pulse */
  if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) HV_Pulse();
    1142:	e1 98       	cbi	0x1c, 1	; 28
    1144:	ab d9       	rcall	.-3242   	; 0x49c <UPDI::enter_prog()>
    1146:	83 cc       	rjmp	.-1786   	; 0xa4e <UPDI::runtime(unsigned char)+0x112>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:334

  if (bit_is_set(UPDI_CONTROL, UPDI::UPDI_INFO_bp)) {
    UPDI_CONTROL &= ~_BV(UPDI::UPDI_PROG_bp);
    return UPDI::enter_prog();
  }
  return UPDI::enter_updi(true) && UPDI::enter_prog();
    1148:	e0 d9       	rcall	.-3136   	; 0x50a <HV_Pulse()>
    114a:	ce cf       	rjmp	.-100    	; 0x10e8 <UPDI::runtime(unsigned char)+0x7ac>
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	14 da       	rcall	.-3032   	; 0x578 <UPDI::enter_updi(bool)>
    1150:	88 23       	and	r24, r24
    1152:	09 f4       	brne	.+2      	; 0x1156 <UPDI::runtime(unsigned char)+0x81a>
    1154:	47 cc       	rjmp	.-1906   	; 0x9e4 <UPDI::runtime(unsigned char)+0xa8>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:484
          _result = UPDI::chip_erase();
        }
        break;
      }
      case UPDI::UPDI_CMD_GO : {
        _result = UPDI::Target_Reset(true) && UPDI::Target_Reset(false);
    1156:	f6 cf       	rjmp	.-20     	; 0x1144 <UPDI::runtime(unsigned char)+0x808>
_ZN4UPDI7runtimeEh():
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	8d d8       	rcall	.-3814   	; 0x276 <UPDI::Target_Reset(bool)>
    115c:	88 23       	and	r24, r24
    115e:	09 f4       	brne	.+2      	; 0x1162 <UPDI::runtime(unsigned char)+0x826>
    1160:	76 cc       	rjmp	.-1812   	; 0xa4e <UPDI::runtime(unsigned char)+0x112>
    1162:	80 e0       	ldi	r24, 0x00	; 0
    1164:	88 d8       	rcall	.-3824   	; 0x276 <UPDI::Target_Reset(bool)>
    1166:	73 cc       	rjmp	.-1818   	; 0xa4e <UPDI::runtime(unsigned char)+0x112>

00001168 <__vector_13>:
__vector_13():
    1168:	11 24       	eor	r1, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:280
 *
 * ここから割込元に戻ることはない
 */

ISR(TCB0_INT_vect, ISR_NAKED) {
  __asm__ __volatile__ ("EOR R1,R1");
    116a:	10 92 80 0a 	sts	0x0A80, r1	; 0x800a80 <UPDI::nvmprog_key+0x7f713c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:281
  TCB0_CTRLA = 0;
    116e:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:282
  TCB0_INTFLAGS = TCB_CAPT_bm;
    1170:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <UPDI::nvmprog_key+0x7f7142>
    1174:	62 e0       	ldi	r22, 0x02	; 2
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:283
  longjmp(TIM::CONTEXT, 2);
    1176:	70 e0       	ldi	r23, 0x00	; 0
    1178:	88 e3       	ldi	r24, 0x38	; 56
    117a:	98 e3       	ldi	r25, 0x38	; 56
    117c:	b7 d3       	rcall	.+1902   	; 0x18ec <longjmp>

0000117e <__vector_6>:
__vector_6():
    117e:	1f 92       	push	r1
    1180:	0f 92       	push	r0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:248
 *
 * LOW Active で UPDIターゲットをリセットON/OFF
 * Deactive で 本体リセット
 */

ISR(portIntrruptVector(RTS_SENSE_PIN)) {
    1182:	0f b6       	in	r0, 0x3f	; 63
    1184:	0f 92       	push	r0
    1186:	11 24       	eor	r1, r1
    1188:	2f 93       	push	r18
    118a:	3f 93       	push	r19
    118c:	4f 93       	push	r20
    118e:	5f 93       	push	r21
    1190:	6f 93       	push	r22
    1192:	7f 93       	push	r23
    1194:	8f 93       	push	r24
    1196:	9f 93       	push	r25
    1198:	af 93       	push	r26
    119a:	bf 93       	push	r27
    119c:	ef 93       	push	r30
    119e:	ff 93       	push	r31
    11a0:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <UPDI::nvmprog_key+0x7f6ac5>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:250
  portRegister(RTS_SENSE_PIN).INTFLAGS =
  portRegister(RTS_SENSE_PIN).INTFLAGS;
    11a4:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <UPDI::nvmprog_key+0x7f6ac5>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:249
 * LOW Active で UPDIターゲットをリセットON/OFF
 * Deactive で 本体リセット
 */

ISR(portIntrruptVector(RTS_SENSE_PIN)) {
  portRegister(RTS_SENSE_PIN).INTFLAGS =
    11a8:	12 9b       	sbis	0x02, 2	; 2
    11aa:	16 c0       	rjmp	.+44     	; 0x11d8 <__vector_6+0x5a>
System_Reset():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:252
  portRegister(RTS_SENSE_PIN).INTFLAGS;

  if ( digitalRead(RTS_SENSE_PIN) ) {
    11ac:	88 ed       	ldi	r24, 0xD8	; 216
    11ae:	91 e0       	ldi	r25, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/SYS.cpp:87
/*
 * 本体リセット
 */

void SYS::System_Reset (void) {
  _PROTECTED_WRITE(RSTCTRL_SWRR, RSTCTRL_SWRE_bm);
    11b0:	84 bf       	out	0x34, r24	; 52
    11b2:	90 93 41 00 	sts	0x0041, r25	; 0x800041 <UPDI::nvmprog_key+0x7f66fd>
__vector_6():
    11b6:	ff 91       	pop	r31
    11b8:	ef 91       	pop	r30
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:271
    openDrainWrite(TRST_PIN, HIGH);

    /* ターゲット再起動解除 */
    UPDI::Target_Reset(false);
  }
}
    11ba:	bf 91       	pop	r27
    11bc:	af 91       	pop	r26
    11be:	9f 91       	pop	r25
    11c0:	8f 91       	pop	r24
    11c2:	7f 91       	pop	r23
    11c4:	6f 91       	pop	r22
    11c6:	5f 91       	pop	r21
    11c8:	4f 91       	pop	r20
    11ca:	3f 91       	pop	r19
    11cc:	2f 91       	pop	r18
    11ce:	0f 90       	pop	r0
    11d0:	0f be       	out	0x3f, r0	; 63
    11d2:	0f 90       	pop	r0
    11d4:	1f 90       	pop	r1
    11d6:	18 95       	reti
    11d8:	74 d8       	rcall	.-3864   	; 0x2c2 <TIM::LED_Flash()>
    11da:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:258
    /* RTS 開放で本体リセット */
    SYS::System_Reset();
  }
  else {
    /* LED は点滅 */
    TIM::LED_Flash();
    11dc:	4c d8       	rcall	.-3944   	; 0x276 <UPDI::Target_Reset(bool)>
    11de:	21 9a       	sbi	0x04, 1	; 4
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:261

    /* ターゲット再起動 */
    UPDI::Target_Reset(true);
    11e0:	00 00       	nop
    11e2:	21 98       	cbi	0x04, 1	; 4
    11e4:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:264

    /* ターゲットリセットパルス */
    openDrainWrite(TRST_PIN, LOW);
    11e6:	47 d8       	rcall	.-3954   	; 0x276 <UPDI::Target_Reset(bool)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:265
    nop();
    11e8:	e6 cf       	rjmp	.-52     	; 0x11b6 <__vector_6+0x38>

000011ea <__vector_7>:
__vector_7():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:266
    openDrainWrite(TRST_PIN, HIGH);
    11ea:	6b d8       	rcall	.-3882   	; 0x2c2 <TIM::LED_Flash()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:269

    /* ターゲット再起動解除 */
    UPDI::Target_Reset(false);
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	43 d8       	rcall	.-3962   	; 0x276 <UPDI::Target_Reset(bool)>
    11f0:	88 e0       	ldi	r24, 0x08	; 8
    11f2:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <UPDI::nvmprog_key+0x7f6ec2>
delay_micros():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:217
 * このハンドラから主処理に戻ることはない
 */

ISR(portIntrruptVector(SW_SENSE_PIN), ISR_NAKED) {
  /* LED は点滅 */
  TIM::LED_Flash();
    11f6:	83 ec       	ldi	r24, 0xC3	; 195
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:220

  /* ターゲットリセットON */
  UPDI::Target_Reset(true);
    11f8:	99 e0       	ldi	r25, 0x09	; 9
    11fa:	01 97       	sbiw	r24, 0x01	; 1
    11fc:	f1 f7       	brne	.-4      	; 0x11fa <__vector_7+0x10>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:221
  UPDI_USART.CTRLB = UPDI_USART_OFF;
    11fe:	00 c0       	rjmp	.+0      	; 0x1200 <__vector_7+0x16>
    1200:	00 00       	nop
__vector_7():
    1202:	01 9a       	sbi	0x00, 1	; 0
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.4/cores/megaAVR/api/delay_busywait.h:31
    1204:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <UPDI::nvmprog_key+0x7f6acd>
    1208:	09 98       	cbi	0x01, 1	; 1
    120a:	21 9a       	sbi	0x04, 1	; 4
    120c:	42 d8       	rcall	.-3964   	; 0x292 <TIM::LED_Blink()>
    120e:	30 9b       	sbis	0x06, 0	; 6
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:227

  /* チャタリング抑制 */
  delay_micros(1000);

  /* ターゲットリセット維持 */
  pinMode(UPDI_TDAT_PIN, OUTPUT);
    1210:	fe cf       	rjmp	.-4      	; 0x120e <__vector_7+0x24>
System_Reset():
    1212:	88 ed       	ldi	r24, 0xD8	; 216
    1214:	91 e0       	ldi	r25, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:228
  digitalWrite(UPDI_TDAT_PIN, LOW);
    1216:	84 bf       	out	0x34, r24	; 52
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:229
  openDrainWrite(TRST_PIN, LOW);
    1218:	90 93 41 00 	sts	0x0041, r25	; 0x800041 <UPDI::nvmprog_key+0x7f66fd>

0000121c <main>:
main():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:232

  /* LEDは 交互点滅 */
  TIM::LED_Blink();
    121c:	f8 94       	cli
initVariant():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:235

  /* 押している間は待機 */
  while (!digitalRead(SW_SENSE_PIN));
    121e:	24 e0       	ldi	r18, 0x04	; 4
    1220:	e0 e1       	ldi	r30, 0x10	; 16
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/SYS.cpp:87
    1222:	f4 e0       	ldi	r31, 0x04	; 4
    1224:	83 e0       	ldi	r24, 0x03	; 3
    1226:	98 e0       	ldi	r25, 0x08	; 8
    1228:	21 93       	st	Z+, r18
    122a:	9a 95       	dec	r25
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.4/variants/tinyAVR2_20/variant.h:281
    "   DEC  R24     \n"
    "   BRNE 2b        " /* 3 loop PORTA to PORTC */
    : : "z" ((register8_t*)&PORTA_PIN0CTRL),
        "r" ((uint8_t)PORT_ISC_INPUT_DISABLE_gc)
      : "r24", "r25"
  );
    122c:	e9 f7       	brne	.-6      	; 0x1228 <main+0xc>
    122e:	78 96       	adiw	r30, 0x18	; 24
    1230:	8a 95       	dec	r24
    1232:	c9 f7       	brne	.-14     	; 0x1226 <main+0xa>
_CLKCTRL_SETUP():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.4/cores/megaAVR/api/CLKCTRL_megaAVR.h:127
  // _PROTECTED_WRITE(CLKCTRL.MCLKCTRLA, CLKCTRL_CLKSEL_OSC20M_gc);

#else

  #if defined(_CLKCTRL_PDIV_)
  _PROTECTED_WRITE(CLKCTRL_MCLKCTRLB, _CLKCTRL_PDIV_ | CLKCTRL_PEN_bm);
    1234:	88 ed       	ldi	r24, 0xD8	; 216
    1236:	41 e0       	ldi	r20, 0x01	; 1
    1238:	50 e0       	ldi	r21, 0x00	; 0
    123a:	84 bf       	out	0x34, r24	; 52
    123c:	40 93 61 00 	sts	0x0061, r20	; 0x800061 <UPDI::nvmprog_key+0x7f671d>
setup():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/SYS.cpp:17
#include <avr/io.h>

void SYS::setup (void) {

  /* ターゲットリセット開放 */
  pinControlRegister(TRST_PIN) = TRST_PIN_CONFIG;
    1240:	8c e0       	ldi	r24, 0x0C	; 12
    1242:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <UPDI::nvmprog_key+0x7f6aed>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/SYS.cpp:20

  /* 出力方向ポート */
  PORTA_DIRSET = _BV(pinPosition(HVP1_PIN))
    1246:	88 ef       	ldi	r24, 0xF8	; 248
    1248:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <UPDI::nvmprog_key+0x7f6abd>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/SYS.cpp:25
               | _BV(pinPosition(HVP2_PIN))
               | _BV(pinPosition(HV12_PIN))
               | _BV(pinPosition(LEDG_PIN))
               | _BV(pinPosition(LEDY_PIN));
  PORTB_DIRSET = _BV(pinPosition(HV8_PIN));
    124c:	80 e2       	ldi	r24, 0x20	; 32
    124e:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <UPDI::nvmprog_key+0x7f6add>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/SYS.cpp:28

  /* USART 切替 LOW=ターゲット開通（PG_Disable） */
  PORTC_DIRSET = _BV(pinPosition(PGEN_PIN));
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <UPDI::nvmprog_key+0x7f6afd>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/SYS.cpp:31

  /* LED 出力 */
  LEDG_EVOUT_MUX = LEDG_EVOUT_ALT;          /* OUT:PA7 */
    1258:	80 93 e0 05 	sts	0x05E0, r24	; 0x8005e0 <UPDI::nvmprog_key+0x7f6c9c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/SYS.cpp:32
  PORTMUX_CCLROUTEA = PORTMUX_LUT3_ALT1_gc; /* OUT:PA5 IN:PC0,PC1,PC2 */
    125c:	98 e0       	ldi	r25, 0x08	; 8
    125e:	90 93 e1 05 	sts	0x05E1, r25	; 0x8005e1 <UPDI::nvmprog_key+0x7f6c9d>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/SYS.cpp:33
  PORTA_OUTSET = _BV(pinPosition(LEDG_PIN))
    1262:	30 ea       	ldi	r19, 0xA0	; 160
    1264:	30 93 05 04 	sts	0x0405, r19	; 0x800405 <UPDI::nvmprog_key+0x7f6ac1>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/SYS.cpp:37
               | _BV(pinPosition(LEDY_PIN));

  /* USART代替選択 */
  PORTMUX_USARTROUTEA = JTAG_PMUX_ALT | UPDI_PMUX_ALT;
    1268:	35 e0       	ldi	r19, 0x05	; 5
    126a:	30 93 e2 05 	sts	0x05E2, r19	; 0x8005e2 <UPDI::nvmprog_key+0x7f6c9e>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/SYS.cpp:40

  /* JTAG ポート */
  pinControlRegister(JTAG_TXD_PIN) = JTAG_TXD_CONFIG;
    126e:	90 93 52 04 	sts	0x0452, r25	; 0x800452 <UPDI::nvmprog_key+0x7f6b0e>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/SYS.cpp:41
  pinControlRegister(JTAG_RXD_PIN) = JTAG_RXD_CONFIG;
    1272:	90 93 51 04 	sts	0x0451, r25	; 0x800451 <UPDI::nvmprog_key+0x7f6b0d>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/SYS.cpp:44

  /* UPDI ポート */
  pinControlRegister(UPDI_TDAT_PIN) = UPDI_TDAT_CONFIG;
    1276:	90 93 11 04 	sts	0x0411, r25	; 0x800411 <UPDI::nvmprog_key+0x7f6acd>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/SYS.cpp:47

  /* HV 発生器 */
  pinControlRegister(HVP1_PIN) = HVP1_PIN_CONFIG;
    127a:	20 93 13 04 	sts	0x0413, r18	; 0x800413 <UPDI::nvmprog_key+0x7f6acf>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/SYS.cpp:48
  pinControlRegister(HVP2_PIN) = HVP2_PIN_CONFIG;
    127e:	44 e8       	ldi	r20, 0x84	; 132
    1280:	40 93 14 04 	sts	0x0414, r20	; 0x800414 <UPDI::nvmprog_key+0x7f6ad0>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/SYS.cpp:51

  /* SW1 割込許可 */
  pinControlRegister(SW_SENSE_PIN) = SW_SENSE_CONFIG;
    1284:	4d e0       	ldi	r20, 0x0D	; 13
    1286:	40 93 30 04 	sts	0x0430, r20	; 0x800430 <UPDI::nvmprog_key+0x7f6aec>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/SYS.cpp:54

  /* RTS 認識 */
  pinControlRegister(RTS_SENSE_PIN) = RTS_SENSE_CONFIG;
    128a:	49 e0       	ldi	r20, 0x09	; 9
    128c:	40 93 12 04 	sts	0x0412, r20	; 0x800412 <UPDI::nvmprog_key+0x7f6ace>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/SYS.cpp:57

  /* JP1 認識 */
  pinControlRegister(JP_SENSE_PIN) = JP_SENSE_CONFIG;
    1290:	90 93 53 04 	sts	0x0453, r25	; 0x800453 <UPDI::nvmprog_key+0x7f6b0f>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/SYS.cpp:60

  /* 状態変数初期化 */
  UPDI_CONTROL = 0;
    1294:	1c ba       	out	0x1c, r1	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/SYS.cpp:61
  UPDI_NVMCTRL = 0;
    1296:	1d ba       	out	0x1d, r1	; 29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:47

  /*
   * EVSYS信号分配
   */

  EVSYS_CHANNEL0 = EVSYS_CHANNEL0_CCL_LUT0_gc;
    1298:	90 e1       	ldi	r25, 0x10	; 16
    129a:	90 93 90 01 	sts	0x0190, r25	; 0x800190 <UPDI::nvmprog_key+0x7f684c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:48
  EVSYS_CHANNEL1 = EVSYS_CHANNEL1_RTC_PIT_DIV128_gc;
    129e:	9a e0       	ldi	r25, 0x0A	; 10
    12a0:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <UPDI::nvmprog_key+0x7f684d>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:49
  EVSYS_CHANNEL2 = EVSYS_CHANNEL2_CCL_LUT1_gc;
    12a4:	91 e1       	ldi	r25, 0x11	; 17
    12a6:	90 93 92 01 	sts	0x0192, r25	; 0x800192 <UPDI::nvmprog_key+0x7f684e>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:50
  EVSYS_CHANNEL3 = EVSYS_CHANNEL3_PORTA_PIN5_gc;
    12aa:	9d e4       	ldi	r25, 0x4D	; 77
    12ac:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <UPDI::nvmprog_key+0x7f684f>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:51
  EVSYS_USERTCB0COUNT = EVSYS_USER_CHANNEL1_gc;
    12b0:	92 e0       	ldi	r25, 0x02	; 2
    12b2:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <UPDI::nvmprog_key+0x7f686d>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:52
  EVSYS_USERTCB1COUNT = EVSYS_USER_CHANNEL1_gc;
    12b6:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <UPDI::nvmprog_key+0x7f686f>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:53
  EVSYS_USERCCLLUT0A  = EVSYS_USER_CHANNEL3_gc;
    12ba:	20 93 a0 01 	sts	0x01A0, r18	; 0x8001a0 <UPDI::nvmprog_key+0x7f685c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:54
  EVSYS_USERCCLLUT1A  = EVSYS_USER_CHANNEL3_gc;
    12be:	20 93 a2 01 	sts	0x01A2, r18	; 0x8001a2 <UPDI::nvmprog_key+0x7f685e>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:61
  /*
   * CCL/LUT構築
   */

  /* TRUTH0: 010 is ON */
  CCL_TRUTH0    = CCL_TRUTH_2_bm;
    12c2:	20 93 cb 01 	sts	0x01CB, r18	; 0x8001cb <UPDI::nvmprog_key+0x7f6887>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:62
  CCL_LUT0CTRLC = CCL_INSEL0_EVENTA_gc;
    12c6:	93 e0       	ldi	r25, 0x03	; 3
    12c8:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <UPDI::nvmprog_key+0x7f6886>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:63
  CCL_LUT0CTRLB = CCL_INSEL1_TCB1_gc;                       /* IN1:POS */
    12cc:	20 ec       	ldi	r18, 0xC0	; 192
    12ce:	20 93 c9 01 	sts	0x01C9, r18	; 0x8001c9 <UPDI::nvmprog_key+0x7f6885>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:64
  CCL_LUT0CTRLA = CCL_ENABLE_bm;
    12d2:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <UPDI::nvmprog_key+0x7f6884>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:67

  /* TRUTH1: 001 010 is ON */
  CCL_TRUTH1    = CCL_TRUTH_1_bm | CCL_TRUTH_2_bm;
    12d6:	26 e0       	ldi	r18, 0x06	; 6
    12d8:	20 93 cf 01 	sts	0x01CF, r18	; 0x8001cf <UPDI::nvmprog_key+0x7f688b>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:68
  CCL_LUT1CTRLC = CCL_INSEL0_EVENTA_gc;
    12dc:	90 93 ce 01 	sts	0x01CE, r25	; 0x8001ce <UPDI::nvmprog_key+0x7f688a>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:69
  CCL_LUT1CTRLB = CCL_INSEL0_TCA0_gc | CCL_INSEL1_TCB1_gc;  /* IN0:POS IN1:POS */
    12e0:	2a ec       	ldi	r18, 0xCA	; 202
    12e2:	20 93 cd 01 	sts	0x01CD, r18	; 0x8001cd <UPDI::nvmprog_key+0x7f6889>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:70
  CCL_LUT1CTRLA = CCL_ENABLE_bm;
    12e6:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <UPDI::nvmprog_key+0x7f6888>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:76

  /* TRUTH3: 001 010 is ON */
  /* CCL_INSEL0_USART0_gc : USART0TX normal HIGH */
  /* CCL_INSEL1_IO_gc     : USART1RX normal HIGH */
  /* CCL_INSEL2_IO_gc     : USART1TX normal HIGH */
  CCL_TRUTH3    = (uint8_t) ~CCL_TRUTH_7_bm;
    12ea:	2f e7       	ldi	r18, 0x7F	; 127
    12ec:	20 93 d7 01 	sts	0x01D7, r18	; 0x8001d7 <UPDI::nvmprog_key+0x7f6893>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:77
  CCL_LUT3CTRLC = CCL_INSEL2_IO_gc;
    12f0:	30 93 d6 01 	sts	0x01D6, r19	; 0x8001d6 <UPDI::nvmprog_key+0x7f6892>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:78
  CCL_LUT3CTRLB = CCL_INSEL0_USART0_gc | CCL_INSEL1_IO_gc;
    12f4:	28 e5       	ldi	r18, 0x58	; 88
    12f6:	20 93 d5 01 	sts	0x01D5, r18	; 0x8001d5 <UPDI::nvmprog_key+0x7f6891>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:79
  CCL_LUT3CTRLA = CCL_ENABLE_bm | CCL_OUTEN_bm;
    12fa:	21 e4       	ldi	r18, 0x41	; 65
    12fc:	20 93 d4 01 	sts	0x01D4, r18	; 0x8001d4 <UPDI::nvmprog_key+0x7f6890>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:82

  /* CCL 有効化 */
  CCL_CTRLA = CCL_RUNSTDBY_bm | CCL_ENABLE_bm;
    1300:	20 93 c0 01 	sts	0x01C0, r18	; 0x8001c0 <UPDI::nvmprog_key+0x7f687c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:85

  /* RTC_PIT 有効化 */
  RTC_PITCTRLA = RTC_PITEN_bm;
    1304:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <UPDI::nvmprog_key+0x7f680c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:92
  /*
   * タイマー
   */

  /* TCA0 */
  TCA0_SPLIT_CTRLD = TCA_SPLIT_SPLITM_bm;
    1308:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <UPDI::nvmprog_key+0x7f70bf>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:93
  TCA0_SPLIT_LPER  = TCA0_STEP - 2;
    130c:	29 e8       	ldi	r18, 0x89	; 137
    130e:	20 93 26 0a 	sts	0x0A26, r18	; 0x800a26 <UPDI::nvmprog_key+0x7f70e2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:94
  TCA0_SPLIT_LCMP0 = TCA0_STEP / 2;
    1312:	25 e4       	ldi	r18, 0x45	; 69
    1314:	20 93 28 0a 	sts	0x0A28, r18	; 0x800a28 <UPDI::nvmprog_key+0x7f70e4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:95
  TCA0_SPLIT_HPER  = 1;
    1318:	80 93 27 0a 	sts	0x0A27, r24	; 0x800a27 <UPDI::nvmprog_key+0x7f70e3>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:96
  TCA0_SPLIT_HCMP0 = 1;     /* WOA3=PA3 */
    131c:	80 93 29 0a 	sts	0x0A29, r24	; 0x800a29 <UPDI::nvmprog_key+0x7f70e5>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:97
  TCA0_SPLIT_HCMP1 = 1;     /* WOA4=PA4 */
    1320:	80 93 2b 0a 	sts	0x0A2B, r24	; 0x800a2b <UPDI::nvmprog_key+0x7f70e7>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:98
  TCA0_SPLIT_CTRLA = TCA_SPLIT_RUNSTDBY_bm | TCA_SPLIT_ENABLE_bm | TCA_SPLIT_CLKSEL_DIV1024_gc;
    1324:	3f e8       	ldi	r19, 0x8F	; 143
    1326:	30 93 00 0a 	sts	0x0A00, r19	; 0x800a00 <UPDI::nvmprog_key+0x7f70bc>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:101

  /* TCB1 */
  TCB1_CTRLB = TCB_CNTMODE_PWM8_gc;
    132a:	37 e0       	ldi	r19, 0x07	; 7
    132c:	30 93 91 0a 	sts	0x0A91, r19	; 0x800a91 <UPDI::nvmprog_key+0x7f714d>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:110
   *
   * RTS Deactive なら ハートビート
   * RTS Active なら フラッシュ
   */

  if ( digitalRead(RTS_SENSE_PIN) ) {
    1330:	12 9b       	sbis	0x02, 2	; 2
    1332:	91 c0       	rjmp	.+290    	; 0x1456 <main+0x23a>
LED_HeartBeat():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:150
 * LED動作切替
 */

/* ハートビート（待機中）*/
void TIM::LED_HeartBeat (void) {
  if (TIM::mode != 1) {
    1334:	30 91 50 38 	lds	r19, 0x3850	; 0x803850 <TIM::mode>
    1338:	31 30       	cpi	r19, 0x01	; 1
    133a:	81 f0       	breq	.+32     	; 0x135c <main+0x140>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:151
    TIM::mode = 1;
    133c:	80 93 50 38 	sts	0x3850, r24	; 0x803850 <TIM::mode>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:152
    TCB1_CCMP = TCB1_HBEAT;
    1340:	4a e8       	ldi	r20, 0x8A	; 138
    1342:	55 e4       	ldi	r21, 0x45	; 69
    1344:	40 93 9c 0a 	sts	0x0A9C, r20	; 0x800a9c <UPDI::nvmprog_key+0x7f7158>
    1348:	50 93 9d 0a 	sts	0x0A9D, r21	; 0x800a9d <UPDI::nvmprog_key+0x7f7159>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:153
    TCB1_CNT = 0;
    134c:	10 92 9a 0a 	sts	0x0A9A, r1	; 0x800a9a <UPDI::nvmprog_key+0x7f7156>
    1350:	10 92 9b 0a 	sts	0x0A9B, r1	; 0x800a9b <UPDI::nvmprog_key+0x7f7157>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:154
    TCB1_CTRLA = TCB_RUNSTDBY_bm | TCB_ENABLE_bm | TCB_CLKSEL_TCA0_gc;
    1354:	20 93 90 0a 	sts	0x0A90, r18	; 0x800a90 <UPDI::nvmprog_key+0x7f714c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:155
    LEDG_EVOUT = EVSYS_USER_CHANNEL2_gc;
    1358:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <UPDI::nvmprog_key+0x7f6865>
setup():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:82
  };
}

/* 初期化 */
void JTAG2::setup (void) {
  JTAG_USART.BAUD = pgm_read_word( &BAUD_TABLE[JTAG2::BAUD_19200] );
    135c:	ed e9       	ldi	r30, 0x9D	; 157
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	85 91       	lpm	r24, Z+
    1362:	94 91       	lpm	r25, Z
    1364:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <UPDI::nvmprog_key+0x7f6ee4>
    1368:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <UPDI::nvmprog_key+0x7f6ee5>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:83
  JTAG_USART.CTRLA = JTAG_USART_CTRLA;
    136c:	10 92 25 08 	sts	0x0825, r1	; 0x800825 <UPDI::nvmprog_key+0x7f6ee1>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:84
  JTAG_USART.CTRLC = JTAG_USART_CTRLC;
    1370:	83 e0       	ldi	r24, 0x03	; 3
    1372:	80 93 27 08 	sts	0x0827, r24	; 0x800827 <UPDI::nvmprog_key+0x7f6ee3>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:85
  JTAG_USART.CTRLB = JTAG_USART_OFF;
    1376:	88 e8       	ldi	r24, 0x88	; 136
    1378:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <UPDI::nvmprog_key+0x7f6ee2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:29
void UPDI::guardtime (void) {
  delay_micros(UPDI_GUARDTIME);
}

void UPDI::setup (void) {
  UPDI_USART.BAUD  = UPDI_BAUD_CALC;
    137c:	80 eb       	ldi	r24, 0xB0	; 176
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <UPDI::nvmprog_key+0x7f6ec4>
    1384:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <UPDI::nvmprog_key+0x7f6ec5>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:30
  UPDI_USART.CTRLA = UPDI_USART_CTRLA;
    1388:	8a e0       	ldi	r24, 0x0A	; 10
    138a:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <UPDI::nvmprog_key+0x7f6ec1>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:31
  UPDI_USART.CTRLC = UPDI_USART_CTRLC;
    138e:	8b e2       	ldi	r24, 0x2B	; 43
    1390:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <UPDI::nvmprog_key+0x7f6ec3>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:32
  UPDI_USART.CTRLB = UPDI_USART_ON;
    1394:	88 ec       	ldi	r24, 0xC8	; 200
    1396:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <UPDI::nvmprog_key+0x7f6ec2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:33
  UPDI_CONTROL &= ~_BV(UPDI::UPDI_CLKU_bp);
    139a:	e7 98       	cbi	0x1c, 7	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:36

  /* ソフトリセット後は ターゲットのリセットを解除 */
  if ( bit_is_set(RSTCTRL_RSTFR, RSTCTRL_SWRF_bp) ) UPDI::Target_Reset(false);
    139c:	80 91 40 00 	lds	r24, 0x0040	; 0x800040 <UPDI::nvmprog_key+0x7f66fc>
    13a0:	84 ff       	sbrs	r24, 4
    13a2:	03 c0       	rjmp	.+6      	; 0x13aa <main+0x18e>
    13a4:	80 e0       	ldi	r24, 0x00	; 0
    13a6:	0e 94 3b 01 	call	0x276	; 0x276 <UPDI::Target_Reset(bool)>
ready():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/SYS.cpp:119
/*
 * 起動シーケンスの最後に実行
 */

void SYS::ready (void) {
  RSTCTRL_RSTFR = 0xFF;
    13aa:	8f ef       	ldi	r24, 0xFF	; 255
    13ac:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <UPDI::nvmprog_key+0x7f66fc>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/SYS.cpp:122

  /* 初期化中に検出された非同期割込をクリアする */
  portRegister(RTS_SENSE_PIN).INTFLAGS = 0xFF;
    13b0:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <UPDI::nvmprog_key+0x7f6ac5>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/SYS.cpp:125

  /* 割込許可 */
  sei();
    13b4:	78 94       	sei
get_parameter():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:251
      packet.size_word[0] = 5;
      break;
    }
    case JTAG2::PARAM_EMU_MODE : {
      packet.body[1] = PARAM_EMU_MODE_VAL;
      packet.size_word[0] = 2;
    13b6:	32 e0       	ldi	r19, 0x02	; 2
    13b8:	23 2e       	mov	r2, r19
    13ba:	31 2c       	mov	r3, r1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:261
      packet.size_word[0] = 2;
      break;
    }
    case JTAG2::PARAM_VTARGET : {
      _CAPS16(packet.body[1])->word = SYS::get_vcc();
      packet.size_word[0] = 3;
    13bc:	43 e0       	ldi	r20, 0x03	; 3
    13be:	c4 2e       	mov	r12, r20
    13c0:	d1 2c       	mov	r13, r1
check_sig():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:258
    else if (a == 1) c = bit_is_set(UPDI_NVMCTRL, UPDI_GEN2_bp) ? 'A'
                       : bit_is_set(UPDI_NVMCTRL, UPDI_LOWF_bp) ? 'm' : 't';
    else if (a == 2) c = bit_is_set(UPDI_NVMCTRL, UPDI_GEN3_bp) ? '3'
                       : bit_is_set(UPDI_NVMCTRL, UPDI_GEN2_bp) ? '2' : '0';
    else return false;
    JTAG2::packet.size = 2;
    13c2:	52 e0       	ldi	r21, 0x02	; 2
    13c4:	45 2e       	mov	r4, r21
    13c6:	51 2c       	mov	r5, r1
    13c8:	61 2c       	mov	r6, r1
    13ca:	71 2c       	mov	r7, r1
sign_on_response():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:175
  packet.body[3] = UPDI_NVMCTRL;
}

/* SIGN_ON Response */
void JTAG2::sign_on_response (void) {
  packet.size = sizeof(sign_on_resp);
    13cc:	6d e1       	ldi	r22, 0x1D	; 29
    13ce:	86 2e       	mov	r8, r22
    13d0:	91 2c       	mov	r9, r1
    13d2:	a1 2c       	mov	r10, r1
    13d4:	b1 2c       	mov	r11, r1
get():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:101
  pinMode(JTAG_TXD_PIN, INPUT_PULLUP);
  SYS::PG_Disable();
}

uint8_t JTAG2::get (void) {
  loop_until_bit_is_set(JTAG_USART.STATUS, USART_RXCIF_bp);
    13d6:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <UPDI::nvmprog_key+0x7f6ee0>
    13da:	87 ff       	sbrs	r24, 7
    13dc:	fc cf       	rjmp	.-8      	; 0x13d6 <main+0x1ba>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:102
  return JTAG_USART.RXDATAL;
    13de:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <UPDI::nvmprog_key+0x7f6edc>
packet_receive():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:126
  uint16_t _crc = ~0;
  uint8_t *p = (uint8_t*) &packet.soh;
  uint8_t *q = (uint8_t*) &packet.soh;

  /* 受信待ち（無限ループ）*/
  while (get() != JTAG2::MESSAGE_START);
    13e2:	8b 31       	cpi	r24, 0x1B	; 27
    13e4:	c1 f7       	brne	.-16     	; 0x13d6 <main+0x1ba>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:127
  (*p++) = JTAG2::MESSAGE_START;
    13e6:	80 93 63 38 	sts	0x3863, r24	; 0x803863 <JTAG2::packet>
    13ea:	e4 e6       	ldi	r30, 0x64	; 100
    13ec:	f8 e3       	ldi	r31, 0x38	; 56
get():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:101
  pinMode(JTAG_TXD_PIN, INPUT_PULLUP);
  SYS::PG_Disable();
}

uint8_t JTAG2::get (void) {
  loop_until_bit_is_set(JTAG_USART.STATUS, USART_RXCIF_bp);
    13ee:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <UPDI::nvmprog_key+0x7f6ee0>
    13f2:	87 ff       	sbrs	r24, 7
    13f4:	fc cf       	rjmp	.-8      	; 0x13ee <main+0x1d2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:102
  return JTAG_USART.RXDATAL;
    13f6:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <UPDI::nvmprog_key+0x7f6edc>
packet_receive():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:130
  /* 受信待ち（無限ループ）*/
  while (get() != JTAG2::MESSAGE_START);
  (*p++) = JTAG2::MESSAGE_START;

  /* 最初の7byte */
  for (int8_t i = 0; i < 7; i++) *p++ = get();
    13fa:	81 93       	st	Z+, r24
    13fc:	8b e6       	ldi	r24, 0x6B	; 107
    13fe:	98 e3       	ldi	r25, 0x38	; 56
    1400:	8e 17       	cp	r24, r30
    1402:	9f 07       	cpc	r25, r31
    1404:	a1 f7       	brne	.-24     	; 0x13ee <main+0x1d2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:133

  /* STX 確認 */
  if (packet.stx != JTAG2::TOKEN) return false;
    1406:	80 91 6a 38 	lds	r24, 0x386A	; 0x80386a <JTAG2::packet+0x7>
    140a:	8e 30       	cpi	r24, 0x0E	; 14
    140c:	21 f7       	brne	.-56     	; 0x13d6 <main+0x1ba>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:136

  /* パケット長確認 */
  if (packet.size > sizeof(packet.body)) return false;
    140e:	80 91 66 38 	lds	r24, 0x3866	; 0x803866 <JTAG2::packet+0x3>
    1412:	90 91 67 38 	lds	r25, 0x3867	; 0x803867 <JTAG2::packet+0x4>
    1416:	a0 91 68 38 	lds	r26, 0x3868	; 0x803868 <JTAG2::packet+0x5>
    141a:	b0 91 69 38 	lds	r27, 0x3869	; 0x803869 <JTAG2::packet+0x6>
    141e:	8a 30       	cpi	r24, 0x0A	; 10
    1420:	92 40       	sbci	r25, 0x02	; 2
    1422:	a1 05       	cpc	r26, r1
    1424:	b1 05       	cpc	r27, r1
    1426:	b8 f6       	brcc	.-82     	; 0x13d6 <main+0x1ba>
    1428:	cb e6       	ldi	r28, 0x6B	; 107
    142a:	d8 e3       	ldi	r29, 0x38	; 56
    142c:	7e 01       	movw	r14, r28
main():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:139

  /* 残りを受信 */
  for (int16_t j = -2; j < packet.size_word[0]; j++) *p++ = get();
    142e:	8e ef       	ldi	r24, 0xFE	; 254
    1430:	9f ef       	ldi	r25, 0xFF	; 255
packet_receive():
    1432:	20 91 66 38 	lds	r18, 0x3866	; 0x803866 <JTAG2::packet+0x3>
    1436:	30 91 67 38 	lds	r19, 0x3867	; 0x803867 <JTAG2::packet+0x4>
    143a:	82 17       	cp	r24, r18
    143c:	93 07       	cpc	r25, r19
    143e:	74 f4       	brge	.+28     	; 0x145c <main+0x240>
get():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:101
  pinMode(JTAG_TXD_PIN, INPUT_PULLUP);
  SYS::PG_Disable();
}

uint8_t JTAG2::get (void) {
  loop_until_bit_is_set(JTAG_USART.STATUS, USART_RXCIF_bp);
    1440:	20 91 24 08 	lds	r18, 0x0824	; 0x800824 <UPDI::nvmprog_key+0x7f6ee0>
    1444:	27 ff       	sbrs	r18, 7
    1446:	fc cf       	rjmp	.-8      	; 0x1440 <main+0x224>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:102
  return JTAG_USART.RXDATAL;
    1448:	20 91 20 08 	lds	r18, 0x0820	; 0x800820 <UPDI::nvmprog_key+0x7f6edc>
packet_receive():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:139

  /* パケット長確認 */
  if (packet.size > sizeof(packet.body)) return false;

  /* 残りを受信 */
  for (int16_t j = -2; j < packet.size_word[0]; j++) *p++ = get();
    144c:	d7 01       	movw	r26, r14
    144e:	2d 93       	st	X+, r18
    1450:	7d 01       	movw	r14, r26
    1452:	01 96       	adiw	r24, 0x01	; 1
    1454:	ee cf       	rjmp	.-36     	; 0x1432 <main+0x216>
setup():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:114

  if ( digitalRead(RTS_SENSE_PIN) ) {
    LED_HeartBeat();
  }
  else {
    LED_Flash();
    1456:	0e 94 61 01 	call	0x2c2	; 0x2c2 <TIM::LED_Flash()>
    145a:	80 cf       	rjmp	.-256    	; 0x135c <main+0x140>
packet_receive():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:139
    145c:	03 e6       	ldi	r16, 0x63	; 99
    145e:	18 e3       	ldi	r17, 0x38	; 56
main():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:121
  return _crc_ccitt_update(_crc, _data);
}

/* JTAG Receive */
bool JTAG2::packet_receive (void) {
  uint16_t _crc = ~0;
    1460:	8f ef       	ldi	r24, 0xFF	; 255
    1462:	9f ef       	ldi	r25, 0xFF	; 255
packet_receive():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:142

  /* 残りを受信 */
  for (int16_t j = -2; j < packet.size_word[0]; j++) *p++ = get();

  /* 受信バッファが満たされたら CRC 確認 */
  while (p != q) _crc = JTAG2::crc16_update(_crc, *q++);
    1464:	0e 15       	cp	r16, r14
    1466:	1f 05       	cpc	r17, r15
    1468:	31 f0       	breq	.+12     	; 0x1476 <main+0x25a>
    146a:	f8 01       	movw	r30, r16
    146c:	61 91       	ld	r22, Z+
    146e:	8f 01       	movw	r16, r30
crc16_update():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:116
void JTAG2::flush (void) {
  loop_until_bit_is_set(JTAG_USART.STATUS, USART_TXCIF_bp);
}

uint16_t JTAG2::crc16_update(uint16_t _crc, uint8_t _data) {
  return _crc_ccitt_update(_crc, _data);
    1470:	0e 94 e6 01 	call	0x3cc	; 0x3cc <_crc_ccitt_update(unsigned int, unsigned char)>
    1474:	f7 cf       	rjmp	.-18     	; 0x1464 <main+0x248>
wakeup_jtag():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:385
  JTAG2::answer_transfer();
}

void JTAG2::wakeup_jtag (void) {
  for (;;) {
    if (JTAG2::packet_receive()) JTAG2::process_command();
    1476:	89 2b       	or	r24, r25
    1478:	09 f0       	breq	.+2      	; 0x147c <main+0x260>
    147a:	ad cf       	rjmp	.-166    	; 0x13d6 <main+0x1ba>
process_command():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:274
  packet.body[0] = JTAG2::RSP_PARAMETER;
}

/* JTAG Process */
inline void JTAG2::process_command (void) {
  wdt_reset();
    147c:	a8 95       	wdr
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:275
  switch ( packet.body[0] ) {
    147e:	80 91 6b 38 	lds	r24, 0x386B	; 0x80386b <JTAG2::packet+0x8>
    1482:	88 30       	cpi	r24, 0x08	; 8
    1484:	09 f4       	brne	.+2      	; 0x1488 <main+0x26c>
    1486:	ae c1       	rjmp	.+860    	; 0x17e4 <main+0x5c8>
    1488:	d0 f5       	brcc	.+116    	; 0x14fe <main+0x2e2>
    148a:	82 30       	cpi	r24, 0x02	; 2
    148c:	09 f4       	brne	.+2      	; 0x1490 <main+0x274>
    148e:	9f c0       	rjmp	.+318    	; 0x15ce <main+0x3b2>
    1490:	48 f4       	brcc	.+18     	; 0x14a4 <main+0x288>
    1492:	88 23       	and	r24, r24
    1494:	09 f4       	brne	.+2      	; 0x1498 <main+0x27c>
    1496:	ab c1       	rjmp	.+854    	; 0x17ee <main+0x5d2>
    1498:	81 30       	cpi	r24, 0x01	; 1
    149a:	09 f4       	brne	.+2      	; 0x149e <main+0x282>
    149c:	47 c0       	rjmp	.+142    	; 0x152c <main+0x310>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:377
    case JTAG2::CMND_LEAVE_PROGMODE : {
      JTAG2::set_response(JTAG2::RSP_OK);
      break;
    }
    default : {
      JTAG2::set_response(JTAG2::RSP_FAILED);
    149e:	80 ea       	ldi	r24, 0xA0	; 160
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	d6 c0       	rjmp	.+428    	; 0x1650 <main+0x434>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:275
}

/* JTAG Process */
inline void JTAG2::process_command (void) {
  wdt_reset();
  switch ( packet.body[0] ) {
    14a4:	84 30       	cpi	r24, 0x04	; 4
    14a6:	09 f4       	brne	.+2      	; 0x14aa <main+0x28e>
    14a8:	79 c1       	rjmp	.+754    	; 0x179c <main+0x580>
    14aa:	08 f4       	brcc	.+2      	; 0x14ae <main+0x292>
    14ac:	d4 c0       	rjmp	.+424    	; 0x1656 <main+0x43a>
    14ae:	85 30       	cpi	r24, 0x05	; 5
    14b0:	b1 f7       	brne	.-20     	; 0x149e <main+0x282>
check_sig():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:243
/*
 * Dummy SIGNATURE
 */

bool UPDI::check_sig (void) {
  uint8_t mem_type  = JTAG2::packet.body[1];
    14b2:	80 91 6c 38 	lds	r24, 0x386C	; 0x80386c <JTAG2::packet+0x9>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:246
  uint8_t s = _CAPS32(JTAG2::packet.body[2])->bytes[0];
  uint8_t a = _CAPS32(JTAG2::packet.body[6])->bytes[0]
    - (bit_is_set(UPDI_NVMCTRL, UPDI_BROW_bp) ? (uint8_t)NVM::EB_SIGROW
    14b6:	ec 99       	sbic	0x1d, 4	; 29
    14b8:	2e c1       	rjmp	.+604    	; 0x1716 <main+0x4fa>
main():
    14ba:	90 e0       	ldi	r25, 0x00	; 0
check_sig():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:249
                                              : (uint8_t)NVM::BASE_SIGROW);
  uint8_t c;
  if (bit_is_clear(UPDI_CONTROL, UPDI_PROG_bp) && mem_type == JTAG2::MTYPE_SIGN_JTAG && s == 1) {
    14bc:	e1 99       	sbic	0x1c, 1	; 28
    14be:	49 c1       	rjmp	.+658    	; 0x1752 <main+0x536>
    14c0:	84 3b       	cpi	r24, 0xB4	; 180
    14c2:	09 f0       	breq	.+2      	; 0x14c6 <main+0x2aa>
    14c4:	46 c1       	rjmp	.+652    	; 0x1752 <main+0x536>
    14c6:	80 91 6d 38 	lds	r24, 0x386D	; 0x80386d <JTAG2::packet+0xa>
    14ca:	81 30       	cpi	r24, 0x01	; 1
    14cc:	09 f0       	breq	.+2      	; 0x14d0 <main+0x2b4>
    14ce:	41 c1       	rjmp	.+642    	; 0x1752 <main+0x536>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:245
 */

bool UPDI::check_sig (void) {
  uint8_t mem_type  = JTAG2::packet.body[1];
  uint8_t s = _CAPS32(JTAG2::packet.body[2])->bytes[0];
  uint8_t a = _CAPS32(JTAG2::packet.body[6])->bytes[0]
    14d0:	80 91 71 38 	lds	r24, 0x3871	; 0x803871 <JTAG2::packet+0xe>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:250
    - (bit_is_set(UPDI_NVMCTRL, UPDI_BROW_bp) ? (uint8_t)NVM::EB_SIGROW
                                              : (uint8_t)NVM::BASE_SIGROW);
  uint8_t c;
  if (bit_is_clear(UPDI_CONTROL, UPDI_PROG_bp) && mem_type == JTAG2::MTYPE_SIGN_JTAG && s == 1) {
    JTAG2::packet.body[0] = JTAG2::RSP_MEMORY;
    14d4:	22 e8       	ldi	r18, 0x82	; 130
    14d6:	20 93 6b 38 	sts	0x386B, r18	; 0x80386b <JTAG2::packet+0x8>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:251
    if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) c = UPDI_LASTH ? 0x00 : 0xFF;
    14da:	e0 99       	sbic	0x1c, 0	; 28
    14dc:	1e c1       	rjmp	.+572    	; 0x171a <main+0x4fe>
    14de:	9f b3       	in	r25, 0x1f	; 31
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	91 11       	cpse	r25, r1
    14e4:	80 e0       	ldi	r24, 0x00	; 0
    14e6:	81 95       	neg	r24
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:258
    else if (a == 1) c = bit_is_set(UPDI_NVMCTRL, UPDI_GEN2_bp) ? 'A'
                       : bit_is_set(UPDI_NVMCTRL, UPDI_LOWF_bp) ? 'm' : 't';
    else if (a == 2) c = bit_is_set(UPDI_NVMCTRL, UPDI_GEN3_bp) ? '3'
                       : bit_is_set(UPDI_NVMCTRL, UPDI_GEN2_bp) ? '2' : '0';
    else return false;
    JTAG2::packet.size = 2;
    14e8:	40 92 66 38 	sts	0x3866, r4	; 0x803866 <JTAG2::packet+0x3>
    14ec:	50 92 67 38 	sts	0x3867, r5	; 0x803867 <JTAG2::packet+0x4>
    14f0:	60 92 68 38 	sts	0x3868, r6	; 0x803868 <JTAG2::packet+0x5>
    14f4:	70 92 69 38 	sts	0x3869, r7	; 0x803869 <JTAG2::packet+0x6>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:259
    JTAG2::packet.body[1] = c;
    14f8:	80 93 6c 38 	sts	0x386C, r24	; 0x80386c <JTAG2::packet+0x9>
    14fc:	65 c0       	rjmp	.+202    	; 0x15c8 <main+0x3ac>
process_command():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:275
    14fe:	84 31       	cpi	r24, 0x14	; 20
    1500:	09 f4       	brne	.+2      	; 0x1504 <main+0x2e8>
    1502:	ea c0       	rjmp	.+468    	; 0x16d8 <main+0x4bc>
    1504:	48 f4       	brcc	.+18     	; 0x1518 <main+0x2fc>
    1506:	8b 30       	cpi	r24, 0x0B	; 11
    1508:	50 f2       	brcs	.-108    	; 0x149e <main+0x282>
    150a:	8d 30       	cpi	r24, 0x0D	; 13
    150c:	10 f0       	brcs	.+4      	; 0x1512 <main+0x2f6>
    150e:	8f 30       	cpi	r24, 0x0F	; 15
    1510:	31 f6       	brne	.-116    	; 0x149e <main+0x282>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:338
        packet.size = 19;
      break;
    }
    case JTAG2::CMND_GO : {
      if (bit_is_set(UPDI_CONTROL, UPDI::UPDI_PROG_bp)) UPDI::runtime(UPDI::UPDI_CMD_GO);
      JTAG2::set_response(JTAG2::RSP_OK);
    1512:	80 e8       	ldi	r24, 0x80	; 128
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	9c c0       	rjmp	.+312    	; 0x1650 <main+0x434>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:275
}

/* JTAG Process */
inline void JTAG2::process_command (void) {
  wdt_reset();
  switch ( packet.body[0] ) {
    1518:	84 33       	cpi	r24, 0x34	; 52
    151a:	09 f4       	brne	.+2      	; 0x151e <main+0x302>
    151c:	46 c1       	rjmp	.+652    	; 0x17aa <main+0x58e>
    151e:	86 33       	cpi	r24, 0x36	; 54
    1520:	09 f4       	brne	.+2      	; 0x1524 <main+0x308>
    1522:	73 c1       	rjmp	.+742    	; 0x180a <main+0x5ee>
    1524:	85 31       	cpi	r24, 0x15	; 21
    1526:	09 f0       	breq	.+2      	; 0x152a <main+0x30e>
    1528:	ba cf       	rjmp	.-140    	; 0x149e <main+0x282>
    152a:	f3 cf       	rjmp	.-26     	; 0x1512 <main+0x2f6>
RTS_Disable():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/SYS.cpp:107
void SYS::RTS_Enable (void) {
  pinControlRegister(RTS_SENSE_PIN) = RTS_SENSE_CONFIG;
}

void SYS::RTS_Disable (void) {
  pinControlRegister(RTS_SENSE_PIN) = RTS_SENSE_DISABLE;
    152c:	88 e0       	ldi	r24, 0x08	; 8
    152e:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <UPDI::nvmprog_key+0x7f6ace>
WDT_ON():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/SYS.cpp:139
  _PROTECTED_WRITE(WDT_CTRLA, _wdt_period);
}

void SYS::WDT_OFF (void) { WDT_SET(WDT_PERIOD_OFF_gc); }

void SYS::WDT_ON (void) { WDT_SET(WDT_PERIOD_8KCLK_gc); }
    1532:	8b e0       	ldi	r24, 0x0B	; 11
    1534:	0e 94 83 01 	call	0x306	; 0x306 <SYS::WDT_SET(unsigned char)>
LED_Stop():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:187
}

/* 停止（UPDI許認可前）*/
/* TCA0はチャージポンプ駆動速度に変更 */
void TIM::LED_Stop (void) {
  if (TIM::mode != 0) {
    1538:	80 91 50 38 	lds	r24, 0x3850	; 0x803850 <TIM::mode>
    153c:	88 23       	and	r24, r24
    153e:	41 f0       	breq	.+16     	; 0x1550 <main+0x334>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:188
    TIM::mode = 0;
    1540:	10 92 50 38 	sts	0x3850, r1	; 0x803850 <TIM::mode>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:189
    TCA0_SPLIT_CTRLA = TCA_SPLIT_RUNSTDBY_bm | TCA_SPLIT_ENABLE_bm | TCA_SPLIT_CLKSEL_DIV1_gc;
    1544:	81 e8       	ldi	r24, 0x81	; 129
    1546:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <UPDI::nvmprog_key+0x7f70bc>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:190
    LEDG_EVOUT = EVSYS_USER_OFF_gc;
    154a:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <UPDI::nvmprog_key+0x7f6865>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:191
    digitalWrite(LEDG_PIN, LOW);
    154e:	0f 98       	cbi	0x01, 7	; 1
PG_Enable():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/SYS.cpp:95
/*
 * 各種ON/OFF
 */

void SYS::PG_Enable (void) {
  digitalWrite(PGEN_PIN, HIGH);
    1550:	48 9a       	sbi	0x09, 0	; 9
transfer_enable():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:90
  JTAG_USART.CTRLB = JTAG_USART_OFF;
}

void JTAG2::transfer_enable (void) {
  SYS::PG_Enable();
  pinMode(JTAG_TXD_PIN, OUTPUT);
    1552:	42 9a       	sbi	0x08, 2	; 8
    1554:	10 92 52 04 	sts	0x0452, r1	; 0x800452 <UPDI::nvmprog_key+0x7f6b0e>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:91
  JTAG_USART.CTRLB = JTAG_USART_ON;
    1558:	88 ec       	ldi	r24, 0xC8	; 200
    155a:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <UPDI::nvmprog_key+0x7f6ee2>
sign_on_response():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:175
  packet.body[3] = UPDI_NVMCTRL;
}

/* SIGN_ON Response */
void JTAG2::sign_on_response (void) {
  packet.size = sizeof(sign_on_resp);
    155e:	80 92 66 38 	sts	0x3866, r8	; 0x803866 <JTAG2::packet+0x3>
    1562:	90 92 67 38 	sts	0x3867, r9	; 0x803867 <JTAG2::packet+0x4>
    1566:	a0 92 68 38 	sts	0x3868, r10	; 0x803868 <JTAG2::packet+0x5>
    156a:	b0 92 69 38 	sts	0x3869, r11	; 0x803869 <JTAG2::packet+0x6>
    156e:	e8 e7       	ldi	r30, 0x78	; 120
    1570:	f0 e0       	ldi	r31, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:177
  for (uint8_t i = 0; i < sizeof(sign_on_resp); i++)
    packet.body[i] = pgm_read_byte( &sign_on_resp[i] );
    1572:	84 91       	lpm	r24, Z
    1574:	89 93       	st	Y+, r24
    1576:	31 96       	adiw	r30, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:176
}

/* SIGN_ON Response */
void JTAG2::sign_on_response (void) {
  packet.size = sizeof(sign_on_resp);
  for (uint8_t i = 0; i < sizeof(sign_on_resp); i++)
    1578:	28 e3       	ldi	r18, 0x38	; 56
    157a:	c8 38       	cpi	r28, 0x88	; 136
    157c:	d2 07       	cpc	r29, r18
    157e:	c9 f7       	brne	.-14     	; 0x1572 <main+0x356>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:182
    packet.body[i] = pgm_read_byte( &sign_on_resp[i] );
  /* SERNUMから Version情報を生成する */
  uint8_t* p = (uint8_t*) &SIGROW_SERNUM0;
  uint8_t* q = (uint8_t*) &SIGROW_SERNUM4;
  uint8_t* r = (uint8_t*) &packet.body[10];
    *r++ = *q++ ^ *p++ ^ *p++;
    1580:	80 91 07 11 	lds	r24, 0x1107	; 0x801107 <UPDI::nvmprog_key+0x7f77c3>
    1584:	90 91 03 11 	lds	r25, 0x1103	; 0x801103 <UPDI::nvmprog_key+0x7f77bf>
    1588:	89 27       	eor	r24, r25
    158a:	90 91 04 11 	lds	r25, 0x1104	; 0x801104 <UPDI::nvmprog_key+0x7f77c0>
    158e:	89 27       	eor	r24, r25
    1590:	80 93 75 38 	sts	0x3875, r24	; 0x803875 <JTAG2::packet+0x12>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:183
    *r++ = *q++ ^ *p++ ^ *p++;
    1594:	80 91 08 11 	lds	r24, 0x1108	; 0x801108 <UPDI::nvmprog_key+0x7f77c4>
    1598:	90 91 05 11 	lds	r25, 0x1105	; 0x801105 <UPDI::nvmprog_key+0x7f77c1>
    159c:	89 27       	eor	r24, r25
    159e:	90 91 06 11 	lds	r25, 0x1106	; 0x801106 <UPDI::nvmprog_key+0x7f77c2>
    15a2:	89 27       	eor	r24, r25
    15a4:	80 93 76 38 	sts	0x3876, r24	; 0x803876 <JTAG2::packet+0x13>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:184
    *r++ = *q++;
    15a8:	80 91 09 11 	lds	r24, 0x1109	; 0x801109 <UPDI::nvmprog_key+0x7f77c5>
    15ac:	80 93 77 38 	sts	0x3877, r24	; 0x803877 <JTAG2::packet+0x14>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:185
    *r++ = *q++;
    15b0:	80 91 0a 11 	lds	r24, 0x110A	; 0x80110a <UPDI::nvmprog_key+0x7f77c6>
    15b4:	80 93 78 38 	sts	0x3878, r24	; 0x803878 <JTAG2::packet+0x15>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:186
    *r++ = *q++;
    15b8:	80 91 0b 11 	lds	r24, 0x110B	; 0x80110b <UPDI::nvmprog_key+0x7f77c7>
    15bc:	80 93 79 38 	sts	0x3879, r24	; 0x803879 <JTAG2::packet+0x16>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:187
    *r++ = *q++;
    15c0:	80 91 0c 11 	lds	r24, 0x110C	; 0x80110c <UPDI::nvmprog_key+0x7f77c8>
    15c4:	80 93 7a 38 	sts	0x387A, r24	; 0x80387a <JTAG2::packet+0x17>
process_command():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:380
    }
    default : {
      JTAG2::set_response(JTAG2::RSP_FAILED);
    }
  }
  JTAG2::answer_transfer();
    15c8:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <JTAG2::answer_transfer()>
    15cc:	04 cf       	rjmp	.-504    	; 0x13d6 <main+0x1ba>
set_parameter():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:193
  JTAG2::answer_transfer();
}

/* CMND_SET_PARAMETER */
bool JTAG2::set_parameter (void) {
  uint8_t param_val = packet.body[2];
    15ce:	f0 90 6d 38 	lds	r15, 0x386D	; 0x80386d <JTAG2::packet+0xa>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:194
  switch (packet.body[1]) {
    15d2:	80 91 6c 38 	lds	r24, 0x386C	; 0x80386c <JTAG2::packet+0x9>
    15d6:	83 30       	cpi	r24, 0x03	; 3
    15d8:	b1 f1       	breq	.+108    	; 0x1646 <main+0x42a>
    15da:	85 30       	cpi	r24, 0x05	; 5
    15dc:	09 f0       	breq	.+2      	; 0x15e0 <main+0x3c4>
    15de:	99 cf       	rjmp	.-206    	; 0x1512 <main+0x2f6>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:203
      break;
    }
    /* JTAGインタフェース速度 */
    case JTAG2::PARAM_BAUD_RATE : {
      /* 対応範囲確認 */
      if ((param_val >= JTAG2::BAUD_LOWER) && (param_val <= JTAG2::BAUD_UPPER)) {
    15e0:	8e ef       	ldi	r24, 0xFE	; 254
    15e2:	8f 0d       	add	r24, r15
    15e4:	88 31       	cpi	r24, 0x18	; 24
    15e6:	90 f5       	brcc	.+100    	; 0x164c <main+0x430>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:204
        uint16_t baud = pgm_read_word( &BAUD_TABLE[param_val] );
    15e8:	8f 2d       	mov	r24, r15
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	fc 01       	movw	r30, r24
    15ee:	ee 0f       	add	r30, r30
    15f0:	ff 1f       	adc	r31, r31
    15f2:	eb 56       	subi	r30, 0x6B	; 107
    15f4:	ff 4f       	sbci	r31, 0xFF	; 255
    15f6:	c5 91       	lpm	r28, Z+
    15f8:	d4 91       	lpm	r29, Z
    15fa:	8e 01       	movw	r16, r28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:205
        if (baud) {
    15fc:	20 97       	sbiw	r28, 0x00	; 0
    15fe:	31 f1       	breq	.+76     	; 0x164c <main+0x430>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:207
          /* 正常なら応答したのち速度変更 */
          PARAM_BAUD_RATE_VAL = (jtag_baud_rate_e) param_val;
    1600:	80 93 36 38 	sts	0x3836, r24	; 0x803836 <JTAG2::PARAM_BAUD_RATE_VAL>
    1604:	90 93 37 38 	sts	0x3837, r25	; 0x803837 <JTAG2::PARAM_BAUD_RATE_VAL+0x1>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:208
          JTAG2::set_response(JTAG2::RSP_OK);
    1608:	80 e8       	ldi	r24, 0x80	; 128
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	0e 94 c9 01 	call	0x392	; 0x392 <JTAG2::set_response(JTAG2::jtag_response_e)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:209
          JTAG2::answer_transfer();
    1610:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <JTAG2::answer_transfer()>
flush():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:112
  JTAG_USART.STATUS = USART_TXCIF_bm;
  return JTAG_USART.TXDATAL = _data;
}

void JTAG2::flush (void) {
  loop_until_bit_is_set(JTAG_USART.STATUS, USART_TXCIF_bp);
    1614:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <UPDI::nvmprog_key+0x7f6ee0>
    1618:	86 ff       	sbrs	r24, 6
    161a:	fc cf       	rjmp	.-8      	; 0x1614 <main+0x3f8>
set_parameter():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:211
          /* 正常なら応答したのち速度変更 */
          PARAM_BAUD_RATE_VAL = (jtag_baud_rate_e) param_val;
          JTAG2::set_response(JTAG2::RSP_OK);
          JTAG2::answer_transfer();
          JTAG2::flush();
          if (baud < 64) {
    161c:	c0 34       	cpi	r28, 0x40	; 64
    161e:	d1 05       	cpc	r29, r1
    1620:	30 f4       	brcc	.+12     	; 0x162e <main+0x412>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:212
            JTAG_USART.CTRLB = JTAG_USART_DBLON;
    1622:	8a ec       	ldi	r24, 0xCA	; 202
    1624:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <UPDI::nvmprog_key+0x7f6ee2>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:213
            baud <<= 1;
    1628:	8e 01       	movw	r16, r28
    162a:	00 0f       	add	r16, r16
    162c:	11 1f       	adc	r17, r17
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:215
          }
          JTAG_USART.BAUD = baud;
    162e:	00 93 28 08 	sts	0x0828, r16	; 0x800828 <UPDI::nvmprog_key+0x7f6ee4>
    1632:	10 93 29 08 	sts	0x0829, r17	; 0x800829 <UPDI::nvmprog_key+0x7f6ee5>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:217
          /* terminal mode を許可する速度 */
          if (param_val == JTAG2::BAUD_38400 || param_val == JTAG2::BAUD_666666)
    1636:	85 e0       	ldi	r24, 0x05	; 5
    1638:	f8 16       	cp	r15, r24
    163a:	19 f0       	breq	.+6      	; 0x1642 <main+0x426>
    163c:	98 e1       	ldi	r25, 0x18	; 24
    163e:	f9 12       	cpse	r15, r25
    1640:	ca ce       	rjmp	.-620    	; 0x13d6 <main+0x1ba>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:218
            UPDI_CONTROL |= _BV(UPDI::UPDI_TERM_bp);
    1642:	e6 9a       	sbi	0x1c, 6	; 28
    1644:	c8 ce       	rjmp	.-624    	; 0x13d6 <main+0x1ba>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:197
bool JTAG2::set_parameter (void) {
  uint8_t param_val = packet.body[2];
  switch (packet.body[1]) {
    /* エミュレーションモード */
    case JTAG2::PARAM_EMU_MODE : {
      PARAM_EMU_MODE_VAL = param_val;
    1646:	f0 92 4f 38 	sts	0x384F, r15	; 0x80384f <JTAG2::PARAM_EMU_MODE_VAL>
    164a:	63 cf       	rjmp	.-314    	; 0x1512 <main+0x2f6>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:223
            UPDI_CONTROL |= _BV(UPDI::UPDI_TERM_bp);
          return false;
        }
      }
      /* 範囲違反は失敗応答 */
      JTAG2::set_response(JTAG2::RSP_ILLEGAL_VALUE);
    164c:	86 ea       	ldi	r24, 0xA6	; 166
    164e:	90 e0       	ldi	r25, 0x00	; 0
process_command():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:377
    case JTAG2::CMND_LEAVE_PROGMODE : {
      JTAG2::set_response(JTAG2::RSP_OK);
      break;
    }
    default : {
      JTAG2::set_response(JTAG2::RSP_FAILED);
    1650:	0e 94 c9 01 	call	0x392	; 0x392 <JTAG2::set_response(JTAG2::jtag_response_e)>
    1654:	b9 cf       	rjmp	.-142    	; 0x15c8 <main+0x3ac>
get_parameter():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:234
}

/* CMND_GET_PARAMETER */
void JTAG2::get_parameter (void) {
  volatile uint8_t &param_type = packet.body[1];
  switch (param_type) {
    1656:	80 91 6c 38 	lds	r24, 0x386C	; 0x80386c <JTAG2::packet+0x9>
    165a:	83 30       	cpi	r24, 0x03	; 3
    165c:	89 f1       	breq	.+98     	; 0x16c0 <main+0x4a4>
    165e:	38 f4       	brcc	.+14     	; 0x166e <main+0x452>
    1660:	81 30       	cpi	r24, 0x01	; 1
    1662:	81 f0       	breq	.+32     	; 0x1684 <main+0x468>
    1664:	82 30       	cpi	r24, 0x02	; 2
    1666:	b9 f0       	breq	.+46     	; 0x1696 <main+0x47a>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:265
      _CAPS16(packet.body[1])->word = SYS::get_vcc();
      packet.size_word[0] = 3;
      break;
    }
    default : {
      JTAG2::set_response(JTAG2::RSP_ILLEGAL_PARAMETER);
    1668:	81 ea       	ldi	r24, 0xA1	; 161
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	f1 cf       	rjmp	.-30     	; 0x1650 <main+0x434>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:234
}

/* CMND_GET_PARAMETER */
void JTAG2::get_parameter (void) {
  volatile uint8_t &param_type = packet.body[1];
  switch (param_type) {
    166e:	85 30       	cpi	r24, 0x05	; 5
    1670:	81 f1       	breq	.+96     	; 0x16d2 <main+0x4b6>
    1672:	86 30       	cpi	r24, 0x06	; 6
    1674:	c9 f7       	brne	.-14     	; 0x1668 <main+0x44c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:260
      packet.body[1] = PARAM_BAUD_RATE_VAL;
      packet.size_word[0] = 2;
      break;
    }
    case JTAG2::PARAM_VTARGET : {
      _CAPS16(packet.body[1])->word = SYS::get_vcc();
    1676:	0e 94 8c 01 	call	0x318	; 0x318 <SYS::get_vcc()>
    167a:	80 93 6c 38 	sts	0x386C, r24	; 0x80386c <JTAG2::packet+0x9>
    167e:	90 93 6d 38 	sts	0x386D, r25	; 0x80386d <JTAG2::packet+0xa>
    1682:	04 c0       	rjmp	.+8      	; 0x168c <main+0x470>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:236
/* CMND_GET_PARAMETER */
void JTAG2::get_parameter (void) {
  volatile uint8_t &param_type = packet.body[1];
  switch (param_type) {
    case JTAG2::PARAM_HW_VER : {
      packet.body[1] = sign_on_resp[5];
    1684:	80 93 6c 38 	sts	0x386C, r24	; 0x80386c <JTAG2::packet+0x9>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:237
      packet.body[2] = sign_on_resp[9];
    1688:	80 93 6d 38 	sts	0x386D, r24	; 0x80386d <JTAG2::packet+0xa>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:261
      packet.size_word[0] = 2;
      break;
    }
    case JTAG2::PARAM_VTARGET : {
      _CAPS16(packet.body[1])->word = SYS::get_vcc();
      packet.size_word[0] = 3;
    168c:	c0 92 66 38 	sts	0x3866, r12	; 0x803866 <JTAG2::packet+0x3>
    1690:	d0 92 67 38 	sts	0x3867, r13	; 0x803867 <JTAG2::packet+0x4>
    1694:	11 c0       	rjmp	.+34     	; 0x16b8 <main+0x49c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:242
      packet.body[2] = sign_on_resp[9];
      packet.size_word[0] = 3;
      break;
    }
    case JTAG2::PARAM_FW_VER : {
      packet.body[1] = sign_on_resp[3];
    1696:	91 e0       	ldi	r25, 0x01	; 1
    1698:	90 93 6c 38 	sts	0x386C, r25	; 0x80386c <JTAG2::packet+0x9>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:243
      packet.body[2] = sign_on_resp[4];
    169c:	80 93 6d 38 	sts	0x386D, r24	; 0x80386d <JTAG2::packet+0xa>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:244
      packet.body[3] = sign_on_resp[7];
    16a0:	85 e3       	ldi	r24, 0x35	; 53
    16a2:	80 93 6e 38 	sts	0x386E, r24	; 0x80386e <JTAG2::packet+0xb>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:245
      packet.body[4] = sign_on_resp[8];
    16a6:	87 e0       	ldi	r24, 0x07	; 7
    16a8:	80 93 6f 38 	sts	0x386F, r24	; 0x80386f <JTAG2::packet+0xc>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:246
      packet.size_word[0] = 5;
    16ac:	a5 e0       	ldi	r26, 0x05	; 5
    16ae:	b0 e0       	ldi	r27, 0x00	; 0
    16b0:	a0 93 66 38 	sts	0x3866, r26	; 0x803866 <JTAG2::packet+0x3>
    16b4:	b0 93 67 38 	sts	0x3867, r27	; 0x803867 <JTAG2::packet+0x4>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:269
    default : {
      JTAG2::set_response(JTAG2::RSP_ILLEGAL_PARAMETER);
      return;
    }
  }
  packet.body[0] = JTAG2::RSP_PARAMETER;
    16b8:	81 e8       	ldi	r24, 0x81	; 129
    16ba:	80 93 6b 38 	sts	0x386B, r24	; 0x80386b <JTAG2::packet+0x8>
    16be:	84 cf       	rjmp	.-248    	; 0x15c8 <main+0x3ac>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:250
      packet.body[4] = sign_on_resp[8];
      packet.size_word[0] = 5;
      break;
    }
    case JTAG2::PARAM_EMU_MODE : {
      packet.body[1] = PARAM_EMU_MODE_VAL;
    16c0:	80 91 4f 38 	lds	r24, 0x384F	; 0x80384f <JTAG2::PARAM_EMU_MODE_VAL>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:255
      packet.size_word[0] = 2;
      break;
    }
    case JTAG2::PARAM_BAUD_RATE : {
      packet.body[1] = PARAM_BAUD_RATE_VAL;
    16c4:	80 93 6c 38 	sts	0x386C, r24	; 0x80386c <JTAG2::packet+0x9>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:256
      packet.size_word[0] = 2;
    16c8:	20 92 66 38 	sts	0x3866, r2	; 0x803866 <JTAG2::packet+0x3>
    16cc:	30 92 67 38 	sts	0x3867, r3	; 0x803867 <JTAG2::packet+0x4>
    16d0:	f3 cf       	rjmp	.-26     	; 0x16b8 <main+0x49c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:255
      packet.body[1] = PARAM_EMU_MODE_VAL;
      packet.size_word[0] = 2;
      break;
    }
    case JTAG2::PARAM_BAUD_RATE : {
      packet.body[1] = PARAM_BAUD_RATE_VAL;
    16d2:	80 91 36 38 	lds	r24, 0x3836	; 0x803836 <JTAG2::PARAM_BAUD_RATE_VAL>
    16d6:	f6 cf       	rjmp	.-20     	; 0x16c4 <main+0x4a8>
process_command():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:293
    case JTAG2::CMND_GET_PARAMETER : {
      JTAG2::get_parameter();
      break;
    }
    case JTAG2::CMND_ENTER_PROGMODE : {
      uint8_t c = UPDI_CONTROL;
    16d8:	cc b3       	in	r28, 0x1c	; 28
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:294
      UPDI::updi_activate();
    16da:	0e 94 46 03 	call	0x68c	; 0x68c <UPDI::updi_activate()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:295
      JTAG2::set_response(JTAG2::RSP_OK);
    16de:	80 e8       	ldi	r24, 0x80	; 128
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	0e 94 c9 01 	call	0x392	; 0x392 <JTAG2::set_response(JTAG2::jtag_response_e)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:296
      if (!(c & _BV(UPDI::UPDI_INFO_bp)) && bit_is_set(UPDI_CONTROL, UPDI::UPDI_INFO_bp))
    16e6:	c0 fd       	sbrc	r28, 0
    16e8:	0e c0       	rjmp	.+28     	; 0x1706 <main+0x4ea>
    16ea:	e0 9b       	sbis	0x1c, 0	; 28
    16ec:	0c c0       	rjmp	.+24     	; 0x1706 <main+0x4ea>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:297
        packet.size = 20;
    16ee:	84 e1       	ldi	r24, 0x14	; 20
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	a0 e0       	ldi	r26, 0x00	; 0
    16f4:	b0 e0       	ldi	r27, 0x00	; 0
    16f6:	80 93 66 38 	sts	0x3866, r24	; 0x803866 <JTAG2::packet+0x3>
    16fa:	90 93 67 38 	sts	0x3867, r25	; 0x803867 <JTAG2::packet+0x4>
    16fe:	a0 93 68 38 	sts	0x3868, r26	; 0x803868 <JTAG2::packet+0x5>
    1702:	b0 93 69 38 	sts	0x3869, r27	; 0x803869 <JTAG2::packet+0x6>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:298
      TIM::LED_Blink();
    1706:	0e 94 49 01 	call	0x292	; 0x292 <TIM::LED_Blink()>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:300
      /* terminal mode 許可時は WDTを無効にする */
      if (bit_is_set(UPDI_CONTROL, UPDI::UPDI_TERM_bp)) SYS::WDT_OFF();
    170a:	e6 9b       	sbis	0x1c, 6	; 28
    170c:	5d cf       	rjmp	.-326    	; 0x15c8 <main+0x3ac>
WDT_OFF():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/SYS.cpp:137
void SYS::WDT_SET (uint8_t _wdt_period) {
  loop_until_bit_is_clear(WDT_STATUS, WDT_SYNCBUSY_bp);
  _PROTECTED_WRITE(WDT_CTRLA, _wdt_period);
}

void SYS::WDT_OFF (void) { WDT_SET(WDT_PERIOD_OFF_gc); }
    170e:	80 e0       	ldi	r24, 0x00	; 0
    1710:	0e 94 83 01 	call	0x306	; 0x306 <SYS::WDT_SET(unsigned char)>
    1714:	59 cf       	rjmp	.-334    	; 0x15c8 <main+0x3ac>
main():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:246

bool UPDI::check_sig (void) {
  uint8_t mem_type  = JTAG2::packet.body[1];
  uint8_t s = _CAPS32(JTAG2::packet.body[2])->bytes[0];
  uint8_t a = _CAPS32(JTAG2::packet.body[6])->bytes[0]
    - (bit_is_set(UPDI_NVMCTRL, UPDI_BROW_bp) ? (uint8_t)NVM::EB_SIGROW
    1716:	90 e8       	ldi	r25, 0x80	; 128
    1718:	d1 ce       	rjmp	.-606    	; 0x14bc <main+0x2a0>
check_sig():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:247
                                              : (uint8_t)NVM::BASE_SIGROW);
    171a:	89 1b       	sub	r24, r25
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:252
  uint8_t c;
  if (bit_is_clear(UPDI_CONTROL, UPDI_PROG_bp) && mem_type == JTAG2::MTYPE_SIGN_JTAG && s == 1) {
    JTAG2::packet.body[0] = JTAG2::RSP_MEMORY;
    if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) c = UPDI_LASTH ? 0x00 : 0xFF;
    else if (a == 0) c = 0x1E;
    171c:	81 f0       	breq	.+32     	; 0x173e <main+0x522>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:253
    else if (a == 1) c = bit_is_set(UPDI_NVMCTRL, UPDI_GEN2_bp) ? 'A'
    171e:	81 30       	cpi	r24, 0x01	; 1
    1720:	31 f4       	brne	.+12     	; 0x172e <main+0x512>
    1722:	ee 99       	sbic	0x1d, 6	; 29
    1724:	0e c0       	rjmp	.+28     	; 0x1742 <main+0x526>
    1726:	ed 99       	sbic	0x1d, 5	; 29
    1728:	0e c0       	rjmp	.+28     	; 0x1746 <main+0x52a>
main():
    172a:	84 e7       	ldi	r24, 0x74	; 116
    172c:	dd ce       	rjmp	.-582    	; 0x14e8 <main+0x2cc>
check_sig():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:255
                       : bit_is_set(UPDI_NVMCTRL, UPDI_LOWF_bp) ? 'm' : 't';
    else if (a == 2) c = bit_is_set(UPDI_NVMCTRL, UPDI_GEN3_bp) ? '3'
    172e:	82 30       	cpi	r24, 0x02	; 2
    1730:	81 f4       	brne	.+32     	; 0x1752 <main+0x536>
    1732:	ef 99       	sbic	0x1d, 7	; 29
    1734:	0a c0       	rjmp	.+20     	; 0x174a <main+0x52e>
    1736:	ee 99       	sbic	0x1d, 6	; 29
    1738:	0a c0       	rjmp	.+20     	; 0x174e <main+0x532>
main():
    173a:	80 e3       	ldi	r24, 0x30	; 48
    173c:	d5 ce       	rjmp	.-598    	; 0x14e8 <main+0x2cc>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:252
                                              : (uint8_t)NVM::BASE_SIGROW);
  uint8_t c;
  if (bit_is_clear(UPDI_CONTROL, UPDI_PROG_bp) && mem_type == JTAG2::MTYPE_SIGN_JTAG && s == 1) {
    JTAG2::packet.body[0] = JTAG2::RSP_MEMORY;
    if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) c = UPDI_LASTH ? 0x00 : 0xFF;
    else if (a == 0) c = 0x1E;
    173e:	8e e1       	ldi	r24, 0x1E	; 30
    1740:	d3 ce       	rjmp	.-602    	; 0x14e8 <main+0x2cc>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:253
    else if (a == 1) c = bit_is_set(UPDI_NVMCTRL, UPDI_GEN2_bp) ? 'A'
    1742:	81 e4       	ldi	r24, 0x41	; 65
    1744:	d1 ce       	rjmp	.-606    	; 0x14e8 <main+0x2cc>
    1746:	8d e6       	ldi	r24, 0x6D	; 109
    1748:	cf ce       	rjmp	.-610    	; 0x14e8 <main+0x2cc>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/UPDI.cpp:255
                       : bit_is_set(UPDI_NVMCTRL, UPDI_LOWF_bp) ? 'm' : 't';
    else if (a == 2) c = bit_is_set(UPDI_NVMCTRL, UPDI_GEN3_bp) ? '3'
    174a:	83 e3       	ldi	r24, 0x33	; 51
    174c:	cd ce       	rjmp	.-614    	; 0x14e8 <main+0x2cc>
    174e:	82 e3       	ldi	r24, 0x32	; 50
    1750:	cb ce       	rjmp	.-618    	; 0x14e8 <main+0x2cc>
process_command():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:307
    }
    case JTAG2::CMND_READ_MEMORY : {
      /* 非PROG でも SIG要求にはダミー応答する */
      if (UPDI::check_sig()) break;
      /* terminal mode でなければLED高速点滅 */
      if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_TERM_bp)) TIM::LED_Fast();
    1752:	e6 99       	sbic	0x1c, 6	; 28
    1754:	17 c0       	rjmp	.+46     	; 0x1784 <main+0x568>
LED_TCB1():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:160
    LEDG_EVOUT = EVSYS_USER_CHANNEL2_gc;
  }
}

void LED_TCB1 (uint8_t mode, uint16_t ccmp) {
  if (TIM::mode != mode) {
    1756:	80 91 50 38 	lds	r24, 0x3850	; 0x803850 <TIM::mode>
    175a:	84 30       	cpi	r24, 0x04	; 4
    175c:	99 f0       	breq	.+38     	; 0x1784 <main+0x568>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:161
    TIM::mode = mode;
    175e:	84 e0       	ldi	r24, 0x04	; 4
    1760:	80 93 50 38 	sts	0x3850, r24	; 0x803850 <TIM::mode>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:162
    TCB1_CCMP = ccmp;
    1764:	85 e1       	ldi	r24, 0x15	; 21
    1766:	91 e0       	ldi	r25, 0x01	; 1
    1768:	80 93 9c 0a 	sts	0x0A9C, r24	; 0x800a9c <UPDI::nvmprog_key+0x7f7158>
    176c:	90 93 9d 0a 	sts	0x0A9D, r25	; 0x800a9d <UPDI::nvmprog_key+0x7f7159>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:163
    TCB1_CNT = 0;
    1770:	10 92 9a 0a 	sts	0x0A9A, r1	; 0x800a9a <UPDI::nvmprog_key+0x7f7156>
    1774:	10 92 9b 0a 	sts	0x0A9B, r1	; 0x800a9b <UPDI::nvmprog_key+0x7f7157>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:164
    TCB1_CTRLA = TCB_RUNSTDBY_bm | TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
    1778:	8f e4       	ldi	r24, 0x4F	; 79
    177a:	80 93 90 0a 	sts	0x0A90, r24	; 0x800a90 <UPDI::nvmprog_key+0x7f714c>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/TIM.cpp:165
    LEDG_EVOUT = EVSYS_USER_CHANNEL0_gc;
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <UPDI::nvmprog_key+0x7f6865>
process_command():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:312

      /* PROG状態かUSERROW応答可能な場合はメモリ読出処理へ */
      if ((bit_is_clear(UPDI_CONTROL, UPDI::UPDI_PROG_bp)
        && bit_is_clear(UPDI_CONTROL, UPDI::UPDI_URWR_bp))
      || !UPDI::runtime(UPDI::UPDI_CMD_READ_MEMORY)) {
    1784:	e1 99       	sbic	0x1c, 1	; 28
    1786:	05 c0       	rjmp	.+10     	; 0x1792 <main+0x576>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:311
      /* terminal mode でなければLED高速点滅 */
      if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_TERM_bp)) TIM::LED_Fast();

      /* PROG状態かUSERROW応答可能な場合はメモリ読出処理へ */
      if ((bit_is_clear(UPDI_CONTROL, UPDI::UPDI_PROG_bp)
        && bit_is_clear(UPDI_CONTROL, UPDI::UPDI_URWR_bp))
    1788:	e5 99       	sbic	0x1c, 5	; 28
    178a:	03 c0       	rjmp	.+6      	; 0x1792 <main+0x576>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:313
      || !UPDI::runtime(UPDI::UPDI_CMD_READ_MEMORY)) {
        JTAG2::set_response(JTAG2::RSP_ILLEGAL_MCU_STATE);
    178c:	85 ea       	ldi	r24, 0xA5	; 165
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	5f cf       	rjmp	.-322    	; 0x1650 <main+0x434>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:312
      if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_TERM_bp)) TIM::LED_Fast();

      /* PROG状態かUSERROW応答可能な場合はメモリ読出処理へ */
      if ((bit_is_clear(UPDI_CONTROL, UPDI::UPDI_PROG_bp)
        && bit_is_clear(UPDI_CONTROL, UPDI::UPDI_URWR_bp))
      || !UPDI::runtime(UPDI::UPDI_CMD_READ_MEMORY)) {
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	d3 d8       	rcall	.-3674   	; 0x93c <UPDI::runtime(unsigned char)>
    1796:	81 11       	cpse	r24, r1
    1798:	17 cf       	rjmp	.-466    	; 0x15c8 <main+0x3ac>
    179a:	f8 cf       	rjmp	.-16     	; 0x178c <main+0x570>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:319
      }
      break;
    }
    case JTAG2::CMND_WRITE_MEMORY : {
      JTAG2::set_response(
        UPDI::runtime(UPDI::UPDI_CMD_WRITE_MEMORY)
    179c:	82 e0       	ldi	r24, 0x02	; 2
    179e:	ce d8       	rcall	.-3684   	; 0x93c <UPDI::runtime(unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:318
        JTAG2::set_response(JTAG2::RSP_ILLEGAL_MCU_STATE);
      }
      break;
    }
    case JTAG2::CMND_WRITE_MEMORY : {
      JTAG2::set_response(
    17a0:	81 11       	cpse	r24, r1
    17a2:	b7 ce       	rjmp	.-658    	; 0x1512 <main+0x2f6>
main():
    17a4:	82 ea       	ldi	r24, 0xA2	; 162
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	53 cf       	rjmp	.-346    	; 0x1650 <main+0x434>
process_command():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:328
      break;
    }
    case JTAG2::CMND_XMEGA_ERASE : {
      uint8_t c = UPDI_CONTROL;
      JTAG2::set_response(
        UPDI::runtime(UPDI::UPDI_CMD_ERASE)
    17aa:	cc b3       	in	r28, 0x1c	; 28
    17ac:	83 e0       	ldi	r24, 0x03	; 3
    17ae:	c6 d8       	rcall	.-3700   	; 0x93c <UPDI::runtime(unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:327
      );
      break;
    }
    case JTAG2::CMND_XMEGA_ERASE : {
      uint8_t c = UPDI_CONTROL;
      JTAG2::set_response(
    17b0:	81 11       	cpse	r24, r1
    17b2:	15 c0       	rjmp	.+42     	; 0x17de <main+0x5c2>
main():
    17b4:	85 ea       	ldi	r24, 0xA5	; 165
    17b6:	90 e0       	ldi	r25, 0x00	; 0
process_command():
    17b8:	0e 94 c9 01 	call	0x392	; 0x392 <JTAG2::set_response(JTAG2::jtag_response_e)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:332
        UPDI::runtime(UPDI::UPDI_CMD_ERASE)
        ? JTAG2::RSP_OK
        : JTAG2::RSP_ILLEGAL_MCU_STATE
      );
      if (!(c & _BV(UPDI::UPDI_INFO_bp)) && bit_is_set(UPDI_CONTROL, UPDI::UPDI_INFO_bp))
    17bc:	c0 fd       	sbrc	r28, 0
    17be:	04 cf       	rjmp	.-504    	; 0x15c8 <main+0x3ac>
    17c0:	e0 9b       	sbis	0x1c, 0	; 28
    17c2:	02 cf       	rjmp	.-508    	; 0x15c8 <main+0x3ac>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:333
        packet.size = 19;
    17c4:	83 e1       	ldi	r24, 0x13	; 19
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	a0 e0       	ldi	r26, 0x00	; 0
    17ca:	b0 e0       	ldi	r27, 0x00	; 0
    17cc:	80 93 66 38 	sts	0x3866, r24	; 0x803866 <JTAG2::packet+0x3>
    17d0:	90 93 67 38 	sts	0x3867, r25	; 0x803867 <JTAG2::packet+0x4>
    17d4:	a0 93 68 38 	sts	0x3868, r26	; 0x803868 <JTAG2::packet+0x5>
    17d8:	b0 93 69 38 	sts	0x3869, r27	; 0x803869 <JTAG2::packet+0x6>
    17dc:	f5 ce       	rjmp	.-534    	; 0x15c8 <main+0x3ac>
main():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:327
      );
      break;
    }
    case JTAG2::CMND_XMEGA_ERASE : {
      uint8_t c = UPDI_CONTROL;
      JTAG2::set_response(
    17de:	80 e8       	ldi	r24, 0x80	; 128
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	ea cf       	rjmp	.-44     	; 0x17b8 <main+0x59c>
process_command():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:337
      if (!(c & _BV(UPDI::UPDI_INFO_bp)) && bit_is_set(UPDI_CONTROL, UPDI::UPDI_INFO_bp))
        packet.size = 19;
      break;
    }
    case JTAG2::CMND_GO : {
      if (bit_is_set(UPDI_CONTROL, UPDI::UPDI_PROG_bp)) UPDI::runtime(UPDI::UPDI_CMD_GO);
    17e4:	e1 9b       	sbis	0x1c, 1	; 28
    17e6:	95 ce       	rjmp	.-726    	; 0x1512 <main+0x2f6>
    17e8:	84 e0       	ldi	r24, 0x04	; 4
    17ea:	a8 d8       	rcall	.-3760   	; 0x93c <UPDI::runtime(unsigned char)>
    17ec:	92 ce       	rjmp	.-732    	; 0x1512 <main+0x2f6>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:342
      JTAG2::set_response(JTAG2::RSP_OK);
      break;
    }
    case JTAG2::CMND_SIGN_OFF : {
      JTAG2::set_response(JTAG2::RSP_OK);
    17ee:	80 e8       	ldi	r24, 0x80	; 128
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	0e 94 c9 01 	call	0x392	; 0x392 <JTAG2::set_response(JTAG2::jtag_response_e)>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:343
      JTAG2::answer_transfer();
    17f6:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <JTAG2::answer_transfer()>
flush():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:112
  JTAG_USART.STATUS = USART_TXCIF_bm;
  return JTAG_USART.TXDATAL = _data;
}

void JTAG2::flush (void) {
  loop_until_bit_is_set(JTAG_USART.STATUS, USART_TXCIF_bp);
    17fa:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <UPDI::nvmprog_key+0x7f6ee0>
    17fe:	86 ff       	sbrs	r24, 6
    1800:	fc cf       	rjmp	.-8      	; 0x17fa <main+0x5de>
WDT_REBOOT():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/SYS.cpp:142

void SYS::WDT_ON (void) { WDT_SET(WDT_PERIOD_8KCLK_gc); }

void SYS::WDT_REBOOT (void) {
  WDT_SET(WDT_PERIOD_8CLK_gc);
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	0e 94 83 01 	call	0x306	; 0x306 <SYS::WDT_SET(unsigned char)>
    1808:	ff cf       	rjmp	.-2      	; 0x1808 <main+0x5ec>
process_command():
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:352
      SYS::WDT_REBOOT();
      /* Session Complete */
    }
    // Ex) struct xmega_device_desc
    case JTAG2::CMND_SET_XMEGA_PARAMS : {
      NVM::nvm_eeprom_offset   = _CAPS32(packet.body[12])->dword;
    180a:	80 91 77 38 	lds	r24, 0x3877	; 0x803877 <JTAG2::packet+0x14>
    180e:	90 91 78 38 	lds	r25, 0x3878	; 0x803878 <JTAG2::packet+0x15>
    1812:	a0 91 79 38 	lds	r26, 0x3879	; 0x803879 <JTAG2::packet+0x16>
    1816:	b0 91 7a 38 	lds	r27, 0x387A	; 0x80387a <JTAG2::packet+0x17>
    181a:	80 93 5f 38 	sts	0x385F, r24	; 0x80385f <NVM::nvm_eeprom_offset>
    181e:	90 93 60 38 	sts	0x3860, r25	; 0x803860 <NVM::nvm_eeprom_offset+0x1>
    1822:	a0 93 61 38 	sts	0x3861, r26	; 0x803861 <NVM::nvm_eeprom_offset+0x2>
    1826:	b0 93 62 38 	sts	0x3862, r27	; 0x803862 <NVM::nvm_eeprom_offset+0x3>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:354
    //NVM::nvm_fuse_offset     = _CAPS32(packet.body[16])->dword;
      NVM::nvm_user_sig_offset = _CAPS32(packet.body[24])->dword;
    182a:	80 91 83 38 	lds	r24, 0x3883	; 0x803883 <JTAG2::packet+0x20>
    182e:	90 91 84 38 	lds	r25, 0x3884	; 0x803884 <JTAG2::packet+0x21>
    1832:	a0 91 85 38 	lds	r26, 0x3885	; 0x803885 <JTAG2::packet+0x22>
    1836:	b0 91 86 38 	lds	r27, 0x3886	; 0x803886 <JTAG2::packet+0x23>
    183a:	80 93 5b 38 	sts	0x385B, r24	; 0x80385b <NVM::nvm_user_sig_offset>
    183e:	90 93 5c 38 	sts	0x385C, r25	; 0x80385c <NVM::nvm_user_sig_offset+0x1>
    1842:	a0 93 5d 38 	sts	0x385D, r26	; 0x80385d <NVM::nvm_user_sig_offset+0x2>
    1846:	b0 93 5e 38 	sts	0x385E, r27	; 0x80385e <NVM::nvm_user_sig_offset+0x3>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:355
      NVM::nvm_data_offset     = _CAPS32(packet.body[32])->dword;
    184a:	80 91 8b 38 	lds	r24, 0x388B	; 0x80388b <JTAG2::packet+0x28>
    184e:	90 91 8c 38 	lds	r25, 0x388C	; 0x80388c <JTAG2::packet+0x29>
    1852:	a0 91 8d 38 	lds	r26, 0x388D	; 0x80388d <JTAG2::packet+0x2a>
    1856:	b0 91 8e 38 	lds	r27, 0x388E	; 0x80388e <JTAG2::packet+0x2b>
    185a:	80 93 57 38 	sts	0x3857, r24	; 0x803857 <NVM::nvm_data_offset>
    185e:	90 93 58 38 	sts	0x3858, r25	; 0x803858 <NVM::nvm_data_offset+0x1>
    1862:	a0 93 59 38 	sts	0x3859, r26	; 0x803859 <NVM::nvm_data_offset+0x2>
    1866:	b0 93 5a 38 	sts	0x385A, r27	; 0x80385a <NVM::nvm_data_offset+0x3>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:356
      NVM::flash_page_size     = _CAPS16(packet.body[42])->word;
    186a:	80 91 95 38 	lds	r24, 0x3895	; 0x803895 <JTAG2::packet+0x32>
    186e:	90 91 96 38 	lds	r25, 0x3896	; 0x803896 <JTAG2::packet+0x33>
    1872:	80 93 55 38 	sts	0x3855, r24	; 0x803855 <NVM::flash_page_size>
    1876:	90 93 56 38 	sts	0x3856, r25	; 0x803856 <NVM::flash_page_size+0x1>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:359
    //NVM::eeprom_page_size    = packet.body[46];
      // AVR_DA/DB/DD/EA/EB
      if (_CAPS32(NVM::nvm_user_sig_offset)->bytes[1] != 0x13) {
    187a:	80 91 5c 38 	lds	r24, 0x385C	; 0x80385c <NVM::nvm_user_sig_offset+0x1>
    187e:	83 31       	cpi	r24, 0x13	; 19
    1880:	09 f4       	brne	.+2      	; 0x1884 <main+0x668>
    1882:	47 ce       	rjmp	.-882    	; 0x1512 <main+0x2f6>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:360
        NVM::nvm_flash_offset  = 0x800000;
    1884:	80 e0       	ldi	r24, 0x00	; 0
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	a0 e8       	ldi	r26, 0x80	; 128
    188a:	b0 e0       	ldi	r27, 0x00	; 0
    188c:	80 93 51 38 	sts	0x3851, r24	; 0x803851 <NVM::nvm_flash_offset>
    1890:	90 93 52 38 	sts	0x3852, r25	; 0x803852 <NVM::nvm_flash_offset+0x1>
    1894:	a0 93 53 38 	sts	0x3853, r26	; 0x803853 <NVM::nvm_flash_offset+0x2>
    1898:	b0 93 54 38 	sts	0x3854, r27	; 0x803854 <NVM::nvm_flash_offset+0x3>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:361
        UPDI_NVMCTRL |= _BV(UPDI::UPDI_GEN2_bp);
    189c:	ee 9a       	sbi	0x1d, 6	; 29
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:363
        // EB
        if (_CAPS32(NVM::nvm_user_sig_offset)->bytes[1] == 0x12) {
    189e:	80 91 5c 38 	lds	r24, 0x385C	; 0x80385c <NVM::nvm_user_sig_offset+0x1>
    18a2:	82 31       	cpi	r24, 0x12	; 18
    18a4:	09 f0       	breq	.+2      	; 0x18a8 <main+0x68c>
    18a6:	35 ce       	rjmp	.-918    	; 0x1512 <main+0x2f6>
/Users/askn/Documents/Zinnia-tools/Products/hardware/UPDI4AVR/libraries/UPDI4AVR/examples/UPDI4AVR_FW753B/src/JTAG2.cpp:364
          UPDI_NVMCTRL |= _BV(UPDI::UPDI_BROW_bp);
    18a8:	ec 9a       	sbi	0x1d, 4	; 29
    18aa:	33 ce       	rjmp	.-922    	; 0x1512 <main+0x2f6>

000018ac <setjmp>:
setjmp():
    18ac:	dc 01       	movw	r26, r24
    18ae:	2d 92       	st	X+, r2
    18b0:	3d 92       	st	X+, r3
    18b2:	4d 92       	st	X+, r4
    18b4:	5d 92       	st	X+, r5
    18b6:	6d 92       	st	X+, r6
    18b8:	7d 92       	st	X+, r7
    18ba:	8d 92       	st	X+, r8
    18bc:	9d 92       	st	X+, r9
    18be:	ad 92       	st	X+, r10
    18c0:	bd 92       	st	X+, r11
    18c2:	cd 92       	st	X+, r12
    18c4:	dd 92       	st	X+, r13
    18c6:	ed 92       	st	X+, r14
    18c8:	fd 92       	st	X+, r15
    18ca:	0d 93       	st	X+, r16
    18cc:	1d 93       	st	X+, r17
    18ce:	cd 93       	st	X+, r28
    18d0:	dd 93       	st	X+, r29
    18d2:	ff 91       	pop	r31
    18d4:	ef 91       	pop	r30
    18d6:	8d b7       	in	r24, 0x3d	; 61
    18d8:	8d 93       	st	X+, r24
    18da:	8e b7       	in	r24, 0x3e	; 62
    18dc:	8d 93       	st	X+, r24
    18de:	8f b7       	in	r24, 0x3f	; 63
    18e0:	8d 93       	st	X+, r24
    18e2:	ed 93       	st	X+, r30
    18e4:	fd 93       	st	X+, r31
    18e6:	88 27       	eor	r24, r24
    18e8:	99 27       	eor	r25, r25
    18ea:	09 94       	ijmp

000018ec <longjmp>:
longjmp():
    18ec:	dc 01       	movw	r26, r24
    18ee:	cb 01       	movw	r24, r22
    18f0:	81 30       	cpi	r24, 0x01	; 1
    18f2:	91 05       	cpc	r25, r1
    18f4:	81 1d       	adc	r24, r1
    18f6:	2d 90       	ld	r2, X+
    18f8:	3d 90       	ld	r3, X+
    18fa:	4d 90       	ld	r4, X+
    18fc:	5d 90       	ld	r5, X+
    18fe:	6d 90       	ld	r6, X+
    1900:	7d 90       	ld	r7, X+
    1902:	8d 90       	ld	r8, X+
    1904:	9d 90       	ld	r9, X+
    1906:	ad 90       	ld	r10, X+
    1908:	bd 90       	ld	r11, X+
    190a:	cd 90       	ld	r12, X+
    190c:	dd 90       	ld	r13, X+
    190e:	ed 90       	ld	r14, X+
    1910:	fd 90       	ld	r15, X+
    1912:	0d 91       	ld	r16, X+
    1914:	1d 91       	ld	r17, X+
    1916:	cd 91       	ld	r28, X+
    1918:	dd 91       	ld	r29, X+
    191a:	ed 91       	ld	r30, X+
    191c:	fd 91       	ld	r31, X+
    191e:	0d 90       	ld	r0, X+
    1920:	0f be       	out	0x3f, r0	; 63
    1922:	ed bf       	out	0x3d, r30	; 61
    1924:	fe bf       	out	0x3e, r31	; 62
    1926:	ed 91       	ld	r30, X+
    1928:	fd 91       	ld	r31, X+
    192a:	09 94       	ijmp

0000192c <_exit>:
exit():
    192c:	f8 94       	cli

0000192e <__stop_program>:
__stop_program():
    192e:	ff cf       	rjmp	.-2      	; 0x192e <__stop_program>

Disassembly of section .nvmem:

00001986 <.nvmem>:
	...
