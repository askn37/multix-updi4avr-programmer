
/var/folders/mz/_z9vt_y13rdf9tt_4qkvv0k40000gn/T/arduino_build_646404/UPDI4AVR_FW753B.ino.elf:     file format elf32-avr


Disassembly of section .data:

00803800 <__data_start>:
__data_start():
  803800:	55 c8       	rjmp	.-3926   	; 0x8028ac <UPDI::nvmprog_key+0x7f8f8c>
  803802:	00 c3       	rjmp	.+1536   	; 0x803e04 <__bss_end+0x38c>
  803804:	04 55       	subi	r16, 0x54	; 84

00803805 <UPDI::send_repeat_header(unsigned char, unsigned long, unsigned int)::set_repeat>:
  803805:	55 a0 00 55 04                                      U..U.

0080380a <UPDI::send_repeat_header(unsigned char, unsigned long, unsigned int)::set_ptr>:
  80380a:	55 6a 00 00 00 00                                   Uj....

00803810 <UPDI::st8(unsigned long, unsigned char)::set_ptr>:
  803810:	55 48 00 00 00 00                                   UH....

00803816 <UPDI::ld8(unsigned long)::set_ptr>:
  803816:	55 08 00 00 00 00                                   U.....

0080381c <UPDI::get_cs_stat(unsigned char)::set_ptr>:
  80381c:	55 00                                               U.

0080381e <UPDI::set_cs_stat(unsigned char, unsigned char)::set_ptr>:
  80381e:	55 00 00                                            U..

00803821 <UPDI::enter_updi(bool)::set_ptr>:
  803821:	55 e5                                               U.

00803823 <NVM::set_repeat_rsd>:
  803823:	55 c2 0e 55 a0 00 55 65                             U..U..Ue

0080382b <NVM::set_repeat>:
  80382b:	55 a0 00 55 64                                      U..Ud

00803830 <NVM::set_ptr>:
  803830:	55 6a 00 00 00 00                                   Uj....

00803836 <JTAG2::PARAM_BAUD_RATE_VAL>:
  803836:	04 00                                               ..

Disassembly of section .text:

00000000 <__vectors>:
__vectors():
../../../../crt1/gcrt1.S:61
       0:	67 c0       	rjmp	.+206    	; 0xd0 <__ctors_end>
       2:	00 00       	nop
../../../../crt1/gcrt1.S:67
       4:	82 c0       	rjmp	.+260    	; 0x10a <__bad_interrupt>
       6:	00 00       	nop
../../../../crt1/gcrt1.S:68
       8:	80 c0       	rjmp	.+256    	; 0x10a <__bad_interrupt>
       a:	00 00       	nop
../../../../crt1/gcrt1.S:69
       c:	7e c0       	rjmp	.+252    	; 0x10a <__bad_interrupt>
       e:	00 00       	nop
../../../../crt1/gcrt1.S:70
      10:	7c c0       	rjmp	.+248    	; 0x10a <__bad_interrupt>
      12:	00 00       	nop
../../../../crt1/gcrt1.S:71
      14:	7a c0       	rjmp	.+244    	; 0x10a <__bad_interrupt>
      16:	00 00       	nop
../../../../crt1/gcrt1.S:72
      18:	0c 94 8d 08 	jmp	0x111a	; 0x111a <__vector_6>
../../../../crt1/gcrt1.S:73
      1c:	0c 94 c3 08 	jmp	0x1186	; 0x1186 <__vector_7>
../../../../crt1/gcrt1.S:74
      20:	74 c0       	rjmp	.+232    	; 0x10a <__bad_interrupt>
      22:	00 00       	nop
../../../../crt1/gcrt1.S:75
      24:	72 c0       	rjmp	.+228    	; 0x10a <__bad_interrupt>
      26:	00 00       	nop
../../../../crt1/gcrt1.S:76
      28:	70 c0       	rjmp	.+224    	; 0x10a <__bad_interrupt>
      2a:	00 00       	nop
../../../../crt1/gcrt1.S:77
      2c:	6e c0       	rjmp	.+220    	; 0x10a <__bad_interrupt>
      2e:	00 00       	nop
../../../../crt1/gcrt1.S:78
      30:	6c c0       	rjmp	.+216    	; 0x10a <__bad_interrupt>
      32:	00 00       	nop
../../../../crt1/gcrt1.S:79
      34:	0c 94 82 08 	jmp	0x1104	; 0x1104 <__vector_13>
../../../../crt1/gcrt1.S:80
      38:	68 c0       	rjmp	.+208    	; 0x10a <__bad_interrupt>
      3a:	00 00       	nop
../../../../crt1/gcrt1.S:81
      3c:	66 c0       	rjmp	.+204    	; 0x10a <__bad_interrupt>
      3e:	00 00       	nop
../../../../crt1/gcrt1.S:82
      40:	64 c0       	rjmp	.+200    	; 0x10a <__bad_interrupt>
      42:	00 00       	nop
../../../../crt1/gcrt1.S:83
      44:	62 c0       	rjmp	.+196    	; 0x10a <__bad_interrupt>
      46:	00 00       	nop
../../../../crt1/gcrt1.S:84
      48:	60 c0       	rjmp	.+192    	; 0x10a <__bad_interrupt>
      4a:	00 00       	nop
../../../../crt1/gcrt1.S:85
      4c:	5e c0       	rjmp	.+188    	; 0x10a <__bad_interrupt>
      4e:	00 00       	nop
../../../../crt1/gcrt1.S:86
      50:	5c c0       	rjmp	.+184    	; 0x10a <__bad_interrupt>
      52:	00 00       	nop
../../../../crt1/gcrt1.S:87
      54:	5a c0       	rjmp	.+180    	; 0x10a <__bad_interrupt>
      56:	00 00       	nop
../../../../crt1/gcrt1.S:88
      58:	58 c0       	rjmp	.+176    	; 0x10a <__bad_interrupt>
      5a:	00 00       	nop
../../../../crt1/gcrt1.S:89
      5c:	56 c0       	rjmp	.+172    	; 0x10a <__bad_interrupt>
      5e:	00 00       	nop
../../../../crt1/gcrt1.S:90
      60:	54 c0       	rjmp	.+168    	; 0x10a <__bad_interrupt>
      62:	00 00       	nop
../../../../crt1/gcrt1.S:91
      64:	52 c0       	rjmp	.+164    	; 0x10a <__bad_interrupt>
      66:	00 00       	nop
../../../../crt1/gcrt1.S:92
      68:	50 c0       	rjmp	.+160    	; 0x10a <__bad_interrupt>
      6a:	00 00       	nop
../../../../crt1/gcrt1.S:93
      6c:	4e c0       	rjmp	.+156    	; 0x10a <__bad_interrupt>
      6e:	00 00       	nop
../../../../crt1/gcrt1.S:94
      70:	4c c0       	rjmp	.+152    	; 0x10a <__bad_interrupt>
      72:	00 00       	nop
../../../../crt1/gcrt1.S:95
      74:	4a c0       	rjmp	.+148    	; 0x10a <__bad_interrupt>
	...

00000078 <__trampolines_end>:
__trampolines_start():
      78:	86 01       	movw	r16, r12
      7a:	01 01       	movw	r0, r2
      7c:	02 01       	movw	r0, r4
      7e:	01 35       	cpi	r16, 0x51	; 81
      80:	07 01       	movw	r0, r14
      82:	00 00       	nop
      84:	00 00       	nop
      86:	00 00       	nop
      88:	4a 54       	subi	r20, 0x4A	; 74
      8a:	41 47       	sbci	r20, 0x71	; 113
      8c:	49 43       	sbci	r20, 0x39	; 57
      8e:	45 20       	and	r4, r5
      90:	6d 6b       	ori	r22, 0xBD	; 189
      92:	49 49       	sbci	r20, 0x99	; 153
	...

00000095 <JTAG2::BAUD_TABLE>:
      95:	00 00 1b 41 8d 20 47 10 23 08 12 04 b6 02 5b 01     ...A. G.#.....[.
      a5:	da 0a 04 01 ae 00 57 00 2b 00 39 01 9c 00 00 00     ......W.+.9.....
      b5:	00 00 0b 01 c8 00 a0 00 85 00 64 00 50 00 43 00     ..........d.P.C.
      c5:	3c 00 28 00 1b 00 14 00 0d 00 00                    <.(........

000000d0 <__ctors_end>:
__dtors_end():
../../../../crt1/gcrt1.S:230
      d0:	11 24       	eor	r1, r1
../../../../crt1/gcrt1.S:231
      d2:	1f be       	out	0x3f, r1	; 63
../../../../crt1/gcrt1.S:232
      d4:	cf ef       	ldi	r28, 0xFF	; 255
../../../../crt1/gcrt1.S:234
      d6:	cd bf       	out	0x3d, r28	; 61
../../../../crt1/gcrt1.S:236
      d8:	df e3       	ldi	r29, 0x3F	; 63
../../../../crt1/gcrt1.S:237
      da:	de bf       	out	0x3e, r29	; 62

000000dc <__do_copy_data>:
__do_copy_data():
      dc:	18 e3       	ldi	r17, 0x38	; 56
      de:	a0 e0       	ldi	r26, 0x00	; 0
      e0:	b8 e3       	ldi	r27, 0x38	; 56
      e2:	ea e2       	ldi	r30, 0x2A	; 42
      e4:	f9 e1       	ldi	r31, 0x19	; 25
      e6:	02 c0       	rjmp	.+4      	; 0xec <__do_copy_data+0x10>
      e8:	05 90       	lpm	r0, Z+
      ea:	0d 92       	st	X+, r0
      ec:	a8 33       	cpi	r26, 0x38	; 56
      ee:	b1 07       	cpc	r27, r17
      f0:	d9 f7       	brne	.-10     	; 0xe8 <__do_copy_data+0xc>

000000f2 <__do_clear_bss>:
__do_clear_bss():
      f2:	2a e3       	ldi	r18, 0x3A	; 58
      f4:	a8 e3       	ldi	r26, 0x38	; 56
      f6:	b8 e3       	ldi	r27, 0x38	; 56
      f8:	01 c0       	rjmp	.+2      	; 0xfc <.do_clear_bss_start>

000000fa <.do_clear_bss_loop>:
      fa:	1d 92       	st	X+, r1

000000fc <.do_clear_bss_start>:
      fc:	a8 37       	cpi	r26, 0x78	; 120
      fe:	b2 07       	cpc	r27, r18
     100:	e1 f7       	brne	.-8      	; 0xfa <.do_clear_bss_loop>
.do_clear_bss_start():
../../../../crt1/gcrt1.S:314
     102:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <main>
../../../../crt1/gcrt1.S:315
     106:	0c 94 84 0c 	jmp	0x1908	; 0x1908 <_exit>

0000010a <__bad_interrupt>:
__vector_22():
../../../../crt1/gcrt1.S:209
     10a:	7a cf       	rjmp	.-268    	; 0x0 <__vectors>

0000010c <UPDI::RECV()>:
_ZN4UPDI4RECVEv():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:44
/*
 * UPDI受信
 */

uint8_t UPDI::RECV (void) {
  loop_until_bit_is_set(UPDI_USART.STATUS, USART_RXCIF_bp);
     10c:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <UPDI::nvmprog_key+0x7f6ee4>
     110:	87 ff       	sbrs	r24, 7
     112:	fc cf       	rjmp	.-8      	; 0x10c <UPDI::RECV()>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:45
  UPDI_LASTH = UPDI_USART.RXDATAH ^ 0x80;
     114:	80 91 01 08 	lds	r24, 0x0801	; 0x800801 <UPDI::nvmprog_key+0x7f6ee1>
     118:	80 58       	subi	r24, 0x80	; 128
     11a:	8f bb       	out	0x1f, r24	; 31
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:46
  return UPDI_LASTL = UPDI_USART.RXDATAL;
     11c:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <UPDI::nvmprog_key+0x7f6ee0>
     120:	8e bb       	out	0x1e, r24	; 30
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:47
}
     122:	08 95       	ret

00000124 <UPDI::SEND(unsigned char)>:
_ZN4UPDI4SENDEh():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:55
 * UPDI送信
 *
 * ループバック受信で送信値を照合
 */

bool UPDI::SEND (uint8_t _data) {
     124:	cf 93       	push	r28
     126:	c8 2f       	mov	r28, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:57
  bool _r;
  loop_until_bit_is_set(UPDI_USART.STATUS, USART_DREIF_bp);
     128:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <UPDI::nvmprog_key+0x7f6ee4>
     12c:	85 ff       	sbrs	r24, 5
     12e:	fc cf       	rjmp	.-8      	; 0x128 <UPDI::SEND(unsigned char)+0x4>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:58
  UPDI_USART.STATUS = USART_TXCIF_bm;
     130:	80 e4       	ldi	r24, 0x40	; 64
     132:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <UPDI::nvmprog_key+0x7f6ee4>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:59
  UPDI_USART.TXDATAL = _data;
     136:	c0 93 02 08 	sts	0x0802, r28	; 0x800802 <UPDI::nvmprog_key+0x7f6ee2>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:60
  loop_until_bit_is_set(UPDI_USART.STATUS, USART_TXCIF_bp);
     13a:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <UPDI::nvmprog_key+0x7f6ee4>
     13e:	86 ff       	sbrs	r24, 6
     140:	fc cf       	rjmp	.-8      	; 0x13a <UPDI::SEND(unsigned char)+0x16>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:61
  _r = _data == UPDI::RECV();
     142:	e4 df       	rcall	.-56     	; 0x10c <UPDI::RECV()>
     144:	98 2f       	mov	r25, r24
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	9c 13       	cpse	r25, r28
     14a:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:62
  if (!_r) UPDI_LASTH |= 0x20;
     14c:	9c 13       	cpse	r25, r28
     14e:	fd 9a       	sbi	0x1f, 5	; 31
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:64
  return _r;
}
     150:	cf 91       	pop	r28
     152:	08 95       	ret

00000154 <UPDI::send_bytes(unsigned char const*, unsigned int)>:
_ZN4UPDI10send_bytesEPKhj():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:111

/*
 * バイト塊送信
 */

bool UPDI::send_bytes (const uint8_t *data, size_t len) {
     154:	0f 93       	push	r16
     156:	1f 93       	push	r17
     158:	cf 93       	push	r28
     15a:	df 93       	push	r29
     15c:	eb 01       	movw	r28, r22
     15e:	8c 01       	movw	r16, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:114
  uint8_t *p = (uint8_t*)(void*)data;
  do {
    if (!UPDI::SEND(*p++)) break;
     160:	f8 01       	movw	r30, r16
     162:	81 91       	ld	r24, Z+
     164:	8f 01       	movw	r16, r30
     166:	de df       	rcall	.-68     	; 0x124 <UPDI::SEND(unsigned char)>
     168:	88 23       	and	r24, r24
     16a:	11 f0       	breq	.+4      	; 0x170 <UPDI::send_bytes(unsigned char const*, unsigned int)+0x1c>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:115
  } while (--len);
     16c:	21 97       	sbiw	r28, 0x01	; 1
     16e:	c1 f7       	brne	.-16     	; 0x160 <UPDI::send_bytes(unsigned char const*, unsigned int)+0xc>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:116
  return len == 0;
     170:	81 e0       	ldi	r24, 0x01	; 1
     172:	cd 2b       	or	r28, r29
     174:	09 f0       	breq	.+2      	; 0x178 <UPDI::send_bytes(unsigned char const*, unsigned int)+0x24>
     176:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:117
}
     178:	df 91       	pop	r29
     17a:	cf 91       	pop	r28
     17c:	1f 91       	pop	r17
     17e:	0f 91       	pop	r16
     180:	08 95       	ret

00000182 <UPDI::set_cs_stat(unsigned char, unsigned char)>:
_ZN4UPDI11set_cs_statEhh():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:219
 * コントロールステータス送信
 */

bool UPDI::set_cs_stat (const uint8_t code, uint8_t data) {
  static uint8_t set_ptr[] = { UPDI::UPDI_SYNCH, 0, 0 };
  set_ptr[1] = UPDI::UPDI_STCS | code;
     182:	ee e1       	ldi	r30, 0x1E	; 30
     184:	f8 e3       	ldi	r31, 0x38	; 56
     186:	80 6c       	ori	r24, 0xC0	; 192
     188:	81 83       	std	Z+1, r24	; 0x01
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:220
  set_ptr[2] = data;
     18a:	62 83       	std	Z+2, r22	; 0x02
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:221
  return UPDI::send_bytes(set_ptr, sizeof(set_ptr));
     18c:	63 e0       	ldi	r22, 0x03	; 3
     18e:	70 e0       	ldi	r23, 0x00	; 0
     190:	cf 01       	movw	r24, r30
     192:	e0 cf       	rjmp	.-64     	; 0x154 <UPDI::send_bytes(unsigned char const*, unsigned int)>

00000194 <UPDI::updi_reset(bool)>:
_ZN4UPDI10updi_resetEb():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:233
}
inline uint8_t UPDI::get_cs_asi_ctra (void) {
  return UPDI::get_cs_stat(UPDI::UPDI_CS_ASI_CTRLA);
}
inline bool UPDI::updi_reset (bool logic) {
  return UPDI::set_cs_stat(
     194:	60 e0       	ldi	r22, 0x00	; 0
     196:	81 11       	cpse	r24, r1
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:235
    UPDI::UPDI_CS_ASI_RESET_REQ,
    (logic ? UPDI::UPDI_RSTREQ : UPDI::UPDI_NOP));
     198:	69 e5       	ldi	r22, 0x59	; 89
     19a:	88 e0       	ldi	r24, 0x08	; 8
     19c:	f2 cf       	rjmp	.-28     	; 0x182 <UPDI::set_cs_stat(unsigned char, unsigned char)>

0000019e <UPDI::st8(unsigned long, unsigned char)>:
_ZN4UPDI3st8Emh():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:148

/*
 * 単バイト送信
 */

bool UPDI::st8 (uint32_t addr, uint8_t data) {
     19e:	cf 93       	push	r28
     1a0:	c4 2f       	mov	r28, r20
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:154
  static uint8_t set_ptr[] = {
      UPDI::UPDI_SYNCH
    , UPDI::UPDI_STS | UPDI::UPDI_ADDR3 | UPDI::UPDI_DATA1
    , 0, 0, 0, 0  // qword address
  };
  _CAPS32(set_ptr[2])->dword = addr;
     1a2:	60 93 12 38 	sts	0x3812, r22	; 0x803812 <UPDI::st8(unsigned long, unsigned char)::set_ptr+0x2>
     1a6:	70 93 13 38 	sts	0x3813, r23	; 0x803813 <UPDI::st8(unsigned long, unsigned char)::set_ptr+0x3>
     1aa:	80 93 14 38 	sts	0x3814, r24	; 0x803814 <UPDI::st8(unsigned long, unsigned char)::set_ptr+0x4>
     1ae:	90 93 15 38 	sts	0x3815, r25	; 0x803815 <UPDI::st8(unsigned long, unsigned char)::set_ptr+0x5>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:155
  if (!UPDI::send_bytes(set_ptr, sizeof(set_ptr) - 1)) return false;
     1b2:	65 e0       	ldi	r22, 0x05	; 5
     1b4:	70 e0       	ldi	r23, 0x00	; 0
     1b6:	80 e1       	ldi	r24, 0x10	; 16
     1b8:	98 e3       	ldi	r25, 0x38	; 56
     1ba:	cc df       	rcall	.-104    	; 0x154 <UPDI::send_bytes(unsigned char const*, unsigned int)>
     1bc:	81 11       	cpse	r24, r1
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:158
  if (UPDI::UPDI_ACK != UPDI::RECV()) return false;
  if (!UPDI::SEND(data)) return false;
  return UPDI::UPDI_ACK == UPDI::RECV();
     1be:	02 c0       	rjmp	.+4      	; 0x1c4 <UPDI::st8(unsigned long, unsigned char)+0x26>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:156
    , UPDI::UPDI_STS | UPDI::UPDI_ADDR3 | UPDI::UPDI_DATA1
    , 0, 0, 0, 0  // qword address
  };
  _CAPS32(set_ptr[2])->dword = addr;
  if (!UPDI::send_bytes(set_ptr, sizeof(set_ptr) - 1)) return false;
  if (UPDI::UPDI_ACK != UPDI::RECV()) return false;
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	0b c0       	rjmp	.+22     	; 0x1da <UPDI::st8(unsigned long, unsigned char)+0x3c>
     1c4:	a3 df       	rcall	.-186    	; 0x10c <UPDI::RECV()>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:157
  if (!UPDI::SEND(data)) return false;
     1c6:	80 34       	cpi	r24, 0x40	; 64
     1c8:	d9 f7       	brne	.-10     	; 0x1c0 <UPDI::st8(unsigned long, unsigned char)+0x22>
     1ca:	8c 2f       	mov	r24, r28
     1cc:	ab df       	rcall	.-170    	; 0x124 <UPDI::SEND(unsigned char)>
     1ce:	88 23       	and	r24, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:158
  return UPDI::UPDI_ACK == UPDI::RECV();
     1d0:	b9 f3       	breq	.-18     	; 0x1c0 <UPDI::st8(unsigned long, unsigned char)+0x22>
     1d2:	9c df       	rcall	.-200    	; 0x10c <UPDI::RECV()>
     1d4:	91 e0       	ldi	r25, 0x01	; 1
     1d6:	80 34       	cpi	r24, 0x40	; 64
     1d8:	99 f7       	brne	.-26     	; 0x1c0 <UPDI::st8(unsigned long, unsigned char)+0x22>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:159
}
     1da:	89 2f       	mov	r24, r25
     1dc:	cf 91       	pop	r28
     1de:	08 95       	ret

000001e0 <UPDI::send_repeat_header(unsigned char, unsigned long, unsigned int)>:
_ZN4UPDI18send_repeat_headerEhmj():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:136
    , UPDI::UPDI_REPEAT | UPDI::UPDI_DATA1
    , 0                   // repeat count
    , UPDI::UPDI_SYNCH
    , UPDI::UPDI_PTR_INC  // +cmd
  };
  _CAPS32(set_ptr[2])->dword = addr;
     1e0:	40 93 0c 38 	sts	0x380C, r20	; 0x80380c <UPDI::send_repeat_header(unsigned char, unsigned long, unsigned int)::set_ptr+0x2>
     1e4:	50 93 0d 38 	sts	0x380D, r21	; 0x80380d <UPDI::send_repeat_header(unsigned char, unsigned long, unsigned int)::set_ptr+0x3>
     1e8:	60 93 0e 38 	sts	0x380E, r22	; 0x80380e <UPDI::send_repeat_header(unsigned char, unsigned long, unsigned int)::set_ptr+0x4>
     1ec:	70 93 0f 38 	sts	0x380F, r23	; 0x80380f <UPDI::send_repeat_header(unsigned char, unsigned long, unsigned int)::set_ptr+0x5>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:137
  set_repeat[2] = len - 1;
     1f0:	21 50       	subi	r18, 0x01	; 1
     1f2:	20 93 07 38 	sts	0x3807, r18	; 0x803807 <UPDI::send_repeat_header(unsigned char, unsigned long, unsigned int)::set_repeat+0x2>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:138
  set_repeat[4] = UPDI::UPDI_PTR_INC | cmd;
     1f6:	84 60       	ori	r24, 0x04	; 4
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:139
  if (!UPDI::send_bytes(set_ptr, sizeof(set_ptr) - 1)) return false;
     1f8:	80 93 09 38 	sts	0x3809, r24	; 0x803809 <UPDI::send_repeat_header(unsigned char, unsigned long, unsigned int)::set_repeat+0x4>
     1fc:	65 e0       	ldi	r22, 0x05	; 5
     1fe:	70 e0       	ldi	r23, 0x00	; 0
     200:	8a e0       	ldi	r24, 0x0A	; 10
     202:	98 e3       	ldi	r25, 0x38	; 56
     204:	a7 df       	rcall	.-178    	; 0x154 <UPDI::send_bytes(unsigned char const*, unsigned int)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:140
  if (UPDI::UPDI_ACK != UPDI::RECV()) return false;
     206:	88 23       	and	r24, r24
     208:	41 f0       	breq	.+16     	; 0x21a <UPDI::send_repeat_header(unsigned char, unsigned long, unsigned int)+0x3a>
     20a:	80 df       	rcall	.-256    	; 0x10c <UPDI::RECV()>
     20c:	80 34       	cpi	r24, 0x40	; 64
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:141
  return UPDI::send_bytes(set_repeat, sizeof(set_repeat));
     20e:	29 f4       	brne	.+10     	; 0x21a <UPDI::send_repeat_header(unsigned char, unsigned long, unsigned int)+0x3a>
     210:	65 e0       	ldi	r22, 0x05	; 5
     212:	70 e0       	ldi	r23, 0x00	; 0
     214:	85 e0       	ldi	r24, 0x05	; 5
     216:	98 e3       	ldi	r25, 0x38	; 56
     218:	9d cf       	rjmp	.-198    	; 0x154 <UPDI::send_bytes(unsigned char const*, unsigned int)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:142
}
     21a:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:82
 * BREAKキャラクタ
 *
 * 送信速度を遅くすることで生成する
 */

void UPDI::BREAK (void) {
     21c:	08 95       	ret

0000021e <UPDI::BREAK()>:
_ZN4UPDI5BREAKEv():
     21e:	cf 93       	push	r28
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:83
  UPDI_USART.BAUD = UPDI_BAUD_BREAK;
     220:	df 93       	push	r29
     222:	c0 e0       	ldi	r28, 0x00	; 0
     224:	d8 e0       	ldi	r29, 0x08	; 8
     226:	80 ec       	ldi	r24, 0xC0	; 192
     228:	94 e4       	ldi	r25, 0x44	; 68
     22a:	88 87       	std	Y+8, r24	; 0x08
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:84
  UPDI::SEND(UPDI::UPDI_NOP);
     22c:	99 87       	std	Y+9, r25	; 0x09
     22e:	80 e0       	ldi	r24, 0x00	; 0
     230:	79 df       	rcall	.-270    	; 0x124 <UPDI::SEND(unsigned char)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:85
  UPDI_USART.BAUD = UPDI_BAUD_CALC;
     232:	80 eb       	ldi	r24, 0xB0	; 176
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	88 87       	std	Y+8, r24	; 0x08
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:86
}
     238:	99 87       	std	Y+9, r25	; 0x09
     23a:	df 91       	pop	r29
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:196
 * コントロールステータス受信
 */

uint8_t UPDI::get_cs_stat (const uint8_t code) {
  static uint8_t set_ptr[] = { UPDI::UPDI_SYNCH, 0 };
  set_ptr[1] = UPDI::UPDI_LDCS | code;
     23c:	cf 91       	pop	r28
     23e:	08 95       	ret

00000240 <UPDI::get_cs_stat(unsigned char)>:
_ZN4UPDI11get_cs_statEh():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:197
  while (!UPDI::send_bytes(set_ptr, sizeof(set_ptr))) UPDI::BREAK();
     240:	80 68       	ori	r24, 0x80	; 128
     242:	80 93 1d 38 	sts	0x381D, r24	; 0x80381d <UPDI::get_cs_stat(unsigned char)::set_ptr+0x1>
     246:	62 e0       	ldi	r22, 0x02	; 2
     248:	70 e0       	ldi	r23, 0x00	; 0
     24a:	8c e1       	ldi	r24, 0x1C	; 28
     24c:	98 e3       	ldi	r25, 0x38	; 56
     24e:	82 df       	rcall	.-252    	; 0x154 <UPDI::send_bytes(unsigned char const*, unsigned int)>
     250:	81 11       	cpse	r24, r1
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:198
  return UPDI::RECV();
     252:	02 c0       	rjmp	.+4      	; 0x258 <UPDI::get_cs_stat(unsigned char)+0x18>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:185
  static uint8_t set_ptr[] = {
      UPDI::UPDI_SYNCH
    , UPDI::UPDI_LDS | UPDI::UPDI_ADDR3 | UPDI::UPDI_DATA1
    , 0, 0, 0, 0  // qword address
  };
  _CAPS16(set_ptr[2])->word = (uint16_t)addr;
     254:	e4 df       	rcall	.-56     	; 0x21e <UPDI::BREAK()>
     256:	f7 cf       	rjmp	.-18     	; 0x246 <UPDI::get_cs_stat(unsigned char)+0x6>
     258:	59 cf       	rjmp	.-334    	; 0x10c <UPDI::RECV()>

0000025a <UPDI::ld8(unsigned long)>:
_ZN4UPDI3ld8Em():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:186
  while (!UPDI::send_bytes(set_ptr, sizeof(set_ptr) - 1)) UPDI::BREAK();
     25a:	60 93 18 38 	sts	0x3818, r22	; 0x803818 <UPDI::ld8(unsigned long)::set_ptr+0x2>
     25e:	70 93 19 38 	sts	0x3819, r23	; 0x803819 <UPDI::ld8(unsigned long)::set_ptr+0x3>
     262:	65 e0       	ldi	r22, 0x05	; 5
     264:	70 e0       	ldi	r23, 0x00	; 0
     266:	86 e1       	ldi	r24, 0x16	; 22
     268:	98 e3       	ldi	r25, 0x38	; 56
     26a:	74 df       	rcall	.-280    	; 0x154 <UPDI::send_bytes(unsigned char const*, unsigned int)>
     26c:	81 11       	cpse	r24, r1
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:187
  return UPDI::RECV();
     26e:	02 c0       	rjmp	.+4      	; 0x274 <UPDI::ld8(unsigned long)+0x1a>
     270:	d6 df       	rcall	.-84     	; 0x21e <UPDI::BREAK()>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:94
 * 対象リセット
 *
 * BREAKを前置するタイプ
 */

bool UPDI::Target_Reset (bool _enable) {
     272:	f7 cf       	rjmp	.-18     	; 0x262 <UPDI::ld8(unsigned long)+0x8>
     274:	4b cf       	rjmp	.-362    	; 0x10c <UPDI::RECV()>

00000276 <UPDI::Target_Reset(bool)>:
_ZN4UPDI12Target_ResetEb():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:102
    , UPDI::UPDI_STCS | UPDI::UPDI_CS_ASI_RESET_REQ
    , 0
    , UPDI::UPDI_STCS | UPDI::UPDI_CS_CTRLB
    , UPDI::UPDI_SET_UPDIDIS
  };
  UPDI::BREAK();
     276:	cf 93       	push	r28
     278:	c8 2f       	mov	r28, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:103
  set_ptr[2] = _enable ? UPDI::UPDI_RSTREQ : UPDI::UPDI_NOP;
     27a:	d1 df       	rcall	.-94     	; 0x21e <UPDI::BREAK()>
     27c:	80 e0       	ldi	r24, 0x00	; 0
     27e:	c1 11       	cpse	r28, r1
     280:	89 e5       	ldi	r24, 0x59	; 89
     282:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <__DATA_REGION_ORIGIN__+0x2>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:104
  return UPDI::send_bytes(set_ptr, sizeof(set_ptr));
     286:	65 e0       	ldi	r22, 0x05	; 5
     288:	70 e0       	ldi	r23, 0x00	; 0
     28a:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:105
}
     28c:	98 e3       	ldi	r25, 0x38	; 56
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:104
    , UPDI::UPDI_STCS | UPDI::UPDI_CS_CTRLB
    , UPDI::UPDI_SET_UPDIDIS
  };
  UPDI::BREAK();
  set_ptr[2] = _enable ? UPDI::UPDI_RSTREQ : UPDI::UPDI_NOP;
  return UPDI::send_bytes(set_ptr, sizeof(set_ptr));
     28e:	cf 91       	pop	r28
     290:	61 cf       	rjmp	.-318    	; 0x154 <UPDI::send_bytes(unsigned char const*, unsigned int)>

00000292 <TIM::LED_Blink()>:
_ZN3TIM9LED_BlinkEv():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:160
    LEDG_EVOUT = EVSYS_USER_CHANNEL2_gc;
  }
}

void LED_TCB1 (uint8_t mode, uint16_t ccmp) {
  if (TIM::mode != mode) {
     292:	80 91 50 38 	lds	r24, 0x3850	; 0x803850 <TIM::mode>
     296:	83 30       	cpi	r24, 0x03	; 3
     298:	99 f0       	breq	.+38     	; 0x2c0 <TIM::LED_Blink()+0x2e>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:161
    TIM::mode = mode;
     29a:	83 e0       	ldi	r24, 0x03	; 3
     29c:	80 93 50 38 	sts	0x3850, r24	; 0x803850 <TIM::mode>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:162
    TCB1_CCMP = ccmp;
     2a0:	89 ea       	ldi	r24, 0xA9	; 169
     2a2:	95 e5       	ldi	r25, 0x55	; 85
     2a4:	80 93 9c 0a 	sts	0x0A9C, r24	; 0x800a9c <UPDI::nvmprog_key+0x7f717c>
     2a8:	90 93 9d 0a 	sts	0x0A9D, r25	; 0x800a9d <UPDI::nvmprog_key+0x7f717d>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:163
    TCB1_CNT = 0;
     2ac:	10 92 9a 0a 	sts	0x0A9A, r1	; 0x800a9a <UPDI::nvmprog_key+0x7f717a>
     2b0:	10 92 9b 0a 	sts	0x0A9B, r1	; 0x800a9b <UPDI::nvmprog_key+0x7f717b>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:164
    TCB1_CTRLA = TCB_RUNSTDBY_bm | TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
     2b4:	8f e4       	ldi	r24, 0x4F	; 79
     2b6:	80 93 90 0a 	sts	0x0A90, r24	; 0x800a90 <UPDI::nvmprog_key+0x7f7170>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:165
    LEDG_EVOUT = EVSYS_USER_CHANNEL0_gc;
     2ba:	81 e0       	ldi	r24, 0x01	; 1
     2bc:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <UPDI::nvmprog_key+0x7f6889>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:177
}

/* 点滅（SW1アサート）*/
void TIM::LED_Blink (void) {
  LED_TCB1(3, TCB1_BLINK);
}
     2c0:	08 95       	ret

000002c2 <TIM::LED_Flash()>:
_ZN3TIM9LED_FlashEv():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:160
    LEDG_EVOUT = EVSYS_USER_CHANNEL2_gc;
  }
}

void LED_TCB1 (uint8_t mode, uint16_t ccmp) {
  if (TIM::mode != mode) {
     2c2:	80 91 50 38 	lds	r24, 0x3850	; 0x803850 <TIM::mode>
     2c6:	82 30       	cpi	r24, 0x02	; 2
     2c8:	99 f0       	breq	.+38     	; 0x2f0 <TIM::LED_Flash()+0x2e>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:161
    TIM::mode = mode;
     2ca:	82 e0       	ldi	r24, 0x02	; 2
     2cc:	80 93 50 38 	sts	0x3850, r24	; 0x803850 <TIM::mode>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:162
    TCB1_CCMP = ccmp;
     2d0:	89 ea       	ldi	r24, 0xA9	; 169
     2d2:	98 e0       	ldi	r25, 0x08	; 8
     2d4:	80 93 9c 0a 	sts	0x0A9C, r24	; 0x800a9c <UPDI::nvmprog_key+0x7f717c>
     2d8:	90 93 9d 0a 	sts	0x0A9D, r25	; 0x800a9d <UPDI::nvmprog_key+0x7f717d>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:163
    TCB1_CNT = 0;
     2dc:	10 92 9a 0a 	sts	0x0A9A, r1	; 0x800a9a <UPDI::nvmprog_key+0x7f717a>
     2e0:	10 92 9b 0a 	sts	0x0A9B, r1	; 0x800a9b <UPDI::nvmprog_key+0x7f717b>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:164
    TCB1_CTRLA = TCB_RUNSTDBY_bm | TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
     2e4:	8f e4       	ldi	r24, 0x4F	; 79
     2e6:	80 93 90 0a 	sts	0x0A90, r24	; 0x800a90 <UPDI::nvmprog_key+0x7f7170>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:165
    LEDG_EVOUT = EVSYS_USER_CHANNEL0_gc;
     2ea:	81 e0       	ldi	r24, 0x01	; 1
     2ec:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <UPDI::nvmprog_key+0x7f6889>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:172
}

/* フラッシュ（RTSアサート/UPDI許認可後）*/
void TIM::LED_Flash (void) {
  LED_TCB1(2, TCB1_FLASH);
}
     2f0:	08 95       	ret

000002f2 <TIM::Timeout_Stop()>:
_ZN3TIM12Timeout_StopEv():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:137
    TCB0_CTRLA = TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
  }
}

void TIM::Timeout_Stop (void) {
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     2f2:	8f b7       	in	r24, 0x3f	; 63
__iCliRetVal():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     2f4:	f8 94       	cli
_ZN3TIM12Timeout_StopEv():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:138
    TCB0_CTRLA = 0;
     2f6:	10 92 80 0a 	sts	0x0A80, r1	; 0x800a80 <UPDI::nvmprog_key+0x7f7160>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:139
    TCB0_INTFLAGS = TCB_CAPT_bm;
     2fa:	91 e0       	ldi	r25, 0x01	; 1
     2fc:	90 93 86 0a 	sts	0x0A86, r25	; 0x800a86 <UPDI::nvmprog_key+0x7f7166>
__iRestore():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:141
  }
  reti();
     300:	8f bf       	out	0x3f, r24	; 63
_ZN3TIM12Timeout_StopEv():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:142
}
     302:	18 95       	reti
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/SYS.cpp:133
/*
 * WDT操作
 */

void SYS::WDT_SET (uint8_t _wdt_period) {
  loop_until_bit_is_clear(WDT_STATUS, WDT_SYNCBUSY_bp);
     304:	08 95       	ret

00000306 <SYS::WDT_SET(unsigned char)>:
_ZN3SYS7WDT_SETEh():
     306:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <UPDI::nvmprog_key+0x7f67e1>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/SYS.cpp:134
  _PROTECTED_WRITE(WDT_CTRLA, _wdt_period);
     30a:	90 fd       	sbrc	r25, 0
     30c:	fc cf       	rjmp	.-8      	; 0x306 <SYS::WDT_SET(unsigned char)>
     30e:	98 ed       	ldi	r25, 0xD8	; 216
     310:	94 bf       	out	0x34, r25	; 52
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:317
 * NVMCTRL制御
 */

/* NVMCTRL v0 */
bool NVM::nvm_ctrl (uint8_t nvmcmd) {
  return UPDI::st8(NVM::NVMCTRL_REG_CTRLA, nvmcmd);
     312:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <UPDI::nvmprog_key+0x7f67e0>
     316:	08 95       	ret

00000318 <NVM::nvm_ctrl(unsigned char)>:
_ZN3NVM8nvm_ctrlEh():
     318:	48 2f       	mov	r20, r24
     31a:	60 e0       	ldi	r22, 0x00	; 0
     31c:	70 e1       	ldi	r23, 0x10	; 16
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:320
}

bool nvm_ctrl_change (uint8_t nvmcmd) {
     31e:	80 e0       	ldi	r24, 0x00	; 0
     320:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:321
  if (UPDI::ld8(NVM::NVMCTRL_REG_CTRLA) == nvmcmd) return true;
     322:	3d cf       	rjmp	.-390    	; 0x19e <UPDI::st8(unsigned long, unsigned char)>

00000324 <nvm_ctrl_change(unsigned char)>:
_Z15nvm_ctrl_changeh():
     324:	cf 93       	push	r28
     326:	c8 2f       	mov	r28, r24
     328:	60 e0       	ldi	r22, 0x00	; 0
     32a:	70 e1       	ldi	r23, 0x10	; 16
     32c:	80 e0       	ldi	r24, 0x00	; 0
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	94 df       	rcall	.-216    	; 0x25a <UPDI::ld8(unsigned long)>
     332:	8c 13       	cpse	r24, r28
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:325
  if (!NVM::nvm_ctrl(NVM::NVM_V2_CMD_NOCMD)) return false;
  if (NVM::NVM_V2_CMD_NOCMD != nvmcmd) return NVM::nvm_ctrl(nvmcmd);
  return true;
}
     334:	03 c0       	rjmp	.+6      	; 0x33c <nvm_ctrl_change(unsigned char)+0x18>
     336:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:322
  return UPDI::st8(NVM::NVMCTRL_REG_CTRLA, nvmcmd);
}

bool nvm_ctrl_change (uint8_t nvmcmd) {
  if (UPDI::ld8(NVM::NVMCTRL_REG_CTRLA) == nvmcmd) return true;
  if (!NVM::nvm_ctrl(NVM::NVM_V2_CMD_NOCMD)) return false;
     338:	cf 91       	pop	r28
     33a:	08 95       	ret
     33c:	80 e0       	ldi	r24, 0x00	; 0
     33e:	ec df       	rcall	.-40     	; 0x318 <NVM::nvm_ctrl(unsigned char)>
     340:	88 23       	and	r24, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:323
  if (NVM::NVM_V2_CMD_NOCMD != nvmcmd) return NVM::nvm_ctrl(nvmcmd);
     342:	d1 f3       	breq	.-12     	; 0x338 <nvm_ctrl_change(unsigned char)+0x14>
     344:	cc 23       	and	r28, r28
     346:	b9 f3       	breq	.-18     	; 0x336 <nvm_ctrl_change(unsigned char)+0x12>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:325
  return true;
}
     348:	8c 2f       	mov	r24, r28
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:323
}

bool nvm_ctrl_change (uint8_t nvmcmd) {
  if (UPDI::ld8(NVM::NVMCTRL_REG_CTRLA) == nvmcmd) return true;
  if (!NVM::nvm_ctrl(NVM::NVM_V2_CMD_NOCMD)) return false;
  if (NVM::NVM_V2_CMD_NOCMD != nvmcmd) return NVM::nvm_ctrl(nvmcmd);
     34a:	cf 91       	pop	r28
     34c:	e5 cf       	rjmp	.-54     	; 0x318 <NVM::nvm_ctrl(unsigned char)>

0000034e <JTAG2::set_response(JTAG2::jtag_response_e)>:
_ZN5JTAG212set_responseENS_15jtag_response_eE():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:162
  }
}

/* JTAG Response */
void JTAG2::set_response (jtag_response_e response_code) {
  packet.size = 4;
     34e:	44 e0       	ldi	r20, 0x04	; 4
     350:	50 e0       	ldi	r21, 0x00	; 0
     352:	60 e0       	ldi	r22, 0x00	; 0
     354:	70 e0       	ldi	r23, 0x00	; 0
     356:	40 93 66 38 	sts	0x3866, r20	; 0x803866 <JTAG2::packet+0x3>
     35a:	50 93 67 38 	sts	0x3867, r21	; 0x803867 <JTAG2::packet+0x4>
     35e:	60 93 68 38 	sts	0x3868, r22	; 0x803868 <JTAG2::packet+0x5>
     362:	70 93 69 38 	sts	0x3869, r23	; 0x803869 <JTAG2::packet+0x6>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:164
  /* 応答番号 */
  packet.body[0] = response_code;
     366:	80 93 6b 38 	sts	0x386B, r24	; 0x80386b <JTAG2::packet+0x8>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:166
  /* 動作状態 0:無効 1:認識 2:書込可 */
  packet.body[1] = bit_is_set(UPDI_CONTROL, UPDI::UPDI_PROG_bp) ? 2
     36a:	e1 99       	sbic	0x1c, 1	; 28
     36c:	0b c0       	rjmp	.+22     	; 0x384 <JTAG2::set_response(JTAG2::jtag_response_e)+0x36>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:167
                 : bit_is_set(UPDI_CONTROL, UPDI::UPDI_INFO_bp) ? 1 : 0;
     36e:	8c b3       	in	r24, 0x1c	; 28
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:166
void JTAG2::set_response (jtag_response_e response_code) {
  packet.size = 4;
  /* 応答番号 */
  packet.body[0] = response_code;
  /* 動作状態 0:無効 1:認識 2:書込可 */
  packet.body[1] = bit_is_set(UPDI_CONTROL, UPDI::UPDI_PROG_bp) ? 2
     370:	81 70       	andi	r24, 0x01	; 1
     372:	80 93 6c 38 	sts	0x386C, r24	; 0x80386c <JTAG2::packet+0x9>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:169
                 : bit_is_set(UPDI_CONTROL, UPDI::UPDI_INFO_bp) ? 1 : 0;
  /* 内部状態フラグ */
  packet.body[2] = UPDI_CONTROL;
     376:	8c b3       	in	r24, 0x1c	; 28
     378:	80 93 6d 38 	sts	0x386D, r24	; 0x80386d <JTAG2::packet+0xa>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:170
  packet.body[3] = UPDI_NVMCTRL;
     37c:	8d b3       	in	r24, 0x1d	; 29
     37e:	80 93 6e 38 	sts	0x386E, r24	; 0x80386e <JTAG2::packet+0xb>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:171
}
     382:	08 95       	ret
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:166
void JTAG2::set_response (jtag_response_e response_code) {
  packet.size = 4;
  /* 応答番号 */
  packet.body[0] = response_code;
  /* 動作状態 0:無効 1:認識 2:書込可 */
  packet.body[1] = bit_is_set(UPDI_CONTROL, UPDI::UPDI_PROG_bp) ? 2
     384:	82 e0       	ldi	r24, 0x02	; 2
     386:	f5 cf       	rjmp	.-22     	; 0x372 <JTAG2::set_response(JTAG2::jtag_response_e)+0x24>

00000388 <_crc_ccitt_update(unsigned int, unsigned char)>:
_ZL17_crc_ccitt_updatejh():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/crc16.h:285
        "eor    %A0,__tmp_reg__"

        : "=d" (__ret)
        : "r" (__data), "0" (__crc)
        : "r0"
    );
     388:	86 27       	eor	r24, r22
     38a:	08 2e       	mov	r0, r24
     38c:	82 95       	swap	r24
     38e:	80 7f       	andi	r24, 0xF0	; 240
     390:	80 25       	eor	r24, r0
     392:	09 2e       	mov	r0, r25
     394:	98 2f       	mov	r25, r24
     396:	82 95       	swap	r24
     398:	8f 70       	andi	r24, 0x0F	; 15
     39a:	08 26       	eor	r0, r24
     39c:	86 95       	lsr	r24
     39e:	98 27       	eor	r25, r24
     3a0:	89 27       	eor	r24, r25
     3a2:	88 0f       	add	r24, r24
     3a4:	88 0f       	add	r24, r24
     3a6:	88 0f       	add	r24, r24
     3a8:	80 25       	eor	r24, r0
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/crc16.h:287
    return __ret;
}
     3aa:	08 95       	ret

000003ac <JTAG2::answer_transfer()>:
_ZN5JTAG215answer_transferEv():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:147
  while (p != q) _crc = JTAG2::crc16_update(_crc, *q++);
  return _crc == 0;
}

/* JTAG Answer */
void JTAG2::answer_transfer (void) {
     3ac:	af 92       	push	r10
     3ae:	bf 92       	push	r11
     3b0:	cf 92       	push	r12
     3b2:	df 92       	push	r13
     3b4:	ef 92       	push	r14
     3b6:	ff 92       	push	r15
     3b8:	0f 93       	push	r16
     3ba:	1f 93       	push	r17
     3bc:	cf 93       	push	r28
     3be:	df 93       	push	r29
     3c0:	00 d0       	rcall	.+0      	; 0x3c2 <JTAG2::answer_transfer()+0x16>
     3c2:	cd b7       	in	r28, 0x3d	; 61
     3c4:	de b7       	in	r29, 0x3e	; 62
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:148
  uint16_t _crc = ~0;
     3c6:	8f ef       	ldi	r24, 0xFF	; 255
     3c8:	9f ef       	ldi	r25, 0xFF	; 255
     3ca:	89 83       	std	Y+1, r24	; 0x01
     3cc:	9a 83       	std	Y+2, r25	; 0x02
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:149
  int16_t _len = packet.size_word[0] + 8;
     3ce:	e0 90 66 38 	lds	r14, 0x3866	; 0x803866 <JTAG2::packet+0x3>
     3d2:	f0 90 67 38 	lds	r15, 0x3867	; 0x803867 <JTAG2::packet+0x4>
     3d6:	87 01       	movw	r16, r14
     3d8:	08 5f       	subi	r16, 0xF8	; 248
     3da:	1f 4f       	sbci	r17, 0xFF	; 255
     3dc:	83 e6       	ldi	r24, 0x63	; 99
     3de:	c8 2e       	mov	r12, r24
     3e0:	88 e3       	ldi	r24, 0x38	; 56
     3e2:	d8 2e       	mov	r13, r24
     3e4:	56 01       	movw	r10, r12
     3e6:	81 e0       	ldi	r24, 0x01	; 1
     3e8:	e8 1a       	sub	r14, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:152
  uint8_t *_p = (uint8_t*) &packet.soh;
  uint8_t *_q = (uint8_t*) &packet.soh;
  while (_len--) _crc = JTAG2::crc16_update(_crc, *_q++);
     3ea:	f1 08       	sbc	r15, r1
     3ec:	a7 ef       	ldi	r26, 0xF7	; 247
     3ee:	ea 16       	cp	r14, r26
     3f0:	af ef       	ldi	r26, 0xFF	; 255
     3f2:	fa 06       	cpc	r15, r26
     3f4:	49 f0       	breq	.+18     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     3f6:	f5 01       	movw	r30, r10
     3f8:	61 91       	ld	r22, Z+
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:116
void JTAG2::flush (void) {
  loop_until_bit_is_set(JTAG_USART.STATUS, USART_TXCIF_bp);
}

uint16_t JTAG2::crc16_update(uint16_t _crc, uint8_t _data) {
  return _crc_ccitt_update(_crc, _data);
     3fa:	5f 01       	movw	r10, r30
crc16_update():
     3fc:	89 81       	ldd	r24, Y+1	; 0x01
     3fe:	9a 81       	ldd	r25, Y+2	; 0x02
     400:	c3 df       	rcall	.-122    	; 0x388 <_crc_ccitt_update(unsigned int, unsigned char)>
_ZN5JTAG215answer_transferEv():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:152
void JTAG2::answer_transfer (void) {
  uint16_t _crc = ~0;
  int16_t _len = packet.size_word[0] + 8;
  uint8_t *_p = (uint8_t*) &packet.soh;
  uint8_t *_q = (uint8_t*) &packet.soh;
  while (_len--) _crc = JTAG2::crc16_update(_crc, *_q++);
     402:	89 83       	std	Y+1, r24	; 0x01
     404:	9a 83       	std	Y+2, r25	; 0x02
     406:	ef cf       	rjmp	.-34     	; 0x3e6 <JTAG2::answer_transfer()+0x3a>
     408:	f8 01       	movw	r30, r16
     40a:	ed 59       	subi	r30, 0x9D	; 157
     40c:	f7 4c       	sbci	r31, 0xC7	; 199
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:153
  (*_q++) = _CAPS16(_crc)->bytes[0];
     40e:	89 81       	ldd	r24, Y+1	; 0x01
     410:	80 83       	st	Z, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:154
  (*_q++) = _CAPS16(_crc)->bytes[1];
     412:	8a 81       	ldd	r24, Y+2	; 0x02
     414:	81 83       	std	Z+1, r24	; 0x01
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:155
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     416:	2f b7       	in	r18, 0x3f	; 63
__iCliRetVal():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:50
     418:	f8 94       	cli
_ZN5JTAG215answer_transferEv():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:154
  int16_t _len = packet.size_word[0] + 8;
  uint8_t *_p = (uint8_t*) &packet.soh;
  uint8_t *_q = (uint8_t*) &packet.soh;
  while (_len--) _crc = JTAG2::crc16_update(_crc, *_q++);
  (*_q++) = _CAPS16(_crc)->bytes[0];
  (*_q++) = _CAPS16(_crc)->bytes[1];
     41a:	32 96       	adiw	r30, 0x02	; 2
put():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:107
  return JTAG_USART.RXDATAL;
}

uint8_t JTAG2::put (uint8_t _data) {
  loop_until_bit_is_set(JTAG_USART.STATUS, USART_DREIF_bp);
  JTAG_USART.STATUS = USART_TXCIF_bm;
     41c:	90 e4       	ldi	r25, 0x40	; 64
_ZN5JTAG215answer_transferEv():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:156
  uint8_t *_q = (uint8_t*) &packet.soh;
  while (_len--) _crc = JTAG2::crc16_update(_crc, *_q++);
  (*_q++) = _CAPS16(_crc)->bytes[0];
  (*_q++) = _CAPS16(_crc)->bytes[1];
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    while (_p != _q) put(*_p++);
     41e:	ce 16       	cp	r12, r30
     420:	df 06       	cpc	r13, r31
     422:	71 f4       	brne	.+28     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
__iRestore():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     424:	2f bf       	out	0x3f, r18	; 63
_ZN5JTAG215answer_transferEv():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:158
  }
}
     426:	0f 90       	pop	r0
     428:	0f 90       	pop	r0
     42a:	df 91       	pop	r29
     42c:	cf 91       	pop	r28
     42e:	1f 91       	pop	r17
     430:	0f 91       	pop	r16
     432:	ff 90       	pop	r15
     434:	ef 90       	pop	r14
     436:	df 90       	pop	r13
     438:	cf 90       	pop	r12
     43a:	bf 90       	pop	r11
     43c:	af 90       	pop	r10
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:156
  uint8_t *_q = (uint8_t*) &packet.soh;
  while (_len--) _crc = JTAG2::crc16_update(_crc, *_q++);
  (*_q++) = _CAPS16(_crc)->bytes[0];
  (*_q++) = _CAPS16(_crc)->bytes[1];
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    while (_p != _q) put(*_p++);
     43e:	08 95       	ret
     440:	d6 01       	movw	r26, r12
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:106
  loop_until_bit_is_set(JTAG_USART.STATUS, USART_RXCIF_bp);
  return JTAG_USART.RXDATAL;
}

uint8_t JTAG2::put (uint8_t _data) {
  loop_until_bit_is_set(JTAG_USART.STATUS, USART_DREIF_bp);
     442:	8d 91       	ld	r24, X+
     444:	6d 01       	movw	r12, r26
put():
     446:	30 91 24 08 	lds	r19, 0x0824	; 0x800824 <UPDI::nvmprog_key+0x7f6f04>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:107
  JTAG_USART.STATUS = USART_TXCIF_bm;
     44a:	35 ff       	sbrs	r19, 5
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:108
  return JTAG_USART.TXDATAL = _data;
     44c:	fc cf       	rjmp	.-8      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     44e:	90 93 24 08 	sts	0x0824, r25	; 0x800824 <UPDI::nvmprog_key+0x7f6f04>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:412
 * プログラミング制御開始
 *
 */

bool UPDI::enter_prog (void) {
  if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_PROG_bp)) {
     452:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <UPDI::nvmprog_key+0x7f6f02>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:201
  set_ptr[1] = UPDI::UPDI_LDCS | code;
  while (!UPDI::send_bytes(set_ptr, sizeof(set_ptr))) UPDI::BREAK();
  return UPDI::RECV();
}
inline bool UPDI::is_cs_stat (const uint8_t code, uint8_t check) {
  return check == (UPDI::get_cs_stat(code) & check);
     456:	e3 cf       	rjmp	.-58     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>

00000458 <UPDI::enter_prog()>:
_ZN4UPDI10enter_progEv():
     458:	e1 99       	sbic	0x1c, 1	; 28
     45a:	33 c0       	rjmp	.+102    	; 0x4c2 <UPDI::enter_prog()+0x6a>
is_cs_stat():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:413
 *
 */

bool UPDI::enter_prog (void) {
  if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_PROG_bp)) {
    while (UPDI::is_sys_stat(UPDI::UPDI_SYS_RSTSYS));
     45c:	8b e0       	ldi	r24, 0x0B	; 11
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:414
    if (!(UPDI_LASTL & UPDI::UPDI_SYS_NVMPROG)) {
     45e:	f0 de       	rcall	.-544    	; 0x240 <UPDI::get_cs_stat(unsigned char)>
_ZN4UPDI10enter_progEv():
     460:	85 fd       	sbrc	r24, 5
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:415
      if (UPDI_LASTL & UPDI::UPDI_SYS_LOCKSTATUS) return false;
     462:	fc cf       	rjmp	.-8      	; 0x45c <UPDI::enter_prog()+0x4>
     464:	f3 99       	sbic	0x1e, 3	; 30
     466:	2b c0       	rjmp	.+86     	; 0x4be <UPDI::enter_prog()+0x66>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:201
  set_ptr[1] = UPDI::UPDI_LDCS | code;
  while (!UPDI::send_bytes(set_ptr, sizeof(set_ptr))) UPDI::BREAK();
  return UPDI::RECV();
}
inline bool UPDI::is_cs_stat (const uint8_t code, uint8_t check) {
  return check == (UPDI::get_cs_stat(code) & check);
     468:	f0 9b       	sbis	0x1e, 0	; 30
     46a:	02 c0       	rjmp	.+4      	; 0x470 <UPDI::enter_prog()+0x18>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:416
bool UPDI::enter_prog (void) {
  if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_PROG_bp)) {
    while (UPDI::is_sys_stat(UPDI::UPDI_SYS_RSTSYS));
    if (!(UPDI_LASTL & UPDI::UPDI_SYS_NVMPROG)) {
      if (UPDI_LASTL & UPDI::UPDI_SYS_LOCKSTATUS) return false;
      if (!UPDI::is_key_stat(UPDI::UPDI_KEY_NVMPROG)) {
     46c:	80 e0       	ldi	r24, 0x00	; 0
     46e:	08 95       	ret
is_cs_stat():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:417
        if (!UPDI::send_bytes(UPDI::nvmprog_key, sizeof(UPDI::nvmprog_key))) return false;
     470:	87 e0       	ldi	r24, 0x07	; 7
     472:	e6 de       	rcall	.-564    	; 0x240 <UPDI::get_cs_stat(unsigned char)>
_ZN4UPDI10enter_progEv():
     474:	84 fd       	sbrc	r24, 4
     476:	11 c0       	rjmp	.+34     	; 0x49a <UPDI::enter_prog()+0x42>
     478:	6a e0       	ldi	r22, 0x0A	; 10
     47a:	70 e0       	ldi	r23, 0x00	; 0
     47c:	80 e2       	ldi	r24, 0x20	; 32
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.3/cores/megaAVR/api/delay_busywait.h:31
static __inline__ __attribute__((__always_inline__)) void delay_micros (uint32_t _us);
static __inline__ __attribute__((__always_inline__)) void delay_millis (uint32_t _ms);

void delay_micros (uint32_t _us) {
  if (F_CPU >= 1000000L) {
    __builtin_avr_delay_cycles((F_CPU / 1000000L) * _us);
     47e:	99 e9       	ldi	r25, 0x99	; 153
     480:	69 de       	rcall	.-814    	; 0x154 <UPDI::send_bytes(unsigned char const*, unsigned int)>
     482:	88 23       	and	r24, r24
     484:	99 f3       	breq	.-26     	; 0x46c <UPDI::enter_prog()+0x14>
delay_micros():
     486:	89 ef       	ldi	r24, 0xF9	; 249
     488:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:201
  set_ptr[1] = UPDI::UPDI_LDCS | code;
  while (!UPDI::send_bytes(set_ptr, sizeof(set_ptr))) UPDI::BREAK();
  return UPDI::RECV();
}
inline bool UPDI::is_cs_stat (const uint8_t code, uint8_t check) {
  return check == (UPDI::get_cs_stat(code) & check);
     48a:	01 97       	sbiw	r24, 0x01	; 1
     48c:	f1 f7       	brne	.-4      	; 0x48a <UPDI::enter_prog()+0x32>
     48e:	00 c0       	rjmp	.+0      	; 0x490 <UPDI::enter_prog()+0x38>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:418
    while (UPDI::is_sys_stat(UPDI::UPDI_SYS_RSTSYS));
    if (!(UPDI_LASTL & UPDI::UPDI_SYS_NVMPROG)) {
      if (UPDI_LASTL & UPDI::UPDI_SYS_LOCKSTATUS) return false;
      if (!UPDI::is_key_stat(UPDI::UPDI_KEY_NVMPROG)) {
        if (!UPDI::send_bytes(UPDI::nvmprog_key, sizeof(UPDI::nvmprog_key))) return false;
        do{ delay_micros(100); } while (!UPDI::is_key_stat(UPDI::UPDI_KEY_NVMPROG));
     490:	00 00       	nop
is_cs_stat():
     492:	87 e0       	ldi	r24, 0x07	; 7
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:420
      }
      if (!UPDI::updi_reset(true) || !UPDI::updi_reset(false)) return false;
     494:	d5 de       	rcall	.-598    	; 0x240 <UPDI::get_cs_stat(unsigned char)>
_ZN4UPDI10enter_progEv():
     496:	84 ff       	sbrs	r24, 4
     498:	f6 cf       	rjmp	.-20     	; 0x486 <UPDI::enter_prog()+0x2e>
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	7b de       	rcall	.-778    	; 0x194 <UPDI::updi_reset(bool)>
     49e:	88 23       	and	r24, r24
     4a0:	29 f3       	breq	.-54     	; 0x46c <UPDI::enter_prog()+0x14>
     4a2:	80 e0       	ldi	r24, 0x00	; 0
     4a4:	77 de       	rcall	.-786    	; 0x194 <UPDI::updi_reset(bool)>
     4a6:	88 23       	and	r24, r24
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.3/cores/megaAVR/api/delay_busywait.h:31
     4a8:	09 f3       	breq	.-62     	; 0x46c <UPDI::enter_prog()+0x14>
delay_micros():
     4aa:	89 ef       	ldi	r24, 0xF9	; 249
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	01 97       	sbiw	r24, 0x01	; 1
     4b0:	f1 f7       	brne	.-4      	; 0x4ae <UPDI::enter_prog()+0x56>
     4b2:	00 c0       	rjmp	.+0      	; 0x4b4 <UPDI::enter_prog()+0x5c>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:201
  set_ptr[1] = UPDI::UPDI_LDCS | code;
  while (!UPDI::send_bytes(set_ptr, sizeof(set_ptr))) UPDI::BREAK();
  return UPDI::RECV();
}
inline bool UPDI::is_cs_stat (const uint8_t code, uint8_t check) {
  return check == (UPDI::get_cs_stat(code) & check);
     4b4:	00 00       	nop
is_cs_stat():
     4b6:	8b e0       	ldi	r24, 0x0B	; 11
     4b8:	c3 de       	rcall	.-634    	; 0x240 <UPDI::get_cs_stat(unsigned char)>
_ZN4UPDI10enter_progEv():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:421
      if (!UPDI::is_key_stat(UPDI::UPDI_KEY_NVMPROG)) {
        if (!UPDI::send_bytes(UPDI::nvmprog_key, sizeof(UPDI::nvmprog_key))) return false;
        do{ delay_micros(100); } while (!UPDI::is_key_stat(UPDI::UPDI_KEY_NVMPROG));
      }
      if (!UPDI::updi_reset(true) || !UPDI::updi_reset(false)) return false;
      do{ delay_micros(100); } while (!UPDI::is_sys_stat(UPDI::UPDI_SYS_NVMPROG));
     4ba:	83 ff       	sbrs	r24, 3
     4bc:	f6 cf       	rjmp	.-20     	; 0x4aa <UPDI::enter_prog()+0x52>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:423
    }
    UPDI_CONTROL |= _BV(UPDI::UPDI_INFO_bp);
     4be:	e0 9a       	sbi	0x1c, 0	; 28
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:424
    UPDI_CONTROL |= _BV(UPDI::UPDI_PROG_bp);
     4c0:	e1 9a       	sbi	0x1c, 1	; 28
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:426
  }
  return true;
     4c2:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:427
}
     4c4:	08 95       	ret

000004c6 <HV_Pulse()>:
_Z8HV_Pulsev():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:200
/*
 * HVチャージポンプ駆動制御
 */

void TIM::HV_Pulse_ON (void) {
  TCA0_SPLIT_CTRLB = TCA_SPLIT_HCMP0EN_bm | TCA_SPLIT_HCMP1EN_bm;
     4c6:	80 e3       	ldi	r24, 0x30	; 48
     4c8:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <UPDI::nvmprog_key+0x7f70e1>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:282
/*
 * HVパルス印加
 */
void HV_Pulse (void) {
  TIM::HV_Pulse_ON();
  openDrainWrite(TRST_PIN, LOW);
     4cc:	21 9a       	sbi	0x04, 1	; 4
delay_micros():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.3/cores/megaAVR/api/delay_busywait.h:31
     4ce:	8f ec       	ldi	r24, 0xCF	; 207
     4d0:	97 e0       	ldi	r25, 0x07	; 7
     4d2:	01 97       	sbiw	r24, 0x01	; 1
     4d4:	f1 f7       	brne	.-4      	; 0x4d2 <HV_Pulse()+0xc>
     4d6:	00 c0       	rjmp	.+0      	; 0x4d8 <HV_Pulse()+0x12>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:284
  delay_micros(800);
  openDrainWrite(TRST_PIN, HIGH);
     4d8:	00 00       	nop
_Z8HV_Pulsev():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.3/cores/megaAVR/api/delay_busywait.h:31
     4da:	21 98       	cbi	0x04, 1	; 4
delay_micros():
     4dc:	8f ec       	ldi	r24, 0xCF	; 207
     4de:	97 e0       	ldi	r25, 0x07	; 7
     4e0:	01 97       	sbiw	r24, 0x01	; 1
     4e2:	f1 f7       	brne	.-4      	; 0x4e0 <HV_Pulse()+0x1a>
     4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <HV_Pulse()+0x20>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:286
  delay_micros(800);
  if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN2_bp)) {
     4e6:	00 00       	nop
_Z8HV_Pulsev():
     4e8:	ee 9b       	sbis	0x1d, 6	; 29
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:287
    digitalWrite(HV8_PIN, HIGH);
     4ea:	1b c0       	rjmp	.+54     	; 0x522 <HV_Pulse()+0x5c>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.3/cores/megaAVR/api/delay_busywait.h:31
     4ec:	2d 9a       	sbi	0x05, 5	; 5
delay_micros():
     4ee:	8f ec       	ldi	r24, 0xCF	; 207
     4f0:	97 e0       	ldi	r25, 0x07	; 7
     4f2:	01 97       	sbiw	r24, 0x01	; 1
     4f4:	f1 f7       	brne	.-4      	; 0x4f2 <HV_Pulse()+0x2c>
     4f6:	00 c0       	rjmp	.+0      	; 0x4f8 <HV_Pulse()+0x32>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:289
    delay_micros(800);
    digitalWrite(HV8_PIN, LOW);
     4f8:	00 00       	nop
_Z8HV_Pulsev():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:204
}

void TIM::HV_Pulse_OFF (void) {
  TCA0_SPLIT_CTRLB = 0;
     4fa:	2d 98       	cbi	0x05, 5	; 5
HV_Pulse_OFF():
     4fc:	10 92 01 0a 	sts	0x0A01, r1	; 0x800a01 <UPDI::nvmprog_key+0x7f70e1>
_Z8HV_Pulsev():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:297
    digitalWrite(HV12_PIN, HIGH);
    delay_micros(800);
    digitalWrite(HV12_PIN, LOW);
  }
  TIM::HV_Pulse_OFF();
  UPDI_USART.BAUD = UPDI_BAUD_SHORT_BREAK;
     500:	88 ee       	ldi	r24, 0xE8	; 232
     502:	93 e0       	ldi	r25, 0x03	; 3
     504:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <UPDI::nvmprog_key+0x7f6ee8>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:298
  UPDI::SEND(UPDI::UPDI_NOP);
     508:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <UPDI::nvmprog_key+0x7f6ee9>
     50c:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:299
  UPDI_USART.BAUD = UPDI_BAUD_CALC;
     50e:	0a de       	rcall	.-1004   	; 0x124 <UPDI::SEND(unsigned char)>
     510:	80 eb       	ldi	r24, 0xB0	; 176
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <UPDI::nvmprog_key+0x7f6ee8>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:300
  UPDI_CONTROL |= _BV(UPDI::UPDI_ERHV_bp);
     518:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <UPDI::nvmprog_key+0x7f6ee9>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:292
    digitalWrite(HV8_PIN, HIGH);
    delay_micros(800);
    digitalWrite(HV8_PIN, LOW);
  }
  else {
    digitalWrite(HV12_PIN, HIGH);
     51c:	e3 9a       	sbi	0x1c, 3	; 28
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.3/cores/megaAVR/api/delay_busywait.h:31
     51e:	e7 98       	cbi	0x1c, 7	; 28
     520:	08 95       	ret
     522:	0e 9a       	sbi	0x01, 6	; 1
delay_micros():
     524:	8f ec       	ldi	r24, 0xCF	; 207
     526:	97 e0       	ldi	r25, 0x07	; 7
     528:	01 97       	sbiw	r24, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:294
    delay_micros(800);
    digitalWrite(HV12_PIN, LOW);
     52a:	f1 f7       	brne	.-4      	; 0x528 <HV_Pulse()+0x62>
     52c:	00 c0       	rjmp	.+0      	; 0x52e <HV_Pulse()+0x68>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:341

/*
 * UPDI制御開始
 */

bool UPDI::enter_updi (bool skip) {
     52e:	00 00       	nop
_Z8HV_Pulsev():
     530:	0e 98       	cbi	0x01, 6	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:345
  static uint8_t set_ptr[] = { UPDI::UPDI_SYNCH, UPDI::UPDI_SIB_128 };
  uint8_t* _p = &JTAG2::packet.body[4];
  size_t _len = 16;
  if (!skip) {
     532:	e4 cf       	rjmp	.-56     	; 0x4fc <HV_Pulse()+0x36>

00000534 <UPDI::enter_updi(bool)>:
_ZN4UPDI10enter_updiEb():
     534:	cf 93       	push	r28
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:347
    /* HV制御強制許可 */
    if (bit_is_set(UPDI_CONTROL, UPDI_FCHV_bp)) {
     536:	df 93       	push	r29
     538:	81 11       	cpse	r24, r1
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:348
      HV_Pulse();
     53a:	1f c0       	rjmp	.+62     	; 0x57a <UPDI::enter_updi(bool)+0x46>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:351

      /* send nvmprog_key */
      if (!UPDI::send_bytes(UPDI::nvmprog_key, sizeof(UPDI::nvmprog_key))) return false;
     53c:	e4 9b       	sbis	0x1c, 4	; 28
     53e:	39 c0       	rjmp	.+114    	; 0x5b2 <UPDI::enter_updi(bool)+0x7e>
     540:	c2 df       	rcall	.-124    	; 0x4c6 <HV_Pulse()>
     542:	6a e0       	ldi	r22, 0x0A	; 10
     544:	70 e0       	ldi	r23, 0x00	; 0
     546:	80 e2       	ldi	r24, 0x20	; 32
     548:	99 e9       	ldi	r25, 0x99	; 153
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:393
        UPDI_NVMCTRL |= _BV(UPDI::UPDI_GEN2_bp);
        NVM::nvm_flash_offset = 0x800000;
        break;
      }
      default : {
        return false;
     54a:	04 de       	rcall	.-1016   	; 0x154 <UPDI::send_bytes(unsigned char const*, unsigned int)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:404
                              == UPDI::UPDI_SET_UPDICLKSEL_8M) {
    UPDI_CONTROL |= _BV(UPDI::UPDI_CLKU_bp);
    UPDI_USART.BAUD = UPDI_BAUD_CALC >> 1;
  }
  return true;
}
     54c:	81 11       	cpse	r24, r1
     54e:	04 c0       	rjmp	.+8      	; 0x558 <UPDI::enter_updi(bool)+0x24>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:354

      /* send nvmprog_key */
      if (!UPDI::send_bytes(UPDI::nvmprog_key, sizeof(UPDI::nvmprog_key))) return false;

      /* restart target : change mode */
      if (!UPDI::updi_reset(true) || !UPDI::updi_reset(false)) return false;
     550:	80 e0       	ldi	r24, 0x00	; 0
     552:	df 91       	pop	r29
     554:	cf 91       	pop	r28
     556:	08 95       	ret
     558:	81 e0       	ldi	r24, 0x01	; 1
     55a:	1c de       	rcall	.-968    	; 0x194 <UPDI::updi_reset(bool)>
     55c:	88 23       	and	r24, r24
     55e:	c1 f3       	breq	.-16     	; 0x550 <UPDI::enter_updi(bool)+0x1c>
     560:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.3/cores/megaAVR/api/delay_busywait.h:40
  }
}

void delay_millis (uint32_t _ms) {
  if (F_CPU >= 1000000L) {
    __builtin_avr_delay_cycles((F_CPU / 1000L) * _ms);
     562:	18 de       	rcall	.-976    	; 0x194 <UPDI::updi_reset(bool)>
     564:	88 23       	and	r24, r24
     566:	a1 f3       	breq	.-24     	; 0x550 <UPDI::enter_updi(bool)+0x1c>
delay_millis():
     568:	2f e9       	ldi	r18, 0x9F	; 159
     56a:	86 e8       	ldi	r24, 0x86	; 134
     56c:	91 e0       	ldi	r25, 0x01	; 1
     56e:	21 50       	subi	r18, 0x01	; 1
     570:	80 40       	sbci	r24, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:362
      delay_millis(50);
    }
    else
      UPDI::BREAK();
  }
  if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_INFO_bp)) {
     572:	90 40       	sbci	r25, 0x00	; 0
     574:	e1 f7       	brne	.-8      	; 0x56e <UPDI::enter_updi(bool)+0x3a>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:227
}
inline bool UPDI::set_cs_ctra (const uint8_t data) {
  return UPDI::set_cs_stat(UPDI::UPDI_CS_CTRLA, data);
}
inline bool UPDI::set_cs_asi_ctra (const uint8_t data) {
  return UPDI::set_cs_stat(UPDI::UPDI_CS_ASI_CTRLA, data);
     576:	00 c0       	rjmp	.+0      	; 0x578 <UPDI::enter_updi(bool)+0x44>
     578:	00 00       	nop
_ZN4UPDI10enter_updiEb():
     57a:	e0 99       	sbic	0x1c, 0	; 28
     57c:	47 c0       	rjmp	.+142    	; 0x60c <UPDI::enter_updi(bool)+0xd8>
set_cs_asi_ctra():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:363
    }
    else
      UPDI::BREAK();
  }
  if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_INFO_bp)) {
    if (!UPDI::set_cs_asi_ctra(UPDI::UPDI_SET_UPDICLKSEL_8M)) return false;
     57e:	62 e0       	ldi	r22, 0x02	; 2
     580:	89 e0       	ldi	r24, 0x09	; 9
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:224
  set_ptr[1] = UPDI::UPDI_STCS | code;
  set_ptr[2] = data;
  return UPDI::send_bytes(set_ptr, sizeof(set_ptr));
}
inline bool UPDI::set_cs_ctra (const uint8_t data) {
  return UPDI::set_cs_stat(UPDI::UPDI_CS_CTRLA, data);
     582:	ff dd       	rcall	.-1026   	; 0x182 <UPDI::set_cs_stat(unsigned char, unsigned char)>
_ZN4UPDI10enter_updiEb():
     584:	88 23       	and	r24, r24
     586:	21 f3       	breq	.-56     	; 0x550 <UPDI::enter_updi(bool)+0x1c>
set_cs_ctra():
     588:	66 e0       	ldi	r22, 0x06	; 6
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:364
    else
      UPDI::BREAK();
  }
  if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_INFO_bp)) {
    if (!UPDI::set_cs_asi_ctra(UPDI::UPDI_SET_UPDICLKSEL_8M)) return false;
    if (!UPDI::set_cs_ctra(UPDI::UPDI_SET_GTVAL_2)) return false;
     58a:	82 e0       	ldi	r24, 0x02	; 2
     58c:	fa dd       	rcall	.-1036   	; 0x182 <UPDI::set_cs_stat(unsigned char, unsigned char)>
_ZN4UPDI10enter_updiEb():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:365
    if (!UPDI::send_bytes(set_ptr, sizeof(set_ptr))) return false;
     58e:	88 23       	and	r24, r24
     590:	f9 f2       	breq	.-66     	; 0x550 <UPDI::enter_updi(bool)+0x1c>
     592:	62 e0       	ldi	r22, 0x02	; 2
     594:	70 e0       	ldi	r23, 0x00	; 0
     596:	81 e2       	ldi	r24, 0x21	; 33
     598:	98 e3       	ldi	r25, 0x38	; 56
     59a:	dc dd       	rcall	.-1096   	; 0x154 <UPDI::send_bytes(unsigned char const*, unsigned int)>
     59c:	88 23       	and	r24, r24
     59e:	c1 f2       	breq	.-80     	; 0x550 <UPDI::enter_updi(bool)+0x1c>
     5a0:	cf e6       	ldi	r28, 0x6F	; 111
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:366
    while (_len--) *_p++ = UPDI::RECV();
     5a2:	d8 e3       	ldi	r29, 0x38	; 56
     5a4:	28 e3       	ldi	r18, 0x38	; 56
     5a6:	cf 37       	cpi	r28, 0x7F	; 127
     5a8:	d2 07       	cpc	r29, r18
     5aa:	29 f0       	breq	.+10     	; 0x5b6 <UPDI::enter_updi(bool)+0x82>
     5ac:	af dd       	rcall	.-1186   	; 0x10c <UPDI::RECV()>
     5ae:	89 93       	st	Y+, r24
     5b0:	f9 cf       	rjmp	.-14     	; 0x5a4 <UPDI::enter_updi(bool)+0x70>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:360

      /* wait enable : chip erase mode success */
      delay_millis(50);
    }
    else
      UPDI::BREAK();
     5b2:	35 de       	rcall	.-918    	; 0x21e <UPDI::BREAK()>
     5b4:	e2 cf       	rjmp	.-60     	; 0x57a <UPDI::enter_updi(bool)+0x46>
     5b6:	80 91 6f 38 	lds	r24, 0x386F	; 0x80386f <JTAG2::packet+0xc>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:367
  if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_INFO_bp)) {
    if (!UPDI::set_cs_asi_ctra(UPDI::UPDI_SET_UPDICLKSEL_8M)) return false;
    if (!UPDI::set_cs_ctra(UPDI::UPDI_SET_GTVAL_2)) return false;
    if (!UPDI::send_bytes(set_ptr, sizeof(set_ptr))) return false;
    while (_len--) *_p++ = UPDI::RECV();
    switch (JTAG2::packet.body[4]) {
     5ba:	81 34       	cpi	r24, 0x41	; 65
     5bc:	21 f0       	breq	.+8      	; 0x5c6 <UPDI::enter_updi(bool)+0x92>
     5be:	70 f4       	brcc	.+28     	; 0x5dc <UPDI::enter_updi(bool)+0xa8>
     5c0:	80 32       	cpi	r24, 0x20	; 32
     5c2:	09 f0       	breq	.+2      	; 0x5c6 <UPDI::enter_updi(bool)+0x92>
     5c4:	c5 cf       	rjmp	.-118    	; 0x550 <UPDI::enter_updi(bool)+0x1c>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:384
      case ' ' :
      case 'A' : {              // 'AVR_Dx' series
        /* AVR Dx SIB = 'AVR     P:2D:1-3' */
        /* AVR Ex SIB = 'AVR     P:3D:1-3' */
        /* AVR DA SIB = '    AVR P:2D:1-3' (最初期ロット) */
        if (JTAG2::packet.body[14] == '3') {
     5c6:	80 91 79 38 	lds	r24, 0x3879	; 0x803879 <JTAG2::packet+0x16>
     5ca:	83 33       	cpi	r24, 0x33	; 51
     5cc:	09 f4       	brne	.+2      	; 0x5d0 <UPDI::enter_updi(bool)+0x9c>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:386
          // 'AVR_Ex' series
          UPDI_NVMCTRL |= _BV(UPDI::UPDI_GEN3_bp);
     5ce:	ef 9a       	sbi	0x1d, 7	; 29
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:388
        }
        UPDI_NVMCTRL |= _BV(UPDI::UPDI_GEN2_bp);
     5d0:	ee 9a       	sbi	0x1d, 6	; 29
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:389
        NVM::nvm_flash_offset = 0x800000;
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	a0 e8       	ldi	r26, 0x80	; 128
     5d8:	b0 e0       	ldi	r27, 0x00	; 0
     5da:	0f c0       	rjmp	.+30     	; 0x5fa <UPDI::enter_updi(bool)+0xc6>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:367
  if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_INFO_bp)) {
    if (!UPDI::set_cs_asi_ctra(UPDI::UPDI_SET_UPDICLKSEL_8M)) return false;
    if (!UPDI::set_cs_ctra(UPDI::UPDI_SET_GTVAL_2)) return false;
    if (!UPDI::send_bytes(set_ptr, sizeof(set_ptr))) return false;
    while (_len--) *_p++ = UPDI::RECV();
    switch (JTAG2::packet.body[4]) {
     5dc:	8d 36       	cpi	r24, 0x6D	; 109
     5de:	41 f0       	breq	.+16     	; 0x5f0 <UPDI::enter_updi(bool)+0xbc>
     5e0:	84 37       	cpi	r24, 0x74	; 116
     5e2:	09 f0       	breq	.+2      	; 0x5e6 <UPDI::enter_updi(bool)+0xb2>
     5e4:	b5 cf       	rjmp	.-150    	; 0x550 <UPDI::enter_updi(bool)+0x1c>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:376
        NVM::nvm_flash_offset = 0x4000;
        break;
      }
      case 't' : {              // 'tinyAVR' series
        /* tinyAVR SIB = 'tinyAVR P:0D:1-3' */
        NVM::nvm_flash_offset = 0x8000;
     5e6:	80 e0       	ldi	r24, 0x00	; 0
     5e8:	90 e8       	ldi	r25, 0x80	; 128
     5ea:	a0 e0       	ldi	r26, 0x00	; 0
     5ec:	b0 e0       	ldi	r27, 0x00	; 0
     5ee:	05 c0       	rjmp	.+10     	; 0x5fa <UPDI::enter_updi(bool)+0xc6>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:370
    if (!UPDI::send_bytes(set_ptr, sizeof(set_ptr))) return false;
    while (_len--) *_p++ = UPDI::RECV();
    switch (JTAG2::packet.body[4]) {
      case 'm' : {              // 'megaAVR' series
        /* megaAVR SIB = 'megaAVR P:0D:1-3' */
        UPDI_NVMCTRL |= _BV(UPDI::UPDI_LOWF_bp);
     5f0:	ed 9a       	sbi	0x1d, 5	; 29
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:371
        NVM::nvm_flash_offset = 0x4000;
     5f2:	80 e0       	ldi	r24, 0x00	; 0
     5f4:	90 e4       	ldi	r25, 0x40	; 64
     5f6:	a0 e0       	ldi	r26, 0x00	; 0
     5f8:	b0 e0       	ldi	r27, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:389
        if (JTAG2::packet.body[14] == '3') {
          // 'AVR_Ex' series
          UPDI_NVMCTRL |= _BV(UPDI::UPDI_GEN3_bp);
        }
        UPDI_NVMCTRL |= _BV(UPDI::UPDI_GEN2_bp);
        NVM::nvm_flash_offset = 0x800000;
     5fa:	80 93 51 38 	sts	0x3851, r24	; 0x803851 <NVM::nvm_flash_offset>
     5fe:	90 93 52 38 	sts	0x3852, r25	; 0x803852 <NVM::nvm_flash_offset+0x1>
     602:	a0 93 53 38 	sts	0x3853, r26	; 0x803853 <NVM::nvm_flash_offset+0x2>
     606:	b0 93 54 38 	sts	0x3854, r27	; 0x803854 <NVM::nvm_flash_offset+0x3>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:396
      }
      default : {
        return false;
      }
    }
    UPDI_CONTROL |= _BV(UPDI::UPDI_INFO_bp);
     60a:	e0 9a       	sbi	0x1c, 0	; 28
get_cs_asi_ctra():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:230
}
inline bool UPDI::set_cs_asi_ctra (const uint8_t data) {
  return UPDI::set_cs_stat(UPDI::UPDI_CS_ASI_CTRLA, data);
}
inline uint8_t UPDI::get_cs_asi_ctra (void) {
  return UPDI::get_cs_stat(UPDI::UPDI_CS_ASI_CTRLA);
     60c:	89 e0       	ldi	r24, 0x09	; 9
     60e:	18 de       	rcall	.-976    	; 0x240 <UPDI::get_cs_stat(unsigned char)>
_ZN4UPDI10enter_updiEb():
     610:	83 70       	andi	r24, 0x03	; 3
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:398
        return false;
      }
    }
    UPDI_CONTROL |= _BV(UPDI::UPDI_INFO_bp);
  }
  if ((UPDI::get_cs_asi_ctra() & UPDI::UPDI_SET_UPDICLKSEL_bm) 
     612:	82 30       	cpi	r24, 0x02	; 2
     614:	39 f4       	brne	.+14     	; 0x624 <UPDI::enter_updi(bool)+0xf0>
     616:	e7 9a       	sbi	0x1c, 7	; 28
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:400
                              == UPDI::UPDI_SET_UPDICLKSEL_8M) {
    UPDI_CONTROL |= _BV(UPDI::UPDI_CLKU_bp);
     618:	88 e5       	ldi	r24, 0x58	; 88
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:401
    UPDI_USART.BAUD = UPDI_BAUD_CALC >> 1;
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <UPDI::nvmprog_key+0x7f6ee8>
     620:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <UPDI::nvmprog_key+0x7f6ee9>
     624:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:403
  }
  return true;
     626:	95 cf       	rjmp	.-214    	; 0x552 <UPDI::enter_updi(bool)+0x1e>

00000628 <UPDI::updi_activate()>:
_ZN4UPDI13updi_activateEv():
     628:	cf 93       	push	r28
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:433

/*
 * UPDI許認可
 */

bool UPDI::updi_activate (void) {
     62a:	df 93       	push	r29
     62c:	1f 92       	push	r1
     62e:	cd b7       	in	r28, 0x3d	; 61
     630:	de b7       	in	r29, 0x3e	; 62
     632:	83 e0       	ldi	r24, 0x03	; 3
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:434
  volatile uint8_t count = 3;
     634:	89 83       	std	Y+1, r24	; 0x01
     636:	89 81       	ldd	r24, Y+1	; 0x01
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:435
  while (--count && bit_is_clear(UPDI_CONTROL, UPDI_PROG_bp)) {
     638:	81 50       	subi	r24, 0x01	; 1
     63a:	89 83       	std	Y+1, r24	; 0x01
     63c:	88 23       	and	r24, r24
     63e:	91 f1       	breq	.+100    	; 0x6a4 <UPDI::updi_activate()+0x7c>
     640:	e1 99       	sbic	0x1c, 1	; 28
     642:	30 c0       	rjmp	.+96     	; 0x6a4 <UPDI::updi_activate()+0x7c>
delay_millis():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.3/cores/megaAVR/api/delay_busywait.h:40
     644:	2f e3       	ldi	r18, 0x3F	; 63
     646:	3d e0       	ldi	r19, 0x0D	; 13
     648:	83 e0       	ldi	r24, 0x03	; 3
     64a:	21 50       	subi	r18, 0x01	; 1
     64c:	30 40       	sbci	r19, 0x00	; 0
     64e:	80 40       	sbci	r24, 0x00	; 0
     650:	e1 f7       	brne	.-8      	; 0x64a <UPDI::updi_activate()+0x22>
     652:	00 c0       	rjmp	.+0      	; 0x654 <UPDI::updi_activate()+0x2c>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:437
    delay_millis(100);
    if (setjmp(TIM::CONTEXT) == 0) {
     654:	00 00       	nop
_ZN4UPDI13updi_activateEv():
     656:	88 e3       	ldi	r24, 0x38	; 56
     658:	98 e3       	ldi	r25, 0x38	; 56
     65a:	0e 94 44 0c 	call	0x1888	; 0x1888 <setjmp>
     65e:	89 2b       	or	r24, r25
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:127
/*
 * タイムアウト制御
 */

void TIM::Timeout_Start (uint16_t _ms) {
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     660:	e1 f4       	brne	.+56     	; 0x69a <UPDI::updi_activate()+0x72>
Timeout_Start():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:128
    TCB0_CNT = 0;
     662:	8f b7       	in	r24, 0x3f	; 63
__iCliRetVal():
     664:	f8 94       	cli
Timeout_Start():
     666:	ea e8       	ldi	r30, 0x8A	; 138
     668:	fa e0       	ldi	r31, 0x0A	; 10
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:129
    TCB0_CCMP = _ms >> 2;
     66a:	10 82       	st	Z, r1
     66c:	11 82       	std	Z+1, r1	; 0x01
     66e:	25 e2       	ldi	r18, 0x25	; 37
     670:	30 e0       	ldi	r19, 0x00	; 0
     672:	ec e8       	ldi	r30, 0x8C	; 140
     674:	fa e0       	ldi	r31, 0x0A	; 10
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:130
    TCB0_INTCTRL = TCB_CAPT_bm;
     676:	20 83       	st	Z, r18
     678:	31 83       	std	Z+1, r19	; 0x01
     67a:	21 e0       	ldi	r18, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:131
    TCB0_INTFLAGS = TCB_CAPT_bm;
     67c:	e5 e8       	ldi	r30, 0x85	; 133
     67e:	fa e0       	ldi	r31, 0x0A	; 10
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:132
    TCB0_CTRLA = TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
     680:	20 83       	st	Z, r18
     682:	e6 e8       	ldi	r30, 0x86	; 134
     684:	fa e0       	ldi	r31, 0x0A	; 10
     686:	20 83       	st	Z, r18
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:70
     688:	2f e0       	ldi	r18, 0x0F	; 15
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:439
      TIM::Timeout_Start(150);
      UPDI::enter_updi(false) && UPDI::enter_prog();
     68a:	e0 e8       	ldi	r30, 0x80	; 128
     68c:	fa e0       	ldi	r31, 0x0A	; 10
     68e:	20 83       	st	Z, r18
__iRestore():
     690:	8f bf       	out	0x3f, r24	; 63
_ZN4UPDI13updi_activateEv():
     692:	80 e0       	ldi	r24, 0x00	; 0
     694:	4f df       	rcall	.-354    	; 0x534 <UPDI::enter_updi(bool)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:441
    }
    TIM::Timeout_Stop();
     696:	81 11       	cpse	r24, r1
     698:	df de       	rcall	.-578    	; 0x458 <UPDI::enter_prog()>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:444

    /* 2周目以降は JPショートならHV制御強制を許可 */
    if (!digitalRead(JP_SENSE_PIN)) UPDI_CONTROL |= _BV(UPDI::UPDI_FCHV_bp);
     69a:	2b de       	rcall	.-938    	; 0x2f2 <TIM::Timeout_Stop()>
     69c:	53 99       	sbic	0x0a, 3	; 10
     69e:	cb cf       	rjmp	.-106    	; 0x636 <UPDI::updi_activate()+0xe>
     6a0:	e4 9a       	sbi	0x1c, 4	; 28
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:446
  }
  return bit_is_set(UPDI_CONTROL, UPDI_PROG_bp);
     6a2:	c9 cf       	rjmp	.-110    	; 0x636 <UPDI::updi_activate()+0xe>
     6a4:	8c b3       	in	r24, 0x1c	; 28
     6a6:	86 95       	lsr	r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:447
}
     6a8:	81 70       	andi	r24, 0x01	; 1
     6aa:	0f 90       	pop	r0
     6ac:	df 91       	pop	r29
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:307
  return UPDI_LASTL;
}

/* NVMCTRL v3 */
uint8_t NVM::nvm_wait_v3 (void) {
  while (UPDI::ld8(NVM::NVMCTRL_V3_REG_STATUS) & 3) delay_micros(50);
     6ae:	cf 91       	pop	r28
     6b0:	08 95       	ret

000006b2 <NVM::nvm_wait_v3()>:
_ZN3NVM11nvm_wait_v3Ev():
     6b2:	66 e0       	ldi	r22, 0x06	; 6
     6b4:	70 e1       	ldi	r23, 0x10	; 16
     6b6:	80 e0       	ldi	r24, 0x00	; 0
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	cf dd       	rcall	.-1122   	; 0x25a <UPDI::ld8(unsigned long)>
     6bc:	83 70       	andi	r24, 0x03	; 3
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.3/cores/megaAVR/api/delay_busywait.h:31
static __inline__ __attribute__((__always_inline__)) void delay_micros (uint32_t _us);
static __inline__ __attribute__((__always_inline__)) void delay_millis (uint32_t _ms);

void delay_micros (uint32_t _us) {
  if (F_CPU >= 1000000L) {
    __builtin_avr_delay_cycles((F_CPU / 1000000L) * _us);
     6be:	29 f0       	breq	.+10     	; 0x6ca <NVM::nvm_wait_v3()+0x18>
delay_micros():
     6c0:	86 ea       	ldi	r24, 0xA6	; 166
     6c2:	8a 95       	dec	r24
     6c4:	f1 f7       	brne	.-4      	; 0x6c2 <NVM::nvm_wait_v3()+0x10>
     6c6:	00 c0       	rjmp	.+0      	; 0x6c8 <NVM::nvm_wait_v3()+0x16>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:308
  return UPDI_LASTL;
     6c8:	f4 cf       	rjmp	.-24     	; 0x6b2 <NVM::nvm_wait_v3()>
_ZN3NVM11nvm_wait_v3Ev():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:309
}
     6ca:	8e b3       	in	r24, 0x1e	; 30
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:334
  NVM::nvm_wait();
  return nvm_ctrl_change(nvmcmd);
}

/* NVMCTRL v3 */
bool NVM::nvm_ctrl_v3 (uint8_t nvmcmd) {
     6cc:	08 95       	ret

000006ce <NVM::nvm_ctrl_v3(unsigned char)>:
_ZN3NVM11nvm_ctrl_v3Eh():
     6ce:	cf 93       	push	r28
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:335
  NVM::nvm_wait_v3();
     6d0:	c8 2f       	mov	r28, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:336
  return nvm_ctrl_change(nvmcmd);
     6d2:	ef df       	rcall	.-34     	; 0x6b2 <NVM::nvm_wait_v3()>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:337
}
     6d4:	8c 2f       	mov	r24, r28
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:336
}

/* NVMCTRL v3 */
bool NVM::nvm_ctrl_v3 (uint8_t nvmcmd) {
  NVM::nvm_wait_v3();
  return nvm_ctrl_change(nvmcmd);
     6d6:	cf 91       	pop	r28
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:525

  return NVM::nvm_ctrl_v2(NVM::NVM_V2_CMD_NOCMD);
}

/* NVMCTRL v3 */
bool NVM::write_flash_v3 (uint32_t start_addr, size_t byte_count) {
     6d8:	25 ce       	rjmp	.-950    	; 0x324 <nvm_ctrl_change(unsigned char)>

000006da <NVM::write_flash_v3(unsigned long, unsigned int)>:
_ZN3NVM14write_flash_v3Emj():
     6da:	cf 92       	push	r12
     6dc:	df 92       	push	r13
     6de:	ef 92       	push	r14
     6e0:	ff 92       	push	r15
     6e2:	0f 93       	push	r16
     6e4:	1f 93       	push	r17
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:526
  byte_count >>= 1;
     6e6:	cf 93       	push	r28
     6e8:	df 93       	push	r29
     6ea:	ea 01       	movw	r28, r20
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:527
  if (byte_count == 0 || byte_count > 256) return false;
     6ec:	d6 95       	lsr	r29
     6ee:	c7 95       	ror	r28
     6f0:	9e 01       	movw	r18, r28
     6f2:	21 50       	subi	r18, 0x01	; 1
     6f4:	31 09       	sbc	r19, r1
     6f6:	2f 3f       	cpi	r18, 0xFF	; 255
     6f8:	31 05       	cpc	r19, r1
     6fa:	11 f0       	breq	.+4      	; 0x700 <NVM::write_flash_v3(unsigned long, unsigned int)+0x26>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:532

  /* チップ消去していない場合はセクター消去 */
  /* ただしページ境界先頭がアドレスされた場合に限る */
  if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_ERFM_bp)
  && ((uint16_t)start_addr & (NVM::flash_page_size - 1)) == 0) {
     6fc:	08 f0       	brcs	.+2      	; 0x700 <NVM::write_flash_v3(unsigned long, unsigned int)+0x26>
     6fe:	59 c0       	rjmp	.+178    	; 0x7b2 <NVM::write_flash_v3(unsigned long, unsigned int)+0xd8>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:537
    NVM::nvm_wait_v3();
    if (!UPDI::st8(start_addr, 0xFF)) return false;
    if (!NVM::nvm_ctrl_v3(NVM::NVM_V3_CMD_FLPER)) return false;
  }
  if (!NVM::nvm_ctrl_v3(NVM::NVM_V3_CMD_FLPBCLR)) return false;
     700:	6b 01       	movw	r12, r22
     702:	7c 01       	movw	r14, r24
     704:	e2 9b       	sbis	0x1c, 2	; 28
     706:	40 c0       	rjmp	.+128    	; 0x788 <NVM::write_flash_v3(unsigned long, unsigned int)+0xae>
     708:	8f e0       	ldi	r24, 0x0F	; 15
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:540

  /* setting register pointer and enable RSD mode */
  _CAPS32(set_ptr[2])->dword = start_addr;
     70a:	e1 df       	rcall	.-62     	; 0x6ce <NVM::nvm_ctrl_v3(unsigned char)>
     70c:	88 23       	and	r24, r24
     70e:	09 f4       	brne	.+2      	; 0x712 <NVM::write_flash_v3(unsigned long, unsigned int)+0x38>
     710:	50 c0       	rjmp	.+160    	; 0x7b2 <NVM::write_flash_v3(unsigned long, unsigned int)+0xd8>
     712:	c0 92 32 38 	sts	0x3832, r12	; 0x803832 <NVM::set_ptr+0x2>
     716:	d0 92 33 38 	sts	0x3833, r13	; 0x803833 <NVM::set_ptr+0x3>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:541
  set_repeat_rsd[5] = byte_count - 1;
     71a:	e0 92 34 38 	sts	0x3834, r14	; 0x803834 <NVM::set_ptr+0x4>
     71e:	f0 92 35 38 	sts	0x3835, r15	; 0x803835 <NVM::set_ptr+0x5>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:542
  if (!UPDI::send_bytes(set_ptr, sizeof(set_ptr) - 1)) return false;
     722:	8c 2f       	mov	r24, r28
     724:	81 50       	subi	r24, 0x01	; 1
     726:	80 93 28 38 	sts	0x3828, r24	; 0x803828 <NVM::set_repeat_rsd+0x5>
     72a:	65 e0       	ldi	r22, 0x05	; 5
     72c:	70 e0       	ldi	r23, 0x00	; 0
     72e:	80 e3       	ldi	r24, 0x30	; 48
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:543
  if (UPDI::UPDI_ACK != UPDI::RECV()) return false;
     730:	98 e3       	ldi	r25, 0x38	; 56
     732:	10 dd       	rcall	.-1504   	; 0x154 <UPDI::send_bytes(unsigned char const*, unsigned int)>
     734:	88 23       	and	r24, r24
     736:	09 f4       	brne	.+2      	; 0x73a <NVM::write_flash_v3(unsigned long, unsigned int)+0x60>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:544
  if (!UPDI::send_bytes(set_repeat_rsd, sizeof(set_repeat_rsd))) return false;
     738:	3c c0       	rjmp	.+120    	; 0x7b2 <NVM::write_flash_v3(unsigned long, unsigned int)+0xd8>
     73a:	e8 dc       	rcall	.-1584   	; 0x10c <UPDI::RECV()>
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	09 f0       	breq	.+2      	; 0x742 <NVM::write_flash_v3(unsigned long, unsigned int)+0x68>
     740:	38 c0       	rjmp	.+112    	; 0x7b2 <NVM::write_flash_v3(unsigned long, unsigned int)+0xd8>
     742:	68 e0       	ldi	r22, 0x08	; 8
     744:	70 e0       	ldi	r23, 0x00	; 0
     746:	83 e2       	ldi	r24, 0x23	; 35
     748:	98 e3       	ldi	r25, 0x38	; 56
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:549

  /* page buffer stored */
  uint8_t* p = &JTAG2::packet.body[10];
  do {
    UPDI::SEND(*p++);
     74a:	04 dd       	rcall	.-1528   	; 0x154 <UPDI::send_bytes(unsigned char const*, unsigned int)>
     74c:	88 23       	and	r24, r24
     74e:	89 f1       	breq	.+98     	; 0x7b2 <NVM::write_flash_v3(unsigned long, unsigned int)+0xd8>
     750:	03 e6       	ldi	r16, 0x63	; 99
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:550
    UPDI::SEND(*p++);
     752:	18 e3       	ldi	r17, 0x38	; 56
     754:	f8 01       	movw	r30, r16
     756:	82 89       	ldd	r24, Z+18	; 0x12
     758:	e5 dc       	rcall	.-1590   	; 0x124 <UPDI::SEND(unsigned char)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:551
  } while (--byte_count);
     75a:	f8 01       	movw	r30, r16
     75c:	83 89       	ldd	r24, Z+19	; 0x13
     75e:	e2 dc       	rcall	.-1596   	; 0x124 <UPDI::SEND(unsigned char)>
     760:	21 97       	sbiw	r28, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:224
  set_ptr[1] = UPDI::UPDI_STCS | code;
  set_ptr[2] = data;
  return UPDI::send_bytes(set_ptr, sizeof(set_ptr));
}
inline bool UPDI::set_cs_ctra (const uint8_t data) {
  return UPDI::set_cs_stat(UPDI::UPDI_CS_CTRLA, data);
     762:	0e 5f       	subi	r16, 0xFE	; 254
     764:	1f 4f       	sbci	r17, 0xFF	; 255
     766:	20 97       	sbiw	r28, 0x00	; 0
     768:	a9 f7       	brne	.-22     	; 0x754 <NVM::write_flash_v3(unsigned long, unsigned int)+0x7a>
set_cs_ctra():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:555
  // UPDI::guardtime();

  /* disable RSD mode */
  if (!UPDI::set_cs_ctra(UPDI::UPDI_SET_GTVAL_2)) return false;
     76a:	66 e0       	ldi	r22, 0x06	; 6
     76c:	82 e0       	ldi	r24, 0x02	; 2
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:557

  return NVM::nvm_ctrl_v3(NVM::NVM_V3_CMD_FLPW);
     76e:	09 dd       	rcall	.-1518   	; 0x182 <UPDI::set_cs_stat(unsigned char, unsigned char)>
_ZN3NVM14write_flash_v3Emj():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:558
}
     770:	88 23       	and	r24, r24
     772:	f9 f0       	breq	.+62     	; 0x7b2 <NVM::write_flash_v3(unsigned long, unsigned int)+0xd8>
     774:	84 e0       	ldi	r24, 0x04	; 4
     776:	df 91       	pop	r29
     778:	cf 91       	pop	r28
     77a:	1f 91       	pop	r17
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:557
  // UPDI::guardtime();

  /* disable RSD mode */
  if (!UPDI::set_cs_ctra(UPDI::UPDI_SET_GTVAL_2)) return false;

  return NVM::nvm_ctrl_v3(NVM::NVM_V3_CMD_FLPW);
     77c:	0f 91       	pop	r16
     77e:	ff 90       	pop	r15
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:532
  if (byte_count == 0 || byte_count > 256) return false;

  /* チップ消去していない場合はセクター消去 */
  /* ただしページ境界先頭がアドレスされた場合に限る */
  if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_ERFM_bp)
  && ((uint16_t)start_addr & (NVM::flash_page_size - 1)) == 0) {
     780:	ef 90       	pop	r14
     782:	df 90       	pop	r13
     784:	cf 90       	pop	r12
     786:	a3 cf       	rjmp	.-186    	; 0x6ce <NVM::nvm_ctrl_v3(unsigned char)>
     788:	80 91 55 38 	lds	r24, 0x3855	; 0x803855 <NVM::flash_page_size>
     78c:	90 91 56 38 	lds	r25, 0x3856	; 0x803856 <NVM::flash_page_size+0x1>
     790:	01 97       	sbiw	r24, 0x01	; 1
     792:	86 23       	and	r24, r22
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:533
    NVM::nvm_wait_v3();
     794:	9d 21       	and	r25, r13
     796:	89 2b       	or	r24, r25
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:534
    if (!UPDI::st8(start_addr, 0xFF)) return false;
     798:	09 f0       	breq	.+2      	; 0x79c <NVM::write_flash_v3(unsigned long, unsigned int)+0xc2>
     79a:	b6 cf       	rjmp	.-148    	; 0x708 <NVM::write_flash_v3(unsigned long, unsigned int)+0x2e>
     79c:	8a df       	rcall	.-236    	; 0x6b2 <NVM::nvm_wait_v3()>
     79e:	4f ef       	ldi	r20, 0xFF	; 255
     7a0:	c7 01       	movw	r24, r14
     7a2:	b6 01       	movw	r22, r12
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:535
    if (!NVM::nvm_ctrl_v3(NVM::NVM_V3_CMD_FLPER)) return false;
     7a4:	fc dc       	rcall	.-1544   	; 0x19e <UPDI::st8(unsigned long, unsigned char)>
     7a6:	88 23       	and	r24, r24
     7a8:	21 f0       	breq	.+8      	; 0x7b2 <NVM::write_flash_v3(unsigned long, unsigned int)+0xd8>
     7aa:	88 e0       	ldi	r24, 0x08	; 8
     7ac:	90 df       	rcall	.-224    	; 0x6ce <NVM::nvm_ctrl_v3(unsigned char)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:558

  /* disable RSD mode */
  if (!UPDI::set_cs_ctra(UPDI::UPDI_SET_GTVAL_2)) return false;

  return NVM::nvm_ctrl_v3(NVM::NVM_V3_CMD_FLPW);
}
     7ae:	81 11       	cpse	r24, r1
     7b0:	ab cf       	rjmp	.-170    	; 0x708 <NVM::write_flash_v3(unsigned long, unsigned int)+0x2e>
     7b2:	80 e0       	ldi	r24, 0x00	; 0
     7b4:	df 91       	pop	r29
     7b6:	cf 91       	pop	r28
     7b8:	1f 91       	pop	r17
     7ba:	0f 91       	pop	r16
     7bc:	ff 90       	pop	r15
     7be:	ef 90       	pop	r14
     7c0:	df 90       	pop	r13
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:301
 */

/* NVMCTRL v0 */
/* NVMCTRL v2 */
uint8_t NVM::nvm_wait (void) {
  while (UPDI::ld8(NVM::NVMCTRL_REG_STATUS) & 3) delay_micros(50);
     7c2:	cf 90       	pop	r12
     7c4:	08 95       	ret

000007c6 <NVM::nvm_wait()>:
_ZN3NVM8nvm_waitEv():
     7c6:	62 e0       	ldi	r22, 0x02	; 2
     7c8:	70 e1       	ldi	r23, 0x10	; 16
     7ca:	80 e0       	ldi	r24, 0x00	; 0
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	45 dd       	rcall	.-1398   	; 0x25a <UPDI::ld8(unsigned long)>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.3/cores/megaAVR/api/delay_busywait.h:31
     7d0:	83 70       	andi	r24, 0x03	; 3
     7d2:	29 f0       	breq	.+10     	; 0x7de <NVM::nvm_wait()+0x18>
delay_micros():
     7d4:	86 ea       	ldi	r24, 0xA6	; 166
     7d6:	8a 95       	dec	r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:302
  return UPDI_LASTL;
     7d8:	f1 f7       	brne	.-4      	; 0x7d6 <NVM::nvm_wait()+0x10>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:303
}
     7da:	00 c0       	rjmp	.+0      	; 0x7dc <NVM::nvm_wait()+0x16>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:328
  if (NVM::NVM_V2_CMD_NOCMD != nvmcmd) return NVM::nvm_ctrl(nvmcmd);
  return true;
}

/* NVMCTRL v2 */
bool NVM::nvm_ctrl_v2 (uint8_t nvmcmd) {
     7dc:	f4 cf       	rjmp	.-24     	; 0x7c6 <NVM::nvm_wait()>
_ZN3NVM8nvm_waitEv():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:329
  NVM::nvm_wait();
     7de:	8e b3       	in	r24, 0x1e	; 30
     7e0:	08 95       	ret

000007e2 <NVM::nvm_ctrl_v2(unsigned char)>:
_ZN3NVM11nvm_ctrl_v2Eh():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:330
  return nvm_ctrl_change(nvmcmd);
     7e2:	cf 93       	push	r28
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:331
}
     7e4:	c8 2f       	mov	r28, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:330
}

/* NVMCTRL v2 */
bool NVM::nvm_ctrl_v2 (uint8_t nvmcmd) {
  NVM::nvm_wait();
  return nvm_ctrl_change(nvmcmd);
     7e6:	ef df       	rcall	.-34     	; 0x7c6 <NVM::nvm_wait()>
     7e8:	8c 2f       	mov	r24, r28
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:490
  if (!NVM::nvm_ctrl(NVM::NVM_CMD_ERWP)) return false;
  return NVM::nvm_wait() == 0;
}

/* NVMCTRL v2 */
bool NVM::write_flash_v2 (uint32_t start_addr, size_t byte_count) {
     7ea:	cf 91       	pop	r28
     7ec:	9b cd       	rjmp	.-1226   	; 0x324 <nvm_ctrl_change(unsigned char)>

000007ee <NVM::write_flash_v2(unsigned long, unsigned int)>:
_ZN3NVM14write_flash_v2Emj():
     7ee:	cf 92       	push	r12
     7f0:	df 92       	push	r13
     7f2:	ef 92       	push	r14
     7f4:	ff 92       	push	r15
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:491
  byte_count >>= 1;
     7f6:	0f 93       	push	r16
     7f8:	1f 93       	push	r17
     7fa:	cf 93       	push	r28
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:492
  if (byte_count == 0 || byte_count > 256) return false;
     7fc:	df 93       	push	r29
     7fe:	ea 01       	movw	r28, r20
     800:	d6 95       	lsr	r29
     802:	c7 95       	ror	r28
     804:	9e 01       	movw	r18, r28
     806:	21 50       	subi	r18, 0x01	; 1
     808:	31 09       	sbc	r19, r1
     80a:	2f 3f       	cpi	r18, 0xFF	; 255
     80c:	31 05       	cpc	r19, r1
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:497

  /* チップ消去していない場合はセクター消去 */
  /* ただしページ境界先頭がアドレスされた場合に限る */
  if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_ERFM_bp)
  && ((uint16_t)start_addr & (NVM::flash_page_size - 1)) == 0) {
     80e:	11 f0       	breq	.+4      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
     810:	08 f0       	brcs	.+2      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:501
    if (!NVM::nvm_ctrl_v2(NVM::NVM_V2_CMD_FLPER)) return false;
    if (!UPDI::st8(start_addr, 0xFF)) return false;
  }
  if (!NVM::nvm_ctrl_v2(NVM::NVM_V2_CMD_FLWR)) return false;
     812:	58 c0       	rjmp	.+176    	; 0x8c4 <__DATA_REGION_LENGTH__+0xc4>
     814:	6b 01       	movw	r12, r22
     816:	7c 01       	movw	r14, r24
     818:	e2 9b       	sbis	0x1c, 2	; 28
     81a:	40 c0       	rjmp	.+128    	; 0x89c <__DATA_REGION_LENGTH__+0x9c>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:504

  /* setting register pointer and enable RSD mode */
  _CAPS32(set_ptr[2])->dword = start_addr;
     81c:	82 e0       	ldi	r24, 0x02	; 2
     81e:	e1 df       	rcall	.-62     	; 0x7e2 <NVM::nvm_ctrl_v2(unsigned char)>
     820:	88 23       	and	r24, r24
     822:	09 f4       	brne	.+2      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
     824:	4f c0       	rjmp	.+158    	; 0x8c4 <__DATA_REGION_LENGTH__+0xc4>
     826:	c0 92 32 38 	sts	0x3832, r12	; 0x803832 <NVM::set_ptr+0x2>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:505
  set_repeat_rsd[5] = byte_count - 1;
     82a:	d0 92 33 38 	sts	0x3833, r13	; 0x803833 <NVM::set_ptr+0x3>
     82e:	e0 92 34 38 	sts	0x3834, r14	; 0x803834 <NVM::set_ptr+0x4>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:506
  if (!UPDI::send_bytes(set_ptr, sizeof(set_ptr) - 1)) return false;
     832:	f0 92 35 38 	sts	0x3835, r15	; 0x803835 <NVM::set_ptr+0x5>
     836:	8c 2f       	mov	r24, r28
     838:	81 50       	subi	r24, 0x01	; 1
     83a:	80 93 28 38 	sts	0x3828, r24	; 0x803828 <NVM::set_repeat_rsd+0x5>
     83e:	65 e0       	ldi	r22, 0x05	; 5
     840:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:507
  if (UPDI::UPDI_ACK != UPDI::RECV()) return false;
     842:	80 e3       	ldi	r24, 0x30	; 48
     844:	98 e3       	ldi	r25, 0x38	; 56
     846:	86 dc       	rcall	.-1780   	; 0x154 <UPDI::send_bytes(unsigned char const*, unsigned int)>
     848:	88 23       	and	r24, r24
     84a:	09 f4       	brne	.+2      	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:508
  if (!UPDI::send_bytes(set_repeat_rsd, sizeof(set_repeat_rsd))) return false;
     84c:	3b c0       	rjmp	.+118    	; 0x8c4 <__DATA_REGION_LENGTH__+0xc4>
     84e:	5e dc       	rcall	.-1860   	; 0x10c <UPDI::RECV()>
     850:	80 34       	cpi	r24, 0x40	; 64
     852:	09 f0       	breq	.+2      	; 0x856 <__DATA_REGION_LENGTH__+0x56>
     854:	37 c0       	rjmp	.+110    	; 0x8c4 <__DATA_REGION_LENGTH__+0xc4>
     856:	68 e0       	ldi	r22, 0x08	; 8
     858:	70 e0       	ldi	r23, 0x00	; 0
     85a:	83 e2       	ldi	r24, 0x23	; 35
     85c:	98 e3       	ldi	r25, 0x38	; 56
     85e:	7a dc       	rcall	.-1804   	; 0x154 <UPDI::send_bytes(unsigned char const*, unsigned int)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:513

  /* page buffer stored */
  uint8_t* p = &JTAG2::packet.body[10];
  do {
    UPDI::SEND(*p++);
     860:	88 23       	and	r24, r24
     862:	81 f1       	breq	.+96     	; 0x8c4 <__DATA_REGION_LENGTH__+0xc4>
     864:	03 e6       	ldi	r16, 0x63	; 99
     866:	18 e3       	ldi	r17, 0x38	; 56
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:514
    UPDI::SEND(*p++);
     868:	f8 01       	movw	r30, r16
     86a:	82 89       	ldd	r24, Z+18	; 0x12
     86c:	5b dc       	rcall	.-1866   	; 0x124 <UPDI::SEND(unsigned char)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:515
  } while (--byte_count);
     86e:	f8 01       	movw	r30, r16
     870:	83 89       	ldd	r24, Z+19	; 0x13
     872:	58 dc       	rcall	.-1872   	; 0x124 <UPDI::SEND(unsigned char)>
     874:	21 97       	sbiw	r28, 0x01	; 1
     876:	0e 5f       	subi	r16, 0xFE	; 254
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:224
     878:	1f 4f       	sbci	r17, 0xFF	; 255
     87a:	20 97       	sbiw	r28, 0x00	; 0
     87c:	a9 f7       	brne	.-22     	; 0x868 <__DATA_REGION_LENGTH__+0x68>
set_cs_ctra():
     87e:	66 e0       	ldi	r22, 0x06	; 6
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:519
  // UPDI::guardtime();

  /* disable RSD mode */
  if (!UPDI::set_cs_ctra(UPDI::UPDI_SET_GTVAL_2)) return false;
     880:	82 e0       	ldi	r24, 0x02	; 2
     882:	7f dc       	rcall	.-1794   	; 0x182 <UPDI::set_cs_stat(unsigned char, unsigned char)>
_ZN3NVM14write_flash_v2Emj():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:521

  return NVM::nvm_ctrl_v2(NVM::NVM_V2_CMD_NOCMD);
     884:	88 23       	and	r24, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:522
}
     886:	f1 f0       	breq	.+60     	; 0x8c4 <__DATA_REGION_LENGTH__+0xc4>
     888:	80 e0       	ldi	r24, 0x00	; 0
     88a:	df 91       	pop	r29
     88c:	cf 91       	pop	r28
     88e:	1f 91       	pop	r17
     890:	0f 91       	pop	r16
     892:	ff 90       	pop	r15
     894:	ef 90       	pop	r14
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:521
  // UPDI::guardtime();

  /* disable RSD mode */
  if (!UPDI::set_cs_ctra(UPDI::UPDI_SET_GTVAL_2)) return false;

  return NVM::nvm_ctrl_v2(NVM::NVM_V2_CMD_NOCMD);
     896:	df 90       	pop	r13
     898:	cf 90       	pop	r12
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:497
  if (byte_count == 0 || byte_count > 256) return false;

  /* チップ消去していない場合はセクター消去 */
  /* ただしページ境界先頭がアドレスされた場合に限る */
  if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_ERFM_bp)
  && ((uint16_t)start_addr & (NVM::flash_page_size - 1)) == 0) {
     89a:	a3 cf       	rjmp	.-186    	; 0x7e2 <NVM::nvm_ctrl_v2(unsigned char)>
     89c:	80 91 55 38 	lds	r24, 0x3855	; 0x803855 <NVM::flash_page_size>
     8a0:	90 91 56 38 	lds	r25, 0x3856	; 0x803856 <NVM::flash_page_size+0x1>
     8a4:	01 97       	sbiw	r24, 0x01	; 1
     8a6:	86 23       	and	r24, r22
     8a8:	9d 21       	and	r25, r13
     8aa:	89 2b       	or	r24, r25
     8ac:	09 f0       	breq	.+2      	; 0x8b0 <__DATA_REGION_LENGTH__+0xb0>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:498
    if (!NVM::nvm_ctrl_v2(NVM::NVM_V2_CMD_FLPER)) return false;
     8ae:	b6 cf       	rjmp	.-148    	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     8b0:	88 e0       	ldi	r24, 0x08	; 8
     8b2:	97 df       	rcall	.-210    	; 0x7e2 <NVM::nvm_ctrl_v2(unsigned char)>
     8b4:	88 23       	and	r24, r24
     8b6:	31 f0       	breq	.+12     	; 0x8c4 <__DATA_REGION_LENGTH__+0xc4>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:499
    if (!UPDI::st8(start_addr, 0xFF)) return false;
     8b8:	4f ef       	ldi	r20, 0xFF	; 255
     8ba:	c7 01       	movw	r24, r14
     8bc:	b6 01       	movw	r22, r12
     8be:	6f dc       	rcall	.-1826   	; 0x19e <UPDI::st8(unsigned long, unsigned char)>
     8c0:	81 11       	cpse	r24, r1
     8c2:	ac cf       	rjmp	.-168    	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     8c4:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:522

  /* disable RSD mode */
  if (!UPDI::set_cs_ctra(UPDI::UPDI_SET_GTVAL_2)) return false;

  return NVM::nvm_ctrl_v2(NVM::NVM_V2_CMD_NOCMD);
}
     8c6:	df 91       	pop	r29
     8c8:	cf 91       	pop	r28
     8ca:	1f 91       	pop	r17
     8cc:	0f 91       	pop	r16
     8ce:	ff 90       	pop	r15
     8d0:	ef 90       	pop	r14
     8d2:	df 90       	pop	r13
     8d4:	cf 90       	pop	r12
     8d6:	08 95       	ret

000008d8 <UPDI::runtime(unsigned char)>:
_ZN4UPDI7runtimeEh():
     8d8:	bf 92       	push	r11
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:453

/*
 * UPDI制御プロセス
 */

bool UPDI::runtime (uint8_t updi_cmd) {
     8da:	cf 92       	push	r12
     8dc:	df 92       	push	r13
     8de:	ef 92       	push	r14
     8e0:	ff 92       	push	r15
     8e2:	0f 93       	push	r16
     8e4:	1f 93       	push	r17
     8e6:	cf 93       	push	r28
     8e8:	df 93       	push	r29
     8ea:	cd b7       	in	r28, 0x3d	; 61
     8ec:	de b7       	in	r29, 0x3e	; 62
     8ee:	26 97       	sbiw	r28, 0x06	; 6
     8f0:	cd bf       	out	0x3d, r28	; 61
     8f2:	de bf       	out	0x3e, r29	; 62
     8f4:	8e 83       	std	Y+6, r24	; 0x06
     8f6:	1d 82       	std	Y+5, r1	; 0x05
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:454
  volatile bool _result = false;
     8f8:	88 e3       	ldi	r24, 0x38	; 56
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:456
  uint16_t limit = 4000;
  if (setjmp(TIM::CONTEXT) == 0) {
     8fa:	98 e3       	ldi	r25, 0x38	; 56
     8fc:	c5 d7       	rcall	.+3978   	; 0x1888 <setjmp>
     8fe:	89 2b       	or	r24, r25
     900:	09 f0       	breq	.+2      	; 0x904 <UPDI::runtime(unsigned char)+0x2c>
     902:	05 c1       	rjmp	.+522    	; 0xb0e <UPDI::runtime(unsigned char)+0x236>
Timeout_Start():
     904:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
     906:	f8 94       	cli
Timeout_Start():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:127
/*
 * タイムアウト制御
 */

void TIM::Timeout_Start (uint16_t _ms) {
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     908:	10 92 8a 0a 	sts	0x0A8A, r1	; 0x800a8a <UPDI::nvmprog_key+0x7f716a>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:128
    TCB0_CNT = 0;
     90c:	10 92 8b 0a 	sts	0x0A8B, r1	; 0x800a8b <UPDI::nvmprog_key+0x7f716b>
     910:	28 ee       	ldi	r18, 0xE8	; 232
     912:	33 e0       	ldi	r19, 0x03	; 3
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:129
    TCB0_CCMP = _ms >> 2;
     914:	20 93 8c 0a 	sts	0x0A8C, r18	; 0x800a8c <UPDI::nvmprog_key+0x7f716c>
     918:	30 93 8d 0a 	sts	0x0A8D, r19	; 0x800a8d <UPDI::nvmprog_key+0x7f716d>
     91c:	81 e0       	ldi	r24, 0x01	; 1
     91e:	80 93 85 0a 	sts	0x0A85, r24	; 0x800a85 <UPDI::nvmprog_key+0x7f7165>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:130
    TCB0_INTCTRL = TCB_CAPT_bm;
     922:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <UPDI::nvmprog_key+0x7f7166>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:131
    TCB0_INTFLAGS = TCB_CAPT_bm;
     926:	8f e0       	ldi	r24, 0x0F	; 15
     928:	80 93 80 0a 	sts	0x0A80, r24	; 0x800a80 <UPDI::nvmprog_key+0x7f7160>
__iRestore():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:132
    TCB0_CTRLA = TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
     92c:	9f bf       	out	0x3f, r25	; 63
_ZN4UPDI7runtimeEh():
     92e:	8e 81       	ldd	r24, Y+6	; 0x06
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:458
    TIM::Timeout_Start(limit);
    switch (updi_cmd) {
     930:	83 30       	cpi	r24, 0x03	; 3
     932:	09 f4       	brne	.+2      	; 0x936 <UPDI::runtime(unsigned char)+0x5e>
     934:	97 c3       	rjmp	.+1838   	; 0x1064 <UPDI::runtime(unsigned char)+0x78c>
     936:	84 30       	cpi	r24, 0x04	; 4
     938:	09 f4       	brne	.+2      	; 0x93c <UPDI::runtime(unsigned char)+0x64>
     93a:	dc c3       	rjmp	.+1976   	; 0x10f4 <UPDI::runtime(unsigned char)+0x81c>
     93c:	82 30       	cpi	r24, 0x02	; 2
     93e:	09 f4       	brne	.+2      	; 0x942 <UPDI::runtime(unsigned char)+0x6a>
     940:	ae c0       	rjmp	.+348    	; 0xa9e <UPDI::runtime(unsigned char)+0x1c6>
read_memory():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:50
/*
 * メモリ読込中核
 */

bool NVM::read_memory (void) {
  uint8_t  mem_type   =         JTAG2::packet.body[1];
     942:	e3 e6       	ldi	r30, 0x63	; 99
     944:	f8 e3       	ldi	r31, 0x38	; 56
     946:	81 85       	ldd	r24, Z+9	; 0x09
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:51
  size_t   byte_count = _CAPS16(JTAG2::packet.body[2])->word;
     948:	02 85       	ldd	r16, Z+10	; 0x0a
     94a:	13 85       	ldd	r17, Z+11	; 0x0b
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:52
  uint32_t start_addr = _CAPS32(JTAG2::packet.body[6])->dword;
     94c:	46 85       	ldd	r20, Z+14	; 0x0e
     94e:	57 85       	ldd	r21, Z+15	; 0x0f
     950:	60 89       	ldd	r22, Z+16	; 0x10
     952:	71 89       	ldd	r23, Z+17	; 0x11
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:53
  JTAG2::packet.body[0] = JTAG2::RSP_MEMORY;
     954:	92 e8       	ldi	r25, 0x82	; 130
     956:	90 87       	std	Z+8, r25	; 0x08
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:54
  JTAG2::packet.size_word[0] = byte_count + 1;
     958:	98 01       	movw	r18, r16
     95a:	2f 5f       	subi	r18, 0xFF	; 255
     95c:	3f 4f       	sbci	r19, 0xFF	; 255
     95e:	23 83       	std	Z+3, r18	; 0x03
     960:	34 83       	std	Z+4, r19	; 0x04
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:58
  /* 奇数量なら絶対アドレス（データ長は常に1） */
  /* 偶数量なら間接アドレス指定 */
  /* Flash領域は常に偶数量 */
  if (byte_count >= 2) {
     962:	02 30       	cpi	r16, 0x02	; 2
     964:	11 05       	cpc	r17, r1
     966:	08 f4       	brcc	.+2      	; 0x96a <UPDI::runtime(unsigned char)+0x92>
     968:	46 c0       	rjmp	.+140    	; 0x9f6 <UPDI::runtime(unsigned char)+0x11e>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:59
    switch (mem_type) {
     96a:	80 3c       	cpi	r24, 0xC0	; 192
     96c:	09 f4       	brne	.+2      	; 0x970 <UPDI::runtime(unsigned char)+0x98>
     96e:	5c c0       	rjmp	.+184    	; 0xa28 <UPDI::runtime(unsigned char)+0x150>
     970:	48 f4       	brcc	.+18     	; 0x984 <UPDI::runtime(unsigned char)+0xac>
     972:	82 32       	cpi	r24, 0x22	; 34
     974:	09 f4       	brne	.+2      	; 0x978 <UPDI::runtime(unsigned char)+0xa0>
     976:	65 c0       	rjmp	.+202    	; 0xa42 <UPDI::runtime(unsigned char)+0x16a>
     978:	18 f0       	brcs	.+6      	; 0x980 <UPDI::runtime(unsigned char)+0xa8>
     97a:	82 5b       	subi	r24, 0xB2	; 178
     97c:	84 30       	cpi	r24, 0x04	; 4
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:316
bool UPDI::chip_erase (void) {
  /* Send HV Pulse */
  if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) HV_Pulse();

  /* send nvmprog_key */
  if (!UPDI::send_bytes(UPDI::nvmprog_key, sizeof(UPDI::nvmprog_key))) return false;
     97e:	d8 f1       	brcs	.+118    	; 0x9f6 <UPDI::runtime(unsigned char)+0x11e>
_ZN4UPDI7runtimeEh():
     980:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:59
     982:	33 c0       	rjmp	.+102    	; 0x9ea <UPDI::runtime(unsigned char)+0x112>
read_memory():
     984:	84 3c       	cpi	r24, 0xC4	; 196
     986:	09 f4       	brne	.+2      	; 0x98a <UPDI::runtime(unsigned char)+0xb2>
     988:	5c c0       	rjmp	.+184    	; 0xa42 <UPDI::runtime(unsigned char)+0x16a>
     98a:	88 f5       	brcc	.+98     	; 0x9ee <UPDI::runtime(unsigned char)+0x116>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:67
      case JTAG2::MTYPE_XMEGA_FLASH : {   // 0xC0
        start_addr -= NVM::nvm_flash_offset;
      }
      /* Flash 領域 */
      case JTAG2::MTYPE_BOOT_FLASH : {    // 0xC1
        start_addr += NVM::nvm_flash_offset;
     98c:	81 3c       	cpi	r24, 0xC1	; 193
     98e:	c1 f7       	brne	.-16     	; 0x980 <UPDI::runtime(unsigned char)+0xa8>
     990:	80 91 51 38 	lds	r24, 0x3851	; 0x803851 <NVM::nvm_flash_offset>
     994:	90 91 52 38 	lds	r25, 0x3852	; 0x803852 <NVM::nvm_flash_offset+0x1>
     998:	a0 91 53 38 	lds	r26, 0x3853	; 0x803853 <NVM::nvm_flash_offset+0x2>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:252
/*
 * Flash領域ワード読込
 */

bool NVM::read_flash (uint32_t start_addr, size_t byte_count) {
  byte_count >>= 1;
     99c:	b0 91 54 38 	lds	r27, 0x3854	; 0x803854 <NVM::nvm_flash_offset+0x3>
read_flash():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:253
  if (byte_count == 0 || byte_count > 256) return false;
     9a0:	16 95       	lsr	r17
     9a2:	07 95       	ror	r16
     9a4:	98 01       	movw	r18, r16
     9a6:	21 50       	subi	r18, 0x01	; 1
     9a8:	31 09       	sbc	r19, r1
     9aa:	2f 3f       	cpi	r18, 0xFF	; 255
     9ac:	31 05       	cpc	r19, r1
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:67
      case JTAG2::MTYPE_XMEGA_FLASH : {   // 0xC0
        start_addr -= NVM::nvm_flash_offset;
      }
      /* Flash 領域 */
      case JTAG2::MTYPE_BOOT_FLASH : {    // 0xC1
        start_addr += NVM::nvm_flash_offset;
     9ae:	09 f0       	breq	.+2      	; 0x9b2 <UPDI::runtime(unsigned char)+0xda>
     9b0:	38 f7       	brcc	.-50     	; 0x980 <UPDI::runtime(unsigned char)+0xa8>
read_memory():
     9b2:	48 0f       	add	r20, r24
     9b4:	59 1f       	adc	r21, r25
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:255

bool NVM::read_flash (uint32_t start_addr, size_t byte_count) {
  byte_count >>= 1;
  if (byte_count == 0 || byte_count > 256) return false;
  uint8_t* p = &JTAG2::packet.body[1];
  if (!UPDI::send_repeat_header(
     9b6:	6a 1f       	adc	r22, r26
     9b8:	7b 1f       	adc	r23, r27
read_flash():
     9ba:	98 01       	movw	r18, r16
     9bc:	81 e2       	ldi	r24, 0x21	; 33
     9be:	10 dc       	rcall	.-2016   	; 0x1e0 <UPDI::send_repeat_header(unsigned char, unsigned long, unsigned int)>
     9c0:	88 23       	and	r24, r24
     9c2:	f1 f2       	breq	.-68     	; 0x980 <UPDI::runtime(unsigned char)+0xa8>
     9c4:	73 e6       	ldi	r23, 0x63	; 99
     9c6:	e7 2e       	mov	r14, r23
     9c8:	78 e3       	ldi	r23, 0x38	; 56
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:261
    (UPDI::UPDI_LD | UPDI::UPDI_DATA2),
    start_addr,
    byte_count
  )) return false;
  do {
    *p++ = UPDI::RECV();
     9ca:	f7 2e       	mov	r15, r23
     9cc:	9f db       	rcall	.-2242   	; 0x10c <UPDI::RECV()>
     9ce:	f7 01       	movw	r30, r14
     9d0:	81 87       	std	Z+9, r24	; 0x09
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:262
    *p++ = UPDI::RECV();
     9d2:	9c db       	rcall	.-2248   	; 0x10c <UPDI::RECV()>
     9d4:	f7 01       	movw	r30, r14
     9d6:	82 87       	std	Z+10, r24	; 0x0a
     9d8:	01 50       	subi	r16, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:263
  } while (--byte_count);
     9da:	11 09       	sbc	r17, r1
     9dc:	f2 e0       	ldi	r31, 0x02	; 2
     9de:	ef 0e       	add	r14, r31
     9e0:	f1 1c       	adc	r15, r1
     9e2:	01 15       	cp	r16, r1
     9e4:	11 05       	cpc	r17, r1
     9e6:	91 f7       	brne	.-28     	; 0x9cc <UPDI::runtime(unsigned char)+0xf4>
read_userrow_dummy():
     9e8:	81 e0       	ldi	r24, 0x01	; 1
_ZN4UPDI7runtimeEh():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:290
bool NVM::read_userrow_dummy (size_t byte_count) {
  if (byte_count == 0 || byte_count > 256) return false;
  uint8_t* p = &JTAG2::packet.body[1];
  uint8_t* q = &JTAG2::packet.body[266];
  do { *p++ = *q++; } while (--byte_count);
  UPDI_CONTROL &= ~_BV(UPDI::UPDI_URWR_bp);
     9ea:	8d 83       	std	Y+5, r24	; 0x05
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:483
          _result = UPDI::chip_erase();
        }
        break;
      }
      case UPDI::UPDI_CMD_GO : {
        _result = UPDI::Target_Reset(true) && UPDI::Target_Reset(false);
     9ec:	90 c0       	rjmp	.+288    	; 0xb0e <UPDI::runtime(unsigned char)+0x236>
read_memory():
     9ee:	85 3c       	cpi	r24, 0xC5	; 197
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:59
  JTAG2::packet.size_word[0] = byte_count + 1;
  /* 奇数量なら絶対アドレス（データ長は常に1） */
  /* 偶数量なら間接アドレス指定 */
  /* Flash領域は常に偶数量 */
  if (byte_count >= 2) {
    switch (mem_type) {
     9f0:	a9 f1       	breq	.+106    	; 0xa5c <UPDI::runtime(unsigned char)+0x184>
     9f2:	86 3c       	cpi	r24, 0xC6	; 198
     9f4:	29 f6       	brne	.-118    	; 0x980 <UPDI::runtime(unsigned char)+0xa8>
read_data():
     9f6:	c8 01       	movw	r24, r16
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:272
/*
 * データ領域バイト読込
 */

bool NVM::read_data (uint32_t start_addr, size_t byte_count) {
  if (byte_count == 0 || byte_count > 256) return false;
     9f8:	01 97       	sbiw	r24, 0x01	; 1
     9fa:	8f 3f       	cpi	r24, 0xFF	; 255
     9fc:	91 05       	cpc	r25, r1
     9fe:	11 f0       	breq	.+4      	; 0xa04 <UPDI::runtime(unsigned char)+0x12c>
     a00:	08 f0       	brcs	.+2      	; 0xa04 <UPDI::runtime(unsigned char)+0x12c>
     a02:	be cf       	rjmp	.-132    	; 0x980 <UPDI::runtime(unsigned char)+0xa8>
     a04:	98 01       	movw	r18, r16
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:274
  uint8_t* p = &JTAG2::packet.body[1];
  if (!UPDI::send_repeat_header(
     a06:	80 e2       	ldi	r24, 0x20	; 32
     a08:	eb db       	rcall	.-2090   	; 0x1e0 <UPDI::send_repeat_header(unsigned char, unsigned long, unsigned int)>
     a0a:	88 23       	and	r24, r24
     a0c:	09 f4       	brne	.+2      	; 0xa10 <UPDI::runtime(unsigned char)+0x138>
     a0e:	b8 cf       	rjmp	.-144    	; 0x980 <UPDI::runtime(unsigned char)+0xa8>
     a10:	6c e6       	ldi	r22, 0x6C	; 108
     a12:	e6 2e       	mov	r14, r22
     a14:	68 e3       	ldi	r22, 0x38	; 56
     a16:	f6 2e       	mov	r15, r22
     a18:	79 db       	rcall	.-2318   	; 0x10c <UPDI::RECV()>
     a1a:	f7 01       	movw	r30, r14
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:277
    (UPDI::UPDI_LD | UPDI::UPDI_DATA1),
    start_addr, byte_count)) return false;
  do { *p++ = UPDI::RECV(); } while (--byte_count);
     a1c:	81 93       	st	Z+, r24
     a1e:	7f 01       	movw	r14, r30
     a20:	01 50       	subi	r16, 0x01	; 1
     a22:	11 09       	sbc	r17, r1
     a24:	c9 f7       	brne	.-14     	; 0xa18 <UPDI::runtime(unsigned char)+0x140>
     a26:	e0 cf       	rjmp	.-64     	; 0x9e8 <UPDI::runtime(unsigned char)+0x110>
read_memory():
     a28:	80 91 51 38 	lds	r24, 0x3851	; 0x803851 <NVM::nvm_flash_offset>
     a2c:	90 91 52 38 	lds	r25, 0x3852	; 0x803852 <NVM::nvm_flash_offset+0x1>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:63
  if (byte_count >= 2) {
    switch (mem_type) {
      /* Data 領域 */
      /* これは常に絶対アドレス */
      case JTAG2::MTYPE_XMEGA_FLASH : {   // 0xC0
        start_addr -= NVM::nvm_flash_offset;
     a30:	a0 91 53 38 	lds	r26, 0x3853	; 0x803853 <NVM::nvm_flash_offset+0x2>
     a34:	b0 91 54 38 	lds	r27, 0x3854	; 0x803854 <NVM::nvm_flash_offset+0x3>
     a38:	48 1b       	sub	r20, r24
     a3a:	59 0b       	sbc	r21, r25
     a3c:	6a 0b       	sbc	r22, r26
     a3e:	7b 0b       	sbc	r23, r27
     a40:	a7 cf       	rjmp	.-178    	; 0x990 <UPDI::runtime(unsigned char)+0xb8>
     a42:	80 91 5f 38 	lds	r24, 0x385F	; 0x80385f <NVM::nvm_eeprom_offset>
     a46:	90 91 60 38 	lds	r25, 0x3860	; 0x803860 <NVM::nvm_eeprom_offset+0x1>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:73
        return NVM::read_flash(start_addr, byte_count);
      }
      /* EEPROM 領域 */
      case JTAG2::MTYPE_EEPROM :          // 0x22
      case JTAG2::MTYPE_EEPROM_XMEGA : {  // 0xC4
        start_addr += NVM::nvm_eeprom_offset;
     a4a:	a0 91 61 38 	lds	r26, 0x3861	; 0x803861 <NVM::nvm_eeprom_offset+0x2>
     a4e:	b0 91 62 38 	lds	r27, 0x3862	; 0x803862 <NVM::nvm_eeprom_offset+0x3>
     a52:	48 0f       	add	r20, r24
     a54:	59 1f       	adc	r21, r25
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:83

        /* デバイス施錠されている場合の特殊書込直後 */
        if (bit_is_set(UPDI_CONTROL, UPDI::UPDI_URWR_bp))
          return NVM::read_userrow_dummy(byte_count);

        start_addr += NVM::nvm_user_sig_offset;
     a56:	6a 1f       	adc	r22, r26
     a58:	7b 1f       	adc	r23, r27
     a5a:	cd cf       	rjmp	.-102    	; 0x9f6 <UPDI::runtime(unsigned char)+0x11e>
     a5c:	e5 9b       	sbis	0x1c, 5	; 28
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:80
      }
      /* USERROW/USERSIG */
      case JTAG2::MTYPE_USERSIG : {       // 0xC5

        /* デバイス施錠されている場合の特殊書込直後 */
        if (bit_is_set(UPDI_CONTROL, UPDI::UPDI_URWR_bp))
     a5e:	16 c0       	rjmp	.+44     	; 0xa8c <UPDI::runtime(unsigned char)+0x1b4>
read_userrow_dummy():
     a60:	c8 01       	movw	r24, r16
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:286
/*
 * 施錠デバイスの USERROW ダミー応答
 */

bool NVM::read_userrow_dummy (size_t byte_count) {
  if (byte_count == 0 || byte_count > 256) return false;
     a62:	01 97       	sbiw	r24, 0x01	; 1
     a64:	8f 3f       	cpi	r24, 0xFF	; 255
     a66:	91 05       	cpc	r25, r1
     a68:	11 f0       	breq	.+4      	; 0xa6e <UPDI::runtime(unsigned char)+0x196>
     a6a:	08 f0       	brcs	.+2      	; 0xa6e <UPDI::runtime(unsigned char)+0x196>
     a6c:	89 cf       	rjmp	.-238    	; 0x980 <UPDI::runtime(unsigned char)+0xa8>
     a6e:	e3 e6       	ldi	r30, 0x63	; 99
     a70:	f8 e3       	ldi	r31, 0x38	; 56
     a72:	0d 59       	subi	r16, 0x9D	; 157
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:289
  uint8_t* p = &JTAG2::packet.body[1];
  uint8_t* q = &JTAG2::packet.body[266];
  do { *p++ = *q++; } while (--byte_count);
     a74:	17 4c       	sbci	r17, 0xC7	; 199
     a76:	df 01       	movw	r26, r30
     a78:	ae 5e       	subi	r26, 0xEE	; 238
     a7a:	be 4f       	sbci	r27, 0xFE	; 254
     a7c:	8c 91       	ld	r24, X
     a7e:	81 87       	std	Z+9, r24	; 0x09
     a80:	31 96       	adiw	r30, 0x01	; 1
     a82:	e0 17       	cp	r30, r16
     a84:	f1 07       	cpc	r31, r17
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:290
  UPDI_CONTROL &= ~_BV(UPDI::UPDI_URWR_bp);
     a86:	b9 f7       	brne	.-18     	; 0xa76 <UPDI::runtime(unsigned char)+0x19e>
     a88:	e5 98       	cbi	0x1c, 5	; 28
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:83

        /* デバイス施錠されている場合の特殊書込直後 */
        if (bit_is_set(UPDI_CONTROL, UPDI::UPDI_URWR_bp))
          return NVM::read_userrow_dummy(byte_count);

        start_addr += NVM::nvm_user_sig_offset;
     a8a:	ae cf       	rjmp	.-164    	; 0x9e8 <UPDI::runtime(unsigned char)+0x110>
read_memory():
     a8c:	80 91 5b 38 	lds	r24, 0x385B	; 0x80385b <NVM::nvm_user_sig_offset>
     a90:	90 91 5c 38 	lds	r25, 0x385C	; 0x80385c <NVM::nvm_user_sig_offset+0x1>
     a94:	a0 91 5d 38 	lds	r26, 0x385D	; 0x80385d <NVM::nvm_user_sig_offset+0x2>
     a98:	b0 91 5e 38 	lds	r27, 0x385E	; 0x80385e <NVM::nvm_user_sig_offset+0x3>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:464
      case UPDI::UPDI_CMD_READ_MEMORY : {
        _result = NVM::read_memory();
        break;
      }
      case UPDI::UPDI_CMD_WRITE_MEMORY : {
        if (bit_is_clear(UPDI_CONTROL, UPDI_PROG_bp)) {
     a9c:	da cf       	rjmp	.-76     	; 0xa52 <UPDI::runtime(unsigned char)+0x17a>
_ZN4UPDI7runtimeEh():
     a9e:	e1 99       	sbic	0x1c, 1	; 28
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:466
          /* USERROW だけは非PROG状態でも処理を通す */
          if (JTAG2::packet.body[1] != JTAG2::MTYPE_USERSIG) break;
     aa0:	30 c0       	rjmp	.+96     	; 0xb02 <UPDI::runtime(unsigned char)+0x22a>
     aa2:	80 91 6c 38 	lds	r24, 0x386C	; 0x80386c <JTAG2::packet+0x9>
     aa6:	85 3c       	cpi	r24, 0xC5	; 197
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:106
/*
 * メモリ書込中核
 */

bool NVM::write_memory (void) {
  uint8_t  mem_type   =         JTAG2::packet.body[1];
     aa8:	91 f5       	brne	.+100    	; 0xb0e <UPDI::runtime(unsigned char)+0x236>
write_memory():
     aaa:	e3 e6       	ldi	r30, 0x63	; 99
     aac:	f8 e3       	ldi	r31, 0x38	; 56
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:107
  size_t   byte_count = _CAPS16(JTAG2::packet.body[2])->word;
     aae:	81 85       	ldd	r24, Z+9	; 0x09
     ab0:	02 85       	ldd	r16, Z+10	; 0x0a
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:108
  uint32_t start_addr = _CAPS32(JTAG2::packet.body[6])->dword;
     ab2:	13 85       	ldd	r17, Z+11	; 0x0b
     ab4:	c6 84       	ldd	r12, Z+14	; 0x0e
     ab6:	d7 84       	ldd	r13, Z+15	; 0x0f
     ab8:	e0 88       	ldd	r14, Z+16	; 0x10
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:112
  /* 奇数量なら絶対アドレス（データ長は常に1） */
  /* 偶数量なら間接アドレス指定 */
  /* Flash領域は常に偶数量 */
  if (byte_count >= 2) {
     aba:	f1 88       	ldd	r15, Z+17	; 0x11
     abc:	02 30       	cpi	r16, 0x02	; 2
     abe:	11 05       	cpc	r17, r1
     ac0:	08 f0       	brcs	.+2      	; 0xac4 <UPDI::runtime(unsigned char)+0x1ec>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:170
      default : return false;
    }
  }
  else {
    /* ここは 1byte単位書込で通る */
    uint8_t data = JTAG2::packet.body[10];
     ac2:	38 c0       	rjmp	.+112    	; 0xb34 <UPDI::runtime(unsigned char)+0x25c>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:171
    switch (mem_type) {
     ac4:	b2 88       	ldd	r11, Z+18	; 0x12
     ac6:	82 3b       	cpi	r24, 0xB2	; 178
     ac8:	08 f4       	brcc	.+2      	; 0xacc <UPDI::runtime(unsigned char)+0x1f4>
     aca:	4b c0       	rjmp	.+150    	; 0xb62 <UPDI::runtime(unsigned char)+0x28a>
     acc:	84 3b       	cpi	r24, 0xB4	; 180
     ace:	08 f4       	brcc	.+2      	; 0xad2 <UPDI::runtime(unsigned char)+0x1fa>
     ad0:	a0 c1       	rjmp	.+832    	; 0xe12 <UPDI::runtime(unsigned char)+0x53a>
     ad2:	85 3c       	cpi	r24, 0xC5	; 197
     ad4:	09 f0       	breq	.+2      	; 0xad8 <UPDI::runtime(unsigned char)+0x200>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:190
        /* ここは terminal mode の場合のみ通過するはず */
        /* AVR_DA/DB/DD/EA is Flash */
        /* この系統は Flash として実装されている */

        /* NVMCTRL v3 */
        if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp)) {
     ad6:	45 c0       	rjmp	.+138    	; 0xb62 <UPDI::runtime(unsigned char)+0x28a>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:192
          /* アドレス先頭かつ0xFF書込ならページ消去 */
          if (((uint8_t)start_addr & 63) == 0 && data == 0xFF) {
     ad8:	ef 9b       	sbis	0x1d, 7	; 29
     ada:	1d c2       	rjmp	.+1082   	; 0xf16 <UPDI::runtime(unsigned char)+0x63e>
     adc:	8c 2d       	mov	r24, r12
     ade:	9c 2d       	mov	r25, r12
     ae0:	9f 73       	andi	r25, 0x3F	; 63
     ae2:	09 f0       	breq	.+2      	; 0xae6 <UPDI::runtime(unsigned char)+0x20e>
     ae4:	04 c2       	rjmp	.+1032   	; 0xeee <UPDI::runtime(unsigned char)+0x616>
     ae6:	ff ef       	ldi	r31, 0xFF	; 255
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:193
            NVM::nvm_wait_v3();
     ae8:	bf 12       	cpse	r11, r31
     aea:	01 c2       	rjmp	.+1026   	; 0xeee <UPDI::runtime(unsigned char)+0x616>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:194
            if (!UPDI::st8(start_addr, 0xFF)) return false;
     aec:	e2 dd       	rcall	.-1084   	; 0x6b2 <NVM::nvm_wait_v3()>
     aee:	4f ef       	ldi	r20, 0xFF	; 255
     af0:	c7 01       	movw	r24, r14
     af2:	b6 01       	movw	r22, r12
     af4:	54 db       	rcall	.-2392   	; 0x19e <UPDI::st8(unsigned long, unsigned char)>
     af6:	88 23       	and	r24, r24
     af8:	09 f4       	brne	.+2      	; 0xafc <UPDI::runtime(unsigned char)+0x224>
     afa:	75 c0       	rjmp	.+234    	; 0xbe6 <UPDI::runtime(unsigned char)+0x30e>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:448
  do {
    if (!UPDI::SEND(*p++)) return false;
    if (UPDI::UPDI_ACK != UPDI::RECV()) return false;
  } while (--byte_count);

  return NVM::nvm_ctrl_v3(NVM::NVM_V3_CMD_EEPERW);
     afc:	88 e0       	ldi	r24, 0x08	; 8
write_eeprom_v3():
     afe:	e7 dd       	rcall	.-1074   	; 0x6ce <NVM::nvm_ctrl_v3(unsigned char)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:201
  set_ptr[1] = UPDI::UPDI_LDCS | code;
  while (!UPDI::send_bytes(set_ptr, sizeof(set_ptr))) UPDI::BREAK();
  return UPDI::RECV();
}
inline bool UPDI::is_cs_stat (const uint8_t code, uint8_t check) {
  return check == (UPDI::get_cs_stat(code) & check);
     b00:	86 c0       	rjmp	.+268    	; 0xc0e <UPDI::runtime(unsigned char)+0x336>
is_cs_stat():
     b02:	8b e0       	ldi	r24, 0x0B	; 11
     b04:	9d db       	rcall	.-2246   	; 0x240 <UPDI::get_cs_stat(unsigned char)>
_ZN4UPDI7runtimeEh():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:469
        if (bit_is_clear(UPDI_CONTROL, UPDI_PROG_bp)) {
          /* USERROW だけは非PROG状態でも処理を通す */
          if (JTAG2::packet.body[1] != JTAG2::MTYPE_USERSIG) break;
        }
        else {
          if (UPDI::is_sys_stat(UPDI::UPDI_SYS_LOCKSTATUS)) break;
     b06:	80 fd       	sbrc	r24, 0
     b08:	02 c0       	rjmp	.+4      	; 0xb0e <UPDI::runtime(unsigned char)+0x236>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:470
          if (!(UPDI_LASTL & UPDI::UPDI_SYS_NVMPROG)) break;
     b0a:	f3 99       	sbic	0x1e, 3	; 30
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:488
        _result = UPDI::Target_Reset(true) && UPDI::Target_Reset(false);
        break;
      }
    }
  }
  TIM::Timeout_Stop();
     b0c:	ce cf       	rjmp	.-100    	; 0xaaa <UPDI::runtime(unsigned char)+0x1d2>
     b0e:	f1 db       	rcall	.-2078   	; 0x2f2 <TIM::Timeout_Stop()>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:489
  UPDI_USART.CTRLB = UPDI_USART_ON;
     b10:	88 ec       	ldi	r24, 0xC8	; 200
     b12:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <UPDI::nvmprog_key+0x7f6ee6>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:490
  wdt_reset();
     b16:	a8 95       	wdr
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:491
  return _result;
     b18:	8d 81       	ldd	r24, Y+5	; 0x05
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:492
}
     b1a:	26 96       	adiw	r28, 0x06	; 6
     b1c:	cd bf       	out	0x3d, r28	; 61
     b1e:	de bf       	out	0x3e, r29	; 62
     b20:	df 91       	pop	r29
     b22:	cf 91       	pop	r28
     b24:	1f 91       	pop	r17
     b26:	0f 91       	pop	r16
     b28:	ff 90       	pop	r15
     b2a:	ef 90       	pop	r14
     b2c:	df 90       	pop	r13
     b2e:	cf 90       	pop	r12
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:113
  uint32_t start_addr = _CAPS32(JTAG2::packet.body[6])->dword;
  /* 奇数量なら絶対アドレス（データ長は常に1） */
  /* 偶数量なら間接アドレス指定 */
  /* Flash領域は常に偶数量 */
  if (byte_count >= 2) {
    switch (mem_type) {
     b30:	bf 90       	pop	r11
     b32:	08 95       	ret
write_memory():
     b34:	82 3c       	cpi	r24, 0xC2	; 194
     b36:	08 f0       	brcs	.+2      	; 0xb3a <UPDI::runtime(unsigned char)+0x262>
     b38:	50 c0       	rjmp	.+160    	; 0xbda <UPDI::runtime(unsigned char)+0x302>
     b3a:	80 3c       	cpi	r24, 0xC0	; 192
     b3c:	08 f0       	brcs	.+2      	; 0xb40 <UPDI::runtime(unsigned char)+0x268>
     b3e:	55 c0       	rjmp	.+170    	; 0xbea <UPDI::runtime(unsigned char)+0x312>
     b40:	82 32       	cpi	r24, 0x22	; 34
     b42:	19 f0       	breq	.+6      	; 0xb4a <UPDI::runtime(unsigned char)+0x272>
     b44:	83 3b       	cpi	r24, 0xB3	; 179
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:129
      }
      /* EEPROM 領域 */
      case JTAG2::MTYPE_EEPROM :        // 0x22
      case JTAG2::MTYPE_EEPROM_XMEGA :  // 0xC4
      case JTAG2::MTYPE_LOCK_BITS : {   // 0xB3
        start_addr += NVM::nvm_eeprom_offset;
     b46:	09 f0       	breq	.+2      	; 0xb4a <UPDI::runtime(unsigned char)+0x272>
     b48:	4e c0       	rjmp	.+156    	; 0xbe6 <UPDI::runtime(unsigned char)+0x30e>
     b4a:	80 91 5f 38 	lds	r24, 0x385F	; 0x80385f <NVM::nvm_eeprom_offset>
     b4e:	90 91 60 38 	lds	r25, 0x3860	; 0x803860 <NVM::nvm_eeprom_offset+0x1>
     b52:	a0 91 61 38 	lds	r26, 0x3861	; 0x803861 <NVM::nvm_eeprom_offset+0x2>
     b56:	b0 91 62 38 	lds	r27, 0x3862	; 0x803862 <NVM::nvm_eeprom_offset+0x3>
     b5a:	c8 0e       	add	r12, r24
     b5c:	d9 1e       	adc	r13, r25
     b5e:	ea 1e       	adc	r14, r26
     b60:	fb 1e       	adc	r15, r27
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:240
        /* megaAVR/tinyAVR is EEPROM */
        /* この系統は EEPROM として実装されている */
      }
    }
  }
  if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp))
     b62:	c8 01       	movw	r24, r16
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:430
  return NVM::nvm_ctrl_v2(NVM::NVM_V2_CMD_NOCMD);
}

/* NVMCTRL v3 */
bool NVM::write_eeprom_v3 (uint32_t start_addr, size_t byte_count) {
  if (byte_count == 0 || byte_count > 256) return false;
     b64:	01 97       	sbiw	r24, 0x01	; 1
     b66:	ef 9b       	sbis	0x1d, 7	; 29
     b68:	fd c1       	rjmp	.+1018   	; 0xf64 <UPDI::runtime(unsigned char)+0x68c>
write_eeprom_v3():
     b6a:	8f 3f       	cpi	r24, 0xFF	; 255
     b6c:	91 05       	cpc	r25, r1
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:432

  if (!NVM::nvm_ctrl_v3(NVM::NVM_V3_CMD_NOCMD)) return false;
     b6e:	11 f0       	breq	.+4      	; 0xb74 <UPDI::runtime(unsigned char)+0x29c>
     b70:	08 f0       	brcs	.+2      	; 0xb74 <UPDI::runtime(unsigned char)+0x29c>
     b72:	39 c0       	rjmp	.+114    	; 0xbe6 <UPDI::runtime(unsigned char)+0x30e>
     b74:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:435

  /* setting register pointer */
  _CAPS32(set_ptr[2])->dword = start_addr;
     b76:	ab dd       	rcall	.-1194   	; 0x6ce <NVM::nvm_ctrl_v3(unsigned char)>
     b78:	88 23       	and	r24, r24
     b7a:	a9 f1       	breq	.+106    	; 0xbe6 <UPDI::runtime(unsigned char)+0x30e>
     b7c:	c0 92 32 38 	sts	0x3832, r12	; 0x803832 <NVM::set_ptr+0x2>
     b80:	d0 92 33 38 	sts	0x3833, r13	; 0x803833 <NVM::set_ptr+0x3>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:436
  set_repeat[2] = (uint8_t)byte_count - 1;
     b84:	e0 92 34 38 	sts	0x3834, r14	; 0x803834 <NVM::set_ptr+0x4>
     b88:	f0 92 35 38 	sts	0x3835, r15	; 0x803835 <NVM::set_ptr+0x5>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:437
  if (!UPDI::send_bytes(set_ptr, sizeof(set_ptr) - 1)) return false;
     b8c:	8f ef       	ldi	r24, 0xFF	; 255
     b8e:	80 0f       	add	r24, r16
     b90:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <NVM::set_repeat+0x2>
     b94:	65 e0       	ldi	r22, 0x05	; 5
     b96:	70 e0       	ldi	r23, 0x00	; 0
     b98:	80 e3       	ldi	r24, 0x30	; 48
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:438
  if (UPDI::UPDI_ACK != UPDI::RECV()) return false;
     b9a:	98 e3       	ldi	r25, 0x38	; 56
     b9c:	db da       	rcall	.-2634   	; 0x154 <UPDI::send_bytes(unsigned char const*, unsigned int)>
     b9e:	88 23       	and	r24, r24
     ba0:	11 f1       	breq	.+68     	; 0xbe6 <UPDI::runtime(unsigned char)+0x30e>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:439
  if (!UPDI::send_bytes(set_repeat, sizeof(set_repeat))) return false;
     ba2:	b4 da       	rcall	.-2712   	; 0x10c <UPDI::RECV()>
     ba4:	80 34       	cpi	r24, 0x40	; 64
     ba6:	f9 f4       	brne	.+62     	; 0xbe6 <UPDI::runtime(unsigned char)+0x30e>
     ba8:	65 e0       	ldi	r22, 0x05	; 5
     baa:	70 e0       	ldi	r23, 0x00	; 0
     bac:	8b e2       	ldi	r24, 0x2B	; 43
     bae:	98 e3       	ldi	r25, 0x38	; 56
     bb0:	d1 da       	rcall	.-2654   	; 0x154 <UPDI::send_bytes(unsigned char const*, unsigned int)>
     bb2:	88 23       	and	r24, r24
     bb4:	c1 f0       	breq	.+48     	; 0xbe6 <UPDI::runtime(unsigned char)+0x30e>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:444

  /* page buffer stored */
  uint8_t* p = &JTAG2::packet.body[10];
  do {
    if (!UPDI::SEND(*p++)) return false;
     bb6:	25 e7       	ldi	r18, 0x75	; 117
     bb8:	e2 2e       	mov	r14, r18
     bba:	28 e3       	ldi	r18, 0x38	; 56
     bbc:	f2 2e       	mov	r15, r18
     bbe:	f7 01       	movw	r30, r14
     bc0:	81 91       	ld	r24, Z+
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:445
    if (UPDI::UPDI_ACK != UPDI::RECV()) return false;
     bc2:	7f 01       	movw	r14, r30
     bc4:	af da       	rcall	.-2722   	; 0x124 <UPDI::SEND(unsigned char)>
     bc6:	88 23       	and	r24, r24
     bc8:	71 f0       	breq	.+28     	; 0xbe6 <UPDI::runtime(unsigned char)+0x30e>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:446
  } while (--byte_count);
     bca:	a0 da       	rcall	.-2752   	; 0x10c <UPDI::RECV()>
     bcc:	80 34       	cpi	r24, 0x40	; 64
     bce:	59 f4       	brne	.+22     	; 0xbe6 <UPDI::runtime(unsigned char)+0x30e>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:448

  return NVM::nvm_ctrl_v3(NVM::NVM_V3_CMD_EEPERW);
     bd0:	01 50       	subi	r16, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:113
  uint32_t start_addr = _CAPS32(JTAG2::packet.body[6])->dword;
  /* 奇数量なら絶対アドレス（データ長は常に1） */
  /* 偶数量なら間接アドレス指定 */
  /* Flash領域は常に偶数量 */
  if (byte_count >= 2) {
    switch (mem_type) {
     bd2:	11 09       	sbc	r17, r1
     bd4:	a1 f7       	brne	.-24     	; 0xbbe <UPDI::runtime(unsigned char)+0x2e6>
     bd6:	85 e1       	ldi	r24, 0x15	; 21
     bd8:	92 cf       	rjmp	.-220    	; 0xafe <UPDI::runtime(unsigned char)+0x226>
write_memory():
     bda:	84 3c       	cpi	r24, 0xC4	; 196
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:165
        }
        /* megaAVR/tinyAVR is EEPROM */
        /* この系統は EEPROM として実装されている */
        break;
      }
      default : return false;
     bdc:	09 f4       	brne	.+2      	; 0xbe0 <UPDI::runtime(unsigned char)+0x308>
     bde:	b5 cf       	rjmp	.-150    	; 0xb4a <UPDI::runtime(unsigned char)+0x272>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:118
    switch (mem_type) {
      /* Flash 領域 */
      /* 奇数量指定は Data領域絶対アドレス指定になる */
      case JTAG2::MTYPE_XMEGA_FLASH :   // 0xC0
      case JTAG2::MTYPE_BOOT_FLASH : {  // 0xC1
        start_addr += NVM::nvm_flash_offset;
     be0:	85 3c       	cpi	r24, 0xC5	; 197
     be2:	09 f4       	brne	.+2      	; 0xbe6 <UPDI::runtime(unsigned char)+0x30e>
     be4:	6a c0       	rjmp	.+212    	; 0xcba <UPDI::runtime(unsigned char)+0x3e2>
_ZN4UPDI7runtimeEh():
     be6:	10 e0       	ldi	r17, 0x00	; 0
     be8:	e5 c0       	rjmp	.+458    	; 0xdb4 <UPDI::runtime(unsigned char)+0x4dc>
write_memory():
     bea:	80 91 51 38 	lds	r24, 0x3851	; 0x803851 <NVM::nvm_flash_offset>
     bee:	90 91 52 38 	lds	r25, 0x3852	; 0x803852 <NVM::nvm_flash_offset+0x1>
     bf2:	a0 91 53 38 	lds	r26, 0x3853	; 0x803853 <NVM::nvm_flash_offset+0x2>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:150
          /* 書く前にページ消去 */
            NVM::nvm_wait_v3();
          if (!UPDI::st8(start_addr, 0xFF)) return false;
          if (!NVM::nvm_ctrl_v3(NVM::NVM_V2_CMD_FLPER)) return false;
          UPDI_CONTROL |= _BV(UPDI::UPDI_ERFM_bp);
          return NVM::write_flash_v3(start_addr, byte_count);
     bf6:	b0 91 54 38 	lds	r27, 0x3854	; 0x803854 <NVM::nvm_flash_offset+0x3>
     bfa:	c8 0e       	add	r12, r24
     bfc:	d9 1e       	adc	r13, r25
     bfe:	ea 1e       	adc	r14, r26
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:425
  do {
    if (!UPDI::SEND(*p++)) return false;
    if (UPDI::UPDI_ACK != UPDI::RECV()) return false;
  } while (--byte_count);

  return NVM::nvm_ctrl_v2(NVM::NVM_V2_CMD_NOCMD);
     c00:	fb 1e       	adc	r15, r27
     c02:	ef 9b       	sbis	0x1d, 7	; 29
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:121
      case JTAG2::MTYPE_XMEGA_FLASH :   // 0xC0
      case JTAG2::MTYPE_BOOT_FLASH : {  // 0xC1
        start_addr += NVM::nvm_flash_offset;
        if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp))
          return NVM::write_flash_v3(start_addr, byte_count);
        if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN2_bp))
     c04:	06 c0       	rjmp	.+12     	; 0xc12 <UPDI::runtime(unsigned char)+0x33a>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:159
        if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN2_bp)) {
          /* 書く前にページ消去 */
          if (!NVM::nvm_ctrl_v2(NVM::NVM_V2_CMD_FLPER)) return false;
          if (!UPDI::st8(start_addr, 0xFF)) return false;
          UPDI_CONTROL |= _BV(UPDI::UPDI_ERFM_bp);
          return NVM::write_flash_v2(start_addr, byte_count);
     c06:	a8 01       	movw	r20, r16
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:233
          else {
            JTAG2::packet.body[11] = 0xFF;
          }
          byte_count = 2;
          UPDI_CONTROL |= _BV(UPDI::UPDI_ERFM_bp);
          return NVM::write_flash_v2(start_addr, byte_count);
     c08:	c7 01       	movw	r24, r14
     c0a:	b6 01       	movw	r22, r12
     c0c:	66 dd       	rcall	.-1332   	; 0x6da <NVM::write_flash_v3(unsigned long, unsigned int)>
write_eeprom_v2():
     c0e:	18 2f       	mov	r17, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:457
 * Flash領域ワード書込
 */

/* NVMCTRL v0 */
bool NVM::write_flash (uint32_t start_addr, size_t byte_count) {
  byte_count >>= 1;
     c10:	d1 c0       	rjmp	.+418    	; 0xdb4 <UPDI::runtime(unsigned char)+0x4dc>
write_memory():
     c12:	ee 9b       	sbis	0x1d, 6	; 29
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:458
  if (byte_count == 0 || byte_count > 256) return false;
     c14:	05 c0       	rjmp	.+10     	; 0xc20 <UPDI::runtime(unsigned char)+0x348>
     c16:	a8 01       	movw	r20, r16
     c18:	c7 01       	movw	r24, r14
     c1a:	b6 01       	movw	r22, r12
     c1c:	e8 dd       	rcall	.-1072   	; 0x7ee <NVM::write_flash_v2(unsigned long, unsigned int)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:462

  /* この系統ではページ消去を書込と同時に行える */
  /* NVMCTRL page buffer clear */
  NVM::nvm_wait();
     c1e:	f7 cf       	rjmp	.-18     	; 0xc0e <UPDI::runtime(unsigned char)+0x336>
write_flash():
     c20:	16 95       	lsr	r17
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:463
  if (!NVM::nvm_ctrl(NVM::NVM_CMD_PBC)) return false;
     c22:	07 95       	ror	r16
     c24:	c8 01       	movw	r24, r16
     c26:	01 97       	sbiw	r24, 0x01	; 1
     c28:	8f 3f       	cpi	r24, 0xFF	; 255
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:464
  NVM::nvm_wait();
     c2a:	91 05       	cpc	r25, r1
     c2c:	09 f0       	breq	.+2      	; 0xc30 <UPDI::runtime(unsigned char)+0x358>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:467

  /* setting register pointer and enable RSD mode */
  _CAPS32(set_ptr[2])->dword = start_addr;
     c2e:	d8 f6       	brcc	.-74     	; 0xbe6 <UPDI::runtime(unsigned char)+0x30e>
     c30:	ca dd       	rcall	.-1132   	; 0x7c6 <NVM::nvm_wait()>
     c32:	84 e0       	ldi	r24, 0x04	; 4
     c34:	71 db       	rcall	.-2334   	; 0x318 <NVM::nvm_ctrl(unsigned char)>
     c36:	88 23       	and	r24, r24
     c38:	b1 f2       	breq	.-84     	; 0xbe6 <UPDI::runtime(unsigned char)+0x30e>
     c3a:	c5 dd       	rcall	.-1142   	; 0x7c6 <NVM::nvm_wait()>
     c3c:	c0 92 32 38 	sts	0x3832, r12	; 0x803832 <NVM::set_ptr+0x2>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:468
  set_repeat_rsd[5] = byte_count - 1;
     c40:	d0 92 33 38 	sts	0x3833, r13	; 0x803833 <NVM::set_ptr+0x3>
     c44:	e0 92 34 38 	sts	0x3834, r14	; 0x803834 <NVM::set_ptr+0x4>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:469
  if (!UPDI::send_bytes(set_ptr, sizeof(set_ptr) - 1)) return false;
     c48:	f0 92 35 38 	sts	0x3835, r15	; 0x803835 <NVM::set_ptr+0x5>
     c4c:	8f ef       	ldi	r24, 0xFF	; 255
     c4e:	80 0f       	add	r24, r16
     c50:	80 93 28 38 	sts	0x3828, r24	; 0x803828 <NVM::set_repeat_rsd+0x5>
     c54:	65 e0       	ldi	r22, 0x05	; 5
     c56:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:470
  if (UPDI::UPDI_ACK != UPDI::RECV()) return false;
     c58:	80 e3       	ldi	r24, 0x30	; 48
     c5a:	98 e3       	ldi	r25, 0x38	; 56
     c5c:	7b da       	rcall	.-2826   	; 0x154 <UPDI::send_bytes(unsigned char const*, unsigned int)>
     c5e:	88 23       	and	r24, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:471
  if (!UPDI::send_bytes(set_repeat_rsd, sizeof(set_repeat_rsd))) return false;
     c60:	09 f4       	brne	.+2      	; 0xc64 <UPDI::runtime(unsigned char)+0x38c>
     c62:	c1 cf       	rjmp	.-126    	; 0xbe6 <UPDI::runtime(unsigned char)+0x30e>
     c64:	53 da       	rcall	.-2906   	; 0x10c <UPDI::RECV()>
     c66:	80 34       	cpi	r24, 0x40	; 64
     c68:	09 f0       	breq	.+2      	; 0xc6c <UPDI::runtime(unsigned char)+0x394>
     c6a:	bd cf       	rjmp	.-134    	; 0xbe6 <UPDI::runtime(unsigned char)+0x30e>
     c6c:	68 e0       	ldi	r22, 0x08	; 8
     c6e:	70 e0       	ldi	r23, 0x00	; 0
     c70:	83 e2       	ldi	r24, 0x23	; 35
     c72:	98 e3       	ldi	r25, 0x38	; 56
     c74:	6f da       	rcall	.-2850   	; 0x154 <UPDI::send_bytes(unsigned char const*, unsigned int)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:476

  /* page buffer stored */
  uint8_t* p = &JTAG2::packet.body[10];
  do {
    UPDI::SEND(*p++);
     c76:	88 23       	and	r24, r24
     c78:	09 f4       	brne	.+2      	; 0xc7c <UPDI::runtime(unsigned char)+0x3a4>
     c7a:	b5 cf       	rjmp	.-150    	; 0xbe6 <UPDI::runtime(unsigned char)+0x30e>
     c7c:	43 e6       	ldi	r20, 0x63	; 99
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:477
    UPDI::SEND(*p++);
     c7e:	e4 2e       	mov	r14, r20
     c80:	48 e3       	ldi	r20, 0x38	; 56
     c82:	f4 2e       	mov	r15, r20
     c84:	f7 01       	movw	r30, r14
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:478
  } while (--byte_count);
     c86:	82 89       	ldd	r24, Z+18	; 0x12
     c88:	4d da       	rcall	.-2918   	; 0x124 <UPDI::SEND(unsigned char)>
     c8a:	f7 01       	movw	r30, r14
     c8c:	83 89       	ldd	r24, Z+19	; 0x13
     c8e:	4a da       	rcall	.-2924   	; 0x124 <UPDI::SEND(unsigned char)>
     c90:	01 50       	subi	r16, 0x01	; 1
     c92:	11 09       	sbc	r17, r1
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:224
  set_ptr[1] = UPDI::UPDI_STCS | code;
  set_ptr[2] = data;
  return UPDI::send_bytes(set_ptr, sizeof(set_ptr));
}
inline bool UPDI::set_cs_ctra (const uint8_t data) {
  return UPDI::set_cs_stat(UPDI::UPDI_CS_CTRLA, data);
     c94:	f2 e0       	ldi	r31, 0x02	; 2
     c96:	ef 0e       	add	r14, r31
     c98:	f1 1c       	adc	r15, r1
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:482
  // UPDI::guardtime();

  /* disable RSD mode */
  if (!UPDI::set_cs_ctra(UPDI::UPDI_SET_GTVAL_2)) return false;
     c9a:	01 15       	cp	r16, r1
     c9c:	11 05       	cpc	r17, r1
     c9e:	91 f7       	brne	.-28     	; 0xc84 <UPDI::runtime(unsigned char)+0x3ac>
set_cs_ctra():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:401
    if (!UPDI::SEND(*p++)) return false;
    if (UPDI::UPDI_ACK != UPDI::RECV()) return false;
  } while (--byte_count);

  /* NVMCTRL write page and complete */
  if (!NVM::nvm_ctrl(NVM::NVM_CMD_ERWP)) return false;
     ca0:	66 e0       	ldi	r22, 0x06	; 6
     ca2:	82 e0       	ldi	r24, 0x02	; 2
     ca4:	6e da       	rcall	.-2852   	; 0x182 <UPDI::set_cs_stat(unsigned char, unsigned char)>
write_flash():
     ca6:	88 23       	and	r24, r24
     ca8:	09 f4       	brne	.+2      	; 0xcac <UPDI::runtime(unsigned char)+0x3d4>
     caa:	9d cf       	rjmp	.-198    	; 0xbe6 <UPDI::runtime(unsigned char)+0x30e>
write_eeprom():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:402
  return NVM::nvm_wait() == 0;
     cac:	83 e0       	ldi	r24, 0x03	; 3
     cae:	34 db       	rcall	.-2456   	; 0x318 <NVM::nvm_ctrl(unsigned char)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:136
      }
      /* USERROW/USERSIG 領域 */
      case JTAG2::MTYPE_USERSIG : {     // 0xC5

        /* デバイス施錠されている場合 */
        if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_PROG_bp))
     cb0:	88 23       	and	r24, r24
     cb2:	09 f4       	brne	.+2      	; 0xcb6 <UPDI::runtime(unsigned char)+0x3de>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:270
/*
 * USERROW/USERSIG 特殊書込準備
 */
bool UPDI::enter_userrow (void) {
  /* send urowwrite_key */
  if (!UPDI::send_bytes(UPDI::urowwrite_key, sizeof(UPDI::urowwrite_key))) return false;
     cb4:	98 cf       	rjmp	.-208    	; 0xbe6 <UPDI::runtime(unsigned char)+0x30e>
     cb6:	87 dd       	rcall	.-1266   	; 0x7c6 <NVM::nvm_wait()>
     cb8:	15 c1       	rjmp	.+554    	; 0xee4 <UPDI::runtime(unsigned char)+0x60c>
write_memory():
     cba:	e1 99       	sbic	0x1c, 1	; 28
     cbc:	7d c0       	rjmp	.+250    	; 0xdb8 <UPDI::runtime(unsigned char)+0x4e0>
enter_userrow():
     cbe:	6a e0       	ldi	r22, 0x0A	; 10
     cc0:	70 e0       	ldi	r23, 0x00	; 0
     cc2:	8c e0       	ldi	r24, 0x0C	; 12
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:272
  /* restart target : change mode */
  if (!UPDI::updi_reset(true) || !UPDI::updi_reset(false)) return false;
     cc4:	99 e9       	ldi	r25, 0x99	; 153
     cc6:	46 da       	rcall	.-2932   	; 0x154 <UPDI::send_bytes(unsigned char const*, unsigned int)>
     cc8:	88 23       	and	r24, r24
     cca:	09 f4       	brne	.+2      	; 0xcce <UPDI::runtime(unsigned char)+0x3f6>
     ccc:	8c cf       	rjmp	.-232    	; 0xbe6 <UPDI::runtime(unsigned char)+0x30e>
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	61 da       	rcall	.-2878   	; 0x194 <UPDI::updi_reset(bool)>
     cd2:	88 23       	and	r24, r24
     cd4:	09 f4       	brne	.+2      	; 0xcd8 <UPDI::runtime(unsigned char)+0x400>
     cd6:	87 cf       	rjmp	.-242    	; 0xbe6 <UPDI::runtime(unsigned char)+0x30e>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.3/cores/megaAVR/api/delay_busywait.h:31
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	5c da       	rcall	.-2888   	; 0x194 <UPDI::updi_reset(bool)>
     cdc:	88 23       	and	r24, r24
     cde:	09 f4       	brne	.+2      	; 0xce2 <UPDI::runtime(unsigned char)+0x40a>
     ce0:	82 cf       	rjmp	.-252    	; 0xbe6 <UPDI::runtime(unsigned char)+0x30e>
delay_micros():
     ce2:	89 ef       	ldi	r24, 0xF9	; 249
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:201
  set_ptr[1] = UPDI::UPDI_LDCS | code;
  while (!UPDI::send_bytes(set_ptr, sizeof(set_ptr))) UPDI::BREAK();
  return UPDI::RECV();
}
inline bool UPDI::is_cs_stat (const uint8_t code, uint8_t check) {
  return check == (UPDI::get_cs_stat(code) & check);
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	01 97       	sbiw	r24, 0x01	; 1
     ce8:	f1 f7       	brne	.-4      	; 0xce6 <UPDI::runtime(unsigned char)+0x40e>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:273
bool UPDI::enter_userrow (void) {
  /* send urowwrite_key */
  if (!UPDI::send_bytes(UPDI::urowwrite_key, sizeof(UPDI::urowwrite_key))) return false;
  /* restart target : change mode */
  if (!UPDI::updi_reset(true) || !UPDI::updi_reset(false)) return false;
  do{ delay_micros(100); } while (!UPDI::is_sys_stat(UPDI::UPDI_SYS_UROWPROG));
     cea:	00 c0       	rjmp	.+0      	; 0xcec <UPDI::runtime(unsigned char)+0x414>
     cec:	00 00       	nop
is_cs_stat():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:572

bool NVM::write_userrow (size_t byte_count) {
  if (!UPDI::enter_userrow()) return false;

  /* setting register pointer */
  _CAPS32(set_ptr[2])->dword = NVM::nvm_data_offset;
     cee:	8b e0       	ldi	r24, 0x0B	; 11
     cf0:	a7 da       	rcall	.-2738   	; 0x240 <UPDI::get_cs_stat(unsigned char)>
enter_userrow():
     cf2:	82 ff       	sbrs	r24, 2
     cf4:	f6 cf       	rjmp	.-20     	; 0xce2 <UPDI::runtime(unsigned char)+0x40a>
write_userrow():
     cf6:	80 91 57 38 	lds	r24, 0x3857	; 0x803857 <NVM::nvm_data_offset>
     cfa:	90 91 58 38 	lds	r25, 0x3858	; 0x803858 <NVM::nvm_data_offset+0x1>
     cfe:	a0 91 59 38 	lds	r26, 0x3859	; 0x803859 <NVM::nvm_data_offset+0x2>
     d02:	b0 91 5a 38 	lds	r27, 0x385A	; 0x80385a <NVM::nvm_data_offset+0x3>
     d06:	80 93 32 38 	sts	0x3832, r24	; 0x803832 <NVM::set_ptr+0x2>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:573
  set_repeat[2] = (uint8_t)byte_count - 1;
     d0a:	90 93 33 38 	sts	0x3833, r25	; 0x803833 <NVM::set_ptr+0x3>
     d0e:	a0 93 34 38 	sts	0x3834, r26	; 0x803834 <NVM::set_ptr+0x4>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:574
  if (!UPDI::send_bytes(set_ptr, sizeof(set_ptr) - 1)) return false;
     d12:	b0 93 35 38 	sts	0x3835, r27	; 0x803835 <NVM::set_ptr+0x5>
     d16:	8f ef       	ldi	r24, 0xFF	; 255
     d18:	80 0f       	add	r24, r16
     d1a:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <NVM::set_repeat+0x2>
     d1e:	65 e0       	ldi	r22, 0x05	; 5
     d20:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:575
  if (UPDI::UPDI_ACK != UPDI::RECV()) return false;
     d22:	80 e3       	ldi	r24, 0x30	; 48
     d24:	98 e3       	ldi	r25, 0x38	; 56
     d26:	16 da       	rcall	.-3028   	; 0x154 <UPDI::send_bytes(unsigned char const*, unsigned int)>
     d28:	88 23       	and	r24, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:576
  if (!UPDI::send_bytes(set_repeat, sizeof(set_repeat))) return false;
     d2a:	09 f4       	brne	.+2      	; 0xd2e <UPDI::runtime(unsigned char)+0x456>
     d2c:	5c cf       	rjmp	.-328    	; 0xbe6 <UPDI::runtime(unsigned char)+0x30e>
     d2e:	ee d9       	rcall	.-3108   	; 0x10c <UPDI::RECV()>
     d30:	80 34       	cpi	r24, 0x40	; 64
     d32:	09 f0       	breq	.+2      	; 0xd36 <UPDI::runtime(unsigned char)+0x45e>
     d34:	58 cf       	rjmp	.-336    	; 0xbe6 <UPDI::runtime(unsigned char)+0x30e>
     d36:	65 e0       	ldi	r22, 0x05	; 5
     d38:	70 e0       	ldi	r23, 0x00	; 0
     d3a:	8b e2       	ldi	r24, 0x2B	; 43
     d3c:	98 e3       	ldi	r25, 0x38	; 56
     d3e:	0a da       	rcall	.-3052   	; 0x154 <UPDI::send_bytes(unsigned char const*, unsigned int)>
     d40:	88 23       	and	r24, r24
     d42:	09 f4       	brne	.+2      	; 0xd46 <UPDI::runtime(unsigned char)+0x46e>
     d44:	50 cf       	rjmp	.-352    	; 0xbe6 <UPDI::runtime(unsigned char)+0x30e>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:582

  /* page buffer stored */
  uint8_t* p = &JTAG2::packet.body[10];
  uint8_t* q = &JTAG2::packet.body[266];
  do {
    *q++ = *p;
     d46:	33 e6       	ldi	r19, 0x63	; 99
     d48:	e3 2e       	mov	r14, r19
     d4a:	38 e3       	ldi	r19, 0x38	; 56
     d4c:	f3 2e       	mov	r15, r19
     d4e:	0d 59       	subi	r16, 0x9D	; 157
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:583
    if (!UPDI::SEND(*p++)) return false;
     d50:	17 4c       	sbci	r17, 0xC7	; 199
     d52:	f7 01       	movw	r30, r14
     d54:	82 89       	ldd	r24, Z+18	; 0x12
     d56:	ee 5e       	subi	r30, 0xEE	; 238
     d58:	fe 4f       	sbci	r31, 0xFE	; 254
     d5a:	80 83       	st	Z, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:584
    if (UPDI::UPDI_ACK != UPDI::RECV()) return false;
     d5c:	f7 01       	movw	r30, r14
     d5e:	82 89       	ldd	r24, Z+18	; 0x12
     d60:	e1 d9       	rcall	.-3134   	; 0x124 <UPDI::SEND(unsigned char)>
     d62:	88 23       	and	r24, r24
     d64:	09 f4       	brne	.+2      	; 0xd68 <UPDI::runtime(unsigned char)+0x490>
     d66:	3f cf       	rjmp	.-386    	; 0xbe6 <UPDI::runtime(unsigned char)+0x30e>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:585
  } while (--byte_count);
     d68:	d1 d9       	rcall	.-3166   	; 0x10c <UPDI::RECV()>
     d6a:	80 34       	cpi	r24, 0x40	; 64
     d6c:	09 f0       	breq	.+2      	; 0xd70 <UPDI::runtime(unsigned char)+0x498>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:587

  UPDI::set_cs_stat(UPDI::UPDI_CS_ASI_SYS_CTRLA, UPDI::UPDI_SET_UROWDONE);
     d6e:	3b cf       	rjmp	.-394    	; 0xbe6 <UPDI::runtime(unsigned char)+0x30e>
     d70:	ff ef       	ldi	r31, 0xFF	; 255
     d72:	ef 1a       	sub	r14, r31
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.3/cores/megaAVR/api/delay_busywait.h:31
     d74:	ff 0a       	sbc	r15, r31
     d76:	e0 16       	cp	r14, r16
     d78:	f1 06       	cpc	r15, r17
     d7a:	59 f7       	brne	.-42     	; 0xd52 <UPDI::runtime(unsigned char)+0x47a>
     d7c:	62 e0       	ldi	r22, 0x02	; 2
     d7e:	8a e0       	ldi	r24, 0x0A	; 10
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:201
  set_ptr[1] = UPDI::UPDI_LDCS | code;
  while (!UPDI::send_bytes(set_ptr, sizeof(set_ptr))) UPDI::BREAK();
  return UPDI::RECV();
}
inline bool UPDI::is_cs_stat (const uint8_t code, uint8_t check) {
  return check == (UPDI::get_cs_stat(code) & check);
     d80:	00 da       	rcall	.-3072   	; 0x182 <UPDI::set_cs_stat(unsigned char, unsigned char)>
delay_micros():
     d82:	89 ef       	ldi	r24, 0xF9	; 249
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:588
  do{ delay_micros(100); } while (UPDI::is_sys_stat(UPDI::UPDI_SYS_UROWPROG));
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	01 97       	sbiw	r24, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:589
  UPDI::set_cs_stat(UPDI::UPDI_CS_ASI_KEY_STATUS, UPDI::UPDI_KEY_UROWWRITE);
     d88:	f1 f7       	brne	.-4      	; 0xd86 <UPDI::runtime(unsigned char)+0x4ae>
     d8a:	00 c0       	rjmp	.+0      	; 0xd8c <UPDI::runtime(unsigned char)+0x4b4>
     d8c:	00 00       	nop
is_cs_stat():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:590
  if (!UPDI::updi_reset(true) || !UPDI::updi_reset(false)) return false;
     d8e:	8b e0       	ldi	r24, 0x0B	; 11
     d90:	57 da       	rcall	.-2898   	; 0x240 <UPDI::get_cs_stat(unsigned char)>
write_userrow():
     d92:	82 fd       	sbrc	r24, 2
     d94:	f6 cf       	rjmp	.-20     	; 0xd82 <UPDI::runtime(unsigned char)+0x4aa>
     d96:	60 e2       	ldi	r22, 0x20	; 32
     d98:	87 e0       	ldi	r24, 0x07	; 7
     d9a:	f3 d9       	rcall	.-3098   	; 0x182 <UPDI::set_cs_stat(unsigned char, unsigned char)>
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	fa d9       	rcall	.-3084   	; 0x194 <UPDI::updi_reset(bool)>
     da0:	88 23       	and	r24, r24
     da2:	09 f4       	brne	.+2      	; 0xda6 <UPDI::runtime(unsigned char)+0x4ce>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:591
  UPDI_CONTROL |= _BV(UPDI::UPDI_URWR_bp);
     da4:	20 cf       	rjmp	.-448    	; 0xbe6 <UPDI::runtime(unsigned char)+0x30e>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:472
        }
        else {
          if (UPDI::is_sys_stat(UPDI::UPDI_SYS_LOCKSTATUS)) break;
          if (!(UPDI_LASTL & UPDI::UPDI_SYS_NVMPROG)) break;
        }
        _result = NVM::write_memory();
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	f5 d9       	rcall	.-3094   	; 0x194 <UPDI::updi_reset(bool)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:139

        /* デバイス施錠されている場合 */
        if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_PROG_bp))
          return NVM::write_userrow(byte_count);

        start_addr += NVM::nvm_user_sig_offset;
     daa:	18 2f       	mov	r17, r24
     dac:	88 23       	and	r24, r24
     dae:	09 f4       	brne	.+2      	; 0xdb2 <UPDI::runtime(unsigned char)+0x4da>
     db0:	1a cf       	rjmp	.-460    	; 0xbe6 <UPDI::runtime(unsigned char)+0x30e>
     db2:	e5 9a       	sbi	0x1c, 5	; 28
_ZN4UPDI7runtimeEh():
     db4:	1d 83       	std	Y+5, r17	; 0x05
     db6:	ab ce       	rjmp	.-682    	; 0xb0e <UPDI::runtime(unsigned char)+0x236>
write_memory():
     db8:	80 91 5b 38 	lds	r24, 0x385B	; 0x80385b <NVM::nvm_user_sig_offset>
     dbc:	90 91 5c 38 	lds	r25, 0x385C	; 0x80385c <NVM::nvm_user_sig_offset+0x1>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:144
        /* AVR_DA/DB/DD/EA is Flash */
        /* この系統は Flash として実装されている */

        /* NVMCTRL v3 */
        if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp)) {
     dc0:	a0 91 5d 38 	lds	r26, 0x385D	; 0x80385d <NVM::nvm_user_sig_offset+0x2>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:146
          /* 書く前にページ消去 */
            NVM::nvm_wait_v3();
     dc4:	b0 91 5e 38 	lds	r27, 0x385E	; 0x80385e <NVM::nvm_user_sig_offset+0x3>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:147
          if (!UPDI::st8(start_addr, 0xFF)) return false;
     dc8:	c8 0e       	add	r12, r24
     dca:	d9 1e       	adc	r13, r25
     dcc:	ea 1e       	adc	r14, r26
     dce:	fb 1e       	adc	r15, r27
     dd0:	ef 9b       	sbis	0x1d, 7	; 29
     dd2:	0f c0       	rjmp	.+30     	; 0xdf2 <UPDI::runtime(unsigned char)+0x51a>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:148
          if (!NVM::nvm_ctrl_v3(NVM::NVM_V2_CMD_FLPER)) return false;
     dd4:	6e dc       	rcall	.-1828   	; 0x6b2 <NVM::nvm_wait_v3()>
     dd6:	4f ef       	ldi	r20, 0xFF	; 255
     dd8:	c7 01       	movw	r24, r14
     dda:	b6 01       	movw	r22, r12
     ddc:	e0 d9       	rcall	.-3136   	; 0x19e <UPDI::st8(unsigned long, unsigned char)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:149
          UPDI_CONTROL |= _BV(UPDI::UPDI_ERFM_bp);
     dde:	88 23       	and	r24, r24
     de0:	09 f4       	brne	.+2      	; 0xde4 <UPDI::runtime(unsigned char)+0x50c>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:154
          return NVM::write_flash_v3(start_addr, byte_count);
        }

        /* NVMCTRL v2 */
        if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN2_bp)) {
     de2:	01 cf       	rjmp	.-510    	; 0xbe6 <UPDI::runtime(unsigned char)+0x30e>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:156
          /* 書く前にページ消去 */
          if (!NVM::nvm_ctrl_v2(NVM::NVM_V2_CMD_FLPER)) return false;
     de4:	88 e0       	ldi	r24, 0x08	; 8
     de6:	73 dc       	rcall	.-1818   	; 0x6ce <NVM::nvm_ctrl_v3(unsigned char)>
     de8:	88 23       	and	r24, r24
     dea:	09 f4       	brne	.+2      	; 0xdee <UPDI::runtime(unsigned char)+0x516>
     dec:	fc ce       	rjmp	.-520    	; 0xbe6 <UPDI::runtime(unsigned char)+0x30e>
     dee:	e2 9a       	sbi	0x1c, 2	; 28
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:157
          if (!UPDI::st8(start_addr, 0xFF)) return false;
     df0:	0a cf       	rjmp	.-492    	; 0xc06 <UPDI::runtime(unsigned char)+0x32e>
     df2:	ee 9b       	sbis	0x1d, 6	; 29
     df4:	b6 ce       	rjmp	.-660    	; 0xb62 <UPDI::runtime(unsigned char)+0x28a>
     df6:	88 e0       	ldi	r24, 0x08	; 8
     df8:	f4 dc       	rcall	.-1560   	; 0x7e2 <NVM::nvm_ctrl_v2(unsigned char)>
     dfa:	88 23       	and	r24, r24
     dfc:	09 f4       	brne	.+2      	; 0xe00 <UPDI::runtime(unsigned char)+0x528>
     dfe:	f3 ce       	rjmp	.-538    	; 0xbe6 <UPDI::runtime(unsigned char)+0x30e>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:158
          UPDI_CONTROL |= _BV(UPDI::UPDI_ERFM_bp);
     e00:	4f ef       	ldi	r20, 0xFF	; 255
     e02:	c7 01       	movw	r24, r14
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:176
    switch (mem_type) {
      /* FUSES/LOCKBITS 領域 */
      /* 常に奇数量絶対アドレス指定の特殊書込 */
      case JTAG2::MTYPE_LOCK_BITS :     // 0xB3
      case JTAG2::MTYPE_FUSE_BITS : {   // 0xB2
        if (UPDI::ld8(start_addr) == data && UPDI_LASTH == 0) return true;
     e04:	b6 01       	movw	r22, r12
     e06:	cb d9       	rcall	.-3178   	; 0x19e <UPDI::st8(unsigned long, unsigned char)>
     e08:	88 23       	and	r24, r24
     e0a:	09 f4       	brne	.+2      	; 0xe0e <UPDI::runtime(unsigned char)+0x536>
     e0c:	ec ce       	rjmp	.-552    	; 0xbe6 <UPDI::runtime(unsigned char)+0x30e>
     e0e:	e2 9a       	sbi	0x1c, 2	; 28
     e10:	02 cf       	rjmp	.-508    	; 0xc16 <UPDI::runtime(unsigned char)+0x33e>
     e12:	c7 01       	movw	r24, r14
     e14:	b6 01       	movw	r22, r12
     e16:	21 da       	rcall	.-3006   	; 0x25a <UPDI::ld8(unsigned long)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:177
        if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp))
     e18:	b8 12       	cpse	r11, r24
     e1a:	04 c0       	rjmp	.+8      	; 0xe24 <UPDI::runtime(unsigned char)+0x54c>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:366
  return _r;
}

/* NVMCTRL v3 */
bool NVM::write_fuse_v3 (uint16_t addr, uint8_t data) {
  if (!NVM::nvm_ctrl_v2(NVM::NVM_V2_CMD_NOCMD)) return false;
     e1c:	8f b3       	in	r24, 0x1f	; 31
_ZN4UPDI7runtimeEh():
     e1e:	11 e0       	ldi	r17, 0x01	; 1
write_memory():
     e20:	88 23       	and	r24, r24
     e22:	41 f2       	breq	.-112    	; 0xdb4 <UPDI::runtime(unsigned char)+0x4dc>
     e24:	ef 9b       	sbis	0x1d, 7	; 29
     e26:	18 c0       	rjmp	.+48     	; 0xe58 <UPDI::runtime(unsigned char)+0x580>
write_fuse_v3():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:367
  if (!UPDI::st8(addr, data)) return false;
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	db dc       	rcall	.-1610   	; 0x7e2 <NVM::nvm_ctrl_v2(unsigned char)>
     e2c:	88 23       	and	r24, r24
     e2e:	09 f4       	brne	.+2      	; 0xe32 <UPDI::runtime(unsigned char)+0x55a>
     e30:	da ce       	rjmp	.-588    	; 0xbe6 <UPDI::runtime(unsigned char)+0x30e>
     e32:	c7 01       	movw	r24, r14
     e34:	b6 01       	movw	r22, r12
     e36:	88 27       	eor	r24, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:368
  bool _r = (NVM::nvm_wait_v3() & 0x70) == 0;
     e38:	99 27       	eor	r25, r25
     e3a:	4b 2d       	mov	r20, r11
     e3c:	b0 d9       	rcall	.-3232   	; 0x19e <UPDI::st8(unsigned long, unsigned char)>
     e3e:	88 23       	and	r24, r24
     e40:	09 f4       	brne	.+2      	; 0xe44 <UPDI::runtime(unsigned char)+0x56c>
     e42:	d1 ce       	rjmp	.-606    	; 0xbe6 <UPDI::runtime(unsigned char)+0x30e>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:369
  if (!NVM::nvm_ctrl_v3(NVM::NVM_V3_CMD_EEPERW)) return false;
     e44:	36 dc       	rcall	.-1940   	; 0x6b2 <NVM::nvm_wait_v3()>
     e46:	80 77       	andi	r24, 0x70	; 112
     e48:	11 e0       	ldi	r17, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:360
/* NVMCTRL v2 */
bool NVM::write_fuse_v2 (uint16_t addr, uint8_t data) {
  if (!NVM::nvm_ctrl_v2(NVM::NVM_V2_CMD_EEERWR)) return false;
  if (!UPDI::st8(addr, data)) return false;
  bool _r = (NVM::nvm_wait() & 0x70) == 0;
  if (!NVM::nvm_ctrl_v2(NVM::NVM_V2_CMD_NOCMD)) return false;
     e4a:	09 f0       	breq	.+2      	; 0xe4e <UPDI::runtime(unsigned char)+0x576>
     e4c:	10 e0       	ldi	r17, 0x00	; 0
     e4e:	85 e1       	ldi	r24, 0x15	; 21
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:179
      case JTAG2::MTYPE_LOCK_BITS :     // 0xB3
      case JTAG2::MTYPE_FUSE_BITS : {   // 0xB2
        if (UPDI::ld8(start_addr) == data && UPDI_LASTH == 0) return true;
        if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp))
          return NVM::write_fuse_v3(start_addr, data);
        if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN2_bp))
     e50:	3e dc       	rcall	.-1924   	; 0x6ce <NVM::nvm_ctrl_v3(unsigned char)>
write_fuse_v2():
     e52:	81 11       	cpse	r24, r1
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:357
  return ((NVM::nvm_wait() & 7) == 0);
}

/* NVMCTRL v2 */
bool NVM::write_fuse_v2 (uint16_t addr, uint8_t data) {
  if (!NVM::nvm_ctrl_v2(NVM::NVM_V2_CMD_EEERWR)) return false;
     e54:	af cf       	rjmp	.-162    	; 0xdb4 <UPDI::runtime(unsigned char)+0x4dc>
     e56:	c7 ce       	rjmp	.-626    	; 0xbe6 <UPDI::runtime(unsigned char)+0x30e>
write_memory():
     e58:	ee 9b       	sbis	0x1d, 6	; 29
     e5a:	16 c0       	rjmp	.+44     	; 0xe88 <UPDI::runtime(unsigned char)+0x5b0>
write_fuse_v2():
     e5c:	83 e1       	ldi	r24, 0x13	; 19
     e5e:	c1 dc       	rcall	.-1662   	; 0x7e2 <NVM::nvm_ctrl_v2(unsigned char)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:358
  if (!UPDI::st8(addr, data)) return false;
     e60:	88 23       	and	r24, r24
     e62:	09 f4       	brne	.+2      	; 0xe66 <UPDI::runtime(unsigned char)+0x58e>
     e64:	c0 ce       	rjmp	.-640    	; 0xbe6 <UPDI::runtime(unsigned char)+0x30e>
     e66:	c7 01       	movw	r24, r14
     e68:	b6 01       	movw	r22, r12
     e6a:	88 27       	eor	r24, r24
     e6c:	99 27       	eor	r25, r25
     e6e:	4b 2d       	mov	r20, r11
     e70:	96 d9       	rcall	.-3284   	; 0x19e <UPDI::st8(unsigned long, unsigned char)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:359
  bool _r = (NVM::nvm_wait() & 0x70) == 0;
     e72:	88 23       	and	r24, r24
     e74:	09 f4       	brne	.+2      	; 0xe78 <UPDI::runtime(unsigned char)+0x5a0>
     e76:	b7 ce       	rjmp	.-658    	; 0xbe6 <UPDI::runtime(unsigned char)+0x30e>
     e78:	a6 dc       	rcall	.-1716   	; 0x7c6 <NVM::nvm_wait()>
     e7a:	80 77       	andi	r24, 0x70	; 112
     e7c:	11 e0       	ldi	r17, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:360
  if (!NVM::nvm_ctrl_v2(NVM::NVM_V2_CMD_NOCMD)) return false;
     e7e:	09 f0       	breq	.+2      	; 0xe82 <UPDI::runtime(unsigned char)+0x5aa>
     e80:	10 e0       	ldi	r17, 0x00	; 0
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	ae dc       	rcall	.-1700   	; 0x7e2 <NVM::nvm_ctrl_v2(unsigned char)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:346
 */

/* NVMCTRL v0 */
bool NVM::write_fuse (uint16_t addr, uint8_t data) {
  fuse_packet_t fuse_packet;
  fuse_packet.data = data;
     e86:	e5 cf       	rjmp	.-54     	; 0xe52 <UPDI::runtime(unsigned char)+0x57a>
write_fuse():
     e88:	4b 2d       	mov	r20, r11
     e8a:	50 e0       	ldi	r21, 0x00	; 0
     e8c:	49 83       	std	Y+1, r20	; 0x01
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:181
        if (UPDI::ld8(start_addr) == data && UPDI_LASTH == 0) return true;
        if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp))
          return NVM::write_fuse_v3(start_addr, data);
        if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN2_bp))
          return NVM::write_fuse_v2(start_addr, data);
        return NVM::write_fuse(start_addr, data);
     e8e:	5a 83       	std	Y+2, r21	; 0x02
write_memory():
     e90:	cb 82       	std	Y+3, r12	; 0x03
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:348
/* NVMCTRL v0 */
bool NVM::write_fuse (uint16_t addr, uint8_t data) {
  fuse_packet_t fuse_packet;
  fuse_packet.data = data;
  fuse_packet.addr = addr;
  NVM::nvm_wait();
     e92:	dc 82       	std	Y+4, r13	; 0x04
write_fuse():
     e94:	98 dc       	rcall	.-1744   	; 0x7c6 <NVM::nvm_wait()>
sts8():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:166
/*
 * 複バイト送信
 */

bool UPDI::sts8 (uint32_t addr, uint8_t *data, size_t len) {
  if (UPDI::send_repeat_header((UPDI::UPDI_ST | UPDI::UPDI_DATA1), addr, len)) {
     e96:	24 e0       	ldi	r18, 0x04	; 4
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	46 e0       	ldi	r20, 0x06	; 6
     e9c:	50 e1       	ldi	r21, 0x10	; 16
     e9e:	60 e0       	ldi	r22, 0x00	; 0
     ea0:	70 e0       	ldi	r23, 0x00	; 0
     ea2:	80 e6       	ldi	r24, 0x60	; 96
     ea4:	9d d9       	rcall	.-3270   	; 0x1e0 <UPDI::send_repeat_header(unsigned char, unsigned long, unsigned int)>
     ea6:	88 23       	and	r24, r24
     ea8:	09 f4       	brne	.+2      	; 0xeac <UPDI::runtime(unsigned char)+0x5d4>
     eaa:	9d ce       	rjmp	.-710    	; 0xbe6 <UPDI::runtime(unsigned char)+0x30e>
     eac:	8e 01       	movw	r16, r28
     eae:	0f 5f       	subi	r16, 0xFF	; 255
     eb0:	1f 4f       	sbci	r17, 0xFF	; 255
     eb2:	7e 01       	movw	r14, r28
     eb4:	95 e0       	ldi	r25, 0x05	; 5
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:168
    do {
      if (!UPDI::SEND(*data++)) break;
     eb6:	e9 0e       	add	r14, r25
     eb8:	f1 1c       	adc	r15, r1
     eba:	f8 01       	movw	r30, r16
     ebc:	81 91       	ld	r24, Z+
     ebe:	8f 01       	movw	r16, r30
     ec0:	31 d9       	rcall	.-3486   	; 0x124 <UPDI::SEND(unsigned char)>
     ec2:	88 23       	and	r24, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:169
      if (UPDI::UPDI_ACK != RECV()) break;
     ec4:	09 f4       	brne	.+2      	; 0xec8 <UPDI::runtime(unsigned char)+0x5f0>
     ec6:	8f ce       	rjmp	.-738    	; 0xbe6 <UPDI::runtime(unsigned char)+0x30e>
     ec8:	21 d9       	rcall	.-3518   	; 0x10c <UPDI::RECV()>
     eca:	80 34       	cpi	r24, 0x40	; 64
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:170
    } while (--len);
     ecc:	09 f0       	breq	.+2      	; 0xed0 <UPDI::runtime(unsigned char)+0x5f8>
     ece:	8b ce       	rjmp	.-746    	; 0xbe6 <UPDI::runtime(unsigned char)+0x30e>
     ed0:	0e 15       	cp	r16, r14
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:351
  if (!UPDI::sts8(NVM::NVMCTRL_REG_DATA,
    (uint8_t*)&fuse_packet, sizeof(fuse_packet))) return false;
  if (!NVM::nvm_ctrl(NVM::NVM_CMD_WFU)) return false;
     ed2:	1f 05       	cpc	r17, r15
     ed4:	91 f7       	brne	.-28     	; 0xeba <UPDI::runtime(unsigned char)+0x5e2>
write_fuse():
     ed6:	87 e0       	ldi	r24, 0x07	; 7
     ed8:	1f da       	rcall	.-3010   	; 0x318 <NVM::nvm_ctrl(unsigned char)>
     eda:	88 23       	and	r24, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:352
  return ((NVM::nvm_wait() & 7) == 0);
     edc:	09 f4       	brne	.+2      	; 0xee0 <UPDI::runtime(unsigned char)+0x608>
     ede:	83 ce       	rjmp	.-762    	; 0xbe6 <UPDI::runtime(unsigned char)+0x30e>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:402
    if (UPDI::UPDI_ACK != UPDI::RECV()) return false;
  } while (--byte_count);

  /* NVMCTRL write page and complete */
  if (!NVM::nvm_ctrl(NVM::NVM_CMD_ERWP)) return false;
  return NVM::nvm_wait() == 0;
     ee0:	72 dc       	rcall	.-1820   	; 0x7c6 <NVM::nvm_wait()>
     ee2:	87 70       	andi	r24, 0x07	; 7
write_eeprom():
     ee4:	11 e0       	ldi	r17, 0x01	; 1
     ee6:	88 23       	and	r24, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:200
            if (!NVM::nvm_ctrl_v3(NVM::NVM_V3_CMD_FLPER)) return false;
            return true;
          }
          /* Flash は偶数単位でしか書けないため偶数化する */
          /* 他方のバイトには0xFFを補完 */
          if ((uint8_t)start_addr & 1) {
     ee8:	09 f4       	brne	.+2      	; 0xeec <UPDI::runtime(unsigned char)+0x614>
     eea:	64 cf       	rjmp	.-312    	; 0xdb4 <UPDI::runtime(unsigned char)+0x4dc>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:201
            JTAG2::packet.body[11] = data;
     eec:	7c ce       	rjmp	.-776    	; 0xbe6 <UPDI::runtime(unsigned char)+0x30e>
write_memory():
     eee:	80 ff       	sbrs	r24, 0
     ef0:	0e c0       	rjmp	.+28     	; 0xf0e <UPDI::runtime(unsigned char)+0x636>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:202
            JTAG2::packet.body[10] = 0xFF;
     ef2:	e3 e6       	ldi	r30, 0x63	; 99
     ef4:	f8 e3       	ldi	r31, 0x38	; 56
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:203
            (uint8_t)start_addr--;
     ef6:	b3 8a       	std	Z+19, r11	; 0x13
     ef8:	8f ef       	ldi	r24, 0xFF	; 255
     efa:	82 8b       	std	Z+18, r24	; 0x12
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	c8 1a       	sub	r12, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:209
          }
          else {
            JTAG2::packet.body[11] = 0xFF;
          }
          byte_count = 2;
          UPDI_CONTROL |= _BV(UPDI::UPDI_ERFM_bp);
     f00:	d1 08       	sbc	r13, r1
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:210
          return NVM::write_flash_v3(start_addr, byte_count);
     f02:	e1 08       	sbc	r14, r1
     f04:	f1 08       	sbc	r15, r1
     f06:	e2 9a       	sbi	0x1c, 2	; 28
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:206
            JTAG2::packet.body[11] = data;
            JTAG2::packet.body[10] = 0xFF;
            (uint8_t)start_addr--;
          }
          else {
            JTAG2::packet.body[11] = 0xFF;
     f08:	42 e0       	ldi	r20, 0x02	; 2
     f0a:	50 e0       	ldi	r21, 0x00	; 0
     f0c:	7d ce       	rjmp	.-774    	; 0xc08 <UPDI::runtime(unsigned char)+0x330>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:214
          UPDI_CONTROL |= _BV(UPDI::UPDI_ERFM_bp);
          return NVM::write_flash_v3(start_addr, byte_count);
        }

        /* NVMCTRL v2 */
        if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN2_bp)) {
     f0e:	8f ef       	ldi	r24, 0xFF	; 255
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:216
          /* アドレス先頭かつ0xFF書込ならページ消去 */
          if (((uint8_t)start_addr & 63) == 0 && data == 0xFF) {
     f10:	80 93 76 38 	sts	0x3876, r24	; 0x803876 <JTAG2::packet+0x13>
     f14:	f8 cf       	rjmp	.-16     	; 0xf06 <UPDI::runtime(unsigned char)+0x62e>
     f16:	ee 9b       	sbis	0x1d, 6	; 29
     f18:	24 ce       	rjmp	.-952    	; 0xb62 <UPDI::runtime(unsigned char)+0x28a>
     f1a:	8c 2d       	mov	r24, r12
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:217
            if (!NVM::nvm_ctrl_v2(NVM::NVM_V2_CMD_FLPER)) return false;
     f1c:	9c 2d       	mov	r25, r12
     f1e:	9f 73       	andi	r25, 0x3F	; 63
     f20:	69 f4       	brne	.+26     	; 0xf3c <UPDI::runtime(unsigned char)+0x664>
     f22:	9f ef       	ldi	r25, 0xFF	; 255
     f24:	b9 12       	cpse	r11, r25
     f26:	0a c0       	rjmp	.+20     	; 0xf3c <UPDI::runtime(unsigned char)+0x664>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:218
            if (!UPDI::st8(start_addr, 0xFF)) return false;
     f28:	88 e0       	ldi	r24, 0x08	; 8
     f2a:	5b dc       	rcall	.-1866   	; 0x7e2 <NVM::nvm_ctrl_v2(unsigned char)>
     f2c:	88 23       	and	r24, r24
     f2e:	09 f4       	brne	.+2      	; 0xf32 <UPDI::runtime(unsigned char)+0x65a>
     f30:	5a ce       	rjmp	.-844    	; 0xbe6 <UPDI::runtime(unsigned char)+0x30e>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:223
            return true;
          }
          /* Flash は偶数単位でしか書けないため偶数化する */
          /* 他方のバイトには0xFFを補完 */
          if ((uint8_t)start_addr & 1) {
     f32:	4f ef       	ldi	r20, 0xFF	; 255
     f34:	c7 01       	movw	r24, r14
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:224
            JTAG2::packet.body[11] = data;
     f36:	b6 01       	movw	r22, r12
     f38:	32 d9       	rcall	.-3484   	; 0x19e <UPDI::st8(unsigned long, unsigned char)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:225
            JTAG2::packet.body[10] = 0xFF;
     f3a:	69 ce       	rjmp	.-814    	; 0xc0e <UPDI::runtime(unsigned char)+0x336>
     f3c:	80 ff       	sbrs	r24, 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:226
            (uint8_t)start_addr--;
     f3e:	0e c0       	rjmp	.+28     	; 0xf5c <UPDI::runtime(unsigned char)+0x684>
     f40:	e3 e6       	ldi	r30, 0x63	; 99
     f42:	f8 e3       	ldi	r31, 0x38	; 56
     f44:	b3 8a       	std	Z+19, r11	; 0x13
     f46:	8f ef       	ldi	r24, 0xFF	; 255
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:232
          }
          else {
            JTAG2::packet.body[11] = 0xFF;
          }
          byte_count = 2;
          UPDI_CONTROL |= _BV(UPDI::UPDI_ERFM_bp);
     f48:	82 8b       	std	Z+18, r24	; 0x12
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:233
          return NVM::write_flash_v2(start_addr, byte_count);
     f4a:	e1 e0       	ldi	r30, 0x01	; 1
     f4c:	ce 1a       	sub	r12, r30
     f4e:	d1 08       	sbc	r13, r1
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:229
            JTAG2::packet.body[11] = data;
            JTAG2::packet.body[10] = 0xFF;
            (uint8_t)start_addr--;
          }
          else {
            JTAG2::packet.body[11] = 0xFF;
     f50:	e1 08       	sbc	r14, r1
     f52:	f1 08       	sbc	r15, r1
     f54:	e2 9a       	sbi	0x1c, 2	; 28
     f56:	42 e0       	ldi	r20, 0x02	; 2
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:242
      }
    }
  }
  if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN3_bp))
    return NVM::write_eeprom_v3(start_addr, byte_count);
  if (bit_is_set(UPDI_NVMCTRL, UPDI::UPDI_GEN2_bp))
     f58:	50 e0       	ldi	r21, 0x00	; 0
     f5a:	5e ce       	rjmp	.-836    	; 0xc18 <UPDI::runtime(unsigned char)+0x340>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:407
  return NVM::nvm_wait() == 0;
}

/* NVMCTRL v2 */
bool NVM::write_eeprom_v2 (uint32_t start_addr, size_t byte_count) {
  if (byte_count == 0 || byte_count > 256) return false;
     f5c:	8f ef       	ldi	r24, 0xFF	; 255
     f5e:	80 93 76 38 	sts	0x3876, r24	; 0x803876 <JTAG2::packet+0x13>
     f62:	f8 cf       	rjmp	.-16     	; 0xf54 <UPDI::runtime(unsigned char)+0x67c>
     f64:	ee 9b       	sbis	0x1d, 6	; 29
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:409

  if (!NVM::nvm_ctrl_v2(NVM::NVM_V2_CMD_EEERWR)) return false;
     f66:	3f c0       	rjmp	.+126    	; 0xfe6 <UPDI::runtime(unsigned char)+0x70e>
write_eeprom_v2():
     f68:	8f 3f       	cpi	r24, 0xFF	; 255
     f6a:	91 05       	cpc	r25, r1
     f6c:	11 f0       	breq	.+4      	; 0xf72 <UPDI::runtime(unsigned char)+0x69a>
     f6e:	08 f0       	brcs	.+2      	; 0xf72 <UPDI::runtime(unsigned char)+0x69a>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:412

  /* setting register pointer */
  _CAPS32(set_ptr[2])->dword = start_addr;
     f70:	3a ce       	rjmp	.-908    	; 0xbe6 <UPDI::runtime(unsigned char)+0x30e>
     f72:	83 e1       	ldi	r24, 0x13	; 19
     f74:	36 dc       	rcall	.-1940   	; 0x7e2 <NVM::nvm_ctrl_v2(unsigned char)>
     f76:	88 23       	and	r24, r24
     f78:	09 f4       	brne	.+2      	; 0xf7c <UPDI::runtime(unsigned char)+0x6a4>
     f7a:	35 ce       	rjmp	.-918    	; 0xbe6 <UPDI::runtime(unsigned char)+0x30e>
     f7c:	c0 92 32 38 	sts	0x3832, r12	; 0x803832 <NVM::set_ptr+0x2>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:413
  set_repeat[2] = (uint8_t)byte_count - 1;
     f80:	d0 92 33 38 	sts	0x3833, r13	; 0x803833 <NVM::set_ptr+0x3>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:414
  if (!UPDI::send_bytes(set_ptr, sizeof(set_ptr) - 1)) return false;
     f84:	e0 92 34 38 	sts	0x3834, r14	; 0x803834 <NVM::set_ptr+0x4>
     f88:	f0 92 35 38 	sts	0x3835, r15	; 0x803835 <NVM::set_ptr+0x5>
     f8c:	8f ef       	ldi	r24, 0xFF	; 255
     f8e:	80 0f       	add	r24, r16
     f90:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <NVM::set_repeat+0x2>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:415
  if (UPDI::UPDI_ACK != UPDI::RECV()) return false;
     f94:	65 e0       	ldi	r22, 0x05	; 5
     f96:	70 e0       	ldi	r23, 0x00	; 0
     f98:	80 e3       	ldi	r24, 0x30	; 48
     f9a:	98 e3       	ldi	r25, 0x38	; 56
     f9c:	db d8       	rcall	.-3658   	; 0x154 <UPDI::send_bytes(unsigned char const*, unsigned int)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:416
  if (!UPDI::send_bytes(set_repeat, sizeof(set_repeat))) return false;
     f9e:	88 23       	and	r24, r24
     fa0:	09 f4       	brne	.+2      	; 0xfa4 <UPDI::runtime(unsigned char)+0x6cc>
     fa2:	21 ce       	rjmp	.-958    	; 0xbe6 <UPDI::runtime(unsigned char)+0x30e>
     fa4:	b3 d8       	rcall	.-3738   	; 0x10c <UPDI::RECV()>
     fa6:	80 34       	cpi	r24, 0x40	; 64
     fa8:	09 f0       	breq	.+2      	; 0xfac <UPDI::runtime(unsigned char)+0x6d4>
     faa:	1d ce       	rjmp	.-966    	; 0xbe6 <UPDI::runtime(unsigned char)+0x30e>
     fac:	65 e0       	ldi	r22, 0x05	; 5
     fae:	70 e0       	ldi	r23, 0x00	; 0
     fb0:	8b e2       	ldi	r24, 0x2B	; 43
     fb2:	98 e3       	ldi	r25, 0x38	; 56
     fb4:	cf d8       	rcall	.-3682   	; 0x154 <UPDI::send_bytes(unsigned char const*, unsigned int)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:421

  /* page buffer stored */
  uint8_t* p = &JTAG2::packet.body[10];
  do {
    if (!UPDI::SEND(*p++)) return false;
     fb6:	88 23       	and	r24, r24
     fb8:	09 f4       	brne	.+2      	; 0xfbc <UPDI::runtime(unsigned char)+0x6e4>
     fba:	15 ce       	rjmp	.-982    	; 0xbe6 <UPDI::runtime(unsigned char)+0x30e>
     fbc:	95 e7       	ldi	r25, 0x75	; 117
     fbe:	e9 2e       	mov	r14, r25
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:422
    if (UPDI::UPDI_ACK != UPDI::RECV()) return false;
     fc0:	98 e3       	ldi	r25, 0x38	; 56
     fc2:	f9 2e       	mov	r15, r25
     fc4:	f7 01       	movw	r30, r14
     fc6:	81 91       	ld	r24, Z+
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:423
  } while (--byte_count);
     fc8:	7f 01       	movw	r14, r30
     fca:	ac d8       	rcall	.-3752   	; 0x124 <UPDI::SEND(unsigned char)>
     fcc:	88 23       	and	r24, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:425

  return NVM::nvm_ctrl_v2(NVM::NVM_V2_CMD_NOCMD);
     fce:	09 f4       	brne	.+2      	; 0xfd2 <UPDI::runtime(unsigned char)+0x6fa>
     fd0:	0a ce       	rjmp	.-1004   	; 0xbe6 <UPDI::runtime(unsigned char)+0x30e>
     fd2:	9c d8       	rcall	.-3784   	; 0x10c <UPDI::RECV()>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:379
 * EEPROM領域バイト書込
 */

/* NVMCTRL v0 */
bool NVM::write_eeprom (uint32_t start_addr, size_t byte_count) {
  if (byte_count == 0 || byte_count > 256) return false;
     fd4:	80 34       	cpi	r24, 0x40	; 64
     fd6:	09 f0       	breq	.+2      	; 0xfda <UPDI::runtime(unsigned char)+0x702>
     fd8:	06 ce       	rjmp	.-1012   	; 0xbe6 <UPDI::runtime(unsigned char)+0x30e>
     fda:	01 50       	subi	r16, 0x01	; 1
     fdc:	11 09       	sbc	r17, r1
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:382

  /* NVMCTRL page buffer clear */
  NVM::nvm_wait();
     fde:	91 f7       	brne	.-28     	; 0xfc4 <UPDI::runtime(unsigned char)+0x6ec>
     fe0:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:383
  if (!NVM::nvm_ctrl(NVM::NVM_CMD_PBC)) return false;
     fe2:	ff db       	rcall	.-2050   	; 0x7e2 <NVM::nvm_ctrl_v2(unsigned char)>
     fe4:	14 ce       	rjmp	.-984    	; 0xc0e <UPDI::runtime(unsigned char)+0x336>
write_eeprom():
     fe6:	8f 3f       	cpi	r24, 0xFF	; 255
     fe8:	91 05       	cpc	r25, r1
     fea:	11 f0       	breq	.+4      	; 0xff0 <UPDI::runtime(unsigned char)+0x718>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:384
  NVM::nvm_wait();
     fec:	08 f0       	brcs	.+2      	; 0xff0 <UPDI::runtime(unsigned char)+0x718>
     fee:	fb cd       	rjmp	.-1034   	; 0xbe6 <UPDI::runtime(unsigned char)+0x30e>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:387

  /* setting register pointer */
  _CAPS32(set_ptr[2])->dword = start_addr;
     ff0:	ea db       	rcall	.-2092   	; 0x7c6 <NVM::nvm_wait()>
     ff2:	84 e0       	ldi	r24, 0x04	; 4
     ff4:	91 d9       	rcall	.-3294   	; 0x318 <NVM::nvm_ctrl(unsigned char)>
     ff6:	88 23       	and	r24, r24
     ff8:	09 f4       	brne	.+2      	; 0xffc <UPDI::runtime(unsigned char)+0x724>
     ffa:	f5 cd       	rjmp	.-1046   	; 0xbe6 <UPDI::runtime(unsigned char)+0x30e>
     ffc:	e4 db       	rcall	.-2104   	; 0x7c6 <NVM::nvm_wait()>
     ffe:	c0 92 32 38 	sts	0x3832, r12	; 0x803832 <NVM::set_ptr+0x2>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:388
  set_repeat[2] = (uint8_t)byte_count - 1;
    1002:	d0 92 33 38 	sts	0x3833, r13	; 0x803833 <NVM::set_ptr+0x3>
    1006:	e0 92 34 38 	sts	0x3834, r14	; 0x803834 <NVM::set_ptr+0x4>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:389
  if (!UPDI::send_bytes(set_ptr, sizeof(set_ptr) - 1)) return false;
    100a:	f0 92 35 38 	sts	0x3835, r15	; 0x803835 <NVM::set_ptr+0x5>
    100e:	8f ef       	ldi	r24, 0xFF	; 255
    1010:	80 0f       	add	r24, r16
    1012:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <NVM::set_repeat+0x2>
    1016:	65 e0       	ldi	r22, 0x05	; 5
    1018:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:390
  if (UPDI::UPDI_ACK != UPDI::RECV()) return false;
    101a:	80 e3       	ldi	r24, 0x30	; 48
    101c:	98 e3       	ldi	r25, 0x38	; 56
    101e:	9a d8       	rcall	.-3788   	; 0x154 <UPDI::send_bytes(unsigned char const*, unsigned int)>
    1020:	88 23       	and	r24, r24
    1022:	09 f4       	brne	.+2      	; 0x1026 <UPDI::runtime(unsigned char)+0x74e>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:391
  if (!UPDI::send_bytes(set_repeat, sizeof(set_repeat))) return false;
    1024:	e0 cd       	rjmp	.-1088   	; 0xbe6 <UPDI::runtime(unsigned char)+0x30e>
    1026:	72 d8       	rcall	.-3868   	; 0x10c <UPDI::RECV()>
    1028:	80 34       	cpi	r24, 0x40	; 64
    102a:	09 f0       	breq	.+2      	; 0x102e <UPDI::runtime(unsigned char)+0x756>
    102c:	dc cd       	rjmp	.-1096   	; 0xbe6 <UPDI::runtime(unsigned char)+0x30e>
    102e:	65 e0       	ldi	r22, 0x05	; 5
    1030:	70 e0       	ldi	r23, 0x00	; 0
    1032:	8b e2       	ldi	r24, 0x2B	; 43
    1034:	98 e3       	ldi	r25, 0x38	; 56
    1036:	8e d8       	rcall	.-3812   	; 0x154 <UPDI::send_bytes(unsigned char const*, unsigned int)>
    1038:	88 23       	and	r24, r24
    103a:	09 f4       	brne	.+2      	; 0x103e <UPDI::runtime(unsigned char)+0x766>
    103c:	d4 cd       	rjmp	.-1112   	; 0xbe6 <UPDI::runtime(unsigned char)+0x30e>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:396

  /* page buffer stored */
  uint8_t* p = &JTAG2::packet.body[10];
  do {
    if (!UPDI::SEND(*p++)) return false;
    103e:	85 e7       	ldi	r24, 0x75	; 117
    1040:	e8 2e       	mov	r14, r24
    1042:	88 e3       	ldi	r24, 0x38	; 56
    1044:	f8 2e       	mov	r15, r24
    1046:	f7 01       	movw	r30, r14
    1048:	81 91       	ld	r24, Z+
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:397
    if (UPDI::UPDI_ACK != UPDI::RECV()) return false;
    104a:	7f 01       	movw	r14, r30
    104c:	6b d8       	rcall	.-3882   	; 0x124 <UPDI::SEND(unsigned char)>
    104e:	88 23       	and	r24, r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/NVM.cpp:398
  } while (--byte_count);
    1050:	09 f4       	brne	.+2      	; 0x1054 <UPDI::runtime(unsigned char)+0x77c>
    1052:	c9 cd       	rjmp	.-1134   	; 0xbe6 <UPDI::runtime(unsigned char)+0x30e>
    1054:	5b d8       	rcall	.-3914   	; 0x10c <UPDI::RECV()>
    1056:	80 34       	cpi	r24, 0x40	; 64
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:476
        }
        _result = NVM::write_memory();
        break;
      }
      case UPDI::UPDI_CMD_ERASE : {
        if (JTAG2::packet.body[1] == JTAG2::XMEGA_ERASE_CHIP
    1058:	09 f0       	breq	.+2      	; 0x105c <UPDI::runtime(unsigned char)+0x784>
    105a:	c5 cd       	rjmp	.-1142   	; 0xbe6 <UPDI::runtime(unsigned char)+0x30e>
    105c:	01 50       	subi	r16, 0x01	; 1
    105e:	11 09       	sbc	r17, r1
    1060:	91 f7       	brne	.-28     	; 0x1046 <UPDI::runtime(unsigned char)+0x76e>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:477
          && _CAPS32(JTAG2::packet.body[2])->dword == 0) {
    1062:	24 ce       	rjmp	.-952    	; 0xcac <UPDI::runtime(unsigned char)+0x3d4>
_ZN4UPDI7runtimeEh():
    1064:	e3 e6       	ldi	r30, 0x63	; 99
    1066:	f8 e3       	ldi	r31, 0x38	; 56
    1068:	81 85       	ldd	r24, Z+9	; 0x09
    106a:	81 11       	cpse	r24, r1
    106c:	50 cd       	rjmp	.-1376   	; 0xb0e <UPDI::runtime(unsigned char)+0x236>
    106e:	82 85       	ldd	r24, Z+10	; 0x0a
    1070:	93 85       	ldd	r25, Z+11	; 0x0b
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:313
 * HV制御はここを通る時のみ行われる
 */

bool UPDI::chip_erase (void) {
  /* Send HV Pulse */
  if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) HV_Pulse();
    1072:	a4 85       	ldd	r26, Z+12	; 0x0c
    1074:	b5 85       	ldd	r27, Z+13	; 0x0d
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:316

  /* send nvmprog_key */
  if (!UPDI::send_bytes(UPDI::nvmprog_key, sizeof(UPDI::nvmprog_key))) return false;
    1076:	89 2b       	or	r24, r25
    1078:	8a 2b       	or	r24, r26
    107a:	8b 2b       	or	r24, r27
    107c:	09 f0       	breq	.+2      	; 0x1080 <UPDI::runtime(unsigned char)+0x7a8>
    107e:	47 cd       	rjmp	.-1394   	; 0xb0e <UPDI::runtime(unsigned char)+0x236>
chip_erase():
    1080:	e0 9b       	sbis	0x1c, 0	; 28
    1082:	30 c0       	rjmp	.+96     	; 0x10e4 <UPDI::runtime(unsigned char)+0x80c>
    1084:	6a e0       	ldi	r22, 0x0A	; 10
    1086:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:319

  /* send erase_key */
  if (!UPDI::send_bytes(UPDI::erase_key, sizeof(UPDI::erase_key))) return false;
    1088:	80 e2       	ldi	r24, 0x20	; 32
    108a:	99 e9       	ldi	r25, 0x99	; 153
    108c:	63 d8       	rcall	.-3898   	; 0x154 <UPDI::send_bytes(unsigned char const*, unsigned int)>
    108e:	88 23       	and	r24, r24
    1090:	09 f4       	brne	.+2      	; 0x1094 <UPDI::runtime(unsigned char)+0x7bc>
    1092:	76 cc       	rjmp	.-1812   	; 0x980 <UPDI::runtime(unsigned char)+0xa8>
    1094:	6a e0       	ldi	r22, 0x0A	; 10
    1096:	70 e0       	ldi	r23, 0x00	; 0
    1098:	86 e1       	ldi	r24, 0x16	; 22
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:322

  /* restart target : change mode */
  if (!UPDI::updi_reset(true) || !UPDI::updi_reset(false)) return false;
    109a:	99 e9       	ldi	r25, 0x99	; 153
    109c:	5b d8       	rcall	.-3914   	; 0x154 <UPDI::send_bytes(unsigned char const*, unsigned int)>
    109e:	88 23       	and	r24, r24
    10a0:	09 f4       	brne	.+2      	; 0x10a4 <UPDI::runtime(unsigned char)+0x7cc>
    10a2:	6e cc       	rjmp	.-1828   	; 0x980 <UPDI::runtime(unsigned char)+0xa8>
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	76 d8       	rcall	.-3860   	; 0x194 <UPDI::updi_reset(bool)>
    10a8:	88 23       	and	r24, r24
    10aa:	09 f4       	brne	.+2      	; 0x10ae <UPDI::runtime(unsigned char)+0x7d6>
    10ac:	69 cc       	rjmp	.-1838   	; 0x980 <UPDI::runtime(unsigned char)+0xa8>
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	71 d8       	rcall	.-3870   	; 0x194 <UPDI::updi_reset(bool)>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.3/cores/megaAVR/api/delay_busywait.h:40
  }
}

void delay_millis (uint32_t _ms) {
  if (F_CPU >= 1000000L) {
    __builtin_avr_delay_cycles((F_CPU / 1000L) * _ms);
    10b2:	88 23       	and	r24, r24
    10b4:	09 f4       	brne	.+2      	; 0x10b8 <UPDI::runtime(unsigned char)+0x7e0>
    10b6:	64 cc       	rjmp	.-1848   	; 0x980 <UPDI::runtime(unsigned char)+0xa8>
delay_millis():
    10b8:	87 ea       	ldi	r24, 0xA7	; 167
    10ba:	91 e6       	ldi	r25, 0x61	; 97
    10bc:	01 97       	sbiw	r24, 0x01	; 1
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.3/cores/megaAVR/api/delay_busywait.h:31
static __inline__ __attribute__((__always_inline__)) void delay_micros (uint32_t _us);
static __inline__ __attribute__((__always_inline__)) void delay_millis (uint32_t _ms);

void delay_micros (uint32_t _us) {
  if (F_CPU >= 1000000L) {
    __builtin_avr_delay_cycles((F_CPU / 1000000L) * _us);
    10be:	f1 f7       	brne	.-4      	; 0x10bc <UPDI::runtime(unsigned char)+0x7e4>
    10c0:	00 c0       	rjmp	.+0      	; 0x10c2 <UPDI::runtime(unsigned char)+0x7ea>
    10c2:	00 00       	nop
delay_micros():
    10c4:	e9 ef       	ldi	r30, 0xF9	; 249
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	31 97       	sbiw	r30, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:201
  set_ptr[1] = UPDI::UPDI_LDCS | code;
  while (!UPDI::send_bytes(set_ptr, sizeof(set_ptr))) UPDI::BREAK();
  return UPDI::RECV();
}
inline bool UPDI::is_cs_stat (const uint8_t code, uint8_t check) {
  return check == (UPDI::get_cs_stat(code) & check);
    10ca:	f1 f7       	brne	.-4      	; 0x10c8 <UPDI::runtime(unsigned char)+0x7f0>
    10cc:	00 c0       	rjmp	.+0      	; 0x10ce <UPDI::runtime(unsigned char)+0x7f6>
    10ce:	00 00       	nop
is_cs_stat():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:327
  if (!UPDI::updi_reset(true) || !UPDI::updi_reset(false)) return false;

  /* wait enable : chip erase mode success */
  delay_millis(10);

  do{ delay_micros(100); } while (UPDI::is_sys_stat(UPDI::UPDI_SYS_LOCKSTATUS));
    10d0:	8b e0       	ldi	r24, 0x0B	; 11
    10d2:	b6 d8       	rcall	.-3732   	; 0x240 <UPDI::get_cs_stat(unsigned char)>
chip_erase():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:328
  UPDI_CONTROL |= _BV(UPDI::UPDI_ERFM_bp);
    10d4:	80 fd       	sbrc	r24, 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:330

  if (bit_is_set(UPDI_CONTROL, UPDI::UPDI_INFO_bp)) {
    10d6:	f6 cf       	rjmp	.-20     	; 0x10c4 <UPDI::runtime(unsigned char)+0x7ec>
    10d8:	e2 9a       	sbi	0x1c, 2	; 28
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:331
    UPDI_CONTROL &= ~_BV(UPDI::UPDI_PROG_bp);
    10da:	e0 9b       	sbis	0x1c, 0	; 28
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:334
    return UPDI::enter_prog();
  }
  return UPDI::enter_updi(true) && UPDI::enter_prog();
    10dc:	05 c0       	rjmp	.+10     	; 0x10e8 <UPDI::runtime(unsigned char)+0x810>
    10de:	e1 98       	cbi	0x1c, 1	; 28
    10e0:	bb d9       	rcall	.-3210   	; 0x458 <UPDI::enter_prog()>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:313
 * HV制御はここを通る時のみ行われる
 */

bool UPDI::chip_erase (void) {
  /* Send HV Pulse */
  if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) HV_Pulse();
    10e2:	83 cc       	rjmp	.-1786   	; 0x9ea <UPDI::runtime(unsigned char)+0x112>
    10e4:	f0 d9       	rcall	.-3104   	; 0x4c6 <HV_Pulse()>
    10e6:	ce cf       	rjmp	.-100    	; 0x1084 <UPDI::runtime(unsigned char)+0x7ac>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:334

  if (bit_is_set(UPDI_CONTROL, UPDI::UPDI_INFO_bp)) {
    UPDI_CONTROL &= ~_BV(UPDI::UPDI_PROG_bp);
    return UPDI::enter_prog();
  }
  return UPDI::enter_updi(true) && UPDI::enter_prog();
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	24 da       	rcall	.-3000   	; 0x534 <UPDI::enter_updi(bool)>
    10ec:	88 23       	and	r24, r24
    10ee:	09 f4       	brne	.+2      	; 0x10f2 <UPDI::runtime(unsigned char)+0x81a>
    10f0:	47 cc       	rjmp	.-1906   	; 0x980 <UPDI::runtime(unsigned char)+0xa8>
    10f2:	f6 cf       	rjmp	.-20     	; 0x10e0 <UPDI::runtime(unsigned char)+0x808>
_ZN4UPDI7runtimeEh():
    10f4:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:483
          _result = UPDI::chip_erase();
        }
        break;
      }
      case UPDI::UPDI_CMD_GO : {
        _result = UPDI::Target_Reset(true) && UPDI::Target_Reset(false);
    10f6:	bf d8       	rcall	.-3714   	; 0x276 <UPDI::Target_Reset(bool)>
    10f8:	88 23       	and	r24, r24
    10fa:	09 f4       	brne	.+2      	; 0x10fe <UPDI::runtime(unsigned char)+0x826>
    10fc:	76 cc       	rjmp	.-1812   	; 0x9ea <UPDI::runtime(unsigned char)+0x112>
    10fe:	80 e0       	ldi	r24, 0x00	; 0
    1100:	ba d8       	rcall	.-3724   	; 0x276 <UPDI::Target_Reset(bool)>
    1102:	73 cc       	rjmp	.-1818   	; 0x9ea <UPDI::runtime(unsigned char)+0x112>

00001104 <__vector_13>:
__vector_13():
    1104:	11 24       	eor	r1, r1
    1106:	10 92 80 0a 	sts	0x0A80, r1	; 0x800a80 <UPDI::nvmprog_key+0x7f7160>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:280
 *
 * ここから割込元に戻ることはない
 */

ISR(TCB0_INT_vect, ISR_NAKED) {
  __asm__ __volatile__ ("EOR R1,R1");
    110a:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:281
  TCB0_CTRLA = 0;
    110c:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <UPDI::nvmprog_key+0x7f7166>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:282
  TCB0_INTFLAGS = TCB_CAPT_bm;
    1110:	62 e0       	ldi	r22, 0x02	; 2
    1112:	70 e0       	ldi	r23, 0x00	; 0
    1114:	88 e3       	ldi	r24, 0x38	; 56
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:283
  longjmp(TIM::CONTEXT, 2);
    1116:	98 e3       	ldi	r25, 0x38	; 56
    1118:	d7 d3       	rcall	.+1966   	; 0x18c8 <longjmp>

0000111a <__vector_6>:
__vector_6():
    111a:	1f 92       	push	r1
    111c:	0f 92       	push	r0
    111e:	0f b6       	in	r0, 0x3f	; 63
    1120:	0f 92       	push	r0
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:248
 *
 * LOW Active で UPDIターゲットをリセットON/OFF
 * Deactive で 本体リセット
 */

ISR(portIntrruptVector(RTS_SENSE_PIN)) {
    1122:	11 24       	eor	r1, r1
    1124:	2f 93       	push	r18
    1126:	3f 93       	push	r19
    1128:	4f 93       	push	r20
    112a:	5f 93       	push	r21
    112c:	6f 93       	push	r22
    112e:	7f 93       	push	r23
    1130:	8f 93       	push	r24
    1132:	9f 93       	push	r25
    1134:	af 93       	push	r26
    1136:	bf 93       	push	r27
    1138:	ef 93       	push	r30
    113a:	ff 93       	push	r31
    113c:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <UPDI::nvmprog_key+0x7f6ae9>
    1140:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <UPDI::nvmprog_key+0x7f6ae9>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:250
  portRegister(RTS_SENSE_PIN).INTFLAGS =
  portRegister(RTS_SENSE_PIN).INTFLAGS;
    1144:	12 9b       	sbis	0x02, 2	; 2
    1146:	16 c0       	rjmp	.+44     	; 0x1174 <__vector_6+0x5a>
System_Reset():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:249
 * LOW Active で UPDIターゲットをリセットON/OFF
 * Deactive で 本体リセット
 */

ISR(portIntrruptVector(RTS_SENSE_PIN)) {
  portRegister(RTS_SENSE_PIN).INTFLAGS =
    1148:	88 ed       	ldi	r24, 0xD8	; 216
    114a:	91 e0       	ldi	r25, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:252
  portRegister(RTS_SENSE_PIN).INTFLAGS;

  if ( digitalRead(RTS_SENSE_PIN) ) {
    114c:	84 bf       	out	0x34, r24	; 52
    114e:	90 93 41 00 	sts	0x0041, r25	; 0x800041 <UPDI::nvmprog_key+0x7f6721>
__vector_6():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/SYS.cpp:87
/*
 * 本体リセット
 */

void SYS::System_Reset (void) {
  _PROTECTED_WRITE(RSTCTRL_SWRR, RSTCTRL_SWRE_bm);
    1152:	ff 91       	pop	r31
    1154:	ef 91       	pop	r30
    1156:	bf 91       	pop	r27
    1158:	af 91       	pop	r26
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:271
    openDrainWrite(TRST_PIN, HIGH);

    /* ターゲット再起動解除 */
    UPDI::Target_Reset(false);
  }
}
    115a:	9f 91       	pop	r25
    115c:	8f 91       	pop	r24
    115e:	7f 91       	pop	r23
    1160:	6f 91       	pop	r22
    1162:	5f 91       	pop	r21
    1164:	4f 91       	pop	r20
    1166:	3f 91       	pop	r19
    1168:	2f 91       	pop	r18
    116a:	0f 90       	pop	r0
    116c:	0f be       	out	0x3f, r0	; 63
    116e:	0f 90       	pop	r0
    1170:	1f 90       	pop	r1
    1172:	18 95       	reti
    1174:	a6 d8       	rcall	.-3764   	; 0x2c2 <TIM::LED_Flash()>
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	7e d8       	rcall	.-3844   	; 0x276 <UPDI::Target_Reset(bool)>
    117a:	21 9a       	sbi	0x04, 1	; 4
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:258
    /* RTS 開放で本体リセット */
    SYS::System_Reset();
  }
  else {
    /* LED は点滅 */
    TIM::LED_Flash();
    117c:	00 00       	nop
    117e:	21 98       	cbi	0x04, 1	; 4
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:261

    /* ターゲット再起動 */
    UPDI::Target_Reset(true);
    1180:	80 e0       	ldi	r24, 0x00	; 0
    1182:	79 d8       	rcall	.-3854   	; 0x276 <UPDI::Target_Reset(bool)>
    1184:	e6 cf       	rjmp	.-52     	; 0x1152 <__vector_6+0x38>

00001186 <__vector_7>:
__vector_7():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:264

    /* ターゲットリセットパルス */
    openDrainWrite(TRST_PIN, LOW);
    1186:	9d d8       	rcall	.-3782   	; 0x2c2 <TIM::LED_Flash()>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:265
    nop();
    1188:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:266
    openDrainWrite(TRST_PIN, HIGH);
    118a:	75 d8       	rcall	.-3862   	; 0x276 <UPDI::Target_Reset(bool)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:269

    /* ターゲット再起動解除 */
    UPDI::Target_Reset(false);
    118c:	88 e0       	ldi	r24, 0x08	; 8
    118e:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <UPDI::nvmprog_key+0x7f6ee6>
delay_micros():
    1192:	83 ec       	ldi	r24, 0xC3	; 195
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:217
 * このハンドラから主処理に戻ることはない
 */

ISR(portIntrruptVector(SW_SENSE_PIN), ISR_NAKED) {
  /* LED は点滅 */
  TIM::LED_Flash();
    1194:	99 e0       	ldi	r25, 0x09	; 9
    1196:	01 97       	sbiw	r24, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:220

  /* ターゲットリセットON */
  UPDI::Target_Reset(true);
    1198:	f1 f7       	brne	.-4      	; 0x1196 <__vector_7+0x10>
    119a:	00 c0       	rjmp	.+0      	; 0x119c <__vector_7+0x16>
    119c:	00 00       	nop
__vector_7():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:221
  UPDI_USART.CTRLB = UPDI_USART_OFF;
    119e:	01 9a       	sbi	0x00, 1	; 0
    11a0:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <UPDI::nvmprog_key+0x7f6af1>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.3/cores/megaAVR/api/delay_busywait.h:31
    11a4:	09 98       	cbi	0x01, 1	; 1
    11a6:	21 9a       	sbi	0x04, 1	; 4
    11a8:	74 d8       	rcall	.-3864   	; 0x292 <TIM::LED_Blink()>
    11aa:	30 9b       	sbis	0x06, 0	; 6
    11ac:	fe cf       	rjmp	.-4      	; 0x11aa <__vector_7+0x24>
System_Reset():
    11ae:	88 ed       	ldi	r24, 0xD8	; 216
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:227

  /* チャタリング抑制 */
  delay_micros(1000);

  /* ターゲットリセット維持 */
  pinMode(UPDI_TDAT_PIN, OUTPUT);
    11b0:	91 e0       	ldi	r25, 0x01	; 1
    11b2:	84 bf       	out	0x34, r24	; 52
    11b4:	90 93 41 00 	sts	0x0041, r25	; 0x800041 <UPDI::nvmprog_key+0x7f6721>

000011b8 <main>:
main():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:229
  digitalWrite(UPDI_TDAT_PIN, LOW);
  openDrainWrite(TRST_PIN, LOW);
    11b8:	f8 94       	cli
initVariant():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:232

  /* LEDは 交互点滅 */
  TIM::LED_Blink();
    11ba:	24 e0       	ldi	r18, 0x04	; 4
    11bc:	e0 e1       	ldi	r30, 0x10	; 16
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:235

  /* 押している間は待機 */
  while (!digitalRead(SW_SENSE_PIN));
    11be:	f4 e0       	ldi	r31, 0x04	; 4
    11c0:	83 e0       	ldi	r24, 0x03	; 3
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/SYS.cpp:87
    11c2:	98 e0       	ldi	r25, 0x08	; 8
    11c4:	21 93       	st	Z+, r18
    11c6:	9a 95       	dec	r25
    11c8:	e9 f7       	brne	.-6      	; 0x11c4 <main+0xc>
    11ca:	78 96       	adiw	r30, 0x18	; 24
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.3/variants/tinyAVR2_20/variant.h:281
    "   DEC  R24     \n"
    "   BRNE 2b        " /* 3 loop PORTA to PORTC */
    : : "z" ((register8_t*)&PORTA_PIN0CTRL),
        "r" ((uint8_t)PORT_ISC_INPUT_DISABLE_gc)
      : "r24", "r25"
  );
    11cc:	8a 95       	dec	r24
    11ce:	c9 f7       	brne	.-14     	; 0x11c2 <main+0xa>
_CLKCTRL_SETUP():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/UPDI4AVR/0.2.3/cores/megaAVR/api/CLKCTRL_megaAVR.h:127
  // _PROTECTED_WRITE(CLKCTRL.MCLKCTRLA, CLKCTRL_CLKSEL_OSC20M_gc);

#else

  #if defined(_CLKCTRL_PDIV_)
  _PROTECTED_WRITE(CLKCTRL_MCLKCTRLB, _CLKCTRL_PDIV_ | CLKCTRL_PEN_bm);
    11d0:	88 ed       	ldi	r24, 0xD8	; 216
    11d2:	41 e0       	ldi	r20, 0x01	; 1
    11d4:	50 e0       	ldi	r21, 0x00	; 0
    11d6:	84 bf       	out	0x34, r24	; 52
    11d8:	40 93 61 00 	sts	0x0061, r20	; 0x800061 <UPDI::nvmprog_key+0x7f6741>
setup():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/SYS.cpp:17
#include <avr/io.h>

void SYS::setup (void) {

  /* ターゲットリセット開放 */
  pinControlRegister(TRST_PIN) = TRST_PIN_CONFIG;
    11dc:	8c e0       	ldi	r24, 0x0C	; 12
    11de:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <UPDI::nvmprog_key+0x7f6b11>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/SYS.cpp:20

  /* 出力方向ポート */
  PORTA_DIRSET = _BV(pinPosition(HVP1_PIN))
    11e2:	88 ef       	ldi	r24, 0xF8	; 248
    11e4:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <UPDI::nvmprog_key+0x7f6ae1>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/SYS.cpp:25
               | _BV(pinPosition(HVP2_PIN))
               | _BV(pinPosition(HV12_PIN))
               | _BV(pinPosition(LEDG_PIN))
               | _BV(pinPosition(LEDY_PIN));
  PORTB_DIRSET = _BV(pinPosition(HV8_PIN));
    11e8:	80 e2       	ldi	r24, 0x20	; 32
    11ea:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <UPDI::nvmprog_key+0x7f6b01>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/SYS.cpp:28

  /* USART 切替 LOW=ターゲット開通（PG_Disable） */
  PORTC_DIRSET = _BV(pinPosition(PGEN_PIN));
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <UPDI::nvmprog_key+0x7f6b21>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/SYS.cpp:31

  /* LED 出力 */
  LEDG_EVOUT_MUX = LEDG_EVOUT_ALT;          /* OUT:PA7 */
    11f4:	80 93 e0 05 	sts	0x05E0, r24	; 0x8005e0 <UPDI::nvmprog_key+0x7f6cc0>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/SYS.cpp:32
  PORTMUX_CCLROUTEA = PORTMUX_LUT3_ALT1_gc; /* OUT:PA5 IN:PC0,PC1,PC2 */
    11f8:	98 e0       	ldi	r25, 0x08	; 8
    11fa:	90 93 e1 05 	sts	0x05E1, r25	; 0x8005e1 <UPDI::nvmprog_key+0x7f6cc1>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/SYS.cpp:33
  PORTA_OUTSET = _BV(pinPosition(LEDG_PIN))
    11fe:	30 ea       	ldi	r19, 0xA0	; 160
    1200:	30 93 05 04 	sts	0x0405, r19	; 0x800405 <UPDI::nvmprog_key+0x7f6ae5>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/SYS.cpp:37
               | _BV(pinPosition(LEDY_PIN));

  /* USART代替選択 */
  PORTMUX_USARTROUTEA = JTAG_PMUX_ALT | UPDI_PMUX_ALT;
    1204:	35 e0       	ldi	r19, 0x05	; 5
    1206:	30 93 e2 05 	sts	0x05E2, r19	; 0x8005e2 <UPDI::nvmprog_key+0x7f6cc2>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/SYS.cpp:40

  /* JTAG ポート */
  pinControlRegister(JTAG_TXD_PIN) = JTAG_TXD_CONFIG;
    120a:	90 93 52 04 	sts	0x0452, r25	; 0x800452 <UPDI::nvmprog_key+0x7f6b32>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/SYS.cpp:41
  pinControlRegister(JTAG_RXD_PIN) = JTAG_RXD_CONFIG;
    120e:	90 93 51 04 	sts	0x0451, r25	; 0x800451 <UPDI::nvmprog_key+0x7f6b31>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/SYS.cpp:44

  /* UPDI ポート */
  pinControlRegister(UPDI_TDAT_PIN) = UPDI_TDAT_CONFIG;
    1212:	90 93 11 04 	sts	0x0411, r25	; 0x800411 <UPDI::nvmprog_key+0x7f6af1>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/SYS.cpp:47

  /* HV 発生器 */
  pinControlRegister(HVP1_PIN) = HVP1_PIN_CONFIG;
    1216:	20 93 13 04 	sts	0x0413, r18	; 0x800413 <UPDI::nvmprog_key+0x7f6af3>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/SYS.cpp:48
  pinControlRegister(HVP2_PIN) = HVP2_PIN_CONFIG;
    121a:	44 e8       	ldi	r20, 0x84	; 132
    121c:	40 93 14 04 	sts	0x0414, r20	; 0x800414 <UPDI::nvmprog_key+0x7f6af4>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/SYS.cpp:51

  /* SW1 割込許可 */
  pinControlRegister(SW_SENSE_PIN) = SW_SENSE_CONFIG;
    1220:	4d e0       	ldi	r20, 0x0D	; 13
    1222:	40 93 30 04 	sts	0x0430, r20	; 0x800430 <UPDI::nvmprog_key+0x7f6b10>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/SYS.cpp:54

  /* RTS 認識 */
  pinControlRegister(RTS_SENSE_PIN) = RTS_SENSE_CONFIG;
    1226:	49 e0       	ldi	r20, 0x09	; 9
    1228:	40 93 12 04 	sts	0x0412, r20	; 0x800412 <UPDI::nvmprog_key+0x7f6af2>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/SYS.cpp:57

  /* JP1 認識 */
  pinControlRegister(JP_SENSE_PIN) = JP_SENSE_CONFIG;
    122c:	90 93 53 04 	sts	0x0453, r25	; 0x800453 <UPDI::nvmprog_key+0x7f6b33>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/SYS.cpp:60

  /* 状態変数初期化 */
  UPDI_CONTROL = 0;
    1230:	1c ba       	out	0x1c, r1	; 28
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/SYS.cpp:61
  UPDI_NVMCTRL = 0;
    1232:	1d ba       	out	0x1d, r1	; 29
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:47

  /*
   * EVSYS信号分配
   */

  EVSYS_CHANNEL0 = EVSYS_CHANNEL0_CCL_LUT0_gc;
    1234:	90 e1       	ldi	r25, 0x10	; 16
    1236:	90 93 90 01 	sts	0x0190, r25	; 0x800190 <UPDI::nvmprog_key+0x7f6870>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:48
  EVSYS_CHANNEL1 = EVSYS_CHANNEL1_RTC_PIT_DIV128_gc;
    123a:	9a e0       	ldi	r25, 0x0A	; 10
    123c:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <UPDI::nvmprog_key+0x7f6871>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:49
  EVSYS_CHANNEL2 = EVSYS_CHANNEL2_CCL_LUT1_gc;
    1240:	91 e1       	ldi	r25, 0x11	; 17
    1242:	90 93 92 01 	sts	0x0192, r25	; 0x800192 <UPDI::nvmprog_key+0x7f6872>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:50
  EVSYS_CHANNEL3 = EVSYS_CHANNEL3_PORTA_PIN5_gc;
    1246:	9d e4       	ldi	r25, 0x4D	; 77
    1248:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <UPDI::nvmprog_key+0x7f6873>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:51
  EVSYS_USERTCB0COUNT = EVSYS_USER_CHANNEL1_gc;
    124c:	92 e0       	ldi	r25, 0x02	; 2
    124e:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <UPDI::nvmprog_key+0x7f6891>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:52
  EVSYS_USERTCB1COUNT = EVSYS_USER_CHANNEL1_gc;
    1252:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <UPDI::nvmprog_key+0x7f6893>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:53
  EVSYS_USERCCLLUT0A  = EVSYS_USER_CHANNEL3_gc;
    1256:	20 93 a0 01 	sts	0x01A0, r18	; 0x8001a0 <UPDI::nvmprog_key+0x7f6880>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:54
  EVSYS_USERCCLLUT1A  = EVSYS_USER_CHANNEL3_gc;
    125a:	20 93 a2 01 	sts	0x01A2, r18	; 0x8001a2 <UPDI::nvmprog_key+0x7f6882>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:61
  /*
   * CCL/LUT構築
   */

  /* TRUTH0: 010 is ON */
  CCL_TRUTH0    = CCL_TRUTH_2_bm;
    125e:	20 93 cb 01 	sts	0x01CB, r18	; 0x8001cb <UPDI::nvmprog_key+0x7f68ab>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:62
  CCL_LUT0CTRLC = CCL_INSEL0_EVENTA_gc;
    1262:	93 e0       	ldi	r25, 0x03	; 3
    1264:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <UPDI::nvmprog_key+0x7f68aa>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:63
  CCL_LUT0CTRLB = CCL_INSEL1_TCB1_gc;                       /* IN1:POS */
    1268:	20 ec       	ldi	r18, 0xC0	; 192
    126a:	20 93 c9 01 	sts	0x01C9, r18	; 0x8001c9 <UPDI::nvmprog_key+0x7f68a9>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:64
  CCL_LUT0CTRLA = CCL_ENABLE_bm;
    126e:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <UPDI::nvmprog_key+0x7f68a8>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:67

  /* TRUTH1: 001 010 is ON */
  CCL_TRUTH1    = CCL_TRUTH_1_bm | CCL_TRUTH_2_bm;
    1272:	26 e0       	ldi	r18, 0x06	; 6
    1274:	20 93 cf 01 	sts	0x01CF, r18	; 0x8001cf <UPDI::nvmprog_key+0x7f68af>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:68
  CCL_LUT1CTRLC = CCL_INSEL0_EVENTA_gc;
    1278:	90 93 ce 01 	sts	0x01CE, r25	; 0x8001ce <UPDI::nvmprog_key+0x7f68ae>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:69
  CCL_LUT1CTRLB = CCL_INSEL0_TCA0_gc | CCL_INSEL1_TCB1_gc;  /* IN0:POS IN1:POS */
    127c:	2a ec       	ldi	r18, 0xCA	; 202
    127e:	20 93 cd 01 	sts	0x01CD, r18	; 0x8001cd <UPDI::nvmprog_key+0x7f68ad>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:70
  CCL_LUT1CTRLA = CCL_ENABLE_bm;
    1282:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <UPDI::nvmprog_key+0x7f68ac>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:76

  /* TRUTH3: 001 010 is ON */
  /* CCL_INSEL0_USART0_gc : USART0TX normal HIGH */
  /* CCL_INSEL1_IO_gc     : USART1RX normal HIGH */
  /* CCL_INSEL2_IO_gc     : USART1TX normal HIGH */
  CCL_TRUTH3    = (uint8_t) ~CCL_TRUTH_7_bm;
    1286:	2f e7       	ldi	r18, 0x7F	; 127
    1288:	20 93 d7 01 	sts	0x01D7, r18	; 0x8001d7 <UPDI::nvmprog_key+0x7f68b7>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:77
  CCL_LUT3CTRLC = CCL_INSEL2_IO_gc;
    128c:	30 93 d6 01 	sts	0x01D6, r19	; 0x8001d6 <UPDI::nvmprog_key+0x7f68b6>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:78
  CCL_LUT3CTRLB = CCL_INSEL0_USART0_gc | CCL_INSEL1_IO_gc;
    1290:	28 e5       	ldi	r18, 0x58	; 88
    1292:	20 93 d5 01 	sts	0x01D5, r18	; 0x8001d5 <UPDI::nvmprog_key+0x7f68b5>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:79
  CCL_LUT3CTRLA = CCL_ENABLE_bm | CCL_OUTEN_bm;
    1296:	21 e4       	ldi	r18, 0x41	; 65
    1298:	20 93 d4 01 	sts	0x01D4, r18	; 0x8001d4 <UPDI::nvmprog_key+0x7f68b4>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:82

  /* CCL 有効化 */
  CCL_CTRLA = CCL_RUNSTDBY_bm | CCL_ENABLE_bm;
    129c:	20 93 c0 01 	sts	0x01C0, r18	; 0x8001c0 <UPDI::nvmprog_key+0x7f68a0>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:85

  /* RTC_PIT 有効化 */
  RTC_PITCTRLA = RTC_PITEN_bm;
    12a0:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <UPDI::nvmprog_key+0x7f6830>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:92
  /*
   * タイマー
   */

  /* TCA0 */
  TCA0_SPLIT_CTRLD = TCA_SPLIT_SPLITM_bm;
    12a4:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <UPDI::nvmprog_key+0x7f70e3>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:93
  TCA0_SPLIT_LPER  = TCA0_STEP - 2;
    12a8:	29 e8       	ldi	r18, 0x89	; 137
    12aa:	20 93 26 0a 	sts	0x0A26, r18	; 0x800a26 <UPDI::nvmprog_key+0x7f7106>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:94
  TCA0_SPLIT_LCMP0 = TCA0_STEP / 2;
    12ae:	25 e4       	ldi	r18, 0x45	; 69
    12b0:	20 93 28 0a 	sts	0x0A28, r18	; 0x800a28 <UPDI::nvmprog_key+0x7f7108>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:95
  TCA0_SPLIT_HPER  = 1;
    12b4:	80 93 27 0a 	sts	0x0A27, r24	; 0x800a27 <UPDI::nvmprog_key+0x7f7107>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:96
  TCA0_SPLIT_HCMP0 = 1;     /* WOA3=PA3 */
    12b8:	80 93 29 0a 	sts	0x0A29, r24	; 0x800a29 <UPDI::nvmprog_key+0x7f7109>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:97
  TCA0_SPLIT_HCMP1 = 1;     /* WOA4=PA4 */
    12bc:	80 93 2b 0a 	sts	0x0A2B, r24	; 0x800a2b <UPDI::nvmprog_key+0x7f710b>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:98
  TCA0_SPLIT_CTRLA = TCA_SPLIT_RUNSTDBY_bm | TCA_SPLIT_ENABLE_bm | TCA_SPLIT_CLKSEL_DIV1024_gc;
    12c0:	3f e8       	ldi	r19, 0x8F	; 143
    12c2:	30 93 00 0a 	sts	0x0A00, r19	; 0x800a00 <UPDI::nvmprog_key+0x7f70e0>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:101

  /* TCB1 */
  TCB1_CTRLB = TCB_CNTMODE_PWM8_gc;
    12c6:	37 e0       	ldi	r19, 0x07	; 7
    12c8:	30 93 91 0a 	sts	0x0A91, r19	; 0x800a91 <UPDI::nvmprog_key+0x7f7171>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:110
   *
   * RTS Deactive なら ハートビート
   * RTS Active なら フラッシュ
   */

  if ( digitalRead(RTS_SENSE_PIN) ) {
    12cc:	12 9b       	sbis	0x02, 2	; 2
    12ce:	90 c0       	rjmp	.+288    	; 0x13f0 <main+0x238>
LED_HeartBeat():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:150
 * LED動作切替
 */

/* ハートビート（待機中）*/
void TIM::LED_HeartBeat (void) {
  if (TIM::mode != 1) {
    12d0:	30 91 50 38 	lds	r19, 0x3850	; 0x803850 <TIM::mode>
    12d4:	31 30       	cpi	r19, 0x01	; 1
    12d6:	81 f0       	breq	.+32     	; 0x12f8 <main+0x140>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:151
    TIM::mode = 1;
    12d8:	80 93 50 38 	sts	0x3850, r24	; 0x803850 <TIM::mode>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:152
    TCB1_CCMP = TCB1_HBEAT;
    12dc:	4a e8       	ldi	r20, 0x8A	; 138
    12de:	55 e4       	ldi	r21, 0x45	; 69
    12e0:	40 93 9c 0a 	sts	0x0A9C, r20	; 0x800a9c <UPDI::nvmprog_key+0x7f717c>
    12e4:	50 93 9d 0a 	sts	0x0A9D, r21	; 0x800a9d <UPDI::nvmprog_key+0x7f717d>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:153
    TCB1_CNT = 0;
    12e8:	10 92 9a 0a 	sts	0x0A9A, r1	; 0x800a9a <UPDI::nvmprog_key+0x7f717a>
    12ec:	10 92 9b 0a 	sts	0x0A9B, r1	; 0x800a9b <UPDI::nvmprog_key+0x7f717b>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:154
    TCB1_CTRLA = TCB_RUNSTDBY_bm | TCB_ENABLE_bm | TCB_CLKSEL_TCA0_gc;
    12f0:	20 93 90 0a 	sts	0x0A90, r18	; 0x800a90 <UPDI::nvmprog_key+0x7f7170>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:155
    LEDG_EVOUT = EVSYS_USER_CHANNEL2_gc;
    12f4:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <UPDI::nvmprog_key+0x7f6889>
setup():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:82
  };
}

/* 初期化 */
void JTAG2::setup (void) {
  JTAG_USART.BAUD = pgm_read_word( &BAUD_TABLE[JTAG2::BAUD_19200] );
    12f8:	ed e9       	ldi	r30, 0x9D	; 157
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	85 91       	lpm	r24, Z+
    12fe:	94 91       	lpm	r25, Z
    1300:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <UPDI::nvmprog_key+0x7f6f08>
    1304:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <UPDI::nvmprog_key+0x7f6f09>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:83
  JTAG_USART.CTRLA = JTAG_USART_CTRLA;
    1308:	10 92 25 08 	sts	0x0825, r1	; 0x800825 <UPDI::nvmprog_key+0x7f6f05>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:84
  JTAG_USART.CTRLC = JTAG_USART_CTRLC;
    130c:	83 e0       	ldi	r24, 0x03	; 3
    130e:	80 93 27 08 	sts	0x0827, r24	; 0x800827 <UPDI::nvmprog_key+0x7f6f07>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:85
  JTAG_USART.CTRLB = JTAG_USART_OFF;
    1312:	88 e8       	ldi	r24, 0x88	; 136
    1314:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <UPDI::nvmprog_key+0x7f6f06>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:29
void UPDI::guardtime (void) {
  delay_micros(UPDI_GUARDTIME);
}

void UPDI::setup (void) {
  UPDI_USART.BAUD  = UPDI_BAUD_CALC;
    1318:	80 eb       	ldi	r24, 0xB0	; 176
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <UPDI::nvmprog_key+0x7f6ee8>
    1320:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <UPDI::nvmprog_key+0x7f6ee9>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:30
  UPDI_USART.CTRLA = UPDI_USART_CTRLA;
    1324:	8a e0       	ldi	r24, 0x0A	; 10
    1326:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <UPDI::nvmprog_key+0x7f6ee5>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:31
  UPDI_USART.CTRLC = UPDI_USART_CTRLC;
    132a:	8b e2       	ldi	r24, 0x2B	; 43
    132c:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <UPDI::nvmprog_key+0x7f6ee7>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:32
  UPDI_USART.CTRLB = UPDI_USART_ON;
    1330:	88 ec       	ldi	r24, 0xC8	; 200
    1332:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <UPDI::nvmprog_key+0x7f6ee6>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:33
  UPDI_CONTROL &= ~_BV(UPDI::UPDI_CLKU_bp);
    1336:	e7 98       	cbi	0x1c, 7	; 28
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:36

  /* ソフトリセット後は ターゲットのリセットを解除 */
  if ( bit_is_set(RSTCTRL_RSTFR, RSTCTRL_SWRF_bp) ) UPDI::Target_Reset(false);
    1338:	80 91 40 00 	lds	r24, 0x0040	; 0x800040 <UPDI::nvmprog_key+0x7f6720>
    133c:	84 ff       	sbrs	r24, 4
    133e:	03 c0       	rjmp	.+6      	; 0x1346 <main+0x18e>
    1340:	80 e0       	ldi	r24, 0x00	; 0
    1342:	0e 94 3b 01 	call	0x276	; 0x276 <UPDI::Target_Reset(bool)>
ready():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/SYS.cpp:119
/*
 * 起動シーケンスの最後に実行
 */

void SYS::ready (void) {
  RSTCTRL_RSTFR = 0xFF;
    1346:	8f ef       	ldi	r24, 0xFF	; 255
    1348:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <UPDI::nvmprog_key+0x7f6720>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/SYS.cpp:122

  /* 初期化中に検出された非同期割込をクリアする */
  portRegister(RTS_SENSE_PIN).INTFLAGS = 0xFF;
    134c:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <UPDI::nvmprog_key+0x7f6ae9>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/SYS.cpp:125

  /* 割込許可 */
  sei();
    1350:	78 94       	sei
get_parameter():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:251
      packet.size_word[0] = 5;
      break;
    }
    case JTAG2::PARAM_EMU_MODE : {
      packet.body[1] = PARAM_EMU_MODE_VAL;
      packet.size_word[0] = 2;
    1352:	e2 e0       	ldi	r30, 0x02	; 2
    1354:	ce 2e       	mov	r12, r30
    1356:	d1 2c       	mov	r13, r1
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:261
      packet.size_word[0] = 2;
      break;
    }
    case JTAG2::PARAM_VTARGET : {
      _CAPS16(packet.body[1])->word = SYS::get_vcc();
      packet.size_word[0] = 3;
    1358:	f3 e0       	ldi	r31, 0x03	; 3
    135a:	2f 2e       	mov	r2, r31
    135c:	31 2c       	mov	r3, r1
check_sig():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:258
    else if (a == 1) c = bit_is_set(UPDI_NVMCTRL, UPDI_GEN2_bp) ? 'A'
                       : bit_is_set(UPDI_NVMCTRL, UPDI_LOWF_bp) ? 'm' : 't';
    else if (a == 2) c = bit_is_set(UPDI_NVMCTRL, UPDI_GEN3_bp) ? '3'
                       : bit_is_set(UPDI_NVMCTRL, UPDI_GEN2_bp) ? '2' : '0';
    else return false;
    JTAG2::packet.size = 2;
    135e:	a2 e0       	ldi	r26, 0x02	; 2
    1360:	4a 2e       	mov	r4, r26
    1362:	51 2c       	mov	r5, r1
    1364:	61 2c       	mov	r6, r1
    1366:	71 2c       	mov	r7, r1
sign_on_response():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:175
  packet.body[3] = UPDI_NVMCTRL;
}

/* SIGN_ON Response */
void JTAG2::sign_on_response (void) {
  packet.size = sizeof(sign_on_resp);
    1368:	bd e1       	ldi	r27, 0x1D	; 29
    136a:	8b 2e       	mov	r8, r27
    136c:	91 2c       	mov	r9, r1
    136e:	a1 2c       	mov	r10, r1
    1370:	b1 2c       	mov	r11, r1
get():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:101
  pinMode(JTAG_TXD_PIN, INPUT_PULLUP);
  SYS::PG_Disable();
}

uint8_t JTAG2::get (void) {
  loop_until_bit_is_set(JTAG_USART.STATUS, USART_RXCIF_bp);
    1372:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <UPDI::nvmprog_key+0x7f6f04>
    1376:	87 ff       	sbrs	r24, 7
    1378:	fc cf       	rjmp	.-8      	; 0x1372 <main+0x1ba>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:102
  return JTAG_USART.RXDATAL;
    137a:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <UPDI::nvmprog_key+0x7f6f00>
packet_receive():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:126
  uint16_t _crc = ~0;
  uint8_t *p = (uint8_t*) &packet.soh;
  uint8_t *q = (uint8_t*) &packet.soh;

  /* 受信待ち（無限ループ）*/
  while (get() != JTAG2::MESSAGE_START);
    137e:	8b 31       	cpi	r24, 0x1B	; 27
    1380:	c1 f7       	brne	.-16     	; 0x1372 <main+0x1ba>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:127
  (*p++) = JTAG2::MESSAGE_START;
    1382:	80 93 63 38 	sts	0x3863, r24	; 0x803863 <JTAG2::packet>
    1386:	e4 e6       	ldi	r30, 0x64	; 100
    1388:	f8 e3       	ldi	r31, 0x38	; 56
get():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:101
  pinMode(JTAG_TXD_PIN, INPUT_PULLUP);
  SYS::PG_Disable();
}

uint8_t JTAG2::get (void) {
  loop_until_bit_is_set(JTAG_USART.STATUS, USART_RXCIF_bp);
    138a:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <UPDI::nvmprog_key+0x7f6f04>
    138e:	87 ff       	sbrs	r24, 7
    1390:	fc cf       	rjmp	.-8      	; 0x138a <main+0x1d2>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:102
  return JTAG_USART.RXDATAL;
    1392:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <UPDI::nvmprog_key+0x7f6f00>
packet_receive():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:130
  /* 受信待ち（無限ループ）*/
  while (get() != JTAG2::MESSAGE_START);
  (*p++) = JTAG2::MESSAGE_START;

  /* 最初の7byte */
  for (int8_t i = 0; i < 7; i++) *p++ = get();
    1396:	81 93       	st	Z+, r24
    1398:	28 e3       	ldi	r18, 0x38	; 56
    139a:	eb 36       	cpi	r30, 0x6B	; 107
    139c:	f2 07       	cpc	r31, r18
    139e:	a9 f7       	brne	.-22     	; 0x138a <main+0x1d2>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:133

  /* STX 確認 */
  if (packet.stx != JTAG2::TOKEN) return false;
    13a0:	80 91 6a 38 	lds	r24, 0x386A	; 0x80386a <JTAG2::packet+0x7>
    13a4:	8e 30       	cpi	r24, 0x0E	; 14
    13a6:	29 f7       	brne	.-54     	; 0x1372 <main+0x1ba>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:136

  /* パケット長確認 */
  if (packet.size > sizeof(packet.body)) return false;
    13a8:	80 91 66 38 	lds	r24, 0x3866	; 0x803866 <JTAG2::packet+0x3>
    13ac:	90 91 67 38 	lds	r25, 0x3867	; 0x803867 <JTAG2::packet+0x4>
    13b0:	a0 91 68 38 	lds	r26, 0x3868	; 0x803868 <JTAG2::packet+0x5>
    13b4:	b0 91 69 38 	lds	r27, 0x3869	; 0x803869 <JTAG2::packet+0x6>
    13b8:	8a 30       	cpi	r24, 0x0A	; 10
    13ba:	92 40       	sbci	r25, 0x02	; 2
    13bc:	a1 05       	cpc	r26, r1
    13be:	b1 05       	cpc	r27, r1
    13c0:	c0 f6       	brcc	.-80     	; 0x1372 <main+0x1ba>
    13c2:	cb e6       	ldi	r28, 0x6B	; 107
    13c4:	d8 e3       	ldi	r29, 0x38	; 56
    13c6:	7e 01       	movw	r14, r28
main():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:139

  /* 残りを受信 */
  for (int16_t j = -2; j < packet.size_word[0]; j++) *p++ = get();
    13c8:	8e ef       	ldi	r24, 0xFE	; 254
    13ca:	9f ef       	ldi	r25, 0xFF	; 255
packet_receive():
    13cc:	20 91 66 38 	lds	r18, 0x3866	; 0x803866 <JTAG2::packet+0x3>
    13d0:	30 91 67 38 	lds	r19, 0x3867	; 0x803867 <JTAG2::packet+0x4>
    13d4:	82 17       	cp	r24, r18
    13d6:	93 07       	cpc	r25, r19
    13d8:	74 f4       	brge	.+28     	; 0x13f6 <main+0x23e>
get():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:101
  pinMode(JTAG_TXD_PIN, INPUT_PULLUP);
  SYS::PG_Disable();
}

uint8_t JTAG2::get (void) {
  loop_until_bit_is_set(JTAG_USART.STATUS, USART_RXCIF_bp);
    13da:	20 91 24 08 	lds	r18, 0x0824	; 0x800824 <UPDI::nvmprog_key+0x7f6f04>
    13de:	27 ff       	sbrs	r18, 7
    13e0:	fc cf       	rjmp	.-8      	; 0x13da <main+0x222>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:102
  return JTAG_USART.RXDATAL;
    13e2:	20 91 20 08 	lds	r18, 0x0820	; 0x800820 <UPDI::nvmprog_key+0x7f6f00>
packet_receive():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:139

  /* パケット長確認 */
  if (packet.size > sizeof(packet.body)) return false;

  /* 残りを受信 */
  for (int16_t j = -2; j < packet.size_word[0]; j++) *p++ = get();
    13e6:	d7 01       	movw	r26, r14
    13e8:	2d 93       	st	X+, r18
    13ea:	7d 01       	movw	r14, r26
    13ec:	01 96       	adiw	r24, 0x01	; 1
    13ee:	ee cf       	rjmp	.-36     	; 0x13cc <main+0x214>
setup():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:114

  if ( digitalRead(RTS_SENSE_PIN) ) {
    LED_HeartBeat();
  }
  else {
    LED_Flash();
    13f0:	0e 94 61 01 	call	0x2c2	; 0x2c2 <TIM::LED_Flash()>
    13f4:	81 cf       	rjmp	.-254    	; 0x12f8 <main+0x140>
packet_receive():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:139
    13f6:	03 e6       	ldi	r16, 0x63	; 99
    13f8:	18 e3       	ldi	r17, 0x38	; 56
main():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:121
  return _crc_ccitt_update(_crc, _data);
}

/* JTAG Receive */
bool JTAG2::packet_receive (void) {
  uint16_t _crc = ~0;
    13fa:	8f ef       	ldi	r24, 0xFF	; 255
    13fc:	9f ef       	ldi	r25, 0xFF	; 255
packet_receive():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:142

  /* 残りを受信 */
  for (int16_t j = -2; j < packet.size_word[0]; j++) *p++ = get();

  /* 受信バッファが満たされたら CRC 確認 */
  while (p != q) _crc = JTAG2::crc16_update(_crc, *q++);
    13fe:	0e 15       	cp	r16, r14
    1400:	1f 05       	cpc	r17, r15
    1402:	31 f0       	breq	.+12     	; 0x1410 <main+0x258>
    1404:	f8 01       	movw	r30, r16
    1406:	61 91       	ld	r22, Z+
    1408:	8f 01       	movw	r16, r30
crc16_update():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:116
void JTAG2::flush (void) {
  loop_until_bit_is_set(JTAG_USART.STATUS, USART_TXCIF_bp);
}

uint16_t JTAG2::crc16_update(uint16_t _crc, uint8_t _data) {
  return _crc_ccitt_update(_crc, _data);
    140a:	0e 94 c4 01 	call	0x388	; 0x388 <_crc_ccitt_update(unsigned int, unsigned char)>
    140e:	f7 cf       	rjmp	.-18     	; 0x13fe <main+0x246>
wakeup_jtag():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:385
  JTAG2::answer_transfer();
}

void JTAG2::wakeup_jtag (void) {
  for (;;) {
    if (JTAG2::packet_receive()) JTAG2::process_command();
    1410:	89 2b       	or	r24, r25
    1412:	09 f0       	breq	.+2      	; 0x1416 <main+0x25e>
    1414:	ae cf       	rjmp	.-164    	; 0x1372 <main+0x1ba>
process_command():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:274
  packet.body[0] = JTAG2::RSP_PARAMETER;
}

/* JTAG Process */
inline void JTAG2::process_command (void) {
  wdt_reset();
    1416:	a8 95       	wdr
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:275
  switch ( packet.body[0] ) {
    1418:	80 91 6b 38 	lds	r24, 0x386B	; 0x80386b <JTAG2::packet+0x8>
    141c:	88 30       	cpi	r24, 0x08	; 8
    141e:	09 f4       	brne	.+2      	; 0x1422 <main+0x26a>
    1420:	cf c1       	rjmp	.+926    	; 0x17c0 <main+0x608>
    1422:	d0 f5       	brcc	.+116    	; 0x1498 <main+0x2e0>
    1424:	82 30       	cpi	r24, 0x02	; 2
    1426:	09 f4       	brne	.+2      	; 0x142a <main+0x272>
    1428:	9f c0       	rjmp	.+318    	; 0x1568 <main+0x3b0>
    142a:	48 f4       	brcc	.+18     	; 0x143e <main+0x286>
    142c:	88 23       	and	r24, r24
    142e:	09 f4       	brne	.+2      	; 0x1432 <main+0x27a>
    1430:	cc c1       	rjmp	.+920    	; 0x17ca <main+0x612>
    1432:	81 30       	cpi	r24, 0x01	; 1
    1434:	09 f4       	brne	.+2      	; 0x1438 <main+0x280>
    1436:	47 c0       	rjmp	.+142    	; 0x14c6 <main+0x30e>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:377
    case JTAG2::CMND_LEAVE_PROGMODE : {
      JTAG2::set_response(JTAG2::RSP_OK);
      break;
    }
    default : {
      JTAG2::set_response(JTAG2::RSP_FAILED);
    1438:	80 ea       	ldi	r24, 0xA0	; 160
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	d6 c0       	rjmp	.+428    	; 0x15ea <main+0x432>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:275
}

/* JTAG Process */
inline void JTAG2::process_command (void) {
  wdt_reset();
  switch ( packet.body[0] ) {
    143e:	84 30       	cpi	r24, 0x04	; 4
    1440:	09 f4       	brne	.+2      	; 0x1444 <main+0x28c>
    1442:	9a c1       	rjmp	.+820    	; 0x1778 <main+0x5c0>
    1444:	08 f4       	brcc	.+2      	; 0x1448 <main+0x290>
    1446:	d4 c0       	rjmp	.+424    	; 0x15f0 <main+0x438>
    1448:	85 30       	cpi	r24, 0x05	; 5
    144a:	b1 f7       	brne	.-20     	; 0x1438 <main+0x280>
check_sig():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:243
/*
 * Dummy SIGNATURE
 */

bool UPDI::check_sig (void) {
  uint8_t mem_type  = JTAG2::packet.body[1];
    144c:	80 91 6c 38 	lds	r24, 0x386C	; 0x80386c <JTAG2::packet+0x9>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:246
  uint8_t s = _CAPS32(JTAG2::packet.body[2])->bytes[0];
  uint8_t a = _CAPS32(JTAG2::packet.body[6])->bytes[0]
    - (bit_is_set(UPDI_NVMCTRL, UPDI_BROW_bp) ? (uint8_t)NVM::EB_SIGROW
    1450:	ec 99       	sbic	0x1d, 4	; 29
    1452:	4f c1       	rjmp	.+670    	; 0x16f2 <main+0x53a>
main():
    1454:	90 e0       	ldi	r25, 0x00	; 0
check_sig():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:249
                                              : (uint8_t)NVM::BASE_SIGROW);
  uint8_t c;
  if (bit_is_clear(UPDI_CONTROL, UPDI_PROG_bp) && mem_type == JTAG2::MTYPE_SIGN_JTAG && s == 1) {
    1456:	e1 99       	sbic	0x1c, 1	; 28
    1458:	6a c1       	rjmp	.+724    	; 0x172e <main+0x576>
    145a:	84 3b       	cpi	r24, 0xB4	; 180
    145c:	09 f0       	breq	.+2      	; 0x1460 <main+0x2a8>
    145e:	67 c1       	rjmp	.+718    	; 0x172e <main+0x576>
    1460:	80 91 6d 38 	lds	r24, 0x386D	; 0x80386d <JTAG2::packet+0xa>
    1464:	81 30       	cpi	r24, 0x01	; 1
    1466:	09 f0       	breq	.+2      	; 0x146a <main+0x2b2>
    1468:	62 c1       	rjmp	.+708    	; 0x172e <main+0x576>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:245
 */

bool UPDI::check_sig (void) {
  uint8_t mem_type  = JTAG2::packet.body[1];
  uint8_t s = _CAPS32(JTAG2::packet.body[2])->bytes[0];
  uint8_t a = _CAPS32(JTAG2::packet.body[6])->bytes[0]
    146a:	80 91 71 38 	lds	r24, 0x3871	; 0x803871 <JTAG2::packet+0xe>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:250
    - (bit_is_set(UPDI_NVMCTRL, UPDI_BROW_bp) ? (uint8_t)NVM::EB_SIGROW
                                              : (uint8_t)NVM::BASE_SIGROW);
  uint8_t c;
  if (bit_is_clear(UPDI_CONTROL, UPDI_PROG_bp) && mem_type == JTAG2::MTYPE_SIGN_JTAG && s == 1) {
    JTAG2::packet.body[0] = JTAG2::RSP_MEMORY;
    146e:	22 e8       	ldi	r18, 0x82	; 130
    1470:	20 93 6b 38 	sts	0x386B, r18	; 0x80386b <JTAG2::packet+0x8>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:251
    if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) c = UPDI_LASTH ? 0x00 : 0xFF;
    1474:	e0 99       	sbic	0x1c, 0	; 28
    1476:	3f c1       	rjmp	.+638    	; 0x16f6 <main+0x53e>
    1478:	9f b3       	in	r25, 0x1f	; 31
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	91 11       	cpse	r25, r1
    147e:	80 e0       	ldi	r24, 0x00	; 0
    1480:	81 95       	neg	r24
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:258
    else if (a == 1) c = bit_is_set(UPDI_NVMCTRL, UPDI_GEN2_bp) ? 'A'
                       : bit_is_set(UPDI_NVMCTRL, UPDI_LOWF_bp) ? 'm' : 't';
    else if (a == 2) c = bit_is_set(UPDI_NVMCTRL, UPDI_GEN3_bp) ? '3'
                       : bit_is_set(UPDI_NVMCTRL, UPDI_GEN2_bp) ? '2' : '0';
    else return false;
    JTAG2::packet.size = 2;
    1482:	40 92 66 38 	sts	0x3866, r4	; 0x803866 <JTAG2::packet+0x3>
    1486:	50 92 67 38 	sts	0x3867, r5	; 0x803867 <JTAG2::packet+0x4>
    148a:	60 92 68 38 	sts	0x3868, r6	; 0x803868 <JTAG2::packet+0x5>
    148e:	70 92 69 38 	sts	0x3869, r7	; 0x803869 <JTAG2::packet+0x6>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:259
    JTAG2::packet.body[1] = c;
    1492:	80 93 6c 38 	sts	0x386C, r24	; 0x80386c <JTAG2::packet+0x9>
    1496:	65 c0       	rjmp	.+202    	; 0x1562 <main+0x3aa>
process_command():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:275
    1498:	84 31       	cpi	r24, 0x14	; 20
    149a:	09 f4       	brne	.+2      	; 0x149e <main+0x2e6>
    149c:	0b c1       	rjmp	.+534    	; 0x16b4 <main+0x4fc>
    149e:	48 f4       	brcc	.+18     	; 0x14b2 <main+0x2fa>
    14a0:	8b 30       	cpi	r24, 0x0B	; 11
    14a2:	50 f2       	brcs	.-108    	; 0x1438 <main+0x280>
    14a4:	8d 30       	cpi	r24, 0x0D	; 13
    14a6:	10 f0       	brcs	.+4      	; 0x14ac <main+0x2f4>
    14a8:	8f 30       	cpi	r24, 0x0F	; 15
    14aa:	31 f6       	brne	.-116    	; 0x1438 <main+0x280>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:338
        packet.size = 19;
      break;
    }
    case JTAG2::CMND_GO : {
      if (bit_is_set(UPDI_CONTROL, UPDI::UPDI_PROG_bp)) UPDI::runtime(UPDI::UPDI_CMD_GO);
      JTAG2::set_response(JTAG2::RSP_OK);
    14ac:	80 e8       	ldi	r24, 0x80	; 128
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	9c c0       	rjmp	.+312    	; 0x15ea <main+0x432>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:275
}

/* JTAG Process */
inline void JTAG2::process_command (void) {
  wdt_reset();
  switch ( packet.body[0] ) {
    14b2:	84 33       	cpi	r24, 0x34	; 52
    14b4:	09 f4       	brne	.+2      	; 0x14b8 <main+0x300>
    14b6:	67 c1       	rjmp	.+718    	; 0x1786 <main+0x5ce>
    14b8:	86 33       	cpi	r24, 0x36	; 54
    14ba:	09 f4       	brne	.+2      	; 0x14be <main+0x306>
    14bc:	94 c1       	rjmp	.+808    	; 0x17e6 <main+0x62e>
    14be:	85 31       	cpi	r24, 0x15	; 21
    14c0:	09 f0       	breq	.+2      	; 0x14c4 <main+0x30c>
    14c2:	ba cf       	rjmp	.-140    	; 0x1438 <main+0x280>
    14c4:	f3 cf       	rjmp	.-26     	; 0x14ac <main+0x2f4>
RTS_Disable():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/SYS.cpp:107
void SYS::RTS_Enable (void) {
  pinControlRegister(RTS_SENSE_PIN) = RTS_SENSE_CONFIG;
}

void SYS::RTS_Disable (void) {
  pinControlRegister(RTS_SENSE_PIN) = RTS_SENSE_DISABLE;
    14c6:	88 e0       	ldi	r24, 0x08	; 8
    14c8:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <UPDI::nvmprog_key+0x7f6af2>
WDT_ON():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/SYS.cpp:139
  _PROTECTED_WRITE(WDT_CTRLA, _wdt_period);
}

void SYS::WDT_OFF (void) { WDT_SET(WDT_PERIOD_OFF_gc); }

void SYS::WDT_ON (void) { WDT_SET(WDT_PERIOD_8KCLK_gc); }
    14cc:	8b e0       	ldi	r24, 0x0B	; 11
    14ce:	0e 94 83 01 	call	0x306	; 0x306 <SYS::WDT_SET(unsigned char)>
LED_Stop():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:187
}

/* 停止（UPDI許認可前）*/
/* TCA0はチャージポンプ駆動速度に変更 */
void TIM::LED_Stop (void) {
  if (TIM::mode != 0) {
    14d2:	80 91 50 38 	lds	r24, 0x3850	; 0x803850 <TIM::mode>
    14d6:	88 23       	and	r24, r24
    14d8:	41 f0       	breq	.+16     	; 0x14ea <main+0x332>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:188
    TIM::mode = 0;
    14da:	10 92 50 38 	sts	0x3850, r1	; 0x803850 <TIM::mode>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:189
    TCA0_SPLIT_CTRLA = TCA_SPLIT_RUNSTDBY_bm | TCA_SPLIT_ENABLE_bm | TCA_SPLIT_CLKSEL_DIV1_gc;
    14de:	81 e8       	ldi	r24, 0x81	; 129
    14e0:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <UPDI::nvmprog_key+0x7f70e0>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:190
    LEDG_EVOUT = EVSYS_USER_OFF_gc;
    14e4:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <UPDI::nvmprog_key+0x7f6889>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:191
    digitalWrite(LEDG_PIN, LOW);
    14e8:	0f 98       	cbi	0x01, 7	; 1
PG_Enable():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/SYS.cpp:95
/*
 * 各種ON/OFF
 */

void SYS::PG_Enable (void) {
  digitalWrite(PGEN_PIN, HIGH);
    14ea:	48 9a       	sbi	0x09, 0	; 9
transfer_enable():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:90
  JTAG_USART.CTRLB = JTAG_USART_OFF;
}

void JTAG2::transfer_enable (void) {
  SYS::PG_Enable();
  pinMode(JTAG_TXD_PIN, OUTPUT);
    14ec:	42 9a       	sbi	0x08, 2	; 8
    14ee:	10 92 52 04 	sts	0x0452, r1	; 0x800452 <UPDI::nvmprog_key+0x7f6b32>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:91
  JTAG_USART.CTRLB = JTAG_USART_ON;
    14f2:	88 ec       	ldi	r24, 0xC8	; 200
    14f4:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <UPDI::nvmprog_key+0x7f6f06>
sign_on_response():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:175
  packet.body[3] = UPDI_NVMCTRL;
}

/* SIGN_ON Response */
void JTAG2::sign_on_response (void) {
  packet.size = sizeof(sign_on_resp);
    14f8:	80 92 66 38 	sts	0x3866, r8	; 0x803866 <JTAG2::packet+0x3>
    14fc:	90 92 67 38 	sts	0x3867, r9	; 0x803867 <JTAG2::packet+0x4>
    1500:	a0 92 68 38 	sts	0x3868, r10	; 0x803868 <JTAG2::packet+0x5>
    1504:	b0 92 69 38 	sts	0x3869, r11	; 0x803869 <JTAG2::packet+0x6>
    1508:	e8 e7       	ldi	r30, 0x78	; 120
    150a:	f0 e0       	ldi	r31, 0x00	; 0
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:177
  for (uint8_t i = 0; i < sizeof(sign_on_resp); i++)
    packet.body[i] = pgm_read_byte( &sign_on_resp[i] );
    150c:	84 91       	lpm	r24, Z
    150e:	89 93       	st	Y+, r24
    1510:	31 96       	adiw	r30, 0x01	; 1
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:176
}

/* SIGN_ON Response */
void JTAG2::sign_on_response (void) {
  packet.size = sizeof(sign_on_resp);
  for (uint8_t i = 0; i < sizeof(sign_on_resp); i++)
    1512:	28 e3       	ldi	r18, 0x38	; 56
    1514:	c8 38       	cpi	r28, 0x88	; 136
    1516:	d2 07       	cpc	r29, r18
    1518:	c9 f7       	brne	.-14     	; 0x150c <main+0x354>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:182
    packet.body[i] = pgm_read_byte( &sign_on_resp[i] );
  /* SERNUMから Version情報を生成する */
  uint8_t* p = (uint8_t*) &SIGROW_SERNUM0;
  uint8_t* q = (uint8_t*) &SIGROW_SERNUM4;
  uint8_t* r = (uint8_t*) &packet.body[10];
    *r++ = *q++ ^ *p++ ^ *p++;
    151a:	80 91 07 11 	lds	r24, 0x1107	; 0x801107 <UPDI::nvmprog_key+0x7f77e7>
    151e:	90 91 03 11 	lds	r25, 0x1103	; 0x801103 <UPDI::nvmprog_key+0x7f77e3>
    1522:	89 27       	eor	r24, r25
    1524:	90 91 04 11 	lds	r25, 0x1104	; 0x801104 <UPDI::nvmprog_key+0x7f77e4>
    1528:	89 27       	eor	r24, r25
    152a:	80 93 75 38 	sts	0x3875, r24	; 0x803875 <JTAG2::packet+0x12>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:183
    *r++ = *q++ ^ *p++ ^ *p++;
    152e:	80 91 08 11 	lds	r24, 0x1108	; 0x801108 <UPDI::nvmprog_key+0x7f77e8>
    1532:	90 91 05 11 	lds	r25, 0x1105	; 0x801105 <UPDI::nvmprog_key+0x7f77e5>
    1536:	89 27       	eor	r24, r25
    1538:	90 91 06 11 	lds	r25, 0x1106	; 0x801106 <UPDI::nvmprog_key+0x7f77e6>
    153c:	89 27       	eor	r24, r25
    153e:	80 93 76 38 	sts	0x3876, r24	; 0x803876 <JTAG2::packet+0x13>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:184
    *r++ = *q++;
    1542:	80 91 09 11 	lds	r24, 0x1109	; 0x801109 <UPDI::nvmprog_key+0x7f77e9>
    1546:	80 93 77 38 	sts	0x3877, r24	; 0x803877 <JTAG2::packet+0x14>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:185
    *r++ = *q++;
    154a:	80 91 0a 11 	lds	r24, 0x110A	; 0x80110a <UPDI::nvmprog_key+0x7f77ea>
    154e:	80 93 78 38 	sts	0x3878, r24	; 0x803878 <JTAG2::packet+0x15>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:186
    *r++ = *q++;
    1552:	80 91 0b 11 	lds	r24, 0x110B	; 0x80110b <UPDI::nvmprog_key+0x7f77eb>
    1556:	80 93 79 38 	sts	0x3879, r24	; 0x803879 <JTAG2::packet+0x16>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:187
    *r++ = *q++;
    155a:	80 91 0c 11 	lds	r24, 0x110C	; 0x80110c <UPDI::nvmprog_key+0x7f77ec>
    155e:	80 93 7a 38 	sts	0x387A, r24	; 0x80387a <JTAG2::packet+0x17>
process_command():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:380
    }
    default : {
      JTAG2::set_response(JTAG2::RSP_FAILED);
    }
  }
  JTAG2::answer_transfer();
    1562:	0e 94 d6 01 	call	0x3ac	; 0x3ac <JTAG2::answer_transfer()>
    1566:	05 cf       	rjmp	.-502    	; 0x1372 <main+0x1ba>
set_parameter():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:193
  JTAG2::answer_transfer();
}

/* CMND_SET_PARAMETER */
bool JTAG2::set_parameter (void) {
  uint8_t param_val = packet.body[2];
    1568:	f0 90 6d 38 	lds	r15, 0x386D	; 0x80386d <JTAG2::packet+0xa>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:194
  switch (packet.body[1]) {
    156c:	80 91 6c 38 	lds	r24, 0x386C	; 0x80386c <JTAG2::packet+0x9>
    1570:	83 30       	cpi	r24, 0x03	; 3
    1572:	b1 f1       	breq	.+108    	; 0x15e0 <main+0x428>
    1574:	85 30       	cpi	r24, 0x05	; 5
    1576:	09 f0       	breq	.+2      	; 0x157a <main+0x3c2>
    1578:	99 cf       	rjmp	.-206    	; 0x14ac <main+0x2f4>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:203
      break;
    }
    /* JTAGインタフェース速度 */
    case JTAG2::PARAM_BAUD_RATE : {
      /* 対応範囲確認 */
      if ((param_val >= JTAG2::BAUD_LOWER) && (param_val <= JTAG2::BAUD_UPPER)) {
    157a:	8e ef       	ldi	r24, 0xFE	; 254
    157c:	8f 0d       	add	r24, r15
    157e:	88 31       	cpi	r24, 0x18	; 24
    1580:	90 f5       	brcc	.+100    	; 0x15e6 <main+0x42e>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:204
        uint16_t baud = pgm_read_word( &BAUD_TABLE[param_val] );
    1582:	8f 2d       	mov	r24, r15
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	fc 01       	movw	r30, r24
    1588:	ee 0f       	add	r30, r30
    158a:	ff 1f       	adc	r31, r31
    158c:	eb 56       	subi	r30, 0x6B	; 107
    158e:	ff 4f       	sbci	r31, 0xFF	; 255
    1590:	c5 91       	lpm	r28, Z+
    1592:	d4 91       	lpm	r29, Z
    1594:	8e 01       	movw	r16, r28
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:205
        if (baud) {
    1596:	20 97       	sbiw	r28, 0x00	; 0
    1598:	31 f1       	breq	.+76     	; 0x15e6 <main+0x42e>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:207
          /* 正常なら応答したのち速度変更 */
          PARAM_BAUD_RATE_VAL = (jtag_baud_rate_e) param_val;
    159a:	80 93 36 38 	sts	0x3836, r24	; 0x803836 <JTAG2::PARAM_BAUD_RATE_VAL>
    159e:	90 93 37 38 	sts	0x3837, r25	; 0x803837 <JTAG2::PARAM_BAUD_RATE_VAL+0x1>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:208
          JTAG2::set_response(JTAG2::RSP_OK);
    15a2:	80 e8       	ldi	r24, 0x80	; 128
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	0e 94 a7 01 	call	0x34e	; 0x34e <JTAG2::set_response(JTAG2::jtag_response_e)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:209
          JTAG2::answer_transfer();
    15aa:	0e 94 d6 01 	call	0x3ac	; 0x3ac <JTAG2::answer_transfer()>
flush():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:112
  JTAG_USART.STATUS = USART_TXCIF_bm;
  return JTAG_USART.TXDATAL = _data;
}

void JTAG2::flush (void) {
  loop_until_bit_is_set(JTAG_USART.STATUS, USART_TXCIF_bp);
    15ae:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <UPDI::nvmprog_key+0x7f6f04>
    15b2:	86 ff       	sbrs	r24, 6
    15b4:	fc cf       	rjmp	.-8      	; 0x15ae <main+0x3f6>
set_parameter():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:211
          /* 正常なら応答したのち速度変更 */
          PARAM_BAUD_RATE_VAL = (jtag_baud_rate_e) param_val;
          JTAG2::set_response(JTAG2::RSP_OK);
          JTAG2::answer_transfer();
          JTAG2::flush();
          if (baud < 64) {
    15b6:	c0 34       	cpi	r28, 0x40	; 64
    15b8:	d1 05       	cpc	r29, r1
    15ba:	30 f4       	brcc	.+12     	; 0x15c8 <main+0x410>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:212
            JTAG_USART.CTRLB = JTAG_USART_DBLON;
    15bc:	8a ec       	ldi	r24, 0xCA	; 202
    15be:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <UPDI::nvmprog_key+0x7f6f06>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:213
            baud <<= 1;
    15c2:	8e 01       	movw	r16, r28
    15c4:	00 0f       	add	r16, r16
    15c6:	11 1f       	adc	r17, r17
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:215
          }
          JTAG_USART.BAUD = baud;
    15c8:	00 93 28 08 	sts	0x0828, r16	; 0x800828 <UPDI::nvmprog_key+0x7f6f08>
    15cc:	10 93 29 08 	sts	0x0829, r17	; 0x800829 <UPDI::nvmprog_key+0x7f6f09>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:217
          /* terminal mode を許可する速度 */
          if (param_val == JTAG2::BAUD_38400 || param_val == JTAG2::BAUD_666666)
    15d0:	95 e0       	ldi	r25, 0x05	; 5
    15d2:	f9 16       	cp	r15, r25
    15d4:	19 f0       	breq	.+6      	; 0x15dc <main+0x424>
    15d6:	a8 e1       	ldi	r26, 0x18	; 24
    15d8:	fa 12       	cpse	r15, r26
    15da:	cb ce       	rjmp	.-618    	; 0x1372 <main+0x1ba>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:218
            UPDI_CONTROL |= _BV(UPDI::UPDI_TERM_bp);
    15dc:	e6 9a       	sbi	0x1c, 6	; 28
    15de:	c9 ce       	rjmp	.-622    	; 0x1372 <main+0x1ba>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:197
bool JTAG2::set_parameter (void) {
  uint8_t param_val = packet.body[2];
  switch (packet.body[1]) {
    /* エミュレーションモード */
    case JTAG2::PARAM_EMU_MODE : {
      PARAM_EMU_MODE_VAL = param_val;
    15e0:	f0 92 4f 38 	sts	0x384F, r15	; 0x80384f <JTAG2::PARAM_EMU_MODE_VAL>
    15e4:	63 cf       	rjmp	.-314    	; 0x14ac <main+0x2f4>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:223
            UPDI_CONTROL |= _BV(UPDI::UPDI_TERM_bp);
          return false;
        }
      }
      /* 範囲違反は失敗応答 */
      JTAG2::set_response(JTAG2::RSP_ILLEGAL_VALUE);
    15e6:	86 ea       	ldi	r24, 0xA6	; 166
    15e8:	90 e0       	ldi	r25, 0x00	; 0
process_command():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:377
    case JTAG2::CMND_LEAVE_PROGMODE : {
      JTAG2::set_response(JTAG2::RSP_OK);
      break;
    }
    default : {
      JTAG2::set_response(JTAG2::RSP_FAILED);
    15ea:	0e 94 a7 01 	call	0x34e	; 0x34e <JTAG2::set_response(JTAG2::jtag_response_e)>
    15ee:	b9 cf       	rjmp	.-142    	; 0x1562 <main+0x3aa>
get_parameter():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:234
}

/* CMND_GET_PARAMETER */
void JTAG2::get_parameter (void) {
  volatile uint8_t &param_type = packet.body[1];
  switch (param_type) {
    15f0:	80 91 6c 38 	lds	r24, 0x386C	; 0x80386c <JTAG2::packet+0x9>
    15f4:	83 30       	cpi	r24, 0x03	; 3
    15f6:	09 f4       	brne	.+2      	; 0x15fa <main+0x442>
    15f8:	51 c0       	rjmp	.+162    	; 0x169c <main+0x4e4>
    15fa:	38 f4       	brcc	.+14     	; 0x160a <main+0x452>
    15fc:	81 30       	cpi	r24, 0x01	; 1
    15fe:	81 f1       	breq	.+96     	; 0x1660 <main+0x4a8>
    1600:	82 30       	cpi	r24, 0x02	; 2
    1602:	b9 f1       	breq	.+110    	; 0x1672 <main+0x4ba>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:265
      _CAPS16(packet.body[1])->word = SYS::get_vcc();
      packet.size_word[0] = 3;
      break;
    }
    default : {
      JTAG2::set_response(JTAG2::RSP_ILLEGAL_PARAMETER);
    1604:	81 ea       	ldi	r24, 0xA1	; 161
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	f0 cf       	rjmp	.-32     	; 0x15ea <main+0x432>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:234
}

/* CMND_GET_PARAMETER */
void JTAG2::get_parameter (void) {
  volatile uint8_t &param_type = packet.body[1];
  switch (param_type) {
    160a:	85 30       	cpi	r24, 0x05	; 5
    160c:	09 f4       	brne	.+2      	; 0x1610 <main+0x458>
    160e:	4f c0       	rjmp	.+158    	; 0x16ae <main+0x4f6>
    1610:	86 30       	cpi	r24, 0x06	; 6
    1612:	c1 f7       	brne	.-16     	; 0x1604 <main+0x44c>
get_vcc():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/SYS.cpp:69
/*
 * 自己VCC測定
 */

uint16_t SYS::get_vcc (void) {
  ADC0_CTRLA = ADC_ENABLE_bm;
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <UPDI::nvmprog_key+0x7f6ce0>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/SYS.cpp:70
  ADC0_CTRLB = ADC_PRESC_DIV2_gc;
    161a:	10 92 01 06 	sts	0x0601, r1	; 0x800601 <UPDI::nvmprog_key+0x7f6ce1>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/SYS.cpp:71
  ADC0_CTRLC = ADC_REFSEL_1024MV_gc | ((F_CPU / 1000000UL) << ADC_TIMEBASE_gp);
    161e:	84 e5       	ldi	r24, 0x54	; 84
    1620:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <UPDI::nvmprog_key+0x7f6ce2>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/SYS.cpp:72
  ADC0_CTRLE = 17; /* (SAMPDUR + 0.5) * fCLK_ADC = 10.5 µs sample duration */
    1624:	81 e1       	ldi	r24, 0x11	; 17
    1626:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <UPDI::nvmprog_key+0x7f6ce8>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/SYS.cpp:73
  ADC0_MUXPOS = ADC_MUXPOS_VDDDIV10_gc; /* ADC channel VDD/10 */
    162a:	91 e3       	ldi	r25, 0x31	; 49
    162c:	90 93 0c 06 	sts	0x060C, r25	; 0x80060c <UPDI::nvmprog_key+0x7f6cec>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/SYS.cpp:74
  ADC0_COMMAND = ADC_MODE_SINGLE_12BIT_gc | ADC_START_IMMEDIATE_gc;
    1630:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <UPDI::nvmprog_key+0x7f6cea>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/SYS.cpp:75
  loop_until_bit_is_set(ADC0_INTFLAGS, ADC_SAMPRDY_bp);
    1634:	80 91 05 06 	lds	r24, 0x0605	; 0x800605 <UPDI::nvmprog_key+0x7f6ce5>
    1638:	81 ff       	sbrs	r24, 1
    163a:	fc cf       	rjmp	.-8      	; 0x1634 <main+0x47c>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/SYS.cpp:76
  uint16_t adc_reading = ADC0_SAMPLE;
    163c:	80 91 14 06 	lds	r24, 0x0614	; 0x800614 <UPDI::nvmprog_key+0x7f6cf4>
    1640:	90 91 15 06 	lds	r25, 0x0615	; 0x800615 <UPDI::nvmprog_key+0x7f6cf5>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/SYS.cpp:77
  adc_reading += adc_reading + (adc_reading >> 1);  /* x2.5 */
    1644:	9c 01       	movw	r18, r24
    1646:	36 95       	lsr	r19
    1648:	27 95       	ror	r18
    164a:	88 0f       	add	r24, r24
    164c:	99 1f       	adc	r25, r25
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/SYS.cpp:78
  ADC0_CTRLA = 0;
    164e:	10 92 00 06 	sts	0x0600, r1	; 0x800600 <UPDI::nvmprog_key+0x7f6ce0>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/SYS.cpp:77
  ADC0_CTRLE = 17; /* (SAMPDUR + 0.5) * fCLK_ADC = 10.5 µs sample duration */
  ADC0_MUXPOS = ADC_MUXPOS_VDDDIV10_gc; /* ADC channel VDD/10 */
  ADC0_COMMAND = ADC_MODE_SINGLE_12BIT_gc | ADC_START_IMMEDIATE_gc;
  loop_until_bit_is_set(ADC0_INTFLAGS, ADC_SAMPRDY_bp);
  uint16_t adc_reading = ADC0_SAMPLE;
  adc_reading += adc_reading + (adc_reading >> 1);  /* x2.5 */
    1652:	82 0f       	add	r24, r18
    1654:	93 1f       	adc	r25, r19
get_parameter():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:260
      packet.body[1] = PARAM_BAUD_RATE_VAL;
      packet.size_word[0] = 2;
      break;
    }
    case JTAG2::PARAM_VTARGET : {
      _CAPS16(packet.body[1])->word = SYS::get_vcc();
    1656:	80 93 6c 38 	sts	0x386C, r24	; 0x80386c <JTAG2::packet+0x9>
    165a:	90 93 6d 38 	sts	0x386D, r25	; 0x80386d <JTAG2::packet+0xa>
    165e:	04 c0       	rjmp	.+8      	; 0x1668 <main+0x4b0>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:236
/* CMND_GET_PARAMETER */
void JTAG2::get_parameter (void) {
  volatile uint8_t &param_type = packet.body[1];
  switch (param_type) {
    case JTAG2::PARAM_HW_VER : {
      packet.body[1] = sign_on_resp[5];
    1660:	80 93 6c 38 	sts	0x386C, r24	; 0x80386c <JTAG2::packet+0x9>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:237
      packet.body[2] = sign_on_resp[9];
    1664:	80 93 6d 38 	sts	0x386D, r24	; 0x80386d <JTAG2::packet+0xa>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:261
      packet.size_word[0] = 2;
      break;
    }
    case JTAG2::PARAM_VTARGET : {
      _CAPS16(packet.body[1])->word = SYS::get_vcc();
      packet.size_word[0] = 3;
    1668:	20 92 66 38 	sts	0x3866, r2	; 0x803866 <JTAG2::packet+0x3>
    166c:	30 92 67 38 	sts	0x3867, r3	; 0x803867 <JTAG2::packet+0x4>
    1670:	11 c0       	rjmp	.+34     	; 0x1694 <main+0x4dc>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:242
      packet.body[2] = sign_on_resp[9];
      packet.size_word[0] = 3;
      break;
    }
    case JTAG2::PARAM_FW_VER : {
      packet.body[1] = sign_on_resp[3];
    1672:	91 e0       	ldi	r25, 0x01	; 1
    1674:	90 93 6c 38 	sts	0x386C, r25	; 0x80386c <JTAG2::packet+0x9>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:243
      packet.body[2] = sign_on_resp[4];
    1678:	80 93 6d 38 	sts	0x386D, r24	; 0x80386d <JTAG2::packet+0xa>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:244
      packet.body[3] = sign_on_resp[7];
    167c:	85 e3       	ldi	r24, 0x35	; 53
    167e:	80 93 6e 38 	sts	0x386E, r24	; 0x80386e <JTAG2::packet+0xb>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:245
      packet.body[4] = sign_on_resp[8];
    1682:	87 e0       	ldi	r24, 0x07	; 7
    1684:	80 93 6f 38 	sts	0x386F, r24	; 0x80386f <JTAG2::packet+0xc>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:246
      packet.size_word[0] = 5;
    1688:	e5 e0       	ldi	r30, 0x05	; 5
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	e0 93 66 38 	sts	0x3866, r30	; 0x803866 <JTAG2::packet+0x3>
    1690:	f0 93 67 38 	sts	0x3867, r31	; 0x803867 <JTAG2::packet+0x4>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:269
    default : {
      JTAG2::set_response(JTAG2::RSP_ILLEGAL_PARAMETER);
      return;
    }
  }
  packet.body[0] = JTAG2::RSP_PARAMETER;
    1694:	81 e8       	ldi	r24, 0x81	; 129
    1696:	80 93 6b 38 	sts	0x386B, r24	; 0x80386b <JTAG2::packet+0x8>
    169a:	63 cf       	rjmp	.-314    	; 0x1562 <main+0x3aa>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:250
      packet.body[4] = sign_on_resp[8];
      packet.size_word[0] = 5;
      break;
    }
    case JTAG2::PARAM_EMU_MODE : {
      packet.body[1] = PARAM_EMU_MODE_VAL;
    169c:	80 91 4f 38 	lds	r24, 0x384F	; 0x80384f <JTAG2::PARAM_EMU_MODE_VAL>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:255
      packet.size_word[0] = 2;
      break;
    }
    case JTAG2::PARAM_BAUD_RATE : {
      packet.body[1] = PARAM_BAUD_RATE_VAL;
    16a0:	80 93 6c 38 	sts	0x386C, r24	; 0x80386c <JTAG2::packet+0x9>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:256
      packet.size_word[0] = 2;
    16a4:	c0 92 66 38 	sts	0x3866, r12	; 0x803866 <JTAG2::packet+0x3>
    16a8:	d0 92 67 38 	sts	0x3867, r13	; 0x803867 <JTAG2::packet+0x4>
    16ac:	f3 cf       	rjmp	.-26     	; 0x1694 <main+0x4dc>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:255
      packet.body[1] = PARAM_EMU_MODE_VAL;
      packet.size_word[0] = 2;
      break;
    }
    case JTAG2::PARAM_BAUD_RATE : {
      packet.body[1] = PARAM_BAUD_RATE_VAL;
    16ae:	80 91 36 38 	lds	r24, 0x3836	; 0x803836 <JTAG2::PARAM_BAUD_RATE_VAL>
    16b2:	f6 cf       	rjmp	.-20     	; 0x16a0 <main+0x4e8>
process_command():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:293
    case JTAG2::CMND_GET_PARAMETER : {
      JTAG2::get_parameter();
      break;
    }
    case JTAG2::CMND_ENTER_PROGMODE : {
      uint8_t c = UPDI_CONTROL;
    16b4:	cc b3       	in	r28, 0x1c	; 28
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:294
      UPDI::updi_activate();
    16b6:	0e 94 14 03 	call	0x628	; 0x628 <UPDI::updi_activate()>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:295
      JTAG2::set_response(JTAG2::RSP_OK);
    16ba:	80 e8       	ldi	r24, 0x80	; 128
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	0e 94 a7 01 	call	0x34e	; 0x34e <JTAG2::set_response(JTAG2::jtag_response_e)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:296
      if (!(c & _BV(UPDI::UPDI_INFO_bp)) && bit_is_set(UPDI_CONTROL, UPDI::UPDI_INFO_bp))
    16c2:	c0 fd       	sbrc	r28, 0
    16c4:	0e c0       	rjmp	.+28     	; 0x16e2 <main+0x52a>
    16c6:	e0 9b       	sbis	0x1c, 0	; 28
    16c8:	0c c0       	rjmp	.+24     	; 0x16e2 <main+0x52a>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:297
        packet.size = 20;
    16ca:	84 e1       	ldi	r24, 0x14	; 20
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	a0 e0       	ldi	r26, 0x00	; 0
    16d0:	b0 e0       	ldi	r27, 0x00	; 0
    16d2:	80 93 66 38 	sts	0x3866, r24	; 0x803866 <JTAG2::packet+0x3>
    16d6:	90 93 67 38 	sts	0x3867, r25	; 0x803867 <JTAG2::packet+0x4>
    16da:	a0 93 68 38 	sts	0x3868, r26	; 0x803868 <JTAG2::packet+0x5>
    16de:	b0 93 69 38 	sts	0x3869, r27	; 0x803869 <JTAG2::packet+0x6>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:298
      TIM::LED_Blink();
    16e2:	0e 94 49 01 	call	0x292	; 0x292 <TIM::LED_Blink()>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:300
      /* terminal mode 許可時は WDTを無効にする */
      if (bit_is_set(UPDI_CONTROL, UPDI::UPDI_TERM_bp)) SYS::WDT_OFF();
    16e6:	e6 9b       	sbis	0x1c, 6	; 28
    16e8:	3c cf       	rjmp	.-392    	; 0x1562 <main+0x3aa>
WDT_OFF():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/SYS.cpp:137
void SYS::WDT_SET (uint8_t _wdt_period) {
  loop_until_bit_is_clear(WDT_STATUS, WDT_SYNCBUSY_bp);
  _PROTECTED_WRITE(WDT_CTRLA, _wdt_period);
}

void SYS::WDT_OFF (void) { WDT_SET(WDT_PERIOD_OFF_gc); }
    16ea:	80 e0       	ldi	r24, 0x00	; 0
    16ec:	0e 94 83 01 	call	0x306	; 0x306 <SYS::WDT_SET(unsigned char)>
    16f0:	38 cf       	rjmp	.-400    	; 0x1562 <main+0x3aa>
main():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:246

bool UPDI::check_sig (void) {
  uint8_t mem_type  = JTAG2::packet.body[1];
  uint8_t s = _CAPS32(JTAG2::packet.body[2])->bytes[0];
  uint8_t a = _CAPS32(JTAG2::packet.body[6])->bytes[0]
    - (bit_is_set(UPDI_NVMCTRL, UPDI_BROW_bp) ? (uint8_t)NVM::EB_SIGROW
    16f2:	90 e8       	ldi	r25, 0x80	; 128
    16f4:	b0 ce       	rjmp	.-672    	; 0x1456 <main+0x29e>
check_sig():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:247
                                              : (uint8_t)NVM::BASE_SIGROW);
    16f6:	89 1b       	sub	r24, r25
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:252
  uint8_t c;
  if (bit_is_clear(UPDI_CONTROL, UPDI_PROG_bp) && mem_type == JTAG2::MTYPE_SIGN_JTAG && s == 1) {
    JTAG2::packet.body[0] = JTAG2::RSP_MEMORY;
    if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) c = UPDI_LASTH ? 0x00 : 0xFF;
    else if (a == 0) c = 0x1E;
    16f8:	81 f0       	breq	.+32     	; 0x171a <main+0x562>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:253
    else if (a == 1) c = bit_is_set(UPDI_NVMCTRL, UPDI_GEN2_bp) ? 'A'
    16fa:	81 30       	cpi	r24, 0x01	; 1
    16fc:	31 f4       	brne	.+12     	; 0x170a <main+0x552>
    16fe:	ee 99       	sbic	0x1d, 6	; 29
    1700:	0e c0       	rjmp	.+28     	; 0x171e <main+0x566>
    1702:	ed 99       	sbic	0x1d, 5	; 29
    1704:	0e c0       	rjmp	.+28     	; 0x1722 <main+0x56a>
main():
    1706:	84 e7       	ldi	r24, 0x74	; 116
    1708:	bc ce       	rjmp	.-648    	; 0x1482 <main+0x2ca>
check_sig():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:255
                       : bit_is_set(UPDI_NVMCTRL, UPDI_LOWF_bp) ? 'm' : 't';
    else if (a == 2) c = bit_is_set(UPDI_NVMCTRL, UPDI_GEN3_bp) ? '3'
    170a:	82 30       	cpi	r24, 0x02	; 2
    170c:	81 f4       	brne	.+32     	; 0x172e <main+0x576>
    170e:	ef 99       	sbic	0x1d, 7	; 29
    1710:	0a c0       	rjmp	.+20     	; 0x1726 <main+0x56e>
    1712:	ee 99       	sbic	0x1d, 6	; 29
    1714:	0a c0       	rjmp	.+20     	; 0x172a <main+0x572>
main():
    1716:	80 e3       	ldi	r24, 0x30	; 48
    1718:	b4 ce       	rjmp	.-664    	; 0x1482 <main+0x2ca>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:252
                                              : (uint8_t)NVM::BASE_SIGROW);
  uint8_t c;
  if (bit_is_clear(UPDI_CONTROL, UPDI_PROG_bp) && mem_type == JTAG2::MTYPE_SIGN_JTAG && s == 1) {
    JTAG2::packet.body[0] = JTAG2::RSP_MEMORY;
    if (bit_is_clear(UPDI_CONTROL, UPDI_INFO_bp)) c = UPDI_LASTH ? 0x00 : 0xFF;
    else if (a == 0) c = 0x1E;
    171a:	8e e1       	ldi	r24, 0x1E	; 30
    171c:	b2 ce       	rjmp	.-668    	; 0x1482 <main+0x2ca>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:253
    else if (a == 1) c = bit_is_set(UPDI_NVMCTRL, UPDI_GEN2_bp) ? 'A'
    171e:	81 e4       	ldi	r24, 0x41	; 65
    1720:	b0 ce       	rjmp	.-672    	; 0x1482 <main+0x2ca>
    1722:	8d e6       	ldi	r24, 0x6D	; 109
    1724:	ae ce       	rjmp	.-676    	; 0x1482 <main+0x2ca>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/UPDI.cpp:255
                       : bit_is_set(UPDI_NVMCTRL, UPDI_LOWF_bp) ? 'm' : 't';
    else if (a == 2) c = bit_is_set(UPDI_NVMCTRL, UPDI_GEN3_bp) ? '3'
    1726:	83 e3       	ldi	r24, 0x33	; 51
    1728:	ac ce       	rjmp	.-680    	; 0x1482 <main+0x2ca>
    172a:	82 e3       	ldi	r24, 0x32	; 50
    172c:	aa ce       	rjmp	.-684    	; 0x1482 <main+0x2ca>
process_command():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:307
    }
    case JTAG2::CMND_READ_MEMORY : {
      /* 非PROG でも SIG要求にはダミー応答する */
      if (UPDI::check_sig()) break;
      /* terminal mode でなければLED高速点滅 */
      if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_TERM_bp)) TIM::LED_Fast();
    172e:	e6 99       	sbic	0x1c, 6	; 28
    1730:	17 c0       	rjmp	.+46     	; 0x1760 <main+0x5a8>
LED_TCB1():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:160
    LEDG_EVOUT = EVSYS_USER_CHANNEL2_gc;
  }
}

void LED_TCB1 (uint8_t mode, uint16_t ccmp) {
  if (TIM::mode != mode) {
    1732:	80 91 50 38 	lds	r24, 0x3850	; 0x803850 <TIM::mode>
    1736:	84 30       	cpi	r24, 0x04	; 4
    1738:	99 f0       	breq	.+38     	; 0x1760 <main+0x5a8>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:161
    TIM::mode = mode;
    173a:	84 e0       	ldi	r24, 0x04	; 4
    173c:	80 93 50 38 	sts	0x3850, r24	; 0x803850 <TIM::mode>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:162
    TCB1_CCMP = ccmp;
    1740:	a5 e1       	ldi	r26, 0x15	; 21
    1742:	b1 e0       	ldi	r27, 0x01	; 1
    1744:	a0 93 9c 0a 	sts	0x0A9C, r26	; 0x800a9c <UPDI::nvmprog_key+0x7f717c>
    1748:	b0 93 9d 0a 	sts	0x0A9D, r27	; 0x800a9d <UPDI::nvmprog_key+0x7f717d>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:163
    TCB1_CNT = 0;
    174c:	10 92 9a 0a 	sts	0x0A9A, r1	; 0x800a9a <UPDI::nvmprog_key+0x7f717a>
    1750:	10 92 9b 0a 	sts	0x0A9B, r1	; 0x800a9b <UPDI::nvmprog_key+0x7f717b>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:164
    TCB1_CTRLA = TCB_RUNSTDBY_bm | TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
    1754:	8f e4       	ldi	r24, 0x4F	; 79
    1756:	80 93 90 0a 	sts	0x0A90, r24	; 0x800a90 <UPDI::nvmprog_key+0x7f7170>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/TIM.cpp:165
    LEDG_EVOUT = EVSYS_USER_CHANNEL0_gc;
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <UPDI::nvmprog_key+0x7f6889>
process_command():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:312

      /* PROG状態かUSERROW応答可能な場合はメモリ読出処理へ */
      if ((bit_is_clear(UPDI_CONTROL, UPDI::UPDI_PROG_bp)
        && bit_is_clear(UPDI_CONTROL, UPDI::UPDI_URWR_bp))
      || !UPDI::runtime(UPDI::UPDI_CMD_READ_MEMORY)) {
    1760:	e1 99       	sbic	0x1c, 1	; 28
    1762:	05 c0       	rjmp	.+10     	; 0x176e <main+0x5b6>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:311
      /* terminal mode でなければLED高速点滅 */
      if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_TERM_bp)) TIM::LED_Fast();

      /* PROG状態かUSERROW応答可能な場合はメモリ読出処理へ */
      if ((bit_is_clear(UPDI_CONTROL, UPDI::UPDI_PROG_bp)
        && bit_is_clear(UPDI_CONTROL, UPDI::UPDI_URWR_bp))
    1764:	e5 99       	sbic	0x1c, 5	; 28
    1766:	03 c0       	rjmp	.+6      	; 0x176e <main+0x5b6>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:313
      || !UPDI::runtime(UPDI::UPDI_CMD_READ_MEMORY)) {
        JTAG2::set_response(JTAG2::RSP_ILLEGAL_MCU_STATE);
    1768:	85 ea       	ldi	r24, 0xA5	; 165
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	3e cf       	rjmp	.-388    	; 0x15ea <main+0x432>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:312
      if (bit_is_clear(UPDI_CONTROL, UPDI::UPDI_TERM_bp)) TIM::LED_Fast();

      /* PROG状態かUSERROW応答可能な場合はメモリ読出処理へ */
      if ((bit_is_clear(UPDI_CONTROL, UPDI::UPDI_PROG_bp)
        && bit_is_clear(UPDI_CONTROL, UPDI::UPDI_URWR_bp))
      || !UPDI::runtime(UPDI::UPDI_CMD_READ_MEMORY)) {
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	b3 d8       	rcall	.-3738   	; 0x8d8 <UPDI::runtime(unsigned char)>
    1772:	81 11       	cpse	r24, r1
    1774:	f6 ce       	rjmp	.-532    	; 0x1562 <main+0x3aa>
    1776:	f8 cf       	rjmp	.-16     	; 0x1768 <main+0x5b0>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:319
      }
      break;
    }
    case JTAG2::CMND_WRITE_MEMORY : {
      JTAG2::set_response(
        UPDI::runtime(UPDI::UPDI_CMD_WRITE_MEMORY)
    1778:	82 e0       	ldi	r24, 0x02	; 2
    177a:	ae d8       	rcall	.-3748   	; 0x8d8 <UPDI::runtime(unsigned char)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:318
        JTAG2::set_response(JTAG2::RSP_ILLEGAL_MCU_STATE);
      }
      break;
    }
    case JTAG2::CMND_WRITE_MEMORY : {
      JTAG2::set_response(
    177c:	81 11       	cpse	r24, r1
    177e:	96 ce       	rjmp	.-724    	; 0x14ac <main+0x2f4>
main():
    1780:	82 ea       	ldi	r24, 0xA2	; 162
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	32 cf       	rjmp	.-412    	; 0x15ea <main+0x432>
process_command():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:328
      break;
    }
    case JTAG2::CMND_XMEGA_ERASE : {
      uint8_t c = UPDI_CONTROL;
      JTAG2::set_response(
        UPDI::runtime(UPDI::UPDI_CMD_ERASE)
    1786:	cc b3       	in	r28, 0x1c	; 28
    1788:	83 e0       	ldi	r24, 0x03	; 3
    178a:	a6 d8       	rcall	.-3764   	; 0x8d8 <UPDI::runtime(unsigned char)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:327
      );
      break;
    }
    case JTAG2::CMND_XMEGA_ERASE : {
      uint8_t c = UPDI_CONTROL;
      JTAG2::set_response(
    178c:	81 11       	cpse	r24, r1
    178e:	15 c0       	rjmp	.+42     	; 0x17ba <main+0x602>
main():
    1790:	85 ea       	ldi	r24, 0xA5	; 165
    1792:	90 e0       	ldi	r25, 0x00	; 0
process_command():
    1794:	0e 94 a7 01 	call	0x34e	; 0x34e <JTAG2::set_response(JTAG2::jtag_response_e)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:332
        UPDI::runtime(UPDI::UPDI_CMD_ERASE)
        ? JTAG2::RSP_OK
        : JTAG2::RSP_ILLEGAL_MCU_STATE
      );
      if (!(c & _BV(UPDI::UPDI_INFO_bp)) && bit_is_set(UPDI_CONTROL, UPDI::UPDI_INFO_bp))
    1798:	c0 fd       	sbrc	r28, 0
    179a:	e3 ce       	rjmp	.-570    	; 0x1562 <main+0x3aa>
    179c:	e0 9b       	sbis	0x1c, 0	; 28
    179e:	e1 ce       	rjmp	.-574    	; 0x1562 <main+0x3aa>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:333
        packet.size = 19;
    17a0:	83 e1       	ldi	r24, 0x13	; 19
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	a0 e0       	ldi	r26, 0x00	; 0
    17a6:	b0 e0       	ldi	r27, 0x00	; 0
    17a8:	80 93 66 38 	sts	0x3866, r24	; 0x803866 <JTAG2::packet+0x3>
    17ac:	90 93 67 38 	sts	0x3867, r25	; 0x803867 <JTAG2::packet+0x4>
    17b0:	a0 93 68 38 	sts	0x3868, r26	; 0x803868 <JTAG2::packet+0x5>
    17b4:	b0 93 69 38 	sts	0x3869, r27	; 0x803869 <JTAG2::packet+0x6>
    17b8:	d4 ce       	rjmp	.-600    	; 0x1562 <main+0x3aa>
main():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:327
      );
      break;
    }
    case JTAG2::CMND_XMEGA_ERASE : {
      uint8_t c = UPDI_CONTROL;
      JTAG2::set_response(
    17ba:	80 e8       	ldi	r24, 0x80	; 128
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	ea cf       	rjmp	.-44     	; 0x1794 <main+0x5dc>
process_command():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:337
      if (!(c & _BV(UPDI::UPDI_INFO_bp)) && bit_is_set(UPDI_CONTROL, UPDI::UPDI_INFO_bp))
        packet.size = 19;
      break;
    }
    case JTAG2::CMND_GO : {
      if (bit_is_set(UPDI_CONTROL, UPDI::UPDI_PROG_bp)) UPDI::runtime(UPDI::UPDI_CMD_GO);
    17c0:	e1 9b       	sbis	0x1c, 1	; 28
    17c2:	74 ce       	rjmp	.-792    	; 0x14ac <main+0x2f4>
    17c4:	84 e0       	ldi	r24, 0x04	; 4
    17c6:	88 d8       	rcall	.-3824   	; 0x8d8 <UPDI::runtime(unsigned char)>
    17c8:	71 ce       	rjmp	.-798    	; 0x14ac <main+0x2f4>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:342
      JTAG2::set_response(JTAG2::RSP_OK);
      break;
    }
    case JTAG2::CMND_SIGN_OFF : {
      JTAG2::set_response(JTAG2::RSP_OK);
    17ca:	80 e8       	ldi	r24, 0x80	; 128
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	0e 94 a7 01 	call	0x34e	; 0x34e <JTAG2::set_response(JTAG2::jtag_response_e)>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:343
      JTAG2::answer_transfer();
    17d2:	0e 94 d6 01 	call	0x3ac	; 0x3ac <JTAG2::answer_transfer()>
flush():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:112
  JTAG_USART.STATUS = USART_TXCIF_bm;
  return JTAG_USART.TXDATAL = _data;
}

void JTAG2::flush (void) {
  loop_until_bit_is_set(JTAG_USART.STATUS, USART_TXCIF_bp);
    17d6:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <UPDI::nvmprog_key+0x7f6f04>
    17da:	86 ff       	sbrs	r24, 6
    17dc:	fc cf       	rjmp	.-8      	; 0x17d6 <main+0x61e>
WDT_REBOOT():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/SYS.cpp:142

void SYS::WDT_ON (void) { WDT_SET(WDT_PERIOD_8KCLK_gc); }

void SYS::WDT_REBOOT (void) {
  WDT_SET(WDT_PERIOD_8CLK_gc);
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	0e 94 83 01 	call	0x306	; 0x306 <SYS::WDT_SET(unsigned char)>
    17e4:	ff cf       	rjmp	.-2      	; 0x17e4 <main+0x62c>
process_command():
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:352
      SYS::WDT_REBOOT();
      /* Session Complete */
    }
    // Ex) struct xmega_device_desc
    case JTAG2::CMND_SET_XMEGA_PARAMS : {
      NVM::nvm_eeprom_offset   = _CAPS32(packet.body[12])->dword;
    17e6:	80 91 77 38 	lds	r24, 0x3877	; 0x803877 <JTAG2::packet+0x14>
    17ea:	90 91 78 38 	lds	r25, 0x3878	; 0x803878 <JTAG2::packet+0x15>
    17ee:	a0 91 79 38 	lds	r26, 0x3879	; 0x803879 <JTAG2::packet+0x16>
    17f2:	b0 91 7a 38 	lds	r27, 0x387A	; 0x80387a <JTAG2::packet+0x17>
    17f6:	80 93 5f 38 	sts	0x385F, r24	; 0x80385f <NVM::nvm_eeprom_offset>
    17fa:	90 93 60 38 	sts	0x3860, r25	; 0x803860 <NVM::nvm_eeprom_offset+0x1>
    17fe:	a0 93 61 38 	sts	0x3861, r26	; 0x803861 <NVM::nvm_eeprom_offset+0x2>
    1802:	b0 93 62 38 	sts	0x3862, r27	; 0x803862 <NVM::nvm_eeprom_offset+0x3>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:354
    //NVM::nvm_fuse_offset     = _CAPS32(packet.body[16])->dword;
      NVM::nvm_user_sig_offset = _CAPS32(packet.body[24])->dword;
    1806:	80 91 83 38 	lds	r24, 0x3883	; 0x803883 <JTAG2::packet+0x20>
    180a:	90 91 84 38 	lds	r25, 0x3884	; 0x803884 <JTAG2::packet+0x21>
    180e:	a0 91 85 38 	lds	r26, 0x3885	; 0x803885 <JTAG2::packet+0x22>
    1812:	b0 91 86 38 	lds	r27, 0x3886	; 0x803886 <JTAG2::packet+0x23>
    1816:	80 93 5b 38 	sts	0x385B, r24	; 0x80385b <NVM::nvm_user_sig_offset>
    181a:	90 93 5c 38 	sts	0x385C, r25	; 0x80385c <NVM::nvm_user_sig_offset+0x1>
    181e:	a0 93 5d 38 	sts	0x385D, r26	; 0x80385d <NVM::nvm_user_sig_offset+0x2>
    1822:	b0 93 5e 38 	sts	0x385E, r27	; 0x80385e <NVM::nvm_user_sig_offset+0x3>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:355
      NVM::nvm_data_offset     = _CAPS32(packet.body[32])->dword;
    1826:	80 91 8b 38 	lds	r24, 0x388B	; 0x80388b <JTAG2::packet+0x28>
    182a:	90 91 8c 38 	lds	r25, 0x388C	; 0x80388c <JTAG2::packet+0x29>
    182e:	a0 91 8d 38 	lds	r26, 0x388D	; 0x80388d <JTAG2::packet+0x2a>
    1832:	b0 91 8e 38 	lds	r27, 0x388E	; 0x80388e <JTAG2::packet+0x2b>
    1836:	80 93 57 38 	sts	0x3857, r24	; 0x803857 <NVM::nvm_data_offset>
    183a:	90 93 58 38 	sts	0x3858, r25	; 0x803858 <NVM::nvm_data_offset+0x1>
    183e:	a0 93 59 38 	sts	0x3859, r26	; 0x803859 <NVM::nvm_data_offset+0x2>
    1842:	b0 93 5a 38 	sts	0x385A, r27	; 0x80385a <NVM::nvm_data_offset+0x3>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:356
      NVM::flash_page_size     = _CAPS16(packet.body[42])->word;
    1846:	80 91 95 38 	lds	r24, 0x3895	; 0x803895 <JTAG2::packet+0x32>
    184a:	90 91 96 38 	lds	r25, 0x3896	; 0x803896 <JTAG2::packet+0x33>
    184e:	80 93 55 38 	sts	0x3855, r24	; 0x803855 <NVM::flash_page_size>
    1852:	90 93 56 38 	sts	0x3856, r25	; 0x803856 <NVM::flash_page_size+0x1>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:359
    //NVM::eeprom_page_size    = packet.body[46];
      // AVR_DA/DB/DD/EA/EB
      if (_CAPS32(NVM::nvm_user_sig_offset)->bytes[1] != 0x13) {
    1856:	80 91 5c 38 	lds	r24, 0x385C	; 0x80385c <NVM::nvm_user_sig_offset+0x1>
    185a:	83 31       	cpi	r24, 0x13	; 19
    185c:	09 f4       	brne	.+2      	; 0x1860 <main+0x6a8>
    185e:	26 ce       	rjmp	.-948    	; 0x14ac <main+0x2f4>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:360
        NVM::nvm_flash_offset  = 0x800000;
    1860:	80 e0       	ldi	r24, 0x00	; 0
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	a0 e8       	ldi	r26, 0x80	; 128
    1866:	b0 e0       	ldi	r27, 0x00	; 0
    1868:	80 93 51 38 	sts	0x3851, r24	; 0x803851 <NVM::nvm_flash_offset>
    186c:	90 93 52 38 	sts	0x3852, r25	; 0x803852 <NVM::nvm_flash_offset+0x1>
    1870:	a0 93 53 38 	sts	0x3853, r26	; 0x803853 <NVM::nvm_flash_offset+0x2>
    1874:	b0 93 54 38 	sts	0x3854, r27	; 0x803854 <NVM::nvm_flash_offset+0x3>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:361
        UPDI_NVMCTRL |= _BV(UPDI::UPDI_GEN2_bp);
    1878:	ee 9a       	sbi	0x1d, 6	; 29
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:363
        // EB
        if (_CAPS32(NVM::nvm_user_sig_offset)->bytes[1] == 0x12) {
    187a:	80 91 5c 38 	lds	r24, 0x385C	; 0x80385c <NVM::nvm_user_sig_offset+0x1>
    187e:	82 31       	cpi	r24, 0x12	; 18
    1880:	09 f0       	breq	.+2      	; 0x1884 <main+0x6cc>
    1882:	14 ce       	rjmp	.-984    	; 0x14ac <main+0x2f4>
/Users/askn/Arduino/AVR/UPDI4AVR_FW753B/src/JTAG2.cpp:364
          UPDI_NVMCTRL |= _BV(UPDI::UPDI_BROW_bp);
    1884:	ec 9a       	sbi	0x1d, 4	; 29
    1886:	12 ce       	rjmp	.-988    	; 0x14ac <main+0x2f4>

00001888 <setjmp>:
setjmp():
    1888:	dc 01       	movw	r26, r24
    188a:	2d 92       	st	X+, r2
    188c:	3d 92       	st	X+, r3
    188e:	4d 92       	st	X+, r4
    1890:	5d 92       	st	X+, r5
    1892:	6d 92       	st	X+, r6
    1894:	7d 92       	st	X+, r7
    1896:	8d 92       	st	X+, r8
    1898:	9d 92       	st	X+, r9
    189a:	ad 92       	st	X+, r10
    189c:	bd 92       	st	X+, r11
    189e:	cd 92       	st	X+, r12
    18a0:	dd 92       	st	X+, r13
    18a2:	ed 92       	st	X+, r14
    18a4:	fd 92       	st	X+, r15
    18a6:	0d 93       	st	X+, r16
    18a8:	1d 93       	st	X+, r17
    18aa:	cd 93       	st	X+, r28
    18ac:	dd 93       	st	X+, r29
    18ae:	ff 91       	pop	r31
    18b0:	ef 91       	pop	r30
    18b2:	8d b7       	in	r24, 0x3d	; 61
    18b4:	8d 93       	st	X+, r24
    18b6:	8e b7       	in	r24, 0x3e	; 62
    18b8:	8d 93       	st	X+, r24
    18ba:	8f b7       	in	r24, 0x3f	; 63
    18bc:	8d 93       	st	X+, r24
    18be:	ed 93       	st	X+, r30
    18c0:	fd 93       	st	X+, r31
    18c2:	88 27       	eor	r24, r24
    18c4:	99 27       	eor	r25, r25
    18c6:	09 94       	ijmp

000018c8 <longjmp>:
longjmp():
    18c8:	dc 01       	movw	r26, r24
    18ca:	cb 01       	movw	r24, r22
    18cc:	81 30       	cpi	r24, 0x01	; 1
    18ce:	91 05       	cpc	r25, r1
    18d0:	81 1d       	adc	r24, r1
    18d2:	2d 90       	ld	r2, X+
    18d4:	3d 90       	ld	r3, X+
    18d6:	4d 90       	ld	r4, X+
    18d8:	5d 90       	ld	r5, X+
    18da:	6d 90       	ld	r6, X+
    18dc:	7d 90       	ld	r7, X+
    18de:	8d 90       	ld	r8, X+
    18e0:	9d 90       	ld	r9, X+
    18e2:	ad 90       	ld	r10, X+
    18e4:	bd 90       	ld	r11, X+
    18e6:	cd 90       	ld	r12, X+
    18e8:	dd 90       	ld	r13, X+
    18ea:	ed 90       	ld	r14, X+
    18ec:	fd 90       	ld	r15, X+
    18ee:	0d 91       	ld	r16, X+
    18f0:	1d 91       	ld	r17, X+
    18f2:	cd 91       	ld	r28, X+
    18f4:	dd 91       	ld	r29, X+
    18f6:	ed 91       	ld	r30, X+
    18f8:	fd 91       	ld	r31, X+
    18fa:	0d 90       	ld	r0, X+
    18fc:	0f be       	out	0x3f, r0	; 63
    18fe:	ed bf       	out	0x3d, r30	; 61
    1900:	fe bf       	out	0x3e, r31	; 62
    1902:	ed 91       	ld	r30, X+
    1904:	fd 91       	ld	r31, X+
    1906:	09 94       	ijmp

00001908 <_exit>:
exit():
    1908:	f8 94       	cli

0000190a <__stop_program>:
__stop_program():
    190a:	ff cf       	rjmp	.-2      	; 0x190a <__stop_program>

Disassembly of section .nvmem:

00001962 <.nvmem>:
	...
